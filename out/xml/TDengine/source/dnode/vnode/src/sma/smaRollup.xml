<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/sma/smaRollup.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sma.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSMA_QTASKEXEC_SMOOTH_SIZE</name></cpp:macro> <cpp:value>(100)</cpp:value></cpp:define>     <comment type="line">// cnt</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSMA_SUBMIT_BATCH_SIZE</name></cpp:macro>     <cpp:value>(1024)</cpp:value></cpp:define>    <comment type="line">// cnt</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSMA_FETCH_DELAY_MAX</name></cpp:macro>       <cpp:value>(120000)</cpp:value></cpp:define>  <comment type="line">// ms</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSMA_FETCH_ACTIVE_MAX</name></cpp:macro>      <cpp:value>(1000)</cpp:value></cpp:define>    <comment type="line">// ms</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RSMA_FETCH_INTERVAL</name></cpp:macro>        <cpp:value>(5000)</cpp:value></cpp:define>    <comment type="line">// ms</comment>

<decl_stmt><decl><type><name>SSmaMgmt</name></type> <name>smaMgmt</name> <init>= <expr><block>{
    <expr><operator>.</operator><name>inited</name> <operator>=</operator> <literal type="number">0</literal></expr>,
    <expr><operator>.</operator><name>rsetId</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TD_QTASKINFO_FNAME_PREFIX</name></cpp:macro> <cpp:value>"qinf.v"</cpp:value></cpp:define>

<typedef>typedef <type><name><name>struct</name> <name>SRSmaQTaskInfoItem</name></name></type> <name>SRSmaQTaskInfoItem</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>SRSmaQTaskInfoIter</name></name></type> <name>SRSmaQTaskInfoIter</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>    <name>tdUidStorePut</name><parameter_list>(<parameter><decl><type><name>STbUidStore</name> <modifier>*</modifier></type><name>pStore</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>    <name>tdUpdateTbUidListImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name> <modifier>*</modifier></type><name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>tbUids</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isAdd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>    <name>tdSetRSmaInfoItemParams</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pRSmaInfo</name></decl></parameter>,
                                          <parameter><decl><type><name>int8_t</name></type> <name>idx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>    <name>tdExecuteRSmaImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>inputType</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>,
                                    <parameter><decl><type><name>ERsmaExecType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SRSmaInfo</name> <modifier>*</modifier></type><name>tdAcquireRSmaInfoBySuid</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>       <name>tdReleaseRSmaInfo</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>       <name>tdFreeRSmaSubmitItems</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pItems</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>    <name>tdRSmaFetchAllResult</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>    <name>tdRSmaExecAndSubmitResult</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>qTaskInfo_t</name></type> <name>taskInfo</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfoItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>,
                                            <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>       <name>tdRSmaFetchTrigger</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>    <name>tdRSmaInfoClone</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>       <name>tdRSmaQTaskInfoFree</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name> <modifier>*</modifier></type><name>taskHandle</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>    <name>tdRSmaRestoreQTaskInfoInit</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>nTables</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>    <name>tdRSmaRestoreQTaskInfoReload</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>qTaskFileVer</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>    <name>tdRSmaRestoreTSDataReload</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>SRSmaQTaskInfoItem</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>suid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>qTaskInfo</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>SRSmaQTaskInfoIter</name> <block>{
  <decl_stmt><decl><type><name>STFile</name> <modifier>*</modifier></type><name>pTFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>fsize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nAlloc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>pBuf</name></decl>;</decl_stmt>
  <comment type="line">// ------------</comment>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>qBuf</name></decl>;</decl_stmt>  <comment type="line">// for iterator</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBufPos</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>void</name></type> <name>tdRSmaQTaskInfoGetFileName</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outputName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdGetVndFileName</name><argument_list>(<argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>VNODE_RSMA_DIR</name></expr></argument>, <argument><expr><name>TD_QTASKINFO_FNAME_PREFIX</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>outputName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdRSmaQTaskInfoGetFullName</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outputName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdGetVndFileName</name><argument_list>(<argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>VNODE_RSMA_DIR</name></expr></argument>, <argument><expr><name>TD_QTASKINFO_FNAME_PREFIX</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>outputName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdRSmaQTaskInfoGetFullPath</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outputName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdGetVndDirName</name><argument_list>(<argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>VNODE_RSMA_DIR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>outputName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rsmaLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>outputName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>outputName</name> <operator>+</operator> <name>rsmaLen</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name> <operator>-</operator> <name>rsmaLen</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIi8</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdRSmaQTaskInfoGetFullPathEx</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outputName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdGetVndDirName</name><argument_list>(<argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>VNODE_RSMA_DIR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>outputName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rsmaLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>outputName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>outputName</name> <operator>+</operator> <name>rsmaLen</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name> <operator>-</operator> <name>rsmaLen</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIi64</name> <literal type="string">"%s%"</literal> <name>PRIi8</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdRSmaQTaskInfoFree</name><parameter_list>(<parameter><decl><type><name>qTaskInfo_t</name> <modifier>*</modifier></type><name>taskHandle</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// Note: free/kill may in RC</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>taskHandle</name> <operator>||</operator> <operator>!</operator><operator>(</operator><operator>*</operator><name>taskHandle</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>qTaskInfo_t</name></type> <name>otaskHandle</name> <init>= <expr><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><name>taskHandle</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>otaskHandle</name> <operator>&amp;&amp;</operator> <call><name>atomic_val_compare_exchange_ptr</name><argument_list>(<argument><expr><name>taskHandle</name></expr></argument>, <argument><expr><name>otaskHandle</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, free qTaskInfo_t %p of level %d"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>otaskHandle</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qDestroyTask</name><argument_list>(<argument><expr><name>otaskHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, not free qTaskInfo_t %p of level %d"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>otaskHandle</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <comment type="line">// TODO: clear files related to qTaskInfo?</comment>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief general function to free rsmaInfo
 *
 * @param pSma
 * @param pInfo
 * @param isDeepFree Only stop tmrId and free pTSchema for deep free
 * @return void*
 */</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>tdFreeRSmaInfo</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isDeepFree</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SRSmaInfoItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>isDeepFree</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>tmrId</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, stop fetch timer %p for table %"</literal> <name>PRIi64</name> <literal type="string">" level %d"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>tmrId</name></name></expr></argument>,
                 <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosTmrStopA</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>tmrId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>isDeepFree</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>pStreamState</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>streamStateClose</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>pStreamState</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>isDeepFree</name> <operator>&amp;&amp;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>taskInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdRSmaQTaskInfoFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>taskInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, table %"</literal> <name>PRIi64</name> <literal type="string">" no need to destroy rsma info level %d since empty taskInfo"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>iTaskInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdRSmaQTaskInfoFree</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>iTaskInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, table %"</literal> <name>PRIi64</name> <literal type="string">" no need to destroy rsma info level %d since empty iTaskInfo"</literal></expr></argument>,
                 <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>isDeepFree</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>isDeepFree</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>queue</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>qall</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosFreeQall</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>iQueue</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosCloseQueue</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iQueue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>iQall</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosFreeQall</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iQall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>qall</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iQueue</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iQall</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tdUidStoreInit</name><parameter_list>(<parameter><decl><type><name>STbUidStore</name> <modifier>*</modifier><modifier>*</modifier></type><name>pStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>*</operator><name>pStore</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pStore</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STbUidStore</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pStore</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdUpdateTbUidListImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name> <modifier>*</modifier></type><name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>tbUids</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isAdd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pRSmaInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>suid</name> <operator>||</operator> <operator>!</operator><name>tbUids</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PTR</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get rsma info for uid:%"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>suid</name></expr> ?</condition><then> <expr><operator>*</operator><name>suid</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></argument>,
             <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, no need to update tbUidList for suid:%"</literal> <name>PRIi64</name> <literal type="string">" since Empty tbUids"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRSmaInfo</name> <operator>=</operator> <call><name>tdAcquireRSmaInfoBySuid</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRSmaInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get rsma info for uid:%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_INVALID_STAT</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>taskInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>qUpdateQualifiedTableId</name><argument_list>(<argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>taskInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>tbUids</name></expr></argument>, <argument><expr><name>isAdd</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdReleaseRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, update tbUidList failed for uid:%"</literal> <name>PRIi64</name> <literal type="string">" level %d since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                 <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, update tbUidList succeed for qTaskInfo:%p with suid:%"</literal> <name>PRIi64</name> <literal type="string">" uid:%"</literal> <name>PRIi64</name> <literal type="string">" level %d"</literal></expr></argument>,
                 <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>taskInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tdReleaseRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdUpdateTbUidList</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>STbUidStore</name> <modifier>*</modifier></type><name>pStore</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isAdd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pStore</name> <operator>||</operator> <operator>(</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>tbUids</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdUpdateTbUidListImpl</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStore</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>tbUids</name></name></expr></argument>, <argument><expr><name>isAdd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name> <modifier>*</modifier></type><name>pTbSuid</name> <init>= <expr><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name>   <modifier>*</modifier></type><name>pTbUids</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tdUpdateTbUidListImpl</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pTbSuid</name></expr></argument>, <argument><expr><name>pTbUids</name></expr></argument>, <argument><expr><name>isAdd</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashCancelIterate</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief fetch suid/uids when create child tables of rollup SMA
 *
 * @param pTsdb
 * @param ppStore
 * @param suid
 * @param uid
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>tdFetchTbUidList</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>STbUidStore</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppStore</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmaEnv</name> <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// only applicable to rollup SMA ctables</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pEnv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pStat</name> <init>= <expr><operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name>  <modifier>*</modifier></type><name>infoHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pStat</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>infoHash</name> <operator>=</operator> <call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_INVALID_STAT</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// info cached when create rsma stable and return directly for non-rsma ctables</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name>infoHash</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ppStore</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ppStore</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tdUidStoreInit</name><argument_list>(<argument><expr><name>ppStore</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdUidStorePut</name><argument_list>(<argument><expr><operator>*</operator><name>ppStore</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppStore</name> <operator>=</operator> <call><name>tdUidStoreFree</name><argument_list>(<argument><expr><operator>*</operator><name>ppStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdSetRSmaInfoItemParams</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pRSmaInfo</name></decl></parameter>,
                                       <parameter><decl><type><name>int8_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>qmsgLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>param</name><operator>-&gt;</operator><name>qmsg</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRetention</name> <modifier>*</modifier></type><name>pRetention</name> <init>= <expr><call><name>SMA_RETENTION</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STsdbCfg</name>   <modifier>*</modifier></type><name>pTsdbCfg</name> <init>= <expr><call><name>SMA_TSDB_CFG</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVnode</name>     <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>        <name><name>taskInfDir</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name>       <modifier>*</modifier></type><name>pStreamState</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// set the backend of stream state</comment>
    <expr_stmt><expr><call><name>tdRSmaQTaskInfoGetFullPathEx</name><argument_list>(<argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>taskInfDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>taskInfDir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>s</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>taskInfDir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosMulMkDir</name><argument_list>(<argument><expr><call><name>taosDirName</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>pStreamState</name> <operator>=</operator> <call><name>streamStateOpen</name><argument_list>(<argument><expr><name>taskInfDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pStreamState</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_STREAM_STATE_OPEN</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SReadHandle</name></type> <name>handle</name> <init>= <expr><block>{
        <expr><operator>.</operator><name>meta</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr>,
        <expr><operator>.</operator><name>vnode</name> <operator>=</operator> <name>pVnode</name></expr>,
        <expr><operator>.</operator><name>initTqReader</name> <operator>=</operator> <literal type="number">1</literal></expr>,
        <expr><operator>.</operator><name>pStateBackend</name> <operator>=</operator> <name>pStreamState</name></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>taskInfo</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <call><name>qCreateStreamExecTaskInfo</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>qmsg</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>taskInfo</name><index>[<expr><name>idx</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_QTASKINFO_CREATE</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SRSmaInfoItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>items</name><index>[<expr><name>idx</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>triggerStat</name></name> <operator>=</operator> <name>TASK_TRIGGER_STAT_ACTIVE</name></expr>;</expr_stmt>  <comment type="line">// fetch the data when reboot</comment>
    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>pStreamState</name></name> <operator>=</operator> <name>pStreamState</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>&lt;</operator> <name>TSDB_MIN_ROLLUP_MAX_DELAY</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>msInterval</name> <init>=
          <expr><call><name>convertTimeFromPrecisionToUnit</name><argument_list>(<argument><expr><name><name>pRetention</name><index>[<expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq</name></expr></argument>, <argument><expr><name><name>pTsdbCfg</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><name>TIME_UNIT_MILLISECOND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>maxDelay</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>msInterval</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>maxDelay</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name><name>param</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>maxDelay</name></name> <operator>&gt;</operator> <name>TSDB_MAX_ROLLUP_MAX_DELAY</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>maxDelay</name></name> <operator>=</operator> <name>TSDB_MAX_ROLLUP_MAX_DELAY</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <ternary><condition><expr><name>idx</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name>TSDB_RETENTION_L1</name></expr> </then><else>: <expr><name>TSDB_RETENTION_L2</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SRSmaRef</name></type> <name>rsmaRef</name> <init>= <expr><block>{<expr><operator>.</operator><name>refId</name> <operator>=</operator> <name><name>pStat</name><operator>-&gt;</operator><name>refId</name></name></expr>, <expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pRSmaInfo</name><operator>-&gt;</operator><name>suid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pItem</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsmaRef</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>rsmaRef</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>fetchLevel</name></name> <operator>=</operator> <name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>tdRSmaFetchTrigger</name></expr></argument>, <argument><expr><name>RSMA_FETCH_INTERVAL</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>tmrHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>tmrId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, item:%p table:%"</literal> <name>PRIi64</name> <literal type="string">" level:%"</literal> <name>PRIi8</name> <literal type="string">" maxdelay:%"</literal> <name>PRIi64</name> <literal type="string">" watermark:%"</literal> <name>PRIi64</name>
            <literal type="string">", finally maxdelay:%"</literal> <name>PRIi32</name></expr></argument>,
            <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>idx</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>watermark</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>,
            <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>maxDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief for rsam create or restore
 *
 * @param pSma
 * @param param
 * @param suid
 * @param tbName
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>tdRSmaProcessCreateImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>qmsgLen</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>param</name><operator>-&gt;</operator><name>qmsgLen</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, no qmsg1/qmsg2 for rollup table %s %"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdCheckAndInitSmaEnv</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>TSDB_SMA_TYPE_ROLLUP</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_INIT_FAILED</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSmaEnv</name>   <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pStat</name> <init>= <expr><operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pRSmaInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pRSmaInfo</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRSmaInfo</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// TODO: free original pRSmaInfo if exists abnormally</comment>
    <expr_stmt><expr><call><name>tdFreeRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>SRSmaInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pRSmaInfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_REMOVE_EXISTS</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, remove the rsma info already exists for table %s, %"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tbName</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// from write queue: single thead</comment>
  <expr_stmt><expr><name>pRSmaInfo</name> <operator>=</operator> <operator>(</operator><name>SRSmaInfo</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRSmaInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRSmaInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name> <init>= <expr><call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><call><name>SMA_META</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTSchema</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_IVD_TB_SCHEMA_VERSION</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>pSma</name></name> <operator>=</operator> <name>pSma</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>pTSchema</name></name> <operator>=</operator> <name>pTSchema</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>T_REF_INIT_VAL</name><argument_list>(<argument><expr><name>pRSmaInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>queue</name></name> <operator>=</operator> <call><name>taosOpenQueue</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>qall</name></name> <operator>=</operator> <call><name>taosAllocateQall</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>iQueue</name></name> <operator>=</operator> <call><name>taosOpenQueue</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>iQall</name></name> <operator>=</operator> <call><name>taosAllocateQall</name><argument_list>()</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdSetRSmaInfoItemParams</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>pStat</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdSetRSmaInfoItemParams</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name>pStat</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRSmaInfo</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, register rsma info succeed for table %"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tdFreeRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Check and init qTaskInfo_t, only applicable to stable with SRSmaParam currently
 *
 * @param pSma
 * @param pReq
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>tdProcessRSmaCreate</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SVCreateStbReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReq</name><operator>-&gt;</operator><name>rollup</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, not create rsma for stable %s %"</literal> <name>PRIi64</name> <literal type="string">" since no rollup in req"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
             <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, not create rsma for stable %s %"</literal> <name>PRIi64</name> <literal type="string">" since vnd is not rsma"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
             <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>tdRSmaProcessCreateImpl</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReq</name><operator>-&gt;</operator><name>rsmaParam</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief drop cache for stb
 *
 * @param pSma
 * @param pReq
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>tdProcessRSmaDrop</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SVDropStbReq</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, not drop rsma for stable %s %"</literal> <name>PRIi64</name> <literal type="string">" since vnd is not rsma"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
             <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSmaEnv</name> <modifier>*</modifier></type><name>pSmaEnv</name> <init>= <expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pSmaEnv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pRSmaStat</name> <init>= <expr><operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pSmaEnv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pRSmaInfo</name> <init>= <expr><call><name>tdAcquireRSmaInfoBySuid</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRSmaInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, drop rsma for stable %s %"</literal> <name>PRIi64</name> <literal type="string">" failed no rsma in hash"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>,
            <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set del flag for data in mem</comment>
  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>delFlag</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>RSMA_INFO_SET_DEL</name><argument_list>(<argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdUnRefRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdReleaseRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// save to file</comment>
  <comment type="line">// TODO</comment>
  <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, drop rsma for table %"</literal> <name>PRIi64</name> <literal type="string">" succeed"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief store suid/[uids], prefer to use array and then hash
 *
 * @param pStore
 * @param suid
 * @param uid
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdUidStorePut</name><parameter_list>(<parameter><decl><type><name>STbUidStore</name> <modifier>*</modifier></type><name>pStore</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name> <modifier>*</modifier></type><name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// prefer to store suid/uids in array</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>suid</name> <operator>==</operator> <name><name>pStore</name><operator>-&gt;</operator><name>suid</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pStore</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pStore</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStore</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>uid</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pStore</name><operator>-&gt;</operator><name>tbUids</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pStore</name><operator>-&gt;</operator><name>tbUids</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>tbUids</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// store other suid/uids in hash when multiple stable/table included in 1 batch of request</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>uid</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>uidArray</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>uidArray</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>(</operator><name>uidArray</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SArray</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>uidArray</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>uidArray</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pUidArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pUidArray</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pUidArray</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pUidArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pUidArray</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>pUidArray</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>suid</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdUidStoreDestory</name><parameter_list>(<parameter><decl><type><name>STbUidStore</name> <modifier>*</modifier></type><name>pStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pStore</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pStore</name><operator>-&gt;</operator><name>tbUids</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// When pStore-&gt;tbUids not NULL, the pStore-&gt;uidHash has k/v; otherwise pStore-&gt;uidHash only has keys.</comment>
        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>arr</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SArray</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>arr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>uidHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pStore</name><operator>-&gt;</operator><name>tbUids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tdUidStoreFree</name><parameter_list>(<parameter><decl><type><name>STbUidStore</name> <modifier>*</modifier></type><name>pStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pStore</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdUidStoreDestory</name><argument_list>(<argument><expr><name>pStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief The SubmitReq for rsma L2/L3 is inserted by tsdbInsertData method directly while not by WriteQ, as the queue
 * would be freed when close Vnode, thus lock should be used if with race condition.
 * @param pTsdb
 * @param version
 * @param pReq
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessSubmitReq</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pReq</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PTR</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSubmitReq</name> <modifier>*</modifier></type><name>pSubmitReq</name> <init>= <expr><operator>(</operator><name>SSubmitReq</name> <operator>*</operator><operator>)</operator><name>pReq</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// TODO: spin lock for race conditiond</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tsdbInsertData</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pSubmitReq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdFetchSubmitReqSuids</name><parameter_list>(<parameter><decl><type><name>SSubmitReq</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>STbUidStore</name> <modifier>*</modifier></type><name>pStore</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubmitMsgIter</name></type> <name>msgIter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitBlk</name>    <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitBlkIter</name></type> <name>blkIter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSRow</name>        <modifier>*</modifier></type><name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tInitSubmitMsgIter</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgIter</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tGetSubmitMsgNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pBlock</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>tdUidStorePut</name><argument_list>(<argument><expr><name>pStore</name></expr></argument>, <argument><expr><name><name>msgIter</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief retention of rsma1/rsma2
 *
 * @param pSma
 * @param now
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>smaDoRetention</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>now</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSma</name><operator>-&gt;</operator><name>pRSmaTsdb</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDoRetention</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pRSmaTsdb</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_end</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>_end</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdBlockDataDestroy</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pBlockArr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pBlockArr</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>blockDataDestroy</name><argument_list>(<argument><expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pBlockArr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pBlockArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdRSmaExecAndSubmitResult</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>qTaskInfo_t</name></type> <name>taskInfo</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfoItem</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>,
                                         <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pResList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pResList</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>ts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>     <name>hasMore</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><call><name>qExecTaskOpt</name><argument_list>(<argument><expr><name>taskInfo</name></expr></argument>, <argument><expr><name>pResList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hasMore</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_QRY_IN_EXEC</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, qExecTask for rsma table %"</literal> <name>PRIi64</name> <literal type="string">" level %"</literal> <name>PRIi8</name> <literal type="string">" failed since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>,
                 <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// smaDebug("vgId:%d, no rsma level %" PRIi8 " data fetched yet", SMA_VID(pSma), pItem-&gt;level);</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, no rsma level %"</literal> <name>PRIi8</name> <literal type="string">" data fetched since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></else></if_stmt>

      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma level %"</literal> <name>PRIi8</name> <literal type="string">" data fetched"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    char flag[10] = {0};
    snprintf(flag, 10, "level %" PRIi8, pItem-&gt;level);
    blockDebugShowDataBlocks(pResList, flag);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSDataBlock</name> <modifier>*</modifier></type><name>output</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"result block, uid:%"</literal> <name>PRIu64</name> <literal type="string">", groupid:%"</literal> <name>PRIu64</name> <literal type="string">", rows:%d"</literal></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>,
               <argument><expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>STsdb</name>      <modifier>*</modifier></type><name>sinkTsdb</name> <init>= <expr><operator>(</operator><ternary><condition><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name> <operator>==</operator> <name>TSDB_RETENTION_L1</name></expr> ?</condition><then> <expr><name><name>pSma</name><operator>-&gt;</operator><name>pRSmaTsdb</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>pSma</name><operator>-&gt;</operator><name>pRSmaTsdb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SSubmitReq</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

      <comment type="line">// TODO: the schema update should be handled later(TD-17965)</comment>
      <if_stmt><if>if <condition>(<expr><call><name>buildSubmitReqFromDataBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pReq</name></expr></argument>, <argument><expr><name>output</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, build submit req for rsma table suid:%"</literal> <name>PRIu64</name> <literal type="string">", uid:%"</literal> <name>PRIu64</name> <literal type="string">", level %"</literal> <name>PRIi8</name>
                 <literal type="string">" failed since %s"</literal></expr></argument>,
                 <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>pReq</name> <operator>&amp;&amp;</operator> <call><name>tdProcessSubmitReq</name><argument_list>(<argument><expr><name>sinkTsdb</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, process submit req for rsma suid:%"</literal> <name>PRIu64</name> <literal type="string">", uid:%"</literal> <name>PRIu64</name> <literal type="string">" level %"</literal> <name>PRIi8</name>
                 <literal type="string">" failed since %s"</literal></expr></argument>,
                 <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, process submit req for rsma suid:%"</literal> <name>PRIu64</name> <literal type="string">",uid:%"</literal> <name>PRIu64</name> <literal type="string">", level %"</literal> <name>PRIi8</name> <literal type="string">" ver %"</literal> <name>PRIi64</name>
               <literal type="string">" len %"</literal> <name>PRIu32</name></expr></argument>,
               <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>groupId</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>output</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>version</name></name></expr></argument>,
               <argument><expr><call><name>htonl</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qCleanExecTaskBlockBuf</name><argument_list>(<argument><expr><name>taskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pResList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>qCleanExecTaskBlockBuf</name><argument_list>(<argument><expr><name>taskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Copy msg to rsmaQueueBuffer for batch process
 *
 * @param pSma
 * @param pMsg
 * @param inputType
 * @param pInfo
 * @param suid
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdExecuteRSmaImplAsync</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>inputType</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>,
                                      <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SSubmitReq</name> <modifier>*</modifier></type><name>pReq</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>SSubmitReq</name> <operator>*</operator><operator>)</operator><name>pMsg</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>qItem</name> <init>= <expr><call><name>taosAllocateQitem</name><argument_list>(<argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>DEF_QITEM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qItem</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>qItem</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pReq</name><operator>-&gt;</operator><name>header</name><operator>.</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosWriteQitem</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name>qItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastRecv</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pRSmaStat</name> <init>= <expr><call><name>SMA_RSMA_STAT</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>nItems</name> <init>= <expr><call><name>atomic_fetch_add_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>nBufItems</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>assigned</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>notEmpty</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// smoothing consume</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><name>nItems</name> <operator>/</operator> <name>RSMA_QTASKEXEC_SMOOTH_SIZE</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, pInfo-&gt;queue itemSize:%d, memSize:%"</literal> <name>PRIi64</name> <literal type="string">", sleep %d ms"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><call><name>taosQueueItemSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taosQueueMemorySize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>n</name> <operator>&lt;&lt;</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int32_t tdRsmaPrintSubmitReq(SSma *pSma, SSubmitReq *pReq) {
  SSubmitMsgIter msgIter = {0};
  SSubmitBlkIter blkIter = {0};
  STSRow        *row = NULL;
  if (tInitSubmitMsgIter(pReq, &amp;msgIter) &lt; 0) return -1;
  while (true) {
    SSubmitBlk *pBlock = NULL;
    if (tGetSubmitMsgNext(&amp;msgIter, &amp;pBlock) &lt; 0) return -1;
    if (pBlock == NULL) break;
    tInitSubmitBlkIter(&amp;msgIter, pBlock, &amp;blkIter);
    while ((row = tGetSubmitBlkNext(&amp;blkIter)) != NULL) {
      smaDebug("vgId:%d, numOfRows:%d, suid:%" PRIi64 ", uid:%" PRIi64 ", version:%" PRIi64 ", ts:%" PRIi64,
               SMA_VID(pSma), msgIter.numOfRows, msgIter.suid, msgIter.uid, pReq-&gt;version, row-&gt;ts);
    }
  }
  return 0;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * @brief sync mode
 *
 * @param pSma
 * @param pMsg
 * @param msgSize
 * @param inputType
 * @param pInfo
 * @param type
 * @param level
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdExecuteRSmaImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgSize</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>inputType</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>,
                                 <parameter><decl><type><name>ERsmaExecType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><name>level</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>qTaskInfo</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>RSMA_EXEC_COMMIT</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>RSMA_INFO_IQTASK</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>RSMA_INFO_QTASK</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>qTaskInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, no qTaskInfo to execute rsma %"</literal> <name>PRIi8</name> <literal type="string">" task for suid:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>,
             <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pTSchema</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, no schema to execute rsma %"</literal> <name>PRIi8</name> <literal type="string">" task for suid:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, execute rsma %"</literal> <name>PRIi8</name> <literal type="string">" task for qTaskInfo:%p suid:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>,
           <argument><expr><call><name>RSMA_INFO_QTASK</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  for (int32_t i = 0; i &lt; msgSize; ++i) {
    SSubmitReq *pReq = *(SSubmitReq **)((char *)pMsg + i * sizeof(void *));
    smaDebug("vgId:%d, [%d][%d] version %" PRIi64, SMA_VID(pSma), msgSize, i, pReq-&gt;version);
    tdRsmaPrintSubmitReq(pSma, pReq);
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if_stmt><if>if <condition>(<expr><call><name>qSetSMAInput</name><argument_list>(<argument><expr><name>qTaskInfo</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>msgSize</name></expr></argument>, <argument><expr><name>inputType</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma %"</literal> <name>PRIi8</name> <literal type="string">" qSetStreamInput failed since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRSmaInfoItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tdRSmaExecAndSubmitResult</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>qTaskInfo</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdCloneQTaskInfo</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>qTaskInfo_t</name></type> <name>dstTaskInfo</name></decl></parameter>, <parameter><decl><type><name>qTaskInfo_t</name></type> <name>srcTaskInfo</name></decl></parameter>, <parameter><decl><type><name>SRSmaParam</name> <modifier>*</modifier></type><name>param</name></decl></parameter>,
                                <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>pOutput</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>qSerializeTaskStatus</name><argument_list>(<argument><expr><name>srcTaskInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pOutput</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma clone, table %"</literal> <name>PRIi64</name> <literal type="string">" serialize qTaskInfo failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>,
             <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SReadHandle</name></type> <name>handle</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>meta</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr>,
      <expr><operator>.</operator><name>vnode</name> <operator>=</operator> <name>pVnode</name></expr>,
      <expr><operator>.</operator><name>initTqReader</name> <operator>=</operator> <literal type="number">1</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>dstTaskInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>dstTaskInfo</name> <operator>=</operator> <call><name>qCreateStreamExecTaskInfo</name><argument_list>(<argument><expr><name><name>param</name><operator>-&gt;</operator><name>qmsg</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dstTaskInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_QTASKINFO_CREATE</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>qDeserializeTaskStatus</name><argument_list>(<argument><expr><name>dstTaskInfo</name></expr></argument>, <argument><expr><name>pOutput</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma clone, restore rsma task for table:%"</literal> <name>PRIi64</name> <literal type="string">" failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>,
             <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma clone, restore rsma task for table:%"</literal> <name>PRIi64</name> <literal type="string">" succeed"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pOutput</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdRSmaQTaskInfoFree</name><argument_list>(<argument><expr><name>dstTaskInfo</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma clone, restore rsma task for table:%"</literal> <name>PRIi64</name> <literal type="string">" failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>,
           <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Clone qTaskInfo of SRSmaInfo
 *
 * @param pSma
 * @param pInfo
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdRSmaInfoClone</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRSmaParam</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pInfo</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><call><name>SMA_META</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma clone qTaskInfo for suid:%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma clone, failed to get table meta for %"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>,
             <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>TABLE_IS_ROLLUP</name><argument_list>(<argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>param</name> <operator>=</operator> <operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>rsmaParam</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pInfo</name><operator>-&gt;</operator><name>iTaskInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tdCloneQTaskInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taskInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iTaskInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma clone env success for %"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_INVALID_SCHEMA</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma clone env failed for %"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief During async commit, the SRSmaInfo object would be COW from iRSmaInfoHash and write lock should be applied.
 *
 * @param pSma
 * @param suid
 * @return SRSmaInfo*
 */</comment>
<function><type><specifier>static</specifier> <name>SRSmaInfo</name> <modifier>*</modifier></type><name>tdAcquireRSmaInfoBySuid</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmaEnv</name>   <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pStat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pRSmaInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pEnv</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_INVALID_ENV</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pStat</name> <operator>=</operator> <operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pStat</name> <operator>||</operator> <operator>!</operator><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_INVALID_STAT</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><call><name>SMA_ENV_LOCK</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRSmaInfo</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>suid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRSmaInfo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>pRSmaInfo</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SRSmaInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pRSmaInfo</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>RSMA_INFO_IS_DEL</name><argument_list>(<argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><call><name>SMA_ENV_LOCK</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>taskInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tdRSmaInfoClone</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><call><name>SMA_ENV_LOCK</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tdRefRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><call><name>SMA_ENV_LOCK</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>pRSmaInfo</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><call><name>SMA_ENV_LOCK</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>tdReleaseRSmaInfo</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdUnRefRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief async mode
 *
 * @param pSma
 * @param pMsg
 * @param inputType
 * @param suid
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdExecuteRSmaAsync</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>inputType</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pRSmaInfo</name> <init>= <expr><call><name>tdAcquireRSmaInfoBySuid</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRSmaInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, execute rsma, no rsma info for suid:%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>inputType</name> <operator>==</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tdExecuteRSmaImplAsync</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>inputType</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdReleaseRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>smaMgmt</name><operator>.</operator><name>tmrHandle</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SRSmaInfoItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pRSmaInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>triggerStat</name></name></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>pItem</name> <operator>=</operator> <call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pRSmaInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>triggerStat</name></name></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tdReleaseRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdProcessRSmaSubmit</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>inputType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmaEnv</name> <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pEnv</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// only applicable when rsma env exists</comment>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>STbUidStore</name></type> <name>uidStore</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRetention</name> <modifier>*</modifier></type><name>pRetention</name> <init>= <expr><call><name>SMA_RETENTION</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RETENTION_VALID</name><argument_list>(<argument><expr><name>pRetention</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// return directly if retention level 1 is invalid</comment>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>inputType</name> <operator>==</operator> <name>STREAM_INPUT__DATA_SUBMIT</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tdFetchSubmitReqSuids</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidStore</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>uidStore</name><operator>.</operator><name>suid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tdExecuteRSmaAsync</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>inputType</name></expr></argument>, <argument><expr><name><name>uidStore</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>uidStore</name><operator>.</operator><name>uidHash</name></name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>tb_uid_t</name> <modifier>*</modifier></type><name>pTbSuid</name> <init>= <expr><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tdExecuteRSmaAsync</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>inputType</name></expr></argument>, <argument><expr><operator>*</operator><name>pTbSuid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <goto>goto <name>_err</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tdUidStoreDestory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uidStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tdUidStoreDestory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uidStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to process rsma submit since: %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief retrieve rsma meta and init
 *
 * @param pSma
 * @param nTables number of tables of rsma
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdRSmaRestoreQTaskInfoInit</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>nTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name>     <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>     <modifier>*</modifier></type><name>suidList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbUidStore</name></type> <name>uidStore</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>suidList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>vnodeGetStbIdList</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>suidList</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to restore rsma env since get stb id list error: %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>arrSize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>suidList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>arrSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>nTables</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>nTables</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>suidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, no need to restore rsma env since empty stb id list"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>nRsmaTables</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><call><name>SMA_META</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>uidStore</name><operator>.</operator><name>tbUids</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>suid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>suidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma restore, suid is %"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma restore, failed to get table meta for %"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>,
               <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>TABLE_IS_ROLLUP</name><argument_list>(<argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>flags</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>nRsmaTables</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>SRSmaParam</name> <modifier>*</modifier></type><name>param</name> <init>= <expr><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>rsmaParam</name></name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma restore, table:%"</literal> <name>PRIi64</name> <literal type="string">" level:%d, maxdelay:%"</literal> <name>PRIi64</name> <literal type="string">" watermark:%"</literal> <name>PRIi64</name>
                 <literal type="string">" qmsgLen:%"</literal> <name>PRIi32</name></expr></argument>,
                 <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>maxdelay</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>watermark</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>param</name><operator>-&gt;</operator><name>qmsgLen</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><call><name>tdRSmaProcessCreateImpl</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>rsmaParam</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma restore env failed for %"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// reload all ctbUids for suid</comment>
      <expr_stmt><expr><name><name>uidStore</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeGetCtbIdList</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name><name>uidStore</name><operator>.</operator><name>tbUids</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma restore, get ctb idlist failed for %"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>,
                 <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tdUpdateTbUidList</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uidStore</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma restore, update tb uid list failed for %"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>,
                 <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>uidStore</name><operator>.</operator><name>tbUids</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma restore env success for %"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>suidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdUidStoreDestory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uidStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>nTables</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>nTables</name> <operator>=</operator> <name>nRsmaTables</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>suidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdUidStoreDestory</name><argument_list>(<argument><expr><operator>&amp;</operator><name>uidStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief reload ts data from checkpoint
 *
 * @param pSma
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdRSmaRestoreTSDataReload</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// NOTHING TODO: the data would be restored from the unified WAL replay procedure</comment>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdRSmaProcessRestoreImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>qtaskFileVer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// step 1: iterate all stables to restore the rsma env</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>nTables</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdRSmaRestoreQTaskInfoInit</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nTables</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>nTables</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, no need to restore rsma task %"</literal> <name>PRIi8</name> <literal type="string">" since no tables"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// step 2: reload ts data from checkpoint</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdRSmaRestoreTSDataReload</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// step 3: open SRSmaFS for qTaskFiles</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tdRSmaFSOpen</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>qtaskFileVer</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, restore rsma task %"</literal> <name>PRIi8</name> <literal type="string">" from qtaskf %"</literal> <name>PRIi64</name> <literal type="string">" succeed"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>qtaskFileVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, restore rsma task %"</literal> <name>PRIi8</name> <literal type="string">"from qtaskf %"</literal> <name>PRIi64</name> <literal type="string">" failed since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>type</name></expr></argument>,
           <argument><expr><name>qtaskFileVer</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdRSmaPersistExecImpl</name><parameter_list>(<parameter><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pRSmaStat</name></decl></parameter>, <parameter><decl><type><name>SHashObj</name> <modifier>*</modifier></type><name>pInfoHash</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSma</name>   <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name><name>pRSmaStat</name><operator>-&gt;</operator><name>pSma</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>vid</name> <init>= <expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>pInfoHash</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>fsMaxVer</name> <init>= <expr><call><name>tdRSmaFSMaxVer</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRSmaStat</name><operator>-&gt;</operator><name>commitAppliedVer</name></name> <operator>&lt;=</operator> <name>fsMaxVer</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma persist, no need as applied %"</literal> <name>PRIi64</name> <literal type="string">" not larger than fsMaxVer %"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><name>vid</name></expr></argument>,
             <argument><expr><name><name>pRSmaStat</name><operator>-&gt;</operator><name>commitAppliedVer</name></name></expr></argument>, <argument><expr><name>fsMaxVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>infoHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>infoHash</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pInfoHash</name></expr></argument>, <argument><expr><name>infoHash</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pRSmaInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SRSmaInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>infoHash</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>RSMA_INFO_IS_DEL</name><argument_list>(<argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SRSmaInfoItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pRSmaInfo</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>pItem</name> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>pStreamState</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>streamStateCommit</name><argument_list>(<argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>pStreamState</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_STREAM_STATE_COMMIT</name></expr>;</expr_stmt>
          <goto>goto <name>_err</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma persist, stream state commit success, table %"</literal> <name>PRIi64</name> <literal type="string">" level %d"</literal></expr></argument>, <argument><expr><name>vid</name></expr></argument>, <argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>,
                 <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma persist failed since %s"</literal></expr></argument>, <argument><expr><name>vid</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief trigger to get rsma result in async mode
 *
 * @param param
 * @param tmrId
 */</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>tdRSmaFetchTrigger</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>tmrId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRSmaRef</name>      <modifier>*</modifier></type><name>pRSmaRef</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSma</name>          <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaStat</name>     <modifier>*</modifier></type><name>pStat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaInfo</name>     <modifier>*</modifier></type><name>pRSmaInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaInfoItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pRSmaRef</name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"rsma fetch task not start since rsma info item:%p not exist in refHash:%p, rsetId:%d"</literal></expr></argument>, <argument><expr><name>param</name></expr></argument>,
             <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pStat</name> <operator>=</operator> <operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><call><name>tdAcquireSmaRef</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>pRSmaRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"rsma fetch task not start since rsma stat already destroyed, rsetId:%d refId:%"</literal> <name>PRIi64</name> <literal type="string">")"</literal></expr></argument>,
             <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>pRSmaRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// pRSmaRef freed in taosHashRemove</comment>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pSma</name> <operator>=</operator> <name><name>pStat</name><operator>-&gt;</operator><name>pSma</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pRSmaInfo</name> <operator>=</operator> <call><name>tdAcquireRSmaInfoBySuid</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name><name>pRSmaRef</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"rsma fetch task not start since rsma info not exist, rsetId:%d refId:%"</literal> <name>PRIi64</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>,
             <argument><expr><name><name>pRSmaRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// pRSmaRef freed in taosHashRemove</comment>
    <expr_stmt><expr><call><name>tdReleaseSmaRef</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>pRSmaRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>RSMA_INFO_IS_DEL</name><argument_list>(<argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"rsma fetch task not start since rsma info already deleted, rsetId:%d refId:%"</literal> <name>PRIi64</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>,
             <argument><expr><name><name>pRSmaRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// pRSmaRef freed in taosHashRemove</comment>
    <expr_stmt><expr><call><name>tdReleaseRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdReleaseSmaRef</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>pRSmaRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>param</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pItem</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SRSmaInfoItem</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>param</name></expr>;</expr_stmt>

  <comment type="line">// if rsma trigger stat in paused, cancelled or finished, not start fetch task</comment>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>rsmaTriggerStat</name> <init>= <expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><call><name>RSMA_TRIGGER_STAT</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>rsmaTriggerStat</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TASK_TRIGGER_STAT_PAUSED</name></expr>:</case>
    <case>case <expr><name>TASK_TRIGGER_STAT_CANCELLED</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma fetch task not start for level %"</literal> <name>PRIi8</name> <literal type="string">" since stat is %"</literal> <name>PRIi8</name>
               <literal type="string">", rsetId:%d refId:%"</literal> <name>PRIi64</name></expr></argument>,
               <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name>rsmaTriggerStat</name></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>pRSmaRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>rsmaTriggerStat</name> <operator>==</operator> <name>TASK_TRIGGER_STAT_PAUSED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>tdRSmaFetchTrigger</name></expr></argument>, <argument><expr><name>RSMA_FETCH_INTERVAL</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>tmrHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>tmrId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>tdReleaseRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdReleaseSmaRef</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>pRSmaRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <decl_stmt><decl><type><name>int8_t</name></type> <name>fetchTriggerStat</name> <init>=
      <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>triggerStat</name></name></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_ACTIVE</name></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_INACTIVE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>fetchTriggerStat</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TASK_TRIGGER_STAT_ACTIVE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma fetch task planned for level:%"</literal> <name>PRIi8</name> <literal type="string">" suid:%"</literal> <name>PRIi64</name> <literal type="string">" since stat is active"</literal></expr></argument>,
               <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// async process</comment>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>fetchLevel</name></name> <operator>=</operator> <name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
      SRSmaInfo     *qInfo = tdAcquireRSmaInfoBySuid(pSma, pRSmaInfo-&gt;suid);
      SRSmaInfoItem *qItem = RSMA_INFO_ITEM(qInfo, pItem-&gt;level - 1);
      ASSERT(qItem-&gt;level == pItem-&gt;level);
      ASSERT(qItem-&gt;fetchLevel == pItem-&gt;fetchLevel);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>assigned</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pStat</name><operator>-&gt;</operator><name>notEmpty</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TASK_TRIGGER_STAT_PAUSED</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma fetch task not start for level:%"</literal> <name>PRIi8</name> <literal type="string">" suid:%"</literal> <name>PRIi64</name> <literal type="string">" since stat is paused"</literal></expr></argument>,
               <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TASK_TRIGGER_STAT_INACTIVE</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma fetch task not start for level:%"</literal> <name>PRIi8</name> <literal type="string">" suid:%"</literal> <name>PRIi64</name> <literal type="string">" since stat is inactive"</literal></expr></argument>,
               <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TASK_TRIGGER_STAT_INIT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma fetch task not start for level:%"</literal> <name>PRIi8</name> <literal type="string">" suid::%"</literal> <name>PRIi64</name> <literal type="string">" since stat is init"</literal></expr></argument>,
               <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma fetch task not start for level:%"</literal> <name>PRIi8</name> <literal type="string">" suid:%"</literal> <name>PRIi64</name> <literal type="string">" since stat is unknown"</literal></expr></argument>,
               <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr></argument>, <argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
  </block_content>}</block></switch>

<label><name>_end</name>:</label>
  <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>tdRSmaFetchTrigger</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>maxDelay</name></name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>tmrHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>tmrId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdReleaseRSmaInfo</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdReleaseSmaRef</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>pRSmaRef</name><operator>-&gt;</operator><name>refId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdFreeRSmaSubmitItems</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pItems</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pItems</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pItems</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>pItems</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief fetch rsma result(consider the efficiency and functionality)
 *
 * @param pSma
 * @param pInfo
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdRSmaFetchAllResult</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name></type> <name>dataBlock</name> <init>= <expr><block>{<expr><operator>.</operator><name><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>STREAM_GET_ALL</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRSmaInfoItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>fetchLevel</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>fetchLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>qTaskInfo_t</name></type> <name>taskInfo</name> <init>= <expr><call><name>RSMA_INFO_QTASK</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>taskInfo</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name><name>pItem</name><operator>-&gt;</operator><name>nScanned</name></name> <operator>*</operator> <name><name>pItem</name><operator>-&gt;</operator><name>maxDelay</name></name><operator>)</operator> <operator>&gt;</operator> <name>RSMA_FETCH_DELAY_MAX</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, suid:%"</literal> <name>PRIi64</name> <literal type="string">" level:%"</literal> <name>PRIi8</name> <literal type="string">" nScanned:%"</literal> <name>PRIi16</name> <literal type="string">" maxDelay:%d, fetch executed"</literal></expr></argument>,
                 <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>nScanned</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>maxDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>curMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>curMs</name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>lastRecv</name></name><operator>)</operator> <operator>&lt;</operator> <name>RSMA_FETCH_ACTIVE_MAX</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>smaTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, suid:%"</literal> <name>PRIi64</name> <literal type="string">" level:%"</literal> <name>PRIi8</name> <literal type="string">" curMs:%"</literal> <name>PRIi64</name> <literal type="string">" lastRecv:%"</literal> <name>PRIi64</name> <literal type="string">", fetch skipped "</literal></expr></argument>,
                   <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastRecv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>triggerStat</name></name></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// restore the active stat</comment>
          <continue>continue;</continue>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, suid:%"</literal> <name>PRIi64</name> <literal type="string">" level:%"</literal> <name>PRIi8</name> <literal type="string">" curMs:%"</literal> <name>PRIi64</name> <literal type="string">" lastRecv:%"</literal> <name>PRIi64</name> <literal type="string">", fetch executed "</literal></expr></argument>,
                   <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>curMs</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastRecv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>nScanned</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>qSetSMAInput</name><argument_list>(<argument><expr><name>taskInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBlock</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>STREAM_INPUT__DATA_BLOCK</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tdRSmaExecAndSubmitResult</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>taskInfo</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, suid:%"</literal> <name>PRIi64</name> <literal type="string">" level:%"</literal> <name>PRIi8</name> <literal type="string">" nScanned:%"</literal> <name>PRIi16</name> <literal type="string">" maxDelay:%d, fetch finished"</literal></expr></argument>,
               <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>nScanned</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>maxDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, suid:%"</literal> <name>PRIi64</name> <literal type="string">" level:%"</literal> <name>PRIi8</name> <literal type="string">" nScanned:%"</literal> <name>PRIi16</name>
               <literal type="string">" maxDelay:%d, fetch not executed as fetch level is %"</literal> <name>PRIi8</name></expr></argument>,
               <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>nScanned</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>maxDelay</name></name></expr></argument>, <argument><expr><name><name>pItem</name><operator>-&gt;</operator><name>fetchLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

<label><name>_end</name>:</label>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdRSmaBatchExec</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pSubmitArr</name></decl></parameter>, <parameter><decl><type><name>ERsmaExecType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>pSubmitArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pSubmitArr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdFreeRSmaSubmitItems</name><argument_list>(<argument><expr><name>pSubmitArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pSubmitArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tdExecuteRSmaImpl</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name><name>pSubmitArr</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>STREAM_INPUT__MERGED_SUBMIT</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tdFreeRSmaSubmitItems</name><argument_list>(<argument><expr><name>pSubmitArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>tdFreeRSmaSubmitItems</name><argument_list>(<argument><expr><name>pSubmitArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>msg</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief
 *
 * @param pSma
 * @param type
 * @return int32_t
 */</comment>

<function><type><name>int32_t</name></type> <name>tdRSmaProcessExecImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>ERsmaExecType</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name>    <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaEnv</name>   <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pRSmaStat</name> <init>= <expr><operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHashObj</name>  <modifier>*</modifier></type><name>infoHash</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>    <modifier>*</modifier></type><name>pSubmitArr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>       <name>isFetchAll</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRSmaStat</name> <operator>||</operator> <operator>!</operator><operator>(</operator><name>infoHash</name> <operator>=</operator> <call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_RSMA_INVALID_STAT</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pSubmitArr</name> <operator>=</operator>
            <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>TMIN</name><argument_list>(<argument><expr><name>RSMA_SUBMIT_BATCH_SIZE</name></expr></argument>, <argument><expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>nBufItems</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// step 1: rsma exec - consume data in buffer queue for all suids</comment>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>RSMA_EXEC_OVERFLOW</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><operator>(</operator><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>infoHash</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SRSmaInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>assigned</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>taosQueueItemSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fetchLevel</name> <operator>||</operator>
              <call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fetchLevel</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int32_t</name></type> <name>batchCnt</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int32_t</name></type> <name>batchMax</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name>infoHash</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>tsNumOfVnodeRsmaThreads</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type>    <name>occupied</name> <init>= <expr><operator>(</operator><name>batchMax</name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>batchMax</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>batchMax</name> <operator>=</operator> <literal type="number">100</literal> <operator>/</operator> <name>batchMax</name></expr>;</expr_stmt>
              <expr_stmt><expr><name>batchMax</name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>batchMax</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <while>while <condition>(<expr><name>occupied</name> <operator>||</operator> <operator>(</operator><operator>++</operator><name>batchCnt</name> <operator>&lt;</operator> <name>batchMax</name><operator>)</operator></expr>)</condition> <block>{<block_content>    <comment type="line">// greedy mode</comment>
              <expr_stmt><expr><call><name>taosReadAllQitems</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>queue</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// queue has mutex lock</comment>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>qallItemSize</name> <init>= <expr><call><name>taosQallItemSize</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><name>qallItemSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>tdRSmaBatchExec</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>qall</name></name></expr></argument>, <argument><expr><name>pSubmitArr</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, batchSize:%d, execType:%"</literal> <name>PRIi32</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qallItemSize</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>

              <if_stmt><if>if <condition>(<expr><call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fetchLevel</name> <operator>||</operator> <call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fetchLevel</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int8_t</name></type> <name>oldStat</name> <init>= <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><call><name>RSMA_COMMIT_STAT</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>oldStat</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator>
                    <operator>(</operator><operator>(</operator><name>oldStat</name> <operator>==</operator> <literal type="number">2</literal><operator>)</operator> <operator>&amp;&amp;</operator> <call><name>atomic_load_8</name><argument_list>(<argument><expr><call><name>RSMA_TRIGGER_STAT</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <name>TASK_TRIGGER_STAT_PAUSED</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                  <decl_stmt><decl><type><name>int32_t</name></type> <name>oldVal</name> <init>= <expr><call><name>atomic_fetch_add_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>nFetchAll</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>oldVal</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <expr_stmt><expr><call><name>tdRSmaFetchAllResult</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>nFetchAll</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><call><name>RSMA_COMMIT_STAT</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  </block_content>}</block></if></if_stmt>
                </block_content>}</block></if></if_stmt>
              </block_content>}</block></if></if_stmt>

              <if_stmt><if>if <condition>(<expr><name>qallItemSize</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>atomic_fetch_sub_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>nBufItems</name></name></expr></argument>, <argument><expr><name>qallItemSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <continue>continue;</continue>
              </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fetchLevel</name> <operator>||</operator> <call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>fetchLevel</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>atomic_load_8</name><argument_list>(<argument><expr><call><name>RSMA_COMMIT_STAT</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                  <continue>continue;</continue>
                </block_content>}</block></if></if_stmt>
                <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>TSDB_RETENTION_L2</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
                  <decl_stmt><decl><type><name>SRSmaInfoItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                  <if_stmt><if>if <condition>(<expr><name><name>pItem</name><operator>-&gt;</operator><name>fetchLevel</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><name><name>pItem</name><operator>-&gt;</operator><name>fetchLevel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>taosTmrReset</name><argument_list>(<argument><expr><name>tdRSmaFetchTrigger</name></expr></argument>, <argument><expr><name>RSMA_FETCH_INTERVAL</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>tmrHandle</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pItem</name><operator>-&gt;</operator><name>tmrId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                  </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
              </block_content>}</block></if></if_stmt>

              <break>break;</break>
            </block_content>}</block></while>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>assigned</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>nBufItems</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pEnv</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SMA_ENV_FLG_CLOSE</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>notEmpty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pEnv</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>SMA_ENV_FLG_CLOSE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>nBufItems</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, exec task end, flag:%"</literal> <name>PRIi8</name> <literal type="string">", nBufItems:%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pEnv</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>,
                 <argument><expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>nBufItems</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></while>  <comment type="line">// end of while(true)</comment>

<label><name>_end</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pSubmitArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pSubmitArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
</block_content>}</block></function>
</unit>
