<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/sma/smaUtil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sma.h"</cpp:file></cpp:include>

<comment type="line">// smaFileUtil ================</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TD_FILE_STATE_OK</name></cpp:macro>  <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TD_FILE_STATE_BAD</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TD_FILE_INIT_MAGIC</name></cpp:macro> <cpp:value>0xFFFFFFFF</cpp:value></cpp:define>

static int32_t tdEncodeTFInfo(void **buf, STFInfo *pInfo);
static void   *tdDecodeTFInfo(void *buf, STFInfo *pInfo);

static int32_t tdEncodeTFInfo(void **buf, STFInfo *pInfo) {
  int32_t tlen = 0;

  tlen += taosEncodeFixedU32(buf, pInfo-&gt;magic);
  tlen += taosEncodeFixedU32(buf, pInfo-&gt;ftype);
  tlen += taosEncodeFixedU32(buf, pInfo-&gt;fver);
  tlen += taosEncodeFixedI64(buf, pInfo-&gt;fsize);

  return tlen;
}

static void *tdDecodeTFInfo(void *buf, STFInfo *pInfo) {
  buf = taosDecodeFixedU32(buf, &amp;(pInfo-&gt;magic));
  buf = taosDecodeFixedU32(buf, &amp;(pInfo-&gt;ftype));
  buf = taosDecodeFixedU32(buf, &amp;(pInfo-&gt;fver));
  buf = taosDecodeFixedI64(buf, &amp;(pInfo-&gt;fsize));

  return buf;
}

int64_t tdWriteTFile(STFile *pTFile, void *buf, int64_t nbyte) {
  ASSERT(TD_TFILE_OPENED(pTFile));

  int64_t nwrite = taosWriteFile(pTFile-&gt;pFile, buf, nbyte);
  if (nwrite &lt; nbyte) {
    terrno = TAOS_SYSTEM_ERROR(errno);
    return -1;
  }

  return nwrite;
}

int64_t tdSeekTFile(STFile *pTFile, int64_t offset, int whence) {
  ASSERT(TD_TFILE_OPENED(pTFile));

  int64_t loffset = taosLSeekFile(TD_TFILE_PFILE(pTFile), offset, whence);
  if (loffset &lt; 0) {
    terrno = TAOS_SYSTEM_ERROR(errno);
    return -1;
  }

  return loffset;
}

int64_t tdGetTFileSize(STFile *pTFile, int64_t *size) {
  ASSERT(TD_TFILE_OPENED(pTFile));
  return taosFStatFile(pTFile-&gt;pFile, size, NULL);
}

int64_t tdReadTFile(STFile *pTFile, void *buf, int64_t nbyte) {
  ASSERT(TD_TFILE_OPENED(pTFile));

  int64_t nread = taosReadFile(pTFile-&gt;pFile, buf, nbyte);
  if (nread &lt; 0) {
    terrno = TAOS_SYSTEM_ERROR(errno);
    return -1;
  }

  return nread;
}

int32_t tdUpdateTFileHeader(STFile *pTFile) {
  char buf[TD_FILE_HEAD_SIZE] = "\0";

  if (tdSeekTFile(pTFile, 0, SEEK_SET) &lt; 0) {
    return -1;
  }

  void *ptr = buf;
  tdEncodeTFInfo(&amp;ptr, &amp;(pTFile-&gt;info));

  taosCalcChecksumAppend(0, (uint8_t *)buf, TD_FILE_HEAD_SIZE);
  if (tdWriteTFile(pTFile, buf, TD_FILE_HEAD_SIZE) &lt; 0) {
    return -1;
  }

  return 0;
}

int32_t tdLoadTFileHeader(STFile *pTFile, STFInfo *pInfo) {
  char     buf[TD_FILE_HEAD_SIZE] = "\0";
  uint32_t _version;

  ASSERT(TD_TFILE_OPENED(pTFile));

  if (tdSeekTFile(pTFile, 0, SEEK_SET) &lt; 0) {
    return -1;
  }

  if (tdReadTFile(pTFile, buf, TD_FILE_HEAD_SIZE) &lt; 0) {
    return -1;
  }

  if (!taosCheckChecksumWhole((uint8_t *)buf, TD_FILE_HEAD_SIZE)) {
    terrno = TSDB_CODE_FILE_CORRUPTED;
    return -1;
  }

  void *pBuf = buf;
  pBuf = tdDecodeTFInfo(pBuf, pInfo);
  return 0;
}

void tdUpdateTFileMagic(STFile *pTFile, void *pCksm) {
  pTFile-&gt;info.magic = taosCalcChecksum(pTFile-&gt;info.magic, (uint8_t *)(pCksm), sizeof(TSCKSUM));
}

int64_t tdAppendTFile(STFile *pTFile, void *buf, int64_t nbyte, int64_t *offset) {
  ASSERT(TD_TFILE_OPENED(pTFile));

  int64_t toffset;

  if ((toffset = tdSeekTFile(pTFile, 0, SEEK_END)) &lt; 0) {
    return -1;
  }

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  smaDebug("append to file %s, offset:%" PRIi64 " nbyte:%" PRIi64 " fsize:%" PRIi64, TD_TFILE_FULL_NAME(pTFile),
           toffset, nbyte, toffset + nbyte);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  ASSERT(pTFile-&gt;info.fsize == toffset);

  if (offset) {
    *offset = toffset;
  }

  if (tdWriteTFile(pTFile, buf, nbyte) &lt; 0) {
    return -1;
  }

  pTFile-&gt;info.fsize += nbyte;

  return nbyte;
}

int32_t tdOpenTFile(STFile *pTFile, int flags) {
  ASSERT(!TD_TFILE_OPENED(pTFile));

  pTFile-&gt;pFile = taosOpenFile(TD_TFILE_FULL_NAME(pTFile), flags);
  if (pTFile-&gt;pFile == NULL) {
    terrno = TAOS_SYSTEM_ERROR(errno);
    return -1;
  }

  return 0;
}

void tdCloseTFile(STFile *pTFile) {
  if (TD_TFILE_OPENED(pTFile)) {
    taosCloseFile(&amp;pTFile-&gt;pFile);
    TD_TFILE_SET_CLOSED(pTFile);
  }
}

void tdDestroyTFile(STFile *pTFile) { taosMemoryFreeClear(TD_TFILE_FULL_NAME(pTFile)); }

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>tdGetVndFileName</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pdname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>,
                      <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outputName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pdname</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>outputName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%svnode%svnode%d%s%s%sv%d%s"</literal></expr></argument>, <argument><expr><name>pdname</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>,
               <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>outputName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"vnode%svnode%d%s%s%sv%d%s"</literal></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>,
               <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pdname</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>outputName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%svnode%svnode%d%s%s%sv%d%s%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><name>pdname</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>,
               <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>outputName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"vnode%svnode%d%s%s%sv%d%s%"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>,
               <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tdGetVndDirName</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>vgId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>pdname</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>endWithSep</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>outputName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pdname</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>endWithSep</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>outputName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%svnode%svnode%d%s%s%s"</literal></expr></argument>, <argument><expr><name>pdname</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>,
               <argument><expr><name>dname</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>outputName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%svnode%svnode%d%s%s"</literal></expr></argument>, <argument><expr><name>pdname</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>,
               <argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>endWithSep</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>outputName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"vnode%svnode%d%s%s%s"</literal></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>outputName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"vnode%svnode%d%s%s"</literal></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>dname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
int32_t tdInitTFile(STFile *pTFile, const char *dname, const char *fname) {
  TD_TFILE_SET_STATE(pTFile, TD_FILE_STATE_OK);
  TD_TFILE_SET_CLOSED(pTFile);

  memset(&amp;(pTFile-&gt;info), 0, sizeof(pTFile-&gt;info));
  pTFile-&gt;info.magic = TD_FILE_INIT_MAGIC;

  char tmpName[TSDB_FILENAME_LEN * 2 + 32] = {0};
  snprintf(tmpName, TSDB_FILENAME_LEN * 2 + 32, "%s%s%s", dname, TD_DIRSEP, fname);
  int32_t tmpNameLen = strlen(tmpName) + 1;
  pTFile-&gt;fname = taosMemoryMalloc(tmpNameLen);
  if (!pTFile-&gt;fname) {
    terrno = TSDB_CODE_OUT_OF_MEMORY;
    return -1;
  }
  tstrncpy(pTFile-&gt;fname, tmpName, tmpNameLen);

  return 0;
}

int32_t tdCreateTFile(STFile *pTFile, bool updateHeader, int8_t fType) {
  ASSERT(pTFile-&gt;info.fsize == 0 &amp;&amp; pTFile-&gt;info.magic == TD_FILE_INIT_MAGIC);
  pTFile-&gt;pFile = taosOpenFile(TD_TFILE_FULL_NAME(pTFile), TD_FILE_CREATE | TD_FILE_WRITE | TD_FILE_TRUNC);
  if (pTFile-&gt;pFile == NULL) {
    if (errno == ENOENT) {
      <comment type="line">// Try to create directory recursively</comment>
      char *s = strdup(TD_TFILE_FULL_NAME(pTFile));
      if (taosMulMkDir(taosDirName(s)) != 0) {
        terrno = TAOS_SYSTEM_ERROR(errno);
        taosMemoryFree(s);
        return -1;
      }
      taosMemoryFree(s);
      pTFile-&gt;pFile = taosOpenFile(TD_TFILE_FULL_NAME(pTFile), TD_FILE_CREATE | TD_FILE_WRITE | TD_FILE_TRUNC);
      if (pTFile-&gt;pFile == NULL) {
        terrno = TAOS_SYSTEM_ERROR(errno);
        return -1;
      }
    }
  }

  if (!updateHeader) {
    return 0;
  }

  pTFile-&gt;info.fsize += TD_FILE_HEAD_SIZE;
  pTFile-&gt;info.fver = 0;

  if (tdUpdateTFileHeader(pTFile) &lt; 0) {
    tdCloseTFile(pTFile);
    tdRemoveTFile(pTFile);
    return -1;
  }

  return 0;
}

int32_t tdRemoveTFile(STFile *pTFile) {
  if (taosRemoveFile(TD_TFILE_FULL_NAME(pTFile)) != 0) {
    terrno = TAOS_SYSTEM_ERROR(errno);
    return -1;
  };
  return 0;
}

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// smaXXXUtil ================</comment>
<function><type><name>void</name> <modifier>*</modifier></type><name>tdAcquireSmaRef</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rsetId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>refId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pResult</name> <init>= <expr><call><name>taosAcquireRef</name><argument_list>(<argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pResult</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"rsma acquire ref for rsetId:%d refId:%"</literal> <name>PRIi64</name> <literal type="string">" failed since %s"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"rsma acquire ref for rsetId:%d refId:%"</literal> <name>PRIi64</name> <literal type="string">" success"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>pResult</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdReleaseSmaRef</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>rsetId</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>refId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosReleaseRef</name><argument_list>(<argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"rsma release ref for rsetId:%d refId:%"</literal> <name>PRIi64</name> <literal type="string">" failed since %s"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"rsma release ref for rsetId:%d refId:%"</literal> <name>PRIi64</name> <literal type="string">" success"</literal></expr></argument>, <argument><expr><name>rsetId</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function></unit>
