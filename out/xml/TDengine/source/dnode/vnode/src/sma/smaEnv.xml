<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/sma/smaEnv.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sma.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>SSmaStat</name></name></type> <name>SSmaStat</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMA_MGMT_REF_NUM</name></cpp:macro> <cpp:value>10240</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SSmaMgmt</name></type> <name>smaMgmt</name></decl>;</decl_stmt>

<comment type="line">// declaration of static functions</comment>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdNewSmaEnv</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaType</name></decl></parameter>, <parameter><decl><type><name>SSmaEnv</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppEnv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdInitSmaEnv</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaType</name></decl></parameter>, <parameter><decl><type><name>SSmaEnv</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppEnv</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdInitSmaStat</name><parameter_list>(<parameter><decl><type><name>SSmaStat</name> <modifier>*</modifier><modifier>*</modifier></type><name>pSmaStat</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdRsmaStartExecutor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdRsmaStopExecutor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdDestroySmaState</name><parameter_list>(<parameter><decl><type><name>SSmaStat</name> <modifier>*</modifier></type><name>pSmaStat</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaType</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name>   <modifier>*</modifier></type><name>tdFreeSmaState</name><parameter_list>(<parameter><decl><type><name>SSmaStat</name> <modifier>*</modifier></type><name>pSmaStat</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaType</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name>   <modifier>*</modifier></type><name>tdFreeTSmaStat</name><parameter_list>(<parameter><decl><type><name>STSmaStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>tdDestroyRSmaStat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pRSmaStat</name></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block" format="doxygen">/**
 * @brief rsma init
 *
 * @return int32_t
 */</comment>
<comment type="line">// implementation</comment>
<function><type><name>int32_t</name></type> <name>smaInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>old</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nLoops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smaMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>nLoops</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// init tref rset</comment>
    <expr_stmt><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name> <operator>=</operator> <call><name>taosOpenRef</name><argument_list>(<argument><expr><name>SMA_MGMT_REF_NUM</name></expr></argument>, <argument><expr><name>tdDestroyRSmaStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smaMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"failed to init sma rset since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>type</name> <init>= <expr><ternary><condition><expr><operator>(</operator><literal type="number">8</literal> <operator>==</operator> <name>POINTER_BYTES</name><operator>)</operator></expr> ?</condition><then> <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr> </then><else>: <expr><name>TSDB_DATA_TYPE_UINT</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(<argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smaMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"failed to init sma tmr hanle since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// init fetch timer handle</comment>
    <expr_stmt><expr><name><name>smaMgmt</name><operator>.</operator><name>tmrHandle</name></name> <operator>=</operator> <call><name>taosTmrInit</name><argument_list>(<argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="string">"RSMA"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>smaMgmt</name><operator>.</operator><name>tmrHandle</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smaMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"failed to init sma tmr handle since %s"</literal></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smaMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"sma mgmt env is initialized, rsetId:%d, tmrHandle:%p"</literal></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>tmrHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief rsma cleanup
 *
 */</comment>
<function><type><name>void</name></type> <name>smaCleanUp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>old</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nLoops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>old</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smaMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>old</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>nLoops</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>old</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseRef</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosTmrCleanUp</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>tmrHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"sma mgmt env is cleaned up, rsetId:%d, tmrHandle:%p"</literal></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>tmrHandle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>smaMgmt</name><operator>.</operator><name>inited</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdNewSmaEnv</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaType</name></decl></parameter>, <parameter><decl><type><name>SSmaEnv</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmaEnv</name> <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pEnv</name> <operator>=</operator> <operator>(</operator><name>SSmaEnv</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmaEnv</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppEnv</name> <operator>=</operator> <name>pEnv</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pEnv</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>SMA_ENV_TYPE</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>smaType</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosInitRWLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pEnv</name><operator>-&gt;</operator><name>lock</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>smaType</name> <operator>==</operator> <name>TSDB_SMA_TYPE_TIME_RANGE</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_TSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>ppEnv</name></expr></argument>)</argument_list></call></expr>
                                        </then><else>: <expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>*</operator><name>ppEnv</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdInitSmaStat</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>smaType</name></expr></argument>, <argument><expr><name>pSma</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdFreeSmaEnv</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppEnv</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><ternary><condition><expr><operator>(</operator><name>smaType</name> <operator>==</operator> <name>TSDB_SMA_TYPE_TIME_RANGE</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_TSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>
                                          </then><else>: <expr><call><name>atomic_store_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdInitSmaEnv</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaType</name></decl></parameter>, <parameter><decl><type><name>SSmaEnv</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ppEnv</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PTR</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>ppEnv</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tdNewSmaEnv</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>smaType</name></expr></argument>, <argument><expr><name>ppEnv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Release resources allocated for its member fields, not including itself.
 *
 * @param pSmaEnv
 * @return int32_t
 */</comment>
<function><type><name>void</name></type> <name>tdDestroySmaEnv</name><parameter_list>(<parameter><decl><type><name>SSmaEnv</name> <modifier>*</modifier></type><name>pSmaEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSmaEnv</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSmaEnv</name><operator>-&gt;</operator><name>pStat</name></name> <operator>=</operator> <call><name>tdFreeSmaState</name><argument_list>(<argument><expr><name><name>pSmaEnv</name><operator>-&gt;</operator><name>pStat</name></name></expr></argument>, <argument><expr><call><name>SMA_ENV_TYPE</name><argument_list>(<argument><expr><name>pSmaEnv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tdFreeSmaEnv</name><parameter_list>(<parameter><decl><type><name>SSmaEnv</name> <modifier>*</modifier></type><name>pSmaEnv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSmaEnv</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdDestroySmaEnv</name><argument_list>(<argument><expr><name>pSmaEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pSmaEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tRSmaInfoHashFreeNode</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRSmaInfo</name>     <modifier>*</modifier></type><name>pRSmaInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaInfoItem</name> <modifier>*</modifier></type><name>pItem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pRSmaInfo</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SRSmaInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>data</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pItem</name> <operator>=</operator> <call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><operator>(</operator><name>SRSmaInfo</name> <operator>*</operator><operator>)</operator><name>pRSmaInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pItem</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pItem</name> <operator>=</operator> <call><name>RSMA_INFO_ITEM</name><argument_list>(<argument><expr><operator>(</operator><name>SRSmaInfo</name> <operator>*</operator><operator>)</operator><name>pRSmaInfo</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pItem</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>refHash</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pItem</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tdFreeRSmaInfo</name><argument_list>(<argument><expr><name><name>pRSmaInfo</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><name>pRSmaInfo</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdInitSmaStat</name><parameter_list>(<parameter><decl><type><name>SSmaStat</name> <modifier>*</modifier><modifier>*</modifier></type><name>pSmaStat</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pSmaStat</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pSmaStat</name></expr>)</condition> <block>{<block_content>  <comment type="line">// no lock</comment>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="block" format="doxygen">/**
   *  1. Lazy mode utilized when init SSmaStat to update expire window(or hungry mode when tdNew).
   *  2. Currently, there is mutex lock when init SSmaEnv, thus no need add lock on SSmaStat, and please add lock if
   * tdInitSmaStat invoked in other multithread environment later.
   */</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>pSmaStat</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pSmaStat</name> <operator>=</operator> <operator>(</operator><name>SSmaStat</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmaStat</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TdThread</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>tsNumOfVnodeRsmaThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><operator>*</operator><name>pSmaStat</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>smaType</name> <operator>==</operator> <name>TSDB_SMA_TYPE_ROLLUP</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pRSmaStat</name> <init>= <expr><operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>pSmaStat</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pRSmaStat</name><operator>-&gt;</operator><name>pSma</name></name> <operator>=</operator> <operator>(</operator><name>SSma</name> <operator>*</operator><operator>)</operator><name>pSma</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><call><name>RSMA_TRIGGER_STAT</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_INIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>notEmpty</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// init smaMgmt</comment>
      <expr_stmt><expr><call><name>smaInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type> <name>refId</name> <init>= <expr><call><name>taosAddRef</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>refId</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, taosAddRef refId:%"</literal> <name>PRIi64</name> <literal type="string">" to rsetId rsetId:%d max:%d failed since:%s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>,
                 <argument><expr><name>refId</name></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name>SMA_MGMT_REF_NUM</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, taosAddRef refId:%"</literal> <name>PRIi64</name> <literal type="string">" to rsetId rsetId:%d max:%d succeed"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>refId</name></expr></argument>,
                 <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name>SMA_MGMT_REF_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name><name>pRSmaStat</name><operator>-&gt;</operator><name>refId</name></name> <operator>=</operator> <name>refId</name></expr>;</expr_stmt>

      <comment type="line">// init hash</comment>
      <expr_stmt><expr><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>taosHashInit</name><argument_list>(
          <argument><expr><name>RSMA_TASK_INFO_HASH_SLOT</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>HASH_ENTRY_LOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosHashSetFreeFp</name><argument_list>(<argument><expr><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tRSmaInfoHashFreeNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tdRsmaStartExecutor</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>RSMA_FS</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>aQTaskInf</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SQTaskFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>smaType</name> <operator>==</operator> <name>TSDB_SMA_TYPE_TIME_RANGE</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// TODO</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdDestroyTSmaStat</name><parameter_list>(<parameter><decl><type><name>STSmaStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pStat</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"destroy tsma stat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDestroyTSma</name><argument_list>(<argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>pTSma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>pTSma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pStat</name><operator>-&gt;</operator><name>pTSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tdFreeTSmaStat</name><parameter_list>(<parameter><decl><type><name>STSmaStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdDestroyTSmaStat</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tdDestroyRSmaStat</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pRSmaStat</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pRSmaStat</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pStat</name> <init>= <expr><operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><name>pRSmaStat</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSma</name>      <modifier>*</modifier></type><name>pSma</name> <init>= <expr><name><name>pStat</name><operator>-&gt;</operator><name>pSma</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, destroy rsma stat %p"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// step 1: set rsma trigger stat cancelled</comment>
    <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><call><name>RSMA_TRIGGER_STAT</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_CANCELLED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// step 2: destroy the rsma info and associated fetch tasks</comment>
    <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// step 3: wait for all triggered fetch tasks to finish</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nLoops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><operator>(</operator><name>SSmaStat</name> <operator>*</operator><operator>)</operator><name>pStat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma fetch tasks are all finished"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma fetch tasks are not all finished yet"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><operator>++</operator><name>nLoops</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>nLoops</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="line">// step 4:</comment>
    <expr_stmt><expr><call><name>tdRsmaStopExecutor</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// step 5:</comment>
    <expr_stmt><expr><call><name>tdRSmaFSClose</name><argument_list>(<argument><expr><call><name>RSMA_FS</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// step 6: free pStat</comment>
    <expr_stmt><expr><call><name>tsem_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pStat</name><operator>-&gt;</operator><name>notEmpty</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>tdFreeSmaState</name><parameter_list>(<parameter><decl><type><name>SSmaStat</name> <modifier>*</modifier></type><name>pSmaStat</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tdDestroySmaState</name><argument_list>(<argument><expr><name>pSmaStat</name></expr></argument>, <argument><expr><name>smaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>smaType</name> <operator>==</operator> <name>TSDB_SMA_TYPE_TIME_RANGE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pSmaStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// tref used to free rsma stat</comment>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Release resources allocated for its member fields, not including itself.
 *
 * @param pSmaStat
 * @return int32_t
 */</comment>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdDestroySmaState</name><parameter_list>(<parameter><decl><type><name>SSmaStat</name> <modifier>*</modifier></type><name>pSmaStat</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSmaStat</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>smaType</name> <operator>==</operator> <name>TSDB_SMA_TYPE_TIME_RANGE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdDestroyTSmaStat</name><argument_list>(<argument><expr><call><name>SMA_STAT_TSMA</name><argument_list>(<argument><expr><name>pSmaStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>smaType</name> <operator>==</operator> <name>TSDB_SMA_TYPE_ROLLUP</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pRSmaStat</name> <init>= <expr><operator>&amp;</operator><name><name>pSmaStat</name><operator>-&gt;</operator><name>rsmaStat</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>    <name>vid</name> <init>= <expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name><name>pRSmaStat</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type>    <name>refId</name> <init>= <expr><call><name>RSMA_REF_ID</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosRemoveRef</name><argument_list>(<argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><name>refId</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, remove refId:%"</literal> <name>PRIi64</name> <literal type="string">" from rsmaRef:%"</literal> <name>PRIi32</name> <literal type="string">" failed since %s"</literal></expr></argument>, <argument><expr><name>vid</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>,
                 <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, remove refId:%"</literal> <name>PRIi64</name> <literal type="string">" from rsmaRef:%"</literal> <name>PRIi32</name> <literal type="string">" succeed"</literal></expr></argument>, <argument><expr><name>vid</name></expr></argument>, <argument><expr><name>refId</name></expr></argument>, <argument><expr><name><name>smaMgmt</name><operator>.</operator><name>rsetId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdLockSma</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSma</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to lock td since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdUnLockSma</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>SMA_LOCKED</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSma</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to unlock td since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tdCheckAndInitSmaEnv</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>smaType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmaEnv</name> <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>smaType</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_SMA_TYPE_TIME_RANGE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pEnv</name> <operator>=</operator> <operator>(</operator><name>SSmaEnv</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_TSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_SMA_TYPE_ROLLUP</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pEnv</name> <operator>=</operator> <operator>(</operator><name>SSmaEnv</name> <operator>*</operator><operator>)</operator><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, undefined smaType:%"</literal> <name>PRIi8</name></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>smaType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></switch>

  <comment type="line">// init sma env</comment>
  <expr_stmt><expr><call><name>tdLockSma</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pEnv</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>smaType</name> <operator>==</operator> <name>TSDB_SMA_TYPE_TIME_RANGE</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_TSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>
                                               </then><else>: <expr><call><name>atomic_load_ptr</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pEnv</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tdInitSmaEnv</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>smaType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pEnv</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdUnLockSma</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tdUnLockSma</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function><empty_stmt>;</empty_stmt>

<function><type><name>void</name> <modifier>*</modifier></type><name>tdRSmaExecutorFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"vnode-rsma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tdRSmaProcessExecImpl</name><argument_list>(<argument><expr><operator>(</operator><name>SSma</name> <operator>*</operator><operator>)</operator><name>param</name></expr></argument>, <argument><expr><name>RSMA_EXEC_OVERFLOW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdRsmaStartExecutor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thAttr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSmaEnv</name>  <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaStat</name> <modifier>*</modifier></type><name>pStat</name> <init>= <expr><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThread</name> <modifier>*</modifier></type><name>pthread</name> <init>= <expr><operator>(</operator><name>TdThread</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pStat</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tsNumOfVnodeRsmaThreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pthread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>, <argument><expr><name>tdRSmaExecutorFunc</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>pSma</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create pthread for rsma since %s"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, success to create pthread for rsma"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thAttr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdRsmaStopExecutor</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSma</name> <operator>&amp;&amp;</operator> <call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSmaEnv</name>   <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SSmaStat</name>  <modifier>*</modifier></type><name>pStat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pRSmaStat</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TdThread</name>  <modifier>*</modifier></type><name>pthread</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>pEnv</name> <operator>=</operator> <call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>||</operator> <operator>!</operator><operator>(</operator><name>pStat</name> <operator>=</operator> <call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pEnv</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>SMA_ENV_FLG_CLOSE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pRSmaStat</name> <operator>=</operator> <operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><name>pStat</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pthread</name> <operator>=</operator> <operator>(</operator><name>TdThread</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pStat</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tsNumOfVnodeRsmaThreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>notEmpty</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tsNumOfVnodeRsmaThreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>pthread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to join pthread for rsma:%"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taosGetPthreadId</name><argument_list>(<argument><expr><name><name>pthread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>pthread</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma executor stopped, number:%d"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tsNumOfVnodeRsmaThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
