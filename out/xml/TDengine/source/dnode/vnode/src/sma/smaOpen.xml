<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/sma/smaOpen.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sma.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>smaEvalDays</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRetention</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>duration</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>smaSetKeepCfg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>STsdbKeepCfg</name> <modifier>*</modifier></type><name>pKeepCfg</name></decl></parameter>, <parameter><decl><type><name>STsdbCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>rsmaRestore</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMA_SET_KEEP_CFG</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro>                                                                    \
  <cpp:value>do {                                                                                            \
    SRetention *r = &amp;pCfg-&gt;retentions[l];                                                         \
    pKeepCfg-&gt;keep2 = convertTimeFromPrecisionToUnit(r-&gt;keep, pCfg-&gt;precision, TIME_UNIT_MINUTE); \
    pKeepCfg-&gt;keep0 = pKeepCfg-&gt;keep2;                                                            \
    pKeepCfg-&gt;keep1 = pKeepCfg-&gt;keep2;                                                            \
    pKeepCfg-&gt;days = smaEvalDays(v, pCfg-&gt;retentions, l, pCfg-&gt;precision, pCfg-&gt;days);            \
  } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SMA_OPEN_RSMA_IMPL</name><parameter_list>(<parameter><type><name>v</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro>                                                             \
  <cpp:value>do {                                                                                       \
    SRetention *r = (SRetention *)VND_RETENTIONS(v) + l;                                     \
    if (!RETENTION_VALID(r)) {                                                               \
      if (l == 0) {                                                                          \
        goto _err;                                                                           \
      }                                                                                      \
      break;                                                                                 \
    }                                                                                        \
    smaSetKeepCfg(v, &amp;keepCfg, pCfg, TSDB_TYPE_RSMA_L##l);                                   \
    if (tsdbOpen(v, &amp;SMA_RSMA_TSDB##l(pSma), VNODE_RSMA##l##_DIR, &amp;keepCfg, rollback) &lt; 0) { \
      goto _err;                                                                             \
    }                                                                                        \
  } while (0)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/**
 * @brief Evaluate days(duration) for rsma level 1/2/3.
 *  1) level 1: duration from "create database"
 *  2) level 2/3: duration * (freq/freqL1)
 * @param pVnode
 * @param r
 * @param level
 * @param precision
 * @param duration
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>smaEvalDays</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRetention</name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>duration</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>freqDuration</name> <init>= <expr><call><name>convertTimeFromPrecisionToUnit</name><argument_list>(<argument><expr><operator>(</operator><name>r</name> <operator>+</operator> <name>TSDB_RETENTION_L0</name><operator>)</operator><operator>-&gt;</operator><name>freq</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>TIME_UNIT_MINUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>keepDuration</name> <init>= <expr><call><name>convertTimeFromPrecisionToUnit</name><argument_list>(<argument><expr><operator>(</operator><name>r</name> <operator>+</operator> <name>TSDB_RETENTION_L0</name><operator>)</operator><operator>-&gt;</operator><name>keep</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>TIME_UNIT_MINUTE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>days</name> <init>= <expr><name>duration</name></expr></init></decl>;</decl_stmt>  <comment type="line">// min</comment>

  <if_stmt><if>if <condition>(<expr><name>days</name> <operator>&lt;</operator> <name>freqDuration</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>days</name> <operator>=</operator> <name>freqDuration</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>days</name> <operator>&gt;</operator> <name>keepDuration</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>days</name> <operator>=</operator> <name>keepDuration</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>TSDB_RETENTION_L0</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>level</name> <operator>&gt;=</operator> <name>TSDB_RETENTION_L1</name> <operator>&amp;&amp;</operator> <name>level</name> <operator>&lt;=</operator> <name>TSDB_RETENTION_L2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>freqDuration</name> <operator>=</operator> <call><name>convertTimeFromPrecisionToUnit</name><argument_list>(<argument><expr><operator>(</operator><name>r</name> <operator>+</operator> <name>level</name><operator>)</operator><operator>-&gt;</operator><name>freq</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>TIME_UNIT_MINUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>keepDuration</name> <operator>=</operator> <call><name>convertTimeFromPrecisionToUnit</name><argument_list>(<argument><expr><operator>(</operator><name>r</name> <operator>+</operator> <name>level</name><operator>)</operator><operator>-&gt;</operator><name>keep</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>, <argument><expr><name>TIME_UNIT_MINUTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nFreqTimes</name> <init>= <expr><operator>(</operator><name>r</name> <operator>+</operator> <name>level</name><operator>)</operator><operator>-&gt;</operator><name>freq</name> <operator>/</operator> <operator>(</operator><name>r</name> <operator>+</operator> <name>TSDB_RETENTION_L0</name><operator>)</operator><operator>-&gt;</operator><name>freq</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>days</name> <operator>*=</operator> <operator>(</operator><ternary><condition><expr><name>nFreqTimes</name> <operator>&gt;</operator> <literal type="number">1</literal></expr> ?</condition><then> <expr><name>nFreqTimes</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>days</name> <operator>&gt;</operator> <name>keepDuration</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>days</name> <operator>=</operator> <name>keepDuration</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>days</name> <operator>&gt;</operator> <name>TSDB_MAX_DURATION_PER_FILE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>days</name> <operator>=</operator> <name>TSDB_MAX_DURATION_PER_FILE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>days</name> <operator>&lt;</operator> <name>freqDuration</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>days</name> <operator>=</operator> <name>freqDuration</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, evaluated duration for level %d is %d, raw val:%d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>level</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>days</name></expr></argument>, <argument><expr><name>duration</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>days</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>smaSetKeepCfg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>STsdbKeepCfg</name> <modifier>*</modifier></type><name>pKeepCfg</name></decl></parameter>, <parameter><decl><type><name>STsdbCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_TYPE_TSMA</name></expr>:</case>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_TYPE_RSMA_L0</name></expr>:</case>
      <expr_stmt><expr><call><name>SMA_SET_KEEP_CFG</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_TYPE_RSMA_L1</name></expr>:</case>
      <expr_stmt><expr><call><name>SMA_SET_KEEP_CFG</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_TYPE_RSMA_L2</name></expr>:</case>
      <expr_stmt><expr><call><name>SMA_SET_KEEP_CFG</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>smaOpen</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STsdbCfg</name> <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSma</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pSma</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name> <operator>=</operator> <name>pSma</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name> <operator>=</operator> <name>pVnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSma</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSma</name><operator>-&gt;</operator><name>locked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STsdbKeepCfg</name></type> <name>keepCfg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>TSDB_RETENTION_L0</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SMA_OPEN_RSMA_IMPL</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>TSDB_RETENTION_L1</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SMA_OPEN_RSMA_IMPL</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>i</name> <operator>==</operator> <name>TSDB_RETENTION_L2</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>SMA_OPEN_RSMA_IMPL</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// restore the rsma</comment>
    <if_stmt><if>if <condition>(<expr><call><name>tdRSmaRestore</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>RSMA_RESTORE_REBOOT</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>committed</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
<label><name>_err</name>:</label>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>smaClose</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSma</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSma</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SMA_TSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>tdFreeSmaEnv</name><argument_list>(<argument><expr><call><name>SMA_TSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call> <operator>=</operator> <call><name>tdFreeSmaEnv</name><argument_list>(<argument><expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if SMA_RSMA_TSDB0 <condition>(<expr><name>pSma</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tsdbClose</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_RSMA_TSDB0</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if SMA_RSMA_TSDB1 <condition>(<expr><name>pSma</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tsdbClose</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_RSMA_TSDB1</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if SMA_RSMA_TSDB2 <condition>(<expr><name>pSma</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tsdbClose</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>SMA_RSMA_TSDB2</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief rsma env restore
 *
 * @param pSma
 * @param type
 * @param committedVer
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>tdRSmaRestore</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>committedVer</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tdRSmaProcessRestoreImpl</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>committedVer</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
