<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/sma/smaCommit.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sma.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>extern</specifier> <name>SSmaMgmt</name></type> <name>smaMgmt</name></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
static int32_t tdProcessRSmaSyncPreCommitImpl(SSma *pSma);
static int32_t tdProcessRSmaSyncCommitImpl(SSma *pSma);
static int32_t tdProcessRSmaSyncPostCommitImpl(SSma *pSma);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessRSmaAsyncPreCommitImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessRSmaAsyncCommitImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SCommitInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessRSmaAsyncPostCommitImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdUpdateQTaskInfoFiles</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pRSmaStat</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="block" format="doxygen">/**
 * @brief Only applicable to Rollup SMA
 *
 * @param pSma
 * @return int32_t
 */</comment>
int32_t smaSyncPreCommit(SSma *pSma) { return tdProcessRSmaSyncPreCommitImpl(pSma); }

<comment type="block" format="doxygen">/**
 * @brief Only applicable to Rollup SMA
 *
 * @param pSma
 * @return int32_t
 */</comment>
int32_t smaSyncCommit(SSma *pSma) { return tdProcessRSmaSyncCommitImpl(pSma); }

<comment type="block" format="doxygen">/**
 * @brief Only applicable to Rollup SMA
 *
 * @param pSma
 * @return int32_t
 */</comment>
int32_t smaSyncPostCommit(SSma *pSma) { return tdProcessRSmaSyncPostCommitImpl(pSma); }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * @brief async commit, only applicable to Rollup SMA
 *
 * @param pSma
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>smaPrepareAsyncCommit</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdProcessRSmaAsyncPreCommitImpl</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief async commit, only applicable to Rollup SMA
 *
 * @param pSma
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>smaCommit</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SCommitInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdProcessRSmaAsyncCommitImpl</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief async commit, only applicable to Rollup SMA
 *
 * @param pSma
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>smaPostCommit</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>tdProcessRSmaAsyncPostCommitImpl</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief prepare rsma1/2, and set rsma trigger stat active
 *
 * @param pSma
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>smaBegin</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>tsdbBegin</name><argument_list>(<argument><expr><call><name>VND_RSMA1</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to begin rsma1 since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>tsdbBegin</name><argument_list>(<argument><expr><call><name>VND_RSMA2</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to begin rsma2 since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set trigger stat</comment>
  <decl_stmt><decl><type><name>SSmaEnv</name> <modifier>*</modifier></type><name>pSmaEnv</name> <init>= <expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pSmaEnv</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pRSmaStat</name> <init>= <expr><operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pSmaEnv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>     <name>rsmaTriggerStat</name> <init>=
      <expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><call><name>RSMA_TRIGGER_STAT</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_PAUSED</name></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_ACTIVE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name>rsmaTriggerStat</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TASK_TRIGGER_STAT_PAUSED</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma trigger stat from paused to active"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <case>case <expr><name>TASK_TRIGGER_STAT_INIT</name></expr>:</case> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><call><name>RSMA_TRIGGER_STAT</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma trigger stat from init to active"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
    <default>default:</default> <block>{<block_content>
      <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><call><name>RSMA_TRIGGER_STAT</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_ACTIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma trigger stat %"</literal> <name>PRIi8</name> <literal type="string">" is unexpected"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rsmaTriggerStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block>
  </block_content>}</block></switch>
<label><name>_exit</name>:</label>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>smaFinishCommit</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>VND_RSMA1</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name> <operator>=</operator> <call><name>tsdbFinishCommit</name><argument_list>(<argument><expr><call><name>VND_RSMA1</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to finish commit tsdb rsma1 since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>VND_RSMA2</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name> <operator>=</operator> <call><name>tsdbFinishCommit</name><argument_list>(<argument><expr><call><name>VND_RSMA2</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to finish commit tsdb rsma2 since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
<label><name>_exit</name>:</label>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="block" format="doxygen">/**
 * @brief pre-commit for rollup sma(sync commit).
 *  1) set trigger stat of rsma timer TASK_TRIGGER_STAT_PAUSED.
 *  2) wait for all triggered fetch tasks to finish
 *  3) perform persist task for qTaskInfo
 *
 * @param pSma
 * @return int32_t
 */</comment>
static int32_t tdProcessRSmaSyncPreCommitImpl(SSma *pSma) {
  SSmaEnv *pSmaEnv = SMA_RSMA_ENV(pSma);
  if (!pSmaEnv) {
    return TSDB_CODE_SUCCESS;
  }

  SSmaStat  *pStat = SMA_ENV_STAT(pSmaEnv);
  SRSmaStat *pRSmaStat = SMA_STAT_RSMA(pStat);

  <comment type="line">// step 1: set rsma stat paused</comment>
  atomic_store_8(RSMA_TRIGGER_STAT(pRSmaStat), TASK_TRIGGER_STAT_PAUSED);

  <comment type="line">// step 2: wait for all triggered fetch tasks to finish</comment>
  int32_t nLoops = 0;
  while (1) {
    if (T_REF_VAL_GET(pStat) == 0) {
      smaDebug("vgId:%d, rsma fetch tasks are all finished", SMA_VID(pSma));
      break;
    } else {
      smaDebug("vgId:%d, rsma fetch tasks are not all finished yet", SMA_VID(pSma));
    }
    ++nLoops;
    if (nLoops &gt; 1000) {
      sched_yield();
      nLoops = 0;
    }
  }

  <comment type="line">// step 3: perform persist task for qTaskInfo</comment>
  pRSmaStat-&gt;commitAppliedVer = pSma-&gt;pVnode-&gt;state.applied;
  tdRSmaPersistExecImpl(pRSmaStat, RSMA_INFO_HASH(pRSmaStat));

  smaDebug("vgId:%d, rsma pre commit success", SMA_VID(pSma));

  return TSDB_CODE_SUCCESS;
}

<comment type="block" format="doxygen">/**
 * @brief commit for rollup sma
 *
 * @param pSma
 * @return int32_t
 */</comment>
static int32_t tdProcessRSmaSyncCommitImpl(SSma *pSma) {
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  SSmaEnv *pSmaEnv = SMA_RSMA_ENV(pSma);
  if (!pSmaEnv) {
    return TSDB_CODE_SUCCESS;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  return TSDB_CODE_SUCCESS;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="line">// SQTaskFile ======================================================</comment>

<comment type="block" format="doxygen">/**
 * @brief At most time, there is only one qtaskinfo file committed latest in aTaskFile. Sometimes, there would be
 * multiple qtaskinfo files supporting snapshot replication.
 *
 * @param pSma
 * @param pStat
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdUpdateQTaskInfoFiles</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pStat</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name>  <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaFS</name> <modifier>*</modifier></type><name>pFS</name> <init>= <expr><call><name>RSMA_FS</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>committed</name> <init>= <expr><name><name>pStat</name><operator>-&gt;</operator><name>commitAppliedVer</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>fsMaxVer</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>qTaskInfoFullName</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><call><name>RSMA_FS_LOCK</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aQTaskInf</name></name></expr></argument>)</argument_list></call></expr>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SQTaskFile</name> <modifier>*</modifier></type><name>pTaskF</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aQTaskInf</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>oldVal</name> <init>= <expr><call><name>atomic_fetch_sub_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTaskF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>oldVal</name> <operator>&lt;=</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pTaskF</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <name>committed</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tdRSmaQTaskInfoGetFullName</name><argument_list>(<argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTaskF</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>smaWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cleanup qinf, committed %"</literal> <name>PRIi64</name> <literal type="string">", failed to remove %s since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>committed</name></expr></argument>,
                <argument><expr><name>qTaskInfoFullName</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, cleanup qinf, committed %"</literal> <name>PRIi64</name> <literal type="string">", success to remove %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>committed</name></expr></argument>,
                 <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aQTaskInf</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aQTaskInf</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>fsMaxVer</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>SQTaskFile</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aQTaskInf</name></name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>version</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>fsMaxVer</name> <operator>&lt;</operator> <name>committed</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdRSmaQTaskInfoGetFullName</name><argument_list>(<argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>committed</name></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>qTaskInfoFullName</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SQTaskFile</name></type> <name>qFile</name> <init>= <expr><block>{<expr><operator>.</operator><name>nRef</name> <operator>=</operator> <literal type="number">1</literal></expr>, <expr><operator>.</operator><name>padding</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>committed</name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aQTaskInf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>qFile</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><call><name>RSMA_FS_LOCK</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, update qinf, no need as committed %"</literal> <name>PRIi64</name> <literal type="string">" not larger than fsMaxVer %"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name>committed</name></expr></argument>, <argument><expr><name>fsMaxVer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><call><name>RSMA_FS_LOCK</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
<comment type="block" format="doxygen">/**
 * @brief post-commit for rollup sma
 *  1) clean up the outdated qtaskinfo files
 *
 * @param pSma
 * @return int32_t
 */</comment>
static int32_t tdProcessRSmaSyncPostCommitImpl(SSma *pSma) {
  SVnode *pVnode = pSma-&gt;pVnode;
  if (!VND_IS_RSMA(pVnode)) {
    return TSDB_CODE_SUCCESS;
  }

  SRSmaStat *pRSmaStat = SMA_RSMA_STAT(pSma);

  tdUpdateQTaskInfoFiles(pSma, pRSmaStat);

  return TSDB_CODE_SUCCESS;
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block" format="doxygen">/**
 * @brief Rsma async commit implementation(only do some necessary light weighted task)
 *  1) set rsma stat TASK_TRIGGER_STAT_PAUSED
 *  2) Wait all running fetch task finish to fetch and put submitMsg into level 2/3 wQueue(blocking level 1 write)
 *
 * @param pSma
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessRSmaAsyncPreCommitImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmaEnv</name> <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pEnv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSmaStat</name>  <modifier>*</modifier></type><name>pStat</name> <init>= <expr><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pRSmaStat</name> <init>= <expr><call><name>SMA_STAT_RSMA</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>nLoops</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// step 1: set rsma stat</comment>
  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><call><name>RSMA_TRIGGER_STAT</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TASK_TRIGGER_STAT_PAUSED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><call><name>RSMA_COMMIT_STAT</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>nLoops</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nLoops</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>pRSmaStat</name><operator>-&gt;</operator><name>commitAppliedVer</name></name> <operator>=</operator> <name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRSmaStat</name><operator>-&gt;</operator><name>commitAppliedVer</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// step 2: wait for all triggered fetch tasks to finish</comment>
  <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>pStat</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma commit, fetch tasks are all finished"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>smaDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma commit, fetch tasks are not all finished yet"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><operator>++</operator><name>nLoops</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nLoops</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="block" format="doxygen">/**
   * @brief step 3: commit should wait for all SubmitReq in buffer be consumed
   *  1) This is high cost task and should not put in asyncPreCommit originally.
   *  2) But, if put in asyncCommit, would trigger taskInfo cloning frequently.
   */</comment>
  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma commit, wait for all items to be consumed, TID:%p"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>nBufItems</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>nLoops</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nLoops</name> <operator>&gt;</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nLoops</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma commit, all items are consumed, TID:%p"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdRSmaPersistExecImpl</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>, <argument><expr><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>smaInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma commit, operator state committed, TID:%p"</literal></expr></argument>, <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><call><name>taosGetSelfPthreadId</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>  <comment type="line">// consuming task of qTaskInfo clone </comment>
  <comment type="line">// step 4:  swap queue/qall and iQueue/iQall</comment>
  <comment type="line">// lock</comment>
  taosWLockLatch(SMA_ENV_LOCK(pEnv));

  ASSERT(RSMA_INFO_HASH(pRSmaStat));

  void *pIter = taosHashIterate(RSMA_INFO_HASH(pRSmaStat), NULL);

  while (pIter) {
    SRSmaInfo *pInfo = *(SRSmaInfo **)pIter;
    TSWAP(pInfo-&gt;iQall, pInfo-&gt;qall);
    TSWAP(pInfo-&gt;iQueue, pInfo-&gt;queue);
    TSWAP(pInfo-&gt;iTaskInfo[0], pInfo-&gt;taskInfo[0]);
    TSWAP(pInfo-&gt;iTaskInfo[1], pInfo-&gt;taskInfo[1]);
    pIter = taosHashIterate(RSMA_INFO_HASH(pRSmaStat), pIter);
  }

  <comment type="line">// unlock</comment>
  taosWUnLockLatch(SMA_ENV_LOCK(pEnv));
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// all rsma results are written completely</comment>
  <decl_stmt><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pTsdb</name> <operator>=</operator> <call><name>VND_RSMA1</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tsdbPrepareCommit</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pTsdb</name> <operator>=</operator> <call><name>VND_RSMA2</name><argument_list>(<argument><expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tsdbPrepareCommit</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief commit for rollup sma
 *
 * @param pSma
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessRSmaAsyncCommitImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>, <parameter><decl><type><name>SCommitInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pSma</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  SRSmaStat *pRSmaStat = (SRSmaStat *)SMA_ENV_STAT(pSmaEnv);

  <comment type="line">// perform persist task for qTaskInfo operator</comment>
  if (tdRSmaPersistExecImpl(pRSmaStat, RSMA_INFO_HASH(pRSmaStat)) &lt; 0) {
    return TSDB_CODE_FAILED;
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>tsdbCommit</name><argument_list>(<argument><expr><call><name>VND_RSMA1</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to commit tsdb rsma1 since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>tsdbCommit</name><argument_list>(<argument><expr><call><name>VND_RSMA2</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>smaError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to commit tsdb rsma2 since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
<label><name>_exit</name>:</label>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Migrate rsmaInfo from iRsmaInfo to rsmaInfo if rsma infoHash not empty.
 *
 * @param pSma
 * @return int32_t
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tdProcessRSmaAsyncPostCommitImpl</name><parameter_list>(<parameter><decl><type><name>SSma</name> <modifier>*</modifier></type><name>pSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSmaEnv</name> <modifier>*</modifier></type><name>pEnv</name> <init>= <expr><call><name>SMA_RSMA_ENV</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pEnv</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SRSmaStat</name> <modifier>*</modifier></type><name>pRSmaStat</name> <init>= <expr><operator>(</operator><name>SRSmaStat</name> <operator>*</operator><operator>)</operator><call><name>SMA_ENV_STAT</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// step 1: merge qTaskInfo and iQTaskInfo</comment>
  <comment type="line">// lock</comment>
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRSmaStat</name><operator>-&gt;</operator><name>delFlag</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><call><name>SMA_ENV_LOCK</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>pIter</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>tb_uid_t</name>  <modifier>*</modifier></type><name>pSuid</name> <init>= <expr><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><call><name>taosHashGetKey</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SRSmaInfo</name> <modifier>*</modifier></type><name>pRSmaInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SRSmaInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>pIter</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>RSMA_INFO_IS_DEL</name><argument_list>(<argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>refVal</name> <init>= <expr><call><name>T_REF_VAL_GET</name><argument_list>(<argument><expr><name>pRSmaInfo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>refVal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosHashRemove</name><argument_list>(<argument><expr><call><name>RSMA_INFO_HASH</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pSuid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pSuid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>smaDebug</name><argument_list>(
              <argument><expr><literal type="string">"vgId:%d, rsma async post commit, not free rsma info since ref is %d although already deleted for "</literal>
              <literal type="string">"table:%"</literal> <name>PRIi64</name></expr></argument>,
              <argument><expr><call><name>SMA_VID</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>refVal</name></expr></argument>, <argument><expr><operator>*</operator><name>pSuid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    if (pRSmaInfo-&gt;taskInfo[0]) {
      if (pRSmaInfo-&gt;iTaskInfo[0]) {
        SRSmaInfo *pRSmaInfo = *(SRSmaInfo **)pRSmaInfo-&gt;iTaskInfo[0];
        tdFreeRSmaInfo(pSma, pRSmaInfo, false);
        pRSmaInfo-&gt;iTaskInfo[0] = NULL;
      }
    } else {
      TSWAP(pRSmaInfo-&gt;taskInfo[0], pRSmaInfo-&gt;iTaskInfo[0]);
    }

    taosHashPut(RSMA_INFO_HASH(pRSmaStat), pSuid, sizeof(tb_uid_t), pIter, sizeof(pIter));
    smaDebug("vgId:%d, rsma async post commit, migrated from iRsmaInfoHash for table:%" PRIi64, SMA_VID(pSma), *pSuid);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></while>

    <comment type="line">// unlock</comment>
    <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><call><name>SMA_ENV_LOCK</name><argument_list>(<argument><expr><name>pEnv</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tdUpdateQTaskInfoFiles</name><argument_list>(<argument><expr><name>pSma</name></expr></argument>, <argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>atomic_store_8</name><argument_list>(<argument><expr><call><name>RSMA_COMMIT_STAT</name><argument_list>(<argument><expr><name>pRSmaStat</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>
</unit>
