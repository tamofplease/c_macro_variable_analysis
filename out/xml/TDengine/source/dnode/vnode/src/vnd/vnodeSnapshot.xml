<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/vnd/vnodeSnapshot.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnd.h"</cpp:file></cpp:include>

<comment type="line">// SVSnapReader ========================================================</comment>
<struct>struct <name>SVSnapReader</name> <block>{
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ever</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>index</name></decl>;</decl_stmt>
  <comment type="line">// meta</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>           <name>metaDone</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaSnapReader</name> <modifier>*</modifier></type><name>pMetaReader</name></decl>;</decl_stmt>
  <comment type="line">// tsdb</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>           <name>tsdbDone</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbSnapReader</name> <modifier>*</modifier></type><name>pTsdbReader</name></decl>;</decl_stmt>
  <comment type="line">// tq</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>           <name>tqHandleDone</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqSnapReader</name>   <modifier>*</modifier></type><name>pTqSnapReader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>           <name>tqOffsetDone</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqOffsetReader</name> <modifier>*</modifier></type><name>pTqOffsetReader</name></decl>;</decl_stmt>
  <comment type="line">// stream</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>              <name>streamTaskDone</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamTaskReader</name>  <modifier>*</modifier></type><name>pStreamTaskReader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>              <name>streamStateDone</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamStateReader</name> <modifier>*</modifier></type><name>pStreamStateReader</name></decl>;</decl_stmt>
  <comment type="line">// rsma</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>           <name>rsmaDone</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRSmaSnapReader</name> <modifier>*</modifier></type><name>pRsmaReader</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int32_t</name></type> <name>vnodeSnapReaderOpen</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ever</name></decl></parameter>, <parameter><decl><type><name>SVSnapReader</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVSnapReader</name> <modifier>*</modifier></type><name>pReader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pReader</name> <operator>=</operator> <operator>(</operator><name>SVSnapReader</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnode</name></name> <operator>=</operator> <name>pVnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name>sver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name> <operator>=</operator> <name>ever</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot reader opened, sver:%"</literal> <name>PRId64</name> <literal type="string">" ever:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sver</name></expr></argument>, <argument><expr><name>ever</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>pReader</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot reader open failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeSnapReaderClose</name><parameter_list>(<parameter><decl><type><name>SVSnapReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pRsmaReader</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rsmaSnapReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pRsmaReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdbReader</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbSnapReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pTsdbReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pMetaReader</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaSnapReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pMetaReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot reader closed"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeSnapRead</name><parameter_list>(<parameter><decl><type><name>SVSnapReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>nData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// META ==============</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>metaDone</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// open reader if not</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pMetaReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaSnapReaderOpen</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pMetaReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaSnapRead</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMetaReader</name></name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>metaDone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaSnapReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pMetaReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// TSDB ==============</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>tsdbDone</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// open if not</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdbReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapReaderOpen</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr></argument>, <argument><expr><name>SNAP_DATA_TSDB</name></expr></argument>,
                                <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pTsdbReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapRead</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdbReader</name></name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>tsdbDone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pTsdbReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// TQ ================</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>tqHandleDone</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pTqSnapReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tqSnapReaderOpen</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pTqSnapReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tqSnapRead</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTqSnapReader</name></name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>tqHandleDone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tqSnapReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pTqSnapReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>tqOffsetDone</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pTqOffsetReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tqOffsetReaderOpen</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pTqOffsetReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tqOffsetSnapRead</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTqOffsetReader</name></name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>tqOffsetDone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tqOffsetReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pTqOffsetReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// STREAM ============</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>streamTaskDone</name></name></expr>)</condition> <block>{<block_content>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>streamStateDone</name></name></expr>)</condition> <block>{<block_content>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// RSMA ==============</comment>
  <if_stmt><if>if <condition>(<expr><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>rsmaDone</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// open if not</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pRsmaReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rsmaSnapReaderOpen</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pRsmaReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rsmaSnapRead</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pRsmaReader</name></name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>rsmaDone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rsmaSnapReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pRsmaReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>nData</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSnapDataHdr</name> <modifier>*</modifier></type><name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>ppData</name><operator>)</operator></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>index</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>nData</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot read data,index:%"</literal> <name>PRId64</name> <literal type="string">" type:%d nData:%d "</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><operator>*</operator><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot read data end, index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot read failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SVSnapWriter ========================================================</comment>
<struct>struct <name>SVSnapWriter</name> <block>{
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ever</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>commitID</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>index</name></decl>;</decl_stmt>
  <comment type="line">// meta</comment>
  <decl_stmt><decl><type><name>SMetaSnapWriter</name> <modifier>*</modifier></type><name>pMetaSnapWriter</name></decl>;</decl_stmt>
  <comment type="line">// tsdb</comment>
  <decl_stmt><decl><type><name>STsdbSnapWriter</name> <modifier>*</modifier></type><name>pTsdbSnapWriter</name></decl>;</decl_stmt>
  <comment type="line">// tq</comment>
  <decl_stmt><decl><type><name>STqSnapWriter</name>   <modifier>*</modifier></type><name>pTqSnapWriter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STqOffsetWriter</name> <modifier>*</modifier></type><name>pTqOffsetWriter</name></decl>;</decl_stmt>
  <comment type="line">// stream</comment>
  <decl_stmt><decl><type><name>SStreamTaskWriter</name>  <modifier>*</modifier></type><name>pStreamTaskWriter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SStreamStateWriter</name> <modifier>*</modifier></type><name>pStreamStateWriter</name></decl>;</decl_stmt>
  <comment type="line">// rsma</comment>
  <decl_stmt><decl><type><name>SRSmaSnapWriter</name> <modifier>*</modifier></type><name>pRsmaSnapWriter</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int32_t</name></type> <name>vnodeSnapWriterOpen</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ever</name></decl></parameter>, <parameter><decl><type><name>SVSnapWriter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVSnapWriter</name> <modifier>*</modifier></type><name>pWriter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pWriter</name> <operator>=</operator> <operator>(</operator><name>SVSnapWriter</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pWriter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWriter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pVnode</name></name> <operator>=</operator> <name>pVnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name>sver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name> <operator>=</operator> <name>ever</name></expr>;</expr_stmt>

  <comment type="line">// commit it</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vnodeSyncCommit</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// inc commit ID</comment>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>commitID</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>commitID</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>commitID</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot writer opened, sver:%"</literal> <name>PRId64</name> <literal type="string">" ever:%"</literal> <name>PRId64</name> <literal type="string">" commit id:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>sver</name></expr></argument>, <argument><expr><name>ever</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>pWriter</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot writer open failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeSnapWriterClose</name><parameter_list>(<parameter><decl><type><name>SVSnapWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>rollback</name></decl></parameter>, <parameter><decl><type><name>SSnapshot</name> <modifier>*</modifier></type><name>pSnapshot</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pMetaSnapWriter</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaSnapWriterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pMetaSnapWriter</name></name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdbSnapWriter</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdbSnapWriter</name></name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pRsmaSnapWriter</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rsmaSnapWriterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pRsmaSnapWriter</name></name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rollback</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnodeInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>       <name><name>dir</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>committed</name></name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applyTerm</name></name> <operator>=</operator> <name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyTerm</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>commitTerm</name></name> <operator>=</operator> <name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyTerm</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>config</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>state</name><operator>.</operator><name>committed</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>state</name><operator>.</operator><name>commitTerm</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applyTerm</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>state</name><operator>.</operator><name>commitID</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>commitID</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vnodeSaveInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vnodeCommitInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>vnodeBegin</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot writer closed, rollback:%d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot writer close failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeSnapWrite</name><parameter_list>(<parameter><decl><type><name>SVSnapWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSnapDataHdr</name> <modifier>*</modifier></type><name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name> <operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name>       <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>index</name></name> <operator>==</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>index</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <name><name>pHdr</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot write data, index:%"</literal> <name>PRId64</name> <literal type="string">" type:%d nData:%d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>index</name></name></expr></argument>,
        <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SNAP_DATA_META</name></expr>:</case> <block>{<block_content>
      <comment type="line">// meta</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pMetaSnapWriter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaSnapWriterOpen</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>sver</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pMetaSnapWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaSnapWrite</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pMetaSnapWriter</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>SNAP_DATA_TSDB</name></expr>:</case>
    <case>case <expr><name>SNAP_DATA_DEL</name></expr>:</case> <block>{<block_content>
      <comment type="line">// tsdb</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdbSnapWriter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriterOpen</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>sver</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdbSnapWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWrite</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdbSnapWriter</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>SNAP_DATA_TQ_HANDLE</name></expr>:</case> <block>{<block_content>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>SNAP_DATA_TQ_OFFSET</name></expr>:</case> <block>{<block_content>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>SNAP_DATA_STREAM_TASK</name></expr>:</case> <block>{<block_content>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>SNAP_DATA_STREAM_STATE</name></expr>:</case> <block>{<block_content>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>SNAP_DATA_RSMA1</name></expr>:</case>
    <case>case <expr><name>SNAP_DATA_RSMA2</name></expr>:</case>
    <case>case <expr><name>SNAP_DATA_QTASK</name></expr>:</case> <block>{<block_content>
      <comment type="line">// rsma1/rsma2/qtask for rsma</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pRsmaSnapWriter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rsmaSnapWriterOpen</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>sver</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pRsmaSnapWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>rsmaSnapWrite</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pRsmaSnapWriter</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block> <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot write failed since %s, index:%"</literal> <name>PRId64</name> <literal type="string">" type:%d nData:%d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
