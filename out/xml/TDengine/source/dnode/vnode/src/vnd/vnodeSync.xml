<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/vnd/vnodeSync.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BATCH_ENABLE</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>bool</name></type> <name>vnodeIsMsgWeak</name><parameter_list>(<parameter><decl><type><name>tmsg_t</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name>false</name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vnodeWaitBlockMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p wait block, type:%s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>syncSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vnodeWaitBlockMsgOld</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>vnodeIsMsgBlock</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p wait block, type:%s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>syncSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>inline</specifier> <name>void</name></type> <name>vnodePostBlockMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>vnodeIsMsgBlock</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p post block, type:%s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>syncSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeRedirectRpcMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SEpSet</name></type> <name>newEpSet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>syncGetRetryEpSet</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newEpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p is redirect since not leader, numOfEps:%d inUse:%d"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>,
          <argument><expr><name><name>newEpSet</name><operator>.</operator><name>numOfEps</name></name></expr></argument>, <argument><expr><name><name>newEpSet</name><operator>.</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>newEpSet</name><operator>.</operator><name>numOfEps</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p redirect:%d ep:%s:%u"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>newEpSet</name><operator>.</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>fqdn</name></expr></argument>,
            <argument><expr><name><name>newEpSet</name><operator>.</operator><name>eps</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>hasEpSet</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>, <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>, <expr><operator>.</operator><name>msgType</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>+</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>contLen</name> <init>= <expr><call><name>tSerializeSEpSet</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>newEpSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>contLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tSerializeSEpSet</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>newEpSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>contLen</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <specifier>inline</specifier></type> <name>vnodeHandleWriteMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessWriteMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to apply right now since %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vnodeHandleProposeError</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_SYN_RESTORING</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vnodeRedirectRpcMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to propose since %s, code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name>code</name></expr>, <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>BATCH_ENABLE</name></expr></cpp:if>

<function><type><specifier>static</specifier> <name>void</name> <specifier>inline</specifier></type> <name>vnodeProposeBatchMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier><modifier>*</modifier></type><name>pMsgArr</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>pIsWeakArr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>arrSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>arrSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pLastMsg</name> <init>= <expr><name><name>pMsgArr</name><index>[<expr><operator>*</operator><name>arrSize</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncProposeBatch</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>, <argument><expr><name>pMsgArr</name></expr></argument>, <argument><expr><name>pIsWeakArr</name></expr></argument>, <argument><expr><operator>*</operator><name>arrSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>wait</name> <init>= <expr><operator>(</operator><name>code</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vnodeIsBlockMsg</name><argument_list>(<argument><expr><name><name>pLastMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wait</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>arrSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>vnodeHandleWriteMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>pMsgArr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>arrSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>vnodeHandleProposeError</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>pMsgArr</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>wait</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vnodeWaitBlockMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pLastMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>pLastMsg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <operator>*</operator><name>arrSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SRpcMsg</name>        <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name><name>pMsgArr</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p is freed, code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>arrSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeProposeWriteMsg</name><parameter_list>(<parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfMsgs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name>   <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>vgId</name> <init>= <expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name>  <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>arrayPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name> <modifier>*</modifier><modifier>*</modifier></type><name>pMsgArr</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfMsgs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SRpcMsg</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name>     <modifier>*</modifier></type><name>pIsWeakArr</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfMsgs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, get %d msgs from vnode-write queue"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>numOfMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>msg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>msg</name> <operator>&lt;</operator> <name>numOfMsgs</name></expr>;</condition> <incr><expr><name>msg</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pMsg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>isWeak</name> <init>= <expr><call><name>vnodeIsMsgWeak</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>isBlock</name> <init>= <expr><call><name>vnodeIsMsgBlock</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p get from vnode-write queue, weak:%d block:%d msg:%d:%d pos:%d, handle:%p"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>,
            <argument><expr><name>isWeak</name></expr></argument>, <argument><expr><name>isBlock</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>numOfMsgs</name></expr></argument>, <argument><expr><name>arrayPos</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pVnode</name><operator>-&gt;</operator><name>restored</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to process since restore not finished"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_RESTORING</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>vnodeHandleProposeError</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>TSDB_CODE_SYN_RESTORING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pMsgArr</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pIsWeakArr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to process since out of memory"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>vnodeHandleProposeError</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vnodePreProcessWriteMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to pre-process since %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>isBlock</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vnodeProposeBatchMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsgArr</name></expr></argument>, <argument><expr><name>pIsWeakArr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arrayPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pMsgArr</name><index>[<expr><name>arrayPos</name></expr>]</index></name> <operator>=</operator> <name>pMsg</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIsWeakArr</name><index>[<expr><name>arrayPos</name></expr>]</index></name> <operator>=</operator> <name>isWeak</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>arrayPos</name><operator>++</operator></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>isBlock</name> <operator>||</operator> <name>msg</name> <operator>==</operator> <name>numOfMsgs</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vnodeProposeBatchMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsgArr</name></expr></argument>, <argument><expr><name>pIsWeakArr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>arrayPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMsgArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pIsWeakArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

<function><type><specifier>static</specifier> <name>int32_t</name> <specifier>inline</specifier></type> <name>vnodeProposeMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isWeak</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncPropose</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>isWeak</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>wait</name> <init>= <expr><operator>(</operator><name>code</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>vnodeIsMsgBlock</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>wait</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vnodeHandleWriteMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>vnodeHandleProposeError</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>wait</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>vnodeWaitBlockMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeProposeWriteMsg</name><parameter_list>(<parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfMsgs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name>  <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>vgId</name> <init>= <expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, get %d msgs from vnode-write queue"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>numOfMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>msg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>msg</name> <operator>&lt;</operator> <name>numOfMsgs</name></expr>;</condition> <incr><expr><name>msg</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pMsg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>isWeak</name> <init>= <expr><call><name>vnodeIsMsgWeak</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p get from vnode-write queue, weak:%d block:%d msg:%d:%d, handle:%p"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>isWeak</name></expr></argument>,
            <argument><expr><call><name>vnodeIsMsgBlock</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><name>numOfMsgs</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pVnode</name><operator>-&gt;</operator><name>restored</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to process since restore not finished"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>vnodeHandleProposeError</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>TSDB_CODE_SYN_RESTORING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vnodePreProcessWriteMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to pre-process since %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>vnodeHandleProposeError</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vnodeProposeMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>isWeak</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p is freed, code:0x%x"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>vnodeApplyWriteMsg</name><parameter_list>(<parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>STaosQall</name> <modifier>*</modifier></type><name>qall</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfMsgs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name>  <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>ahandle</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>vgId</name> <init>= <expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfMsgs</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosGetQitem</name><argument_list>(<argument><expr><name>qall</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>pMsg</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p get from vnode-apply queue, type:%s handle:%p index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>,
            <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>vnodeIsMsgBlock</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, blocking msg obtained from apply-queue. index:%"</literal> <name>PRId64</name> <literal type="string">", term: %"</literal> <name>PRId64</name> <literal type="string">", type: %s"</literal></expr></argument>, <argument><expr><name>vgId</name></expr></argument>,
             <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyIndex</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyTerm</name></name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SRpcMsg</name></type> <name>rsp</name> <init>= <expr><block>{<expr><operator>.</operator><name>code</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>code</name></name></expr>, <expr><operator>.</operator><name>info</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>.</operator><name>code</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessWriteMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>vGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p failed to apply since %s, index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>vnodePostBlockMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>.</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p is freed, code:0x%x index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>vgId</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name><name>rsp</name><operator>.</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFreeQitem</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeProcessSyncMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync msg:%p will be processed, type:%s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>syncProcessMsg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vGError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to process sync msg:%p type:%s since %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>,
            <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSyncEqCtrlMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMsgCb</name> <modifier>*</modifier></type><name>msgcb</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>msgcb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>msgcb</name><operator>-&gt;</operator><name>putToQueueFp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><name>msgcb</name></expr></argument>, <argument><expr><name>SYNC_CTRL_QUEUE</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSyncEqMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SMsgCb</name> <modifier>*</modifier></type><name>msgcb</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMsg</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>msgcb</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>msgcb</name><operator>-&gt;</operator><name>putToQueueFp</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><name>msgcb</name></expr></argument>, <argument><expr><name>SYNC_QUEUE</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSyncSendMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SEpSet</name> <modifier>*</modifier></type><name>pEpSet</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tmsgSendReq</name><argument_list>(<argument><expr><name>pEpSet</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSyncGetSnapshot</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>SSnapshot</name> <modifier>*</modifier></type><name>pSnapshot</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>vnodeGetSnapshot</name><argument_list>(<argument><expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name>pSnapshot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSyncApplyMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SFsmCbMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyIndex</name></name> <operator>=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>index</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyTerm</name></name> <operator>=</operator> <name><name>pMeta</name><operator>-&gt;</operator><name>term</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>STraceId</name> <modifier>*</modifier></type><name>trace</name> <init>= <expr><operator>&amp;</operator><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>traceId</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vGTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, commit-cb is excuted, fsm:%p, index:%"</literal> <name>PRId64</name> <literal type="string">", term:%"</literal> <name>PRIu64</name> <literal type="string">", msg-index:%"</literal> <name>PRId64</name>
          <literal type="string">", weak:%d, code:%d, state:%d %s, type:%s"</literal></expr></argument>,
          <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pFsm</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>term</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyIndex</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>isWeak</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>code</name></name></expr></argument>,
          <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tmsgPutToQueue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name>APPLY_QUEUE</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSyncCommitMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SFsmCbMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>vnodeSyncApplyMsg</name><argument_list>(<argument><expr><name>pFsm</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSyncPreCommitMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SFsmCbMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pMeta</name><operator>-&gt;</operator><name>isWeak</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>vnodeSyncApplyMsg</name><argument_list>(<argument><expr><name>pFsm</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vnodeSyncRollBackMsg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SFsmCbMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rollback-cb is excuted, fsm:%p, index:%"</literal> <name>PRId64</name> <literal type="string">", weak:%d, code:%d, state:%d %s, type:%s"</literal></expr></argument>,
         <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pFsm</name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>isWeak</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>state</name></name></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>pMeta</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSnapshotStartRead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pParam</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name>         <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSnapshotParam</name> <modifier>*</modifier></type><name>pSnapshotParam</name> <init>= <expr><name>pParam</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vnodeSnapReaderOpen</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>pSnapshotParam</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>pSnapshotParam</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SVSnapReader</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ppReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSnapshotStopRead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vnodeSnapReaderClose</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSnapshotDoRead</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vnodeSnapRead</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ppBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSnapshotStartWrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pParam</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name>         <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSnapshotParam</name> <modifier>*</modifier></type><name>pSnapshotParam</name> <init>= <expr><name>pParam</name></expr></init></decl>;</decl_stmt>

  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>itemSize</name> <init>= <expr><call><name>tmsgGetQueueSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>APPLY_QUEUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>itemSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start write vnode snapshot since apply queue is empty"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, write vnode snapshot later since %d items in apply queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>itemSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vnodeSnapWriterOpen</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>pSnapshotParam</name><operator>-&gt;</operator><name>start</name></name></expr></argument>, <argument><expr><name><name>pSnapshotParam</name><operator>-&gt;</operator><name>end</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SVSnapWriter</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>ppWriter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSnapshotStopWrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isApply</name></decl></parameter>, <parameter><decl><type><name>SSnapshot</name> <modifier>*</modifier></type><name>pSnapshot</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, stop write vnode snapshot, apply:%d, index:%"</literal> <name>PRId64</name> <literal type="string">" term:%"</literal> <name>PRIu64</name> <literal type="string">" config:%"</literal> <name>PRId64</name></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>isApply</name></expr></argument>, <argument><expr><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyIndex</name></name></expr></argument>, <argument><expr><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastApplyTerm</name></name></expr></argument>, <argument><expr><name><name>pSnapshot</name><operator>-&gt;</operator><name>lastConfigIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vnodeSnapWriterClose</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><operator>!</operator><name>isApply</name></expr></argument>, <argument><expr><name>pSnapshot</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, apply vnode snapshot finished, code:0x%x"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeSnapshotDoWrite</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, continue write vnode snapshot, len:%d"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>vnodeSnapWrite</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, continue write vnode snapshot finished, len:%d"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vnodeRestoreFinish</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>itemSize</name> <init>= <expr><call><name>tmsgGetQueueSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>APPLY_QUEUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>itemSize</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, apply queue is empty, restore finish"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, restore not finish since %d items in apply queue"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>itemSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>true</name></expr>)</condition>;</do>

  <expr_stmt><expr><call><name>walApplyVer</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>restored</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, sync restore finished"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vnodeBecomeFollower</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, become follower"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, become follower and post block"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>syncSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vnodeBecomeLeader</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, become leader"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>vnodeApplyQueueEmpty</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>qsizeFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>itemSize</name> <init>= <expr><call><name>tmsgGetQueueSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>APPLY_QUEUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><operator>(</operator><name>itemSize</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeApplyQueueItems</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name><operator>.</operator><name>qsizeFp</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>itemSize</name> <init>= <expr><call><name>tmsgGetQueueSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>APPLY_QUEUE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>itemSize</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSyncFSM</name> <modifier>*</modifier></type><name>vnodeSyncMakeFsm</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncFSM</name> <modifier>*</modifier></type><name>pFsm</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSyncFSM</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>pVnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpCommitCb</name></name> <operator>=</operator> <name>vnodeSyncCommitMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpPreCommitCb</name></name> <operator>=</operator> <name>vnodeSyncPreCommitMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpRollBackCb</name></name> <operator>=</operator> <name>vnodeSyncRollBackMsg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpGetSnapshotInfo</name></name> <operator>=</operator> <name>vnodeSyncGetSnapshot</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpRestoreFinishCb</name></name> <operator>=</operator> <name>vnodeRestoreFinish</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpLeaderTransferCb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpApplyQueueEmptyCb</name></name> <operator>=</operator> <name>vnodeApplyQueueEmpty</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpApplyQueueItems</name></name> <operator>=</operator> <name>vnodeApplyQueueItems</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpBecomeLeaderCb</name></name> <operator>=</operator> <name>vnodeBecomeLeader</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpBecomeFollowerCb</name></name> <operator>=</operator> <name>vnodeBecomeFollower</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpReConfigCb</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStartRead</name></name> <operator>=</operator> <name>vnodeSnapshotStartRead</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopRead</name></name> <operator>=</operator> <name>vnodeSnapshotStopRead</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotDoRead</name></name> <operator>=</operator> <name>vnodeSnapshotDoRead</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStartWrite</name></name> <operator>=</operator> <name>vnodeSnapshotStartWrite</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotStopWrite</name></name> <operator>=</operator> <name>vnodeSnapshotStopWrite</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>FpSnapshotDoWrite</name></name> <operator>=</operator> <name>vnodeSnapshotDoWrite</name></expr>;</expr_stmt>

  <return>return <expr><name>pFsm</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeSyncOpen</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncInfo</name></type> <name>syncInfo</name> <init>= <expr><block>{
      <expr><operator>.</operator><name>snapshotStrategy</name> <operator>=</operator> <name>SYNC_STRATEGY_WAL_FIRST</name></expr>,
      <expr><operator>.</operator><name>batchSize</name> <operator>=</operator> <literal type="number">1</literal></expr>,
      <expr><operator>.</operator><name>vgId</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr>,
      <expr><operator>.</operator><name>syncCfg</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>syncCfg</name></name></expr>,
      <expr><operator>.</operator><name>pWal</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr>,
      <expr><operator>.</operator><name>msgcb</name> <operator>=</operator> <operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr>,
      <expr><operator>.</operator><name>syncSendMSg</name> <operator>=</operator> <name>vnodeSyncSendMsg</name></expr>,
      <expr><operator>.</operator><name>syncEqMsg</name> <operator>=</operator> <name>vnodeSyncEqMsg</name></expr>,
      <expr><operator>.</operator><name>syncEqCtrlMsg</name> <operator>=</operator> <name>vnodeSyncEqCtrlMsg</name></expr>,
      <expr><operator>.</operator><name>pingMs</name> <operator>=</operator> <literal type="number">5000</literal></expr>,
      <expr><operator>.</operator><name>electMs</name> <operator>=</operator> <literal type="number">4000</literal></expr>,
      <expr><operator>.</operator><name>heartbeatMs</name> <operator>=</operator> <literal type="number">700</literal></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>syncInfo</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>syncInfo</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%ssync"</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>syncInfo</name><operator>.</operator><name>pFsm</name></name> <operator>=</operator> <call><name>vnodeSyncMakeFsm</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSyncCfg</name> <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><operator>&amp;</operator><name><name>syncInfo</name><operator>.</operator><name>syncCfg</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to open sync, replica:%d selfIndex:%d"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>myIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SNodeInfo</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><operator>&amp;</operator><name><name>pCfg</name><operator>-&gt;</operator><name>nodeInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, index:%d ep:%s:%u"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodeFqdn</name></name></expr></argument>, <argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>nodePort</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name> <operator>=</operator> <call><name>syncOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>syncInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open sync since %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeSyncStart</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start sync"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>syncStart</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to start sync subsystem since %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeSyncPreClose</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, pre close sync"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncLeaderTransfer</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncPreStop</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, post block after close sync"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>blocked</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>syncSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeSyncClose</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, close sync"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>syncStop</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vnodeIsRoleLeader</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncState</name></type> <name>state</name> <init>= <expr><call><name>syncGetState</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name><name>state</name><operator>.</operator><name>state</name></name> <operator>==</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vnodeIsLeader</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSyncState</name></type> <name>state</name> <init>= <expr><call><name>syncGetState</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode is stopping"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>.</operator><name>state</name></name> <operator>!=</operator> <name>TAOS_SYNC_STATE_LEADER</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_NOT_LEADER</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode not leader, state:%s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><call><name>syncStr</name><argument_list>(<argument><expr><name><name>state</name><operator>.</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>.</operator><name>restored</name></name> <operator>||</operator> <operator>!</operator><name><name>pVnode</name><operator>-&gt;</operator><name>restored</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SYN_RESTORING</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode not restored:%d:%d"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>.</operator><name>restored</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>restored</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>
</unit>
