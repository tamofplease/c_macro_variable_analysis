<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/vnd/vnodeModule.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnd.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>SVnodeTask</name></name></type> <name>SVnodeTask</name>;</typedef>
<struct>struct <name>SVnodeTask</name> <block>{
  <decl_stmt><decl><type><name>SVnodeTask</name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodeTask</name><modifier>*</modifier></type> <name>prev</name></decl>;</decl_stmt>
  <function_decl><type><name>int</name></type> (<modifier>*</modifier><name>execute</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>SVnodeGlobal</name> <block>{
  <decl_stmt><decl><type><name>int8_t</name></type>        <name>init</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>        <name>stop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>           <name>nthreads</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThread</name><modifier>*</modifier></type>     <name>threads</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThreadMutex</name></type> <name>mutex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThreadCond</name></type>  <name>hasTask</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnodeTask</name></type>    <name>queue</name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><name><name>struct</name> <name>SVnodeGlobal</name></name></type> <name>vnodeGlobal</name></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>loop</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><specifier>static</specifier> <name>tsem_t</name></type> <name>canCommit</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vnodeInitCommit</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>canCommit</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function><empty_stmt>;</empty_stmt>
<function><type><name>void</name></type>        <name>vnode_wait_commit</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>canCommit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<function><type><name>void</name></type>        <name>vnode_done_commit</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name>canCommit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeInit</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>nthreads</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>init</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>init</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>init</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadCondInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vnodeGlobal</name><operator>.</operator><name>hasTask</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>vnodeGlobal</name><operator>.</operator><name>stop</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vnodeGlobal</name><operator>.</operator><name>queue</name><operator>.</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>vnodeGlobal</name><operator>.</operator><name>queue</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vnodeGlobal</name><operator>.</operator><name>queue</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>vnodeGlobal</name><operator>.</operator><name>queue</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>vnodeGlobal</name><operator>.</operator><name>nthreads</name></name> <operator>=</operator> <name>nthreads</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vnodeGlobal</name><operator>.</operator><name>threads</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>nthreads</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdThread</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>vnodeGlobal</name><operator>.</operator><name>threads</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"failed to init vnode module since:%s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nthreads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>walInit</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tqInit</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeCleanup</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>init</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>init</name> <operator>=</operator> <call><name>atomic_val_compare_exchange_8</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>init</name></name><operator>)</operator></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>init</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// set stop</comment>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vnodeGlobal</name><operator>.</operator><name>stop</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadCondBroadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>hasTask</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// wait for threads</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>vnodeGlobal</name><operator>.</operator><name>nthreads</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>vnodeGlobal</name><operator>.</operator><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// clear source</comment>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>vnodeGlobal</name><operator>.</operator><name>threads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadCondDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>hasTask</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>walCleanUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tqCleanUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smaCleanUp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeScheduleTask</name><parameter_list>(<parameter><function_decl><type><name>int</name></type> (<modifier>*</modifier><name>execute</name>)<parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeTask</name><modifier>*</modifier></type> <name>pTask</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>vnodeGlobal</name><operator>.</operator><name>stop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pTask</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pTask</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>execute</name></name> <operator>=</operator> <name>execute</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>arg</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>vnodeGlobal</name><operator>.</operator><name>queue</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>vnodeGlobal</name><operator>.</operator><name>queue</name><operator>.</operator><name>prev</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vnodeGlobal</name><operator>.</operator><name>queue</name><operator>.</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>vnodeGlobal</name><operator>.</operator><name>queue</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>pTask</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadCondSignal</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>hasTask</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* ------------------------ STATIC METHODS ------------------------ */</comment>
<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>loop</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeTask</name><modifier>*</modifier></type> <name>pTask</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"vnode-commit"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
      <expr_stmt><expr><name>pTask</name> <operator>=</operator> <name><name>vnodeGlobal</name><operator>.</operator><name>queue</name><operator>.</operator><name>next</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pTask</name> <operator>==</operator> <operator>&amp;</operator><name><name>vnodeGlobal</name><operator>.</operator><name>queue</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// no task</comment>
        <if_stmt><if>if <condition>(<expr><name><name>vnodeGlobal</name><operator>.</operator><name>stop</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>NULL</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>taosThreadCondWait</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>hasTask</name></name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// has task</comment>
        <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pTask</name><operator>-&gt;</operator><name>next</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>pTask</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>vnodeGlobal</name><operator>.</operator><name>mutex</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name><name>pTask</name><operator>-&gt;</operator><name>execute</name></name><argument_list>(<argument><expr><name><name>pTask</name><operator>-&gt;</operator><name>arg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTask</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
