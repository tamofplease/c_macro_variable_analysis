<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/vnd/vnodeQuery.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnd.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNODE_GET_LOAD_RESET_VALS</name><parameter_list>(<parameter><type><name>pVar</name></type></parameter>, <parameter><type><name>oVal</name></type></parameter>, <parameter><type><name>vType</name></type></parameter>, <parameter><type><name>tags</name></type></parameter>)</parameter_list></cpp:macro>                                                   \
  <cpp:value>do {                                                                                                       \
    int##vType##_t newVal = atomic_sub_fetch_##vType(&amp;(pVar), (oVal));                                       \
    ASSERT(newVal &gt;= 0);                                                                                     \
    if (newVal &lt; 0) {                                                                                        \
      vWarn("vgId:%d %s, abnormal val:%" PRIi64 ", old val:%" PRIi64, TD_VID(pVnode), tags, newVal, (oVal)); \
    }                                                                                                        \
  } while (0)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>vnodeQueryOpen</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>qWorkerInit</name><argument_list>(<argument><expr><name>NODE_TYPE_VNODE</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeQueryPreClose</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>qWorkerStopAllTasks</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeQueryClose</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>qWorkerDestroy</name><argument_list>(<argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeGetTableMeta</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>direct</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableInfoReq</name></type>  <name>infoReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMetaRsp</name></type>  <name>metaRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type>    <name>mer1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type>    <name>mer2</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>           <name><name>tableFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>        <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>rspLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>          <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name></type> <name>schema</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name></type> <name>schemaTag</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// decode req</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSTableInfoReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>dbId</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>dbId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>metaRsp</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tableFName</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vnodeValidateTableHash</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>tableFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// query meta</comment>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer1</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer1</name></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>tableType</name></name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>vgId</name></name> <operator>=</operator> <call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>tuid</name></name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>schema</name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>schemaTag</name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer2</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>META_READER_NOLOCK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer2</name></expr></argument>, <argument><expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><name><name>mer2</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>mer2</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>schema</name> <operator>=</operator> <name><name>mer2</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>schemaTag</name> <operator>=</operator> <name><name>mer2</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>schema</name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>numOfTags</name></name> <operator>=</operator> <name><name>schemaTag</name><operator>.</operator><name>nCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>schema</name><operator>.</operator><name>nCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>precision</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>sversion</name></name> <operator>=</operator> <name><name>schema</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>metaRsp</name><operator>.</operator><name>pSchemas</name></name> <operator>=</operator> <operator>(</operator><name>SSchema</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>metaRsp</name><operator>.</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>metaRsp</name><operator>.</operator><name>numOfTags</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>.</operator><name>pSchemas</name></name></expr></argument>, <argument><expr><name><name>schema</name><operator>.</operator><name>pSchema</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>schema</name><operator>.</operator><name>nCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>schemaTag</name><operator>.</operator><name>nCols</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>.</operator><name>pSchemas</name></name> <operator>+</operator> <name><name>schema</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><name><name>schemaTag</name><operator>.</operator><name>pSchema</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>schemaTag</name><operator>.</operator><name>nCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// encode and send response</comment>
  <expr_stmt><expr><name>rspLen</name> <operator>=</operator> <call><name>tSerializeSTableMetaRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rspLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>direct</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pRsp</name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>rspLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pRsp</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rspLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tSerializeSTableMetaRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>rspLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>metaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>rspLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"get table %s meta failed cause of %s"</literal></expr></argument>, <argument><expr><name><name>infoReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>direct</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pMsg</name> <operator>=</operator> <name>rpcMsg</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>metaRsp</name><operator>.</operator><name>pSchemas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeGetTableCfg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>direct</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableCfgReq</name></type>   <name>cfgReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableCfgRsp</name></type>   <name>cfgRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type>    <name>mer1</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMetaReader</name></type>    <name>mer2</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>           <name><name>tableFName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>        <name>rpcMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>rspLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>          <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name></type> <name>schema</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSchemaWrapper</name></type> <name>schemaTag</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// decode req</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSTableCfgReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>cfgRsp</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cfgRsp</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>cfgRsp</name><operator>.</operator><name>dbFName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tableFName</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vnodeValidateTableHash</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>tableFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// query meta</comment>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer1</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer1</name></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>tableType</name></name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_SUPER_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_VND_HASH_MISMATCH</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer2</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByUid</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer2</name></expr></argument>, <argument><expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>cfgRsp</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><name><name>mer2</name><operator>.</operator><name>me</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>schema</name> <operator>=</operator> <name><name>mer2</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>schemaTag</name> <operator>=</operator> <name><name>mer2</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaTag</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>ttlDays</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>pComment</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>STag</name> <modifier>*</modifier></type><name>pTag</name> <init>= <expr><operator>(</operator><name>STag</name> <operator>*</operator><operator>)</operator><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>pTags</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>tagsLen</name></name> <operator>=</operator> <name><name>pTag</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>pTags</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>cfgRsp</name><operator>.</operator><name>tagsLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cfgRsp</name><operator>.</operator><name>pTags</name></name></expr></argument>, <argument><expr><name>pTag</name></expr></argument>, <argument><expr><name><name>cfgRsp</name><operator>.</operator><name>tagsLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>schema</name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>ttl</name></name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>ttlDays</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>commentLen</name></name> <operator>=</operator> <name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>commentLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>pComment</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name><name>mer1</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>numOfTags</name></name> <operator>=</operator> <name><name>schemaTag</name><operator>.</operator><name>nCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>numOfColumns</name></name> <operator>=</operator> <name><name>schema</name><operator>.</operator><name>nCols</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cfgRsp</name><operator>.</operator><name>pSchemas</name></name> <operator>=</operator> <operator>(</operator><name>SSchema</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>cfgRsp</name><operator>.</operator><name>numOfColumns</name></name> <operator>+</operator> <name><name>cfgRsp</name><operator>.</operator><name>numOfTags</name></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cfgRsp</name><operator>.</operator><name>pSchemas</name></name></expr></argument>, <argument><expr><name><name>schema</name><operator>.</operator><name>pSchema</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>schema</name><operator>.</operator><name>nCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>schemaTag</name><operator>.</operator><name>nCols</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cfgRsp</name><operator>.</operator><name>pSchemas</name></name> <operator>+</operator> <name><name>schema</name><operator>.</operator><name>nCols</name></name></expr></argument>, <argument><expr><name><name>schemaTag</name><operator>.</operator><name>pSchema</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSchema</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>schemaTag</name><operator>.</operator><name>nCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// encode and send response</comment>
  <expr_stmt><expr><name>rspLen</name> <operator>=</operator> <call><name>tSerializeSTableCfgRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rspLen</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>direct</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pRsp</name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>rspLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pRsp</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>rspLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tSerializeSTableCfgRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>rspLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cfgRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>rspLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rpcMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"get table %s cfg failed cause of %s"</literal></expr></argument>, <argument><expr><name><name>cfgReq</name><operator>.</operator><name>tbName</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>direct</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rpcMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pMsg</name> <operator>=</operator> <name>rpcMsg</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tFreeSTableCfgRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cfgRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mer1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>void</name></type> <name>vnodeFreeSBatchRspMsg</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>p</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SBatchRspMsg</name><modifier>*</modifier></type> <name>pRsp</name> <init>= <expr><operator>(</operator><name>SBatchRspMsg</name><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>vnodeGetBatchMeta</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>rspSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchReq</name></type>  <name>batchReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchMsg</name> <modifier>*</modifier></type><name>req</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchRspMsg</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBatchRsp</name></type> <name>batchRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>   <name>reqMsg</name> <init>= <expr><operator>*</operator><name>pMsg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRpcMsg</name></type>   <name>rspMsg</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>pRsp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSBatchReq</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchReq</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tDeserializeSBatchReq failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>msgNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>batchReq</name><operator>.</operator><name>pMsgs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>msgNum</name> <operator>&gt;=</operator> <name>MAX_META_MSG_IN_BATCH</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"too many msgs %d in vnode batch meta req"</literal></expr></argument>, <argument><expr><name>msgNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>msgNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBatchRspMsg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"taosArrayInit %d SBatchRspMsg failed"</literal></expr></argument>, <argument><expr><name>msgNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>msgNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>req</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>batchReq</name><operator>.</operator><name>pMsgs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>reqMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>reqMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>msg</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>reqMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>msgLen</name></name></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name><name>req</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TDMT_VND_TABLE_META</name></expr>:</case>
        <expr_stmt><expr><call><name>vnodeGetTableMeta</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reqMsg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <case>case <expr><name>TDMT_VND_TABLE_CFG</name></expr>:</case>
        <expr_stmt><expr><call><name>vnodeGetTableCfg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>reqMsg</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      <default>default:</default>
        <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"invalid req msgType %d"</literal></expr></argument>, <argument><expr><name><name>req</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>reqMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>reqMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>reqMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>msgIdx</name></name> <operator>=</operator> <name><name>req</name><operator>-&gt;</operator><name>msgIdx</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>reqType</name></name> <operator>=</operator> <name><name>reqMsg</name><operator>.</operator><name>msgType</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>msgLen</name></name> <operator>=</operator> <name><name>reqMsg</name><operator>.</operator><name>contLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>rspCode</name></name> <operator>=</operator> <name><name>reqMsg</name><operator>.</operator><name>code</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>msg</name></name> <operator>=</operator> <name><name>reqMsg</name><operator>.</operator><name>pCont</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>rspSize</name> <operator>=</operator> <call><name>tSerializeSBatchRsp</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>rspSize</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSBatchRsp failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pRsp</name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>rspSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRsp</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"rpcMallocCont %d failed"</literal></expr></argument>, <argument><expr><name>rspSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tSerializeSBatchRsp</name><argument_list>(<argument><expr><name>pRsp</name></expr></argument>, <argument><expr><name>rspSize</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>batchRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"tSerializeSBatchRsp %d failed"</literal></expr></argument>, <argument><expr><name>rspSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>

  <expr_stmt><expr><name><name>rspMsg</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rspMsg</name><operator>.</operator><name>pCont</name></name> <operator>=</operator> <name>pRsp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rspMsg</name><operator>.</operator><name>contLen</name></name> <operator>=</operator> <name>rspSize</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rspMsg</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rspMsg</name><operator>.</operator><name>msgType</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"vnd get batch meta failed cause of %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>batchReq</name><operator>.</operator><name>pMsgs</name></name></expr></argument>, <argument><expr><name>tFreeSBatchReqMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>batchRsp</name><operator>.</operator><name>pRsps</name></name></expr></argument>, <argument><expr><name>tFreeSBatchRspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tmsgSendRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rspMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeGetLoad</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SVnodeLoad</name> <modifier>*</modifier></type><name>pLoad</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSyncState</name></type> <name>state</name> <init>= <expr><call><name>syncGetState</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>syncState</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>state</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>syncRestore</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>restored</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>syncCanRead</name></name> <operator>=</operator> <name><name>state</name><operator>.</operator><name>canRead</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>cacheUsage</name></name> <operator>=</operator> <call><name>tsdbCacheGetUsage</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <call><name>metaGetTbNum</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfTimeSeries</name></name> <operator>=</operator> <call><name>metaGetTimeSeriesNum</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>totalStorage</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">3</literal> <operator>*</operator> <literal type="number">1073741824</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>compStorage</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">2</literal> <operator>*</operator> <literal type="number">1073741824</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>pointsWritten</name></name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfSelectReqs</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfInsertReqs</name></name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nInsert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfInsertSuccessReqs</name></name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nInsertSuccess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfBatchInsertReqs</name></name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nBatchInsert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfBatchInsertSuccessReqs</name></name> <operator>=</operator> <call><name>atomic_load_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nBatchInsertSuccess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief Reset the statistics value by monitor interval
 *
 * @param pVnode
 * @param pLoad
 */</comment>
<function><type><name>void</name></type> <name>vnodeResetLoad</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SVnodeLoad</name> <modifier>*</modifier></type><name>pLoad</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>VNODE_GET_LOAD_RESET_VALS</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nInsert</name></name></expr></argument>, <argument><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfInsertReqs</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"nInsert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>VNODE_GET_LOAD_RESET_VALS</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nInsertSuccess</name></name></expr></argument>, <argument><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfInsertSuccessReqs</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"nInsertSuccess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>VNODE_GET_LOAD_RESET_VALS</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nBatchInsert</name></name></expr></argument>, <argument><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfBatchInsertReqs</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"nBatchInsert"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>VNODE_GET_LOAD_RESET_VALS</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nBatchInsertSuccess</name></name></expr></argument>, <argument><expr><name><name>pLoad</name><operator>-&gt;</operator><name>numOfBatchInsertSuccessReqs</name></name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"nBatchInsertSuccess"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeGetInfo</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>dbname</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>vgId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>dbname</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dbname</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>dbname</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>vgId</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>vgId</name> <operator>=</operator> <call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeGetAllTableList</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMCtbCursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><call><name>metaOpenCtbCursor</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>id</name> <init>= <expr><call><name>metaCtbCursorNext</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STableKeyInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><name>uid</name> <operator>=</operator> <name>id</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>metaCloseCtbCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeGetCtbIdListByFilter</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>list</name></decl></parameter>, <parameter><function_decl><type><name>bool</name></type> (<modifier>*</modifier><name>filter</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>vnodeGetCtbIdList</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMCtbCursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><call><name>metaOpenCtbCursor</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>id</name> <init>= <expr><call><name>metaCtbCursorNext</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>metaCloseCtbCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeGetStbIdList</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>list</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMStbCursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><call><name>metaOpenStbCursor</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>id</name> <init>= <expr><call><name>metaStbCursorNext</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>metaCloseStbCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeGetCtbNum</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMCtbCursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><call><name>metaOpenCtbCursor</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>id</name> <init>= <expr><call><name>metaCtbCursorNext</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>num</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>metaCloseCtbCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeGetStbColumnNum</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name> <init>= <expr><call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// metaGetTbTSchemaEx(pVnode-&gt;pMeta, suid, suid, -1, &amp;pTSchema);</comment>

  <if_stmt><if>if <condition>(<expr><name>pTSchema</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeGetTimeSeriesNum</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>suidList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name>suidList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>vnodeGetStbIdList</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>suidList</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>qError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to get stb id list error: %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>suidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>arrSize</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>suidList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arrSize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>suid</name> <init>= <expr><operator>*</operator><operator>(</operator><name>tb_uid_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>suidList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SMetaStbStats</name></type> <name>stats</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>metaGetStbStats</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stats</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ctbNum</name> <init>= <expr><name><name>stats</name><operator>.</operator><name>ctbNum</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// vnodeGetCtbNum(pVnode, id, &amp;ctbNum);</comment>

    <decl_stmt><decl><type><name>int</name></type> <name>numOfCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vnodeGetStbColumnNum</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>numOfCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>num</name> <operator>+=</operator> <name>ctbNum</name> <operator>*</operator> <operator>(</operator><name>numOfCols</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>suidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeGetAllCtbNum</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMStbCursor</name> <modifier>*</modifier></type><name>pCur</name> <init>= <expr><call><name>metaOpenStbCursor</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pCur</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_FAILED</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>id</name> <init>= <expr><call><name>metaStbCursorNext</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>id</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>ctbNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>vnodeGetCtbNum</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ctbNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>num</name> <operator>+=</operator> <name>ctbNum</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>metaCloseStbCursor</name><argument_list>(<argument><expr><name>pCur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>vnodeGetIdx</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>metaGetIdx</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>vnodeGetIvtIdx</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pVnode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>metaGetIvtIdx</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
