<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/vnd/vnodeBufPool.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnd.h"</cpp:file></cpp:include>

<comment type="block">/* ------------------------ STRUCTURES ------------------------ */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNODE_BUFPOOL_SEGMENTS</name></cpp:macro> <cpp:value>3</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vnodeBufPoolCreate</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>SVBufPool</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppPool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPool</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pPool</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVBufPool</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pPool</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdThreadSpinlock</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosThreadSpinInit</name><argument_list>(<argument><expr><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>pVnode</name></name> <operator>=</operator> <name>pVnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>pPool</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>pTail</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pPool</name><operator>-&gt;</operator><name>node</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>prev</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>pnext</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pPool</name><operator>-&gt;</operator><name>pTail</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppPool</name> <operator>=</operator> <name>pPool</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vnodeBufPoolDestroy</name><parameter_list>(<parameter><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>vnodeBufPoolReset</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadSpinDestroy</name><argument_list>(<argument><expr><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeOpenBufPool</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPool</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>size</name> <init>= <expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szBuf</name></name> <operator>/</operator> <name>VNODE_BUFPOOL_SEGMENTS</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pPool</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// create pool</comment>
    <if_stmt><if>if <condition>(<expr><call><name>vnodeBufPoolCreate</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPool</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to open vnode buffer pool since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>vnodeCloseBufPool</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// add pool to vnode</comment>
    <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pPool</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pPool</name></name> <operator>=</operator> <name>pPool</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode buffer pool is opened, size:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeCloseBufPool</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPool</name></decl>;</decl_stmt>

  <for>for <control>(<init><expr><name>pPool</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pPool</name></name></expr>;</init> <condition><expr><name>pPool</name></expr>;</condition> <incr><expr><name>pPool</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pPool</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pPool</name></name> <operator>=</operator> <name><name>pPool</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vnodeBufPoolDestroy</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vnodeBufPoolDestroy</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode buffer pool is closed"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeBufPoolReset</name><parameter_list>(<parameter><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>SVBufPoolNode</name> <modifier>*</modifier></type><name>pNode</name> <init>= <expr><name><name>pPool</name><operator>-&gt;</operator><name>pTail</name></name></expr></init></decl>;</init> <condition><expr><name><name>pNode</name><operator>-&gt;</operator><name>prev</name></name></expr>;</condition> <incr><expr><name>pNode</name> <operator>=</operator> <name><name>pPool</name><operator>-&gt;</operator><name>pTail</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pnext</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>pPool</name><operator>-&gt;</operator><name>pTail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>prev</name><operator>-&gt;</operator><name>pnext</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pPool</name><operator>-&gt;</operator><name>pTail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>pTail</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pPool</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>pNode</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pPool</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>pPool</name><operator>-&gt;</operator><name>ptr</name></name> <operator>-</operator> <name><name>pPool</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>pPool</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>data</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>vnodeBufPoolMalloc</name><parameter_list>(<parameter><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPool</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVBufPoolNode</name> <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>          <modifier>*</modifier></type><name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pPool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosThreadSpinLock</name><argument_list>(<argument><expr><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pPool</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>size</name></name> <operator>&gt;=</operator> <name><name>pPool</name><operator>-&gt;</operator><name>ptr</name></name> <operator>-</operator> <name><name>pPool</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// allocate from the anchor node</comment>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pPool</name><operator>-&gt;</operator><name>ptr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>ptr</name></name> <operator>=</operator> <name><name>pPool</name><operator>-&gt;</operator><name>ptr</name></name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// allocate a new node</comment>
    <expr_stmt><expr><name>pNode</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosThreadSpinUnlock</name><argument_list>(<argument><expr><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>prev</name></name> <operator>=</operator> <name><name>pPool</name><operator>-&gt;</operator><name>pTail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>pnext</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pPool</name><operator>-&gt;</operator><name>pTail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>pTail</name><operator>-&gt;</operator><name>pnext</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pNode</name><operator>-&gt;</operator><name>prev</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>pTail</name></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name><name>pPool</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pNode</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosThreadSpinUnlock</name><argument_list>(<argument><expr><name><name>pPool</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <return>return <expr><name>p</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeBufPoolFree</name><parameter_list>(<parameter><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPool</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// uint8_t       *ptr = (uint8_t *)p;</comment>
  <comment type="line">// SVBufPoolNode *pNode;</comment>

  <comment type="line">// if (ptr &lt; pPool-&gt;node.data || ptr &gt;= pPool-&gt;node.data + pPool-&gt;node.size) {</comment>
  <comment type="line">//   pNode = &amp;((SVBufPoolNode *)p)[-1];</comment>
  <comment type="line">//   *pNode-&gt;pnext = pNode-&gt;prev;</comment>
  <comment type="line">//   pNode-&gt;prev-&gt;pnext = pNode-&gt;pnext;</comment>

  <comment type="line">//   pPool-&gt;size = pPool-&gt;size - sizeof(*pNode) - pNode-&gt;size;</comment>
  <comment type="line">//   taosMemoryFree(pNode);</comment>
  <comment type="line">// }</comment>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeBufPoolRef</name><parameter_list>(<parameter><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRef</name> <init>= <expr><call><name>atomic_fetch_add_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPool</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeBufPoolUnRef</name><parameter_list>(<parameter><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPool</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pPool</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRef</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pPool</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pPool</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>vnodeBufPoolReset</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szBuf</name></name> <operator>/</operator> <name>VNODE_BUFPOOL_SEGMENTS</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pPool</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>size</name></name> <operator>!=</operator> <name>size</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPoolT</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeBufPoolCreate</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pPoolT</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>vWarn</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, try to change buf pools size from %"</literal> <name>PRId64</name> <literal type="string">" to %"</literal> <name>PRId64</name> <literal type="string">" since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><name><name>pPool</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>vnodeBufPoolDestroy</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pPool</name> <operator>=</operator> <name>pPoolT</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, change buf pools size from %"</literal> <name>PRId64</name> <literal type="string">" to %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pPool</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pPool</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pPool</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pPool</name></name> <operator>=</operator> <name>pPool</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadCondSignal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>poolNotEmpty</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
