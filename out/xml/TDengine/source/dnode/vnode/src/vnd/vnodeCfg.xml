<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/vnd/vnodeCfg.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tutil.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnd.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>SVnodeCfg</name></type> <name>vnodeCfgDefault</name> <init>= <expr><block>{<expr><operator>.</operator><name>vgId</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
                                   <expr><operator>.</operator><name>dbname</name> <operator>=</operator> <literal type="string">""</literal></expr>,
                                   <expr><operator>.</operator><name>dbId</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                   <expr><operator>.</operator><name>szPage</name> <operator>=</operator> <literal type="number">4096</literal></expr>,
                                   <expr><operator>.</operator><name>szCache</name> <operator>=</operator> <literal type="number">256</literal></expr>,
                                   <expr><operator>.</operator><name>cacheLast</name> <operator>=</operator> <literal type="number">3</literal></expr>,
                                   <expr><operator>.</operator><name>cacheLastSize</name> <operator>=</operator> <literal type="number">8</literal></expr>,
                                   <expr><operator>.</operator><name>szBuf</name> <operator>=</operator> <literal type="number">96</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>,
                                   <expr><operator>.</operator><name>isHeap</name> <operator>=</operator> <name>false</name></expr>,
                                   <expr><operator>.</operator><name>isWeak</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                   <expr><operator>.</operator><name>tsdbCfg</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>precision</name> <operator>=</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>,
                                               <expr><operator>.</operator><name>update</name> <operator>=</operator> <literal type="number">1</literal></expr>,
                                               <expr><operator>.</operator><name>compression</name> <operator>=</operator> <literal type="number">2</literal></expr>,
                                               <expr><operator>.</operator><name>slLevel</name> <operator>=</operator> <literal type="number">5</literal></expr>,
                                               <expr><operator>.</operator><name>days</name> <operator>=</operator> <literal type="number">14400</literal></expr>,
                                               <expr><operator>.</operator><name>minRows</name> <operator>=</operator> <literal type="number">100</literal></expr>,
                                               <expr><operator>.</operator><name>maxRows</name> <operator>=</operator> <literal type="number">4096</literal></expr>,
                                               <expr><operator>.</operator><name>keep2</name> <operator>=</operator> <literal type="number">5256000</literal></expr>,
                                               <expr><operator>.</operator><name>keep0</name> <operator>=</operator> <literal type="number">5256000</literal></expr>,
                                               <expr><operator>.</operator><name>keep1</name> <operator>=</operator> <literal type="number">5256000</literal></expr>}</block></expr>,
                                   <expr><operator>.</operator><name>walCfg</name> <operator>=</operator>
                                       <block>{
                                           <expr><operator>.</operator><name>vgId</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
                                           <expr><operator>.</operator><name>fsyncPeriod</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                           <expr><operator>.</operator><name>retentionPeriod</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
                                           <expr><operator>.</operator><name>rollPeriod</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                           <expr><operator>.</operator><name>segSize</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                           <expr><operator>.</operator><name>retentionSize</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
                                           <expr><operator>.</operator><name>level</name> <operator>=</operator> <name>TAOS_WAL_WRITE</name></expr>,
                                       }</block></expr>,
                                   <expr><operator>.</operator><name>hashBegin</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                   <expr><operator>.</operator><name>hashEnd</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                   <expr><operator>.</operator><name>hashMethod</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                   <expr><operator>.</operator><name>sttTrigger</name> <operator>=</operator> <name>TSDB_DEFAULT_STT_FILE</name></expr>,
                                   <expr><operator>.</operator><name>tsdbPageSize</name> <operator>=</operator> <name>TSDB_DEFAULT_PAGE_SIZE</name></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>vnodeCheckCfg</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SVnodeCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeEncodeConfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SVnodeCfg</name> <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><operator>(</operator><name>SVnodeCfg</name> <operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vgId"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"dbname"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"dbId"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"szPage"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"szCache"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>szCache</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"cacheLast"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>cacheLast</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"cacheLastSize"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>cacheLastSize</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"szBuf"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>szBuf</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"isHeap"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>isHeap</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"isWeak"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>isWeak</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"isTsma"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>isTsma</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"isRsma"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>isRsma</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"precision"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"update"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>update</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"compression"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>compression</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"slLevel"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>slLevel</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"daysPerFile"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>days</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"minRows"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>minRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"maxRows"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>maxRows</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"keep0"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>keep0</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"keep1"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>keep1</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"keep2"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>keep2</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>retentions</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>freq</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nRetention</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>retentions</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>freq</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>nRetention</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>retentions</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>freq</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>++</operator><name>nRetention</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pNodeRetentions</name> <init>= <expr><call><name>tjsonCreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tjsonAddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"retentions"</literal></expr></argument>, <argument><expr><name>pNodeRetentions</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nRetention</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SJson</name>            <modifier>*</modifier></type><name>pNodeRetention</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><specifier>const</specifier> <name>SRetention</name> <modifier>*</modifier></type><name>pRetention</name> <init>= <expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>retentions</name></name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pNodeRetention</name></expr></argument>, <argument><expr><literal type="string">"freq"</literal></expr></argument>, <argument><expr><name><name>pRetention</name><operator>-&gt;</operator><name>freq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pNodeRetention</name></expr></argument>, <argument><expr><literal type="string">"freqUnit"</literal></expr></argument>, <argument><expr><name><name>pRetention</name><operator>-&gt;</operator><name>freqUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pNodeRetention</name></expr></argument>, <argument><expr><literal type="string">"keep"</literal></expr></argument>, <argument><expr><name><name>pRetention</name><operator>-&gt;</operator><name>keep</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pNodeRetention</name></expr></argument>, <argument><expr><literal type="string">"keepUnit"</literal></expr></argument>, <argument><expr><name><name>pRetention</name><operator>-&gt;</operator><name>keepUnit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pNodeRetentions</name></expr></argument>, <argument><expr><name>pNodeRetention</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.vgId"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.fsyncPeriod"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>fsyncPeriod</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.retentionPeriod"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>retentionPeriod</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.rollPeriod"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>rollPeriod</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.retentionSize"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>retentionSize</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.segSize"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>segSize</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.level"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"sstTrigger"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>sttTrigger</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"hashBegin"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashBegin</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"hashEnd"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashEnd</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"hashMethod"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashMethod</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"hashPrefix"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashPrefix</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"hashSuffix"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashSuffix</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"tsdbPageSize"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbPageSize</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"syncCfg.replicaNum"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"syncCfg.myIndex"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>myIndex</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vndStats.stables"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vndStats</name><operator>.</operator><name>numOfSTables</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vndStats.ctables"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vndStats</name><operator>.</operator><name>numOfCTables</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vndStats.ntables"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vndStats</name><operator>.</operator><name>numOfNTables</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vndStats.timeseries"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vndStats</name><operator>.</operator><name>numOfTimeSeries</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vndStats.ntimeseries"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vndStats</name><operator>.</operator><name>numOfNTimeSeries</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pNodeInfoArr</name> <init>= <expr><call><name>tjsonCreateArray</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonAddItemToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"syncCfg.nodeInfo"</literal></expr></argument>, <argument><expr><name>pNodeInfoArr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>replicaNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pNodeInfo</name> <init>= <expr><call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pNodeInfo</name></expr></argument>, <argument><expr><literal type="string">"nodePort"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>nodePort</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonAddStringToObject</name><argument_list>(<argument><expr><name>pNodeInfo</name></expr></argument>, <argument><expr><literal type="string">"nodeFqdn"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>nodeFqdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonAddItemToArray</name><argument_list>(<argument><expr><name>pNodeInfoArr</name></expr></argument>, <argument><expr><name>pNodeInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// add tsdb page size config</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"tsdbPageSize"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbPageSize</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeDecodeConfig</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name> <modifier>*</modifier></type><name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnodeCfg</name> <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><operator>(</operator><name>SVnodeCfg</name> <operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vgId"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"dbname"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dbname</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"dbId"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>dbId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"szPage"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"szCache"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>szCache</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"cacheLast"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>cacheLast</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"cacheLastSize"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>cacheLastSize</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"szBuf"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>szBuf</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"isHeap"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>isHeap</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"isWeak"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>isWeak</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"isTsma"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>isTsma</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"isRsma"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>isRsma</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"precision"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"update"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>update</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"compression"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>compression</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"slLevel"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>slLevel</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"daysPerFile"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>days</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"minRows"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>minRows</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"maxRows"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>maxRows</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"keep0"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>keep0</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"keep1"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>keep1</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"keep2"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>keep2</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>SJson</name>  <modifier>*</modifier></type><name>pNodeRetentions</name> <init>= <expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"retentions"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRetention</name> <init>= <expr><call><name>tjsonGetArraySize</name><argument_list>(<argument><expr><name>pNodeRetentions</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nRetention</name> <operator>&gt;</operator> <name>TSDB_RETENTION_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nRetention</name> <operator>=</operator> <name>TSDB_RETENTION_MAX</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nRetention</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pNodeRetention</name> <init>= <expr><call><name>tjsonGetArrayItem</name><argument_list>(<argument><expr><name>pNodeRetentions</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pNodeRetention</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pNodeRetention</name></expr></argument>, <argument><expr><literal type="string">"freq"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>retentions</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>freq</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pNodeRetention</name></expr></argument>, <argument><expr><literal type="string">"freqUnit"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>retentions</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>freqUnit</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pNodeRetention</name></expr></argument>, <argument><expr><literal type="string">"keep"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>retentions</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>keep</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pNodeRetention</name></expr></argument>, <argument><expr><literal type="string">"keepUnit"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbCfg</name><operator>.</operator><name>retentions</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>keepUnit</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.vgId"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.fsyncPeriod"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>fsyncPeriod</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.retentionPeriod"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>retentionPeriod</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.rollPeriod"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>rollPeriod</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.retentionSize"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>retentionSize</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.segSize"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>segSize</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"wal.level"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>walCfg</name><operator>.</operator><name>level</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"sstTrigger"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>sttTrigger</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>sttTrigger</name></name> <operator>=</operator> <name>TSDB_DEFAULT_SST_TRIGGER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"hashBegin"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashBegin</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"hashEnd"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashEnd</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"hashMethod"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashMethod</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"hashPrefix"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashPrefix</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashPrefix</name></name> <operator>=</operator> <name>TSDB_DEFAULT_HASH_PREFIX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"hashSuffix"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashSuffix</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>hashSuffix</name></name> <operator>=</operator> <name>TSDB_DEFAULT_HASH_SUFFIX</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"syncCfg.replicaNum"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>replicaNum</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"syncCfg.myIndex"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>myIndex</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vndStats.stables"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vndStats</name><operator>.</operator><name>numOfSTables</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vndStats.ctables"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vndStats</name><operator>.</operator><name>numOfCTables</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vndStats.ntables"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vndStats</name><operator>.</operator><name>numOfNTables</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vndStats.timeseries"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vndStats</name><operator>.</operator><name>numOfTimeSeries</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"vndStats.ntimeseries"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>vndStats</name><operator>.</operator><name>numOfNTimeSeries</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pNodeInfoArr</name> <init>= <expr><call><name>tjsonGetObjectItem</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"syncCfg.nodeInfo"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>arraySize</name> <init>= <expr><call><name>tjsonGetArraySize</name><argument_list>(<argument><expr><name>pNodeInfoArr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>arraySize</name> <operator>==</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>arraySize</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pNodeInfo</name> <init>= <expr><call><name>tjsonGetArrayItem</name><argument_list>(<argument><expr><name>pNodeInfoArr</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pNodeInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pNodeInfo</name></expr></argument>, <argument><expr><literal type="string">"nodePort"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>nodePort</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tjsonGetStringValue</name><argument_list>(<argument><expr><name>pNodeInfo</name></expr></argument>, <argument><expr><literal type="string">"nodeFqdn"</literal></expr></argument>, <argument><expr><operator>(</operator><name><name>pCfg</name><operator>-&gt;</operator><name>syncCfg</name><operator>.</operator><name>nodeInfo</name></name><operator>)</operator><index>[<expr><name>i</name></expr>]</index><operator>.</operator><name>nodeFqdn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"tsdbPageSize"</literal></expr></argument>, <argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbPageSize</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pCfg</name><operator>-&gt;</operator><name>tsdbPageSize</name></name> <operator>=</operator> <name>TSDB_DEFAULT_TSDB_PAGESIZE</name> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeValidateTableHash</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tableFName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>hashValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hashMethod</name></name></expr>)</condition> <block>{<block_content>
    <default>default:</default>
      <expr_stmt><expr><name>hashValue</name> <operator>=</operator> <call><name>taosGetTbHashVal</name><argument_list>(<argument><expr><name>tableFName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>tableFName</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hashMethod</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hashPrefix</name></name></expr></argument>,
                                   <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hashSuffix</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name><name>hashValue</name> <argument_list type="generic">&lt; <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hashBegin</name></name> <operator>||</operator> <name>hashValue</name></expr></argument> &gt;</argument_list></name> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>hashEnd</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_HASH_MISMATCH</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_VND_HASH_MISMATCH</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
