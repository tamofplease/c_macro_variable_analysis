<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/vnd/vnodeCommit.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnd.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnodeInt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VND_INFO_FNAME</name></cpp:macro>     <cpp:value>"vnode.json"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VND_INFO_FNAME_TMP</name></cpp:macro> <cpp:value>"vnode_tmp.json"</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vnodeEncodeInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SVnodeInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vnodeDecodeInfo</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>SVnodeInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>vnodeCommitImpl</name><parameter_list>(<parameter><decl><type><name>SCommitInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>vnodeBegin</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// alloc buffer pool</comment>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>pPool</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadCondWait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>poolNotEmpty</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pPool</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pPool</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>mutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>commitID</name></name><operator>++</operator></expr>;</expr_stmt>
  <comment type="line">// begin meta</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaBegin</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to begin meta since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// begin tsdb</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tsdbBegin</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to begin tsdb since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// begin sma</comment>
  <if_stmt><if>if <condition>(<expr><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>smaBegin</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to begin sma since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeShouldCommit</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>osDataSpaceAvailable</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name><operator>-&gt;</operator><name>node</name><operator>.</operator><name>size</name></name><operator>)</operator></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeSaveInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SVnodeInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>VND_INFO_FNAME_TMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// encode info</comment>
  <expr_stmt><expr><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>vnodeEncodeInfo</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"failed to encode json info."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// save info to a vnode_tmp.json</comment>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"failed to open info file:%s for write:%s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"failed to write info file:%s error:%s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"failed to fsync info file:%s error:%s"</literal></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// free info binary</comment>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode info is saved, fname:%s replica:%d"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>,
        <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>syncCfg</name><operator>.</operator><name>replicaNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeCommitInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SVnodeInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tfname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>VND_INFO_FNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tfname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>VND_INFO_FNAME_TMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosRenameFile</name><argument_list>(<argument><expr><name>tfname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode info is committed"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeLoadInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>SVnodeInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>size</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>VND_INFO_FNAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// read info</comment>
  <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosFStatFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pData</name><index>[<expr><name>size</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// decode info</comment>
  <if_stmt><if>if <condition>(<expr><call><name>vnodeDecodeInfo</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>vnodePrepareCommit</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>canCommit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbPrepareCommit</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>metaPrepareAsyncCommit</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>smaPrepareAsyncCommit</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>vnodeBufPoolUnRef</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeCommitTask</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SCommitInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>SCommitInfo</name> <operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// commit</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>vnodeCommitImpl</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// end commit</comment>
  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>canCommit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int</name></type> <name>vnodeAsyncCommit</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// prepare to commit</comment>
  <expr_stmt><expr><call><name>vnodePrepareCommit</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// schedule the task</comment>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>commitTerm</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applyTerm</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SCommitInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>SCommitInfo</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>config</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>state</name><operator>.</operator><name>committed</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>state</name><operator>.</operator><name>commitTerm</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applyTerm</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>state</name><operator>.</operator><name>commitID</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>commitID</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pVnode</name></name> <operator>=</operator> <name>pVnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>txn</name></name> <operator>=</operator> <call><name>metaGetTxn</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vnodeScheduleTask</name><argument_list>(<argument><expr><name>vnodeCommitTask</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d %s failed since %s, commit id:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d %s done"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>vnodeSyncCommit</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>vnodeAsyncCommit</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>canCommit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>canCommit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vnodeCommitImpl</name><parameter_list>(<parameter><decl><type><name>SCommitInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type>    <name><name>dir</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to commit, commit ID:%"</literal> <name>PRId64</name> <literal type="string">" version:%"</literal> <name>PRId64</name> <literal type="string">" term: %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>commitID</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applyTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// persist wal before starting</comment>
  <if_stmt><if>if <condition>(<expr><call><name>walPersist</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to persist wal since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// save info</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>vnodeSaveInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// walBeginSnapshot(pVnode-&gt;pWal, pVnode-&gt;state.applied);</comment>
  <expr_stmt><expr><call><name>syncBeginSnapshot</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// commit each sub-system</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommit</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smaCommit</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tqCommit</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FAILED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// commit info</comment>
  <if_stmt><if>if <condition>(<expr><call><name>vnodeCommitInfo</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>info</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFinishCommit</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smaFinishCommit</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaFinishCommit</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>txn</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>committed</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>state</name><operator>.</operator><name>committed</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>smaPostCommit</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to post-commit sma since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// walEndSnapshot(pVnode-&gt;pWal);</comment>
  <expr_stmt><expr><call><name>syncEndSnapshot</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, commit end"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>vnodeShouldRollback</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tFName</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tFName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s%s"</literal></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>,
           <argument><expr><name>VND_INFO_FNAME_TMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>tFName</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeRollback</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tFName</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>tFName</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s%s%s"</literal></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>,
           <argument><expr><name>VND_INFO_FNAME_TMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>tFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vnodeEncodeState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>, <parameter><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SVState</name> <modifier>*</modifier></type><name>pState</name> <init>= <expr><operator>(</operator><name>SVState</name> <operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"commit version"</literal></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>committed</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"commit ID"</literal></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddIntegerToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"commit term"</literal></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>commitTerm</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vnodeDecodeState</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SJson</name> <modifier>*</modifier></type><name>pJson</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pObj</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVState</name> <modifier>*</modifier></type><name>pState</name> <init>= <expr><operator>(</operator><name>SVState</name> <operator>*</operator><operator>)</operator><name>pObj</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"commit version"</literal></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>committed</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"commit ID"</literal></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tjsonGetNumberValue</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"commit term"</literal></expr></argument>, <argument><expr><name><name>pState</name><operator>-&gt;</operator><name>commitTerm</name></name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vnodeEncodeInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SVnodeInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>  <modifier>*</modifier></type><name>pData</name></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pJson</name> <operator>=</operator> <call><name>tjsonCreateObject</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><name>vnodeEncodeConfig</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tjsonAddObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>, <argument><expr><name>vnodeEncodeState</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>tjsonToString</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <name>pData</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>vnodeDecodeInfo</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>SVnodeInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SJson</name> <modifier>*</modifier></type><name>pJson</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pJson</name> <operator>=</operator> <call><name>tjsonParse</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pJson</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"config"</literal></expr></argument>, <argument><expr><name>vnodeDecodeConfig</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tjsonToObject</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>, <argument><expr><name>vnodeDecodeState</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tjsonDelete</name><argument_list>(<argument><expr><name>pJson</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>
</unit>
