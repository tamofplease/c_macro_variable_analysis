<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/vnd/vnodeSvr.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vnd.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessCreateStbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessAlterStbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessDropStbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessCreateTbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessAlterTbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessDropTbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessSubmitReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessCreateTSmaReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessAlterConfirmReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessAlterHashRangeReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessAlterConfigReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessDropTtlTbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessTrimReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessDeleteReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessBatchDeleteReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>vnodePreProcessWriteMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type> <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_VND_CREATE_TABLE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>ctime</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>nReqs</name></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tStartDecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32v</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nReqs</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name>nReqs</name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>uid</name> <init>= <expr><call><name>tGenIdPI64</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tStartDecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
          <goto>goto <name>_err</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32v</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dc</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>dc</name><operator>.</operator><name>pos</name></name><operator>)</operator> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dc</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>dc</name><operator>.</operator><name>pos</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>=</operator> <name>ctime</name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>vTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, table:%s uid:%"</literal> <name>PRId64</name> <literal type="string">" is generated"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tEndDecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>tEndDecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TDMT_VND_SUBMIT</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SSubmitMsgIter</name></type> <name>msgIter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SSubmitReq</name>    <modifier>*</modifier></type><name>pSubmitReq</name> <init>= <expr><operator>(</operator><name>SSubmitReq</name> <operator>*</operator><operator>)</operator><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SSubmitBlk</name>    <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type>        <name>ctime</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>tb_uid_t</name></type>       <name>uid</name></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>tInitSubmitMsgIter</name><argument_list>(<argument><expr><name>pSubmitReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgIter</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>tGetSubmitMsgNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>msgIter</name><operator>.</operator><name>schemaLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>msgIter</name><operator>.</operator><name>schemaLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>tStartDecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
            <return>return <expr><name>code</name></expr>;</return>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><call><name>tDecodeI32v</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
            <return>return <expr><name>code</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>tDecodeCStr</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
            <return>return <expr><name>code</name></expr>;</return>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name>uid</name> <operator>=</operator> <call><name>metaGetTableEntryUidByName</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>uid</name> <operator>=</operator> <call><name>tGenIdPI64</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dc</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>dc</name><operator>.</operator><name>pos</name></name><operator>)</operator> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
          <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>dc</name><operator>.</operator><name>data</name></name> <operator>+</operator> <name><name>dc</name><operator>.</operator><name>pos</name></name> <operator>+</operator> <literal type="number">8</literal><operator>)</operator> <operator>=</operator> <name>ctime</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <call><name>htobe64</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>tEndDecode</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TDMT_VND_DELETE</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type>     <name>size</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>     <name>ret</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>uint8_t</name>    <modifier>*</modifier></type><name>pCont</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SEncoder</name>   <modifier>*</modifier></type><name>pCoder</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SEncoder</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SDeleteRes</name></type>  <name>res</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SReadHandle</name></type> <name>handle</name> <init>= <expr><block>{
          <expr><operator>.</operator><name>meta</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr>, <expr><operator>.</operator><name>config</name> <operator>=</operator> <operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>config</name></name></expr>, <expr><operator>.</operator><name>vnode</name> <operator>=</operator> <name>pVnode</name></expr>, <expr><operator>.</operator><name>pMsgCb</name> <operator>=</operator> <operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>qWorkerProcessDeleteMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// malloc and encode</comment>
      <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeDeleteRes</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pCont</name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name> <operator>*</operator><operator>)</operator><name>pCont</name><operator>)</operator><operator>-&gt;</operator><name>contLen</name> <operator>=</operator> <name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><operator>(</operator><name>SMsgHead</name> <operator>*</operator><operator>)</operator><name>pCont</name><operator>)</operator><operator>-&gt;</operator><name>vgId</name> <operator>=</operator> <call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name>pCont</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tEncodeDeleteRes</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>rpcFreeCont</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>pCont</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>size</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>res</name><operator>.</operator><name>uidList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId%d, preprocess request failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeProcessWriteMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>   <modifier>*</modifier></type><name>pReq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_NO_AVAIL_BUFPOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, not ready to write since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>version</name> <operator>&lt;=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, duplicate write request. version: %"</literal> <name>PRId64</name> <literal type="string">", applied: %"</literal> <name>PRId64</name> <literal type="string">""</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>,
           <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_VND_DUP_REQUEST</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>handle</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to process write request %s, index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applyTerm</name></name> <operator>&lt;=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyTerm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name> <operator>+</operator> <literal type="number">1</literal> <operator>==</operator> <name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applyTerm</name></name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>conn</name><operator>.</operator><name>applyTerm</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>syncUtilUserCommit</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// skip header</comment>
  <expr_stmt><expr><name>pReq</name> <operator>=</operator> <call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* META */</comment>
    <case>case <expr><name>TDMT_VND_CREATE_STB</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessCreateStbReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_ALTER_STB</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessAlterStbReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_DROP_STB</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessDropStbReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_CREATE_TABLE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessCreateTbReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_ALTER_TABLE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessAlterTbReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_DROP_TABLE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessDropTbReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_DROP_TTL_TABLE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessDropTtlTbReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_TRIM</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessTrimReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_CREATE_SMA</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessCreateTSmaReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <comment type="block">/* TSDB */</comment>
    <case>case <expr><name>TDMT_VND_SUBMIT</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessSubmitReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_DELETE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessDeleteReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_BATCH_DEL</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>vnodeProcessBatchDeleteReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      <break>break;</break>
    <comment type="block">/* TQ */</comment>
    <case>case <expr><name>TDMT_VND_TMQ_SUBSCRIBE</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>tqProcessSubscribeReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_TMQ_DELETE_SUB</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>tqProcessDeleteSubReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_TMQ_COMMIT_OFFSET</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>tqProcessOffsetCommitReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name> <operator>-</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SMsgHead</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_TMQ_ADD_CHECKINFO</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>tqProcessAddCheckInfoReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_TMQ_DEL_CHECKINFO</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>tqProcessDelCheckInfoReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_STREAM_TASK_DEPLOY</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tqProcessTaskDeployReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TDMT_STREAM_TASK_DROP</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tqProcessTaskDropReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TDMT_VND_STREAM_RECOVER_BLOCKING_STAGE</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tqProcessTaskRecover2Req</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TDMT_STREAM_TASK_CHECK_RSP</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tqProcessStreamTaskCheckRsp</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TDMT_VND_ALTER_CONFIRM</name></expr>:</case>
      <expr_stmt><expr><call><name>vnodeProcessAlterConfirmReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_ALTER_HASHRANGE</name></expr>:</case>
      <expr_stmt><expr><call><name>vnodeProcessAlterHashRangeReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_ALTER_CONFIG</name></expr>:</case>
      <expr_stmt><expr><call><name>vnodeProcessAlterConfigReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TDMT_VND_COMMIT</name></expr>:</case>
      <expr_stmt><expr><call><name>vnodeSyncCommit</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>vnodeBegin</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    <default>default:</default>
      <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, unprocessed msg, %d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>vTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, process %s request, code:0x%x index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name></expr></argument>,
         <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>walApplyVer</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tqPushMsg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to push msg to TQ since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// commit if need</comment>
  <if_stmt><if>if <condition>(<expr><call><name>vnodeShouldCommit</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, commit at version %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    vnodeSyncCommit(pVnode);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>vnodeAsyncCommit</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <comment type="line">// start a new one</comment>
    <if_stmt><if>if <condition>(<expr><call><name>vnodeBegin</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to begin vnode since %s."</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, process %s request failed since %s, version:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>TMSG_INFO</name><argument_list>(<argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodePreprocessQueryMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>TDMT_SCH_QUERY</name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>&amp;&amp;</operator> <name>TDMT_SCH_MERGE_QUERY</name> <operator>!=</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>qWorkerPreprocessQueryMsg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>TDMT_SCH_QUERY</name> <operator>==</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeProcessQueryMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>vTrace</name><argument_list>(<argument><expr><literal type="string">"message in vnode query queue is processing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// if ((pMsg-&gt;msgType == TDMT_SCH_QUERY) &amp;&amp; !vnodeIsLeader(pVnode)) {</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SCH_QUERY</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>syncIsReadyForRead</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vnodeRedirectRpcMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SReadHandle</name></type> <name>handle</name> <init>= <expr><block>{<expr><operator>.</operator><name>meta</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr>, <expr><operator>.</operator><name>config</name> <operator>=</operator> <operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>config</name></name></expr>, <expr><operator>.</operator><name>vnode</name> <operator>=</operator> <name>pVnode</name></expr>, <expr><operator>.</operator><name>pMsgCb</name> <operator>=</operator> <operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>msgCb</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_SCH_QUERY</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_QUERY</name></expr>:</case>
      <return>return <expr><call><name>qWorkerProcessQueryMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_SCH_QUERY_CONTINUE</name></expr>:</case>
      <return>return <expr><call><name>qWorkerProcessCQueryMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name>handle</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"unknown msg type:%d in query queue"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>vnodeProcessFetchMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>SQueueInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>vTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, msg:%p in fetch queue is processing"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_SCH_FETCH</name> <operator>||</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_VND_TABLE_META</name> <operator>||</operator> <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_VND_TABLE_CFG</name> <operator>||</operator>
       <name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_VND_BATCH_META</name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>!</operator><call><name>syncIsReadyForRead</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>sync</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">//      !vnodeIsLeader(pVnode)) {</comment>
    <expr_stmt><expr><call><name>vnodeRedirectRpcMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name> <operator>==</operator> <name>TDMT_VND_TMQ_CONSUME</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pVnode</name><operator>-&gt;</operator><name>restored</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vnodeRedirectRpcMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>TSDB_CODE_SYN_RESTORING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TDMT_SCH_FETCH</name></expr>:</case>
    <case>case <expr><name>TDMT_SCH_MERGE_FETCH</name></expr>:</case>
      <return>return <expr><call><name>qWorkerProcessFetchMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_SCH_FETCH_RSP</name></expr>:</case>
      <return>return <expr><call><name>qWorkerProcessRspMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    <comment type="line">// case TDMT_SCH_CANCEL_TASK:</comment>
    <comment type="line">//   return qWorkerProcessCancelMsg(pVnode, pVnode-&gt;pQuery, pMsg, 0);</comment>
    <case>case <expr><name>TDMT_SCH_DROP_TASK</name></expr>:</case>
      <return>return <expr><call><name>qWorkerProcessDropMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_SCH_QUERY_HEARTBEAT</name></expr>:</case>
      <return>return <expr><call><name>qWorkerProcessHbMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pQuery</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_VND_TABLE_META</name></expr>:</case>
      <return>return <expr><call><name>vnodeGetTableMeta</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_VND_TABLE_CFG</name></expr>:</case>
      <return>return <expr><call><name>vnodeGetTableCfg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_VND_BATCH_META</name></expr>:</case>
      <return>return <expr><call><name>vnodeGetBatchMeta</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_VND_TMQ_CONSUME</name></expr>:</case>
      <return>return <expr><call><name>tqProcessPollReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_TASK_RUN</name></expr>:</case>
      <return>return <expr><call><name>tqProcessTaskRunReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <case>case <expr><name>TDMT_STREAM_TASK_DISPATCH</name></expr>:</case>
      <return>return <expr><call><name>tqProcessTaskDispatchReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><name>TDMT_STREAM_TASK_CHECK</name></expr>:</case>
      <return>return <expr><call><name>tqProcessStreamTaskCheckReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_TASK_DISPATCH_RSP</name></expr>:</case>
      <return>return <expr><call><name>tqProcessTaskDispatchRsp</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_RETRIEVE</name></expr>:</case>
      <return>return <expr><call><name>tqProcessTaskRetrieveReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_RETRIEVE_RSP</name></expr>:</case>
      <return>return <expr><call><name>tqProcessTaskRetrieveRsp</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_VND_STREAM_RECOVER_NONBLOCKING_STAGE</name></expr>:</case>
      <return>return <expr><call><name>tqProcessTaskRecover1Req</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_RECOVER_FINISH</name></expr>:</case>
      <return>return <expr><call><name>tqProcessTaskRecoverFinishReq</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TDMT_STREAM_RECOVER_FINISH_RSP</name></expr>:</case>
      <return>return <expr><call><name>tqProcessTaskRecoverFinishRsp</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"unknown msg type:%d in fetch queue"</literal></expr></argument>, <argument><expr><name><name>pMsg</name><operator>-&gt;</operator><name>msgType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_APP_ERROR</name></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">// TODO: remove the function</comment>
<function><type><name>void</name></type> <name>smaHandleRes</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>smaId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// TODO</comment>
  <comment type="line">// blockDebugShowDataBlocks(data, __func__);</comment>
  <expr_stmt><expr><call><name>tdProcessTSmaInsert</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SVnode</name> <operator>*</operator><operator>)</operator><name>pVnode</name><operator>)</operator><operator>-&gt;</operator><name>pSma</name></expr></argument>, <argument><expr><name>smaId</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>vnodeUpdateMetaRsp</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>STableMetaRsp</name> <modifier>*</modifier></type><name>pMetaRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pMetaRsp</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pMetaRsp</name><operator>-&gt;</operator><name>dbFName</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>dbname</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMetaRsp</name><operator>-&gt;</operator><name>dbId</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>dbId</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMetaRsp</name><operator>-&gt;</operator><name>vgId</name></name> <operator>=</operator> <call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMetaRsp</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessTrimReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVTrimDbReq</name></type> <name>trimReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// decode</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSVTrimDbReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trimReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, trim vnode request will be processed, time:%d"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>trimReq</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// process</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDoRetention</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name><name>trimReq</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>smaDoRetention</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><name><name>trimReq</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessDropTtlTbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>tbUids</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tbUids</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SVDropTtlTableReq</name></type> <name>ttlReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSVDropTtlTableReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ttlReq</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, drop ttl table req will be processed, time:%d"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name><name>ttlReq</name><operator>.</operator><name>timestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>metaTtlDropTable</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>ttlReq</name><operator>.</operator><name>timestamp</name></name></expr></argument>, <argument><expr><name>tbUids</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>end</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tqUpdateTbUidList</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>tbUids</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>end</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessCreateStbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVCreateStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>       <name>coder</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_CREATE_STB_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// decode and process req</comment>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaCreateSTable</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdProcessRSmaCreate</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessCreateTbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDecoder</name></type>           <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type>           <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>rcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVCreateTbBatchReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVCreateTbReq</name>     <modifier>*</modifier></type><name>pCreateReq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVCreateTbBatchRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVCreateTbRsp</name></type>      <name>cRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>               <name><name>tbName</name><index>[<expr><name>TSDB_TABLE_FNAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbUidStore</name>       <modifier>*</modifier></type><name>pStore</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>            <modifier>*</modifier></type><name>tbUids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_CREATE_TABLE_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// decode</comment>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>nReqs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>tbUids</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>nReqs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>rsp</name><operator>.</operator><name>pArray</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>tbUids</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// loop to create table</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pCreateReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cRsp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>grantCheck</name><argument_list>(<argument><expr><name>TSDB_GRANT_TIMESERIES</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>grantCheck</name><argument_list>(<argument><expr><name>TSDB_GRANT_TABLE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// validate hash</comment>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbName</name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>vnodeValidateTableHash</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>tbName</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>cRsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_VND_HASH_MISMATCH</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// do create table</comment>
    <if_stmt><if>if <condition>(<expr><call><name>metaCreateTable</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pCreateReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cRsp</name><operator>.</operator><name>pMeta</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>TD_CREATE_IF_NOT_EXISTS</name> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>==</operator> <name>TSDB_CODE_TDB_TABLE_ALREADY_EXIST</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>cRsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>cRsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>cRsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tdFetchTbUidList</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStore</name></expr></argument>, <argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCreateReq</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>vnodeUpdateMetaRsp</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>cRsp</name><operator>.</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, add %d new created tables into query table list"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tqUpdateTbUidList</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>tbUids</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tdUpdateTbUidList</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><name>pStore</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tdUidStoreFree</name><argument_list>(<argument><expr><name>pStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// prepare rsp</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVCreateTbBatchRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSVCreateTbBatchRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pCreateReq</name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>comment</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCreateReq</name><operator>-&gt;</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>tFreeSVCreateTbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rcode</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessAlterStbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVCreateStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>       <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_ALTER_STB_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// decode req</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>metaAlterSTable</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessDropStbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVDropStbReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>rcode</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>     <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>      <modifier>*</modifier></type><name>tbUidList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_CREATE_STB_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// decode request</comment>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVDropStbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rcode</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// process request</comment>
  <expr_stmt><expr><name>tbUidList</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tbUidList</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaDropSTable</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>, <argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rcode</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tqUpdateTbUidList</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>tbUidList</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rcode</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdProcessRSmaDrop</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rcode</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// return rsp</comment>
<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>tbUidList</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tbUidList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>rcode</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessAlterTbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVAlterTbReq</name></type>  <name>vAlterTbReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVAlterTbRsp</name></type>  <name>vAlterTbRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>      <name>dc</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>rcode</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type>      <name>ec</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableMetaRsp</name></type> <name>vMetaRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_ALTER_TABLE_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// decode</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVAlterTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vAlterTbReq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>vAlterTbRsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// process</comment>
  <if_stmt><if>if <condition>(<expr><call><name>metaAlterTable</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vAlterTbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vMetaRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>vAlterTbRsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rcode</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>vMetaRsp</name><operator>.</operator><name>pSchemas</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vnodeUpdateMetaRsp</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vMetaRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>vAlterTbRsp</name><operator>.</operator><name>pMeta</name></name> <operator>=</operator> <operator>&amp;</operator><name>vMetaRsp</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVAlterTbRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vAlterTbRsp</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSVAlterTbRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vAlterTbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>vMetaRsp</name><operator>.</operator><name>pSchemas</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>vMetaRsp</name><operator>.</operator><name>pSchemas</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessDropTbReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVDropTbBatchReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVDropTbBatchRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>         <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type>         <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>          <modifier>*</modifier></type><name>tbUids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbUidStore</name>     <modifier>*</modifier></type><name>pStore</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_DROP_TABLE_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

  <comment type="line">// decode req</comment>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>tDecodeSVDropTbBatchReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// process req</comment>
  <expr_stmt><expr><name>tbUids</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>nReqs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>rsp</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>req</name><operator>.</operator><name>nReqs</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SVDropTbRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tbUids</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>rsp</name><operator>.</operator><name>pArray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iReq</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iReq</name> <operator>&lt;</operator> <name><name>req</name><operator>.</operator><name>nReqs</name></name></expr>;</condition> <incr><expr><name>iReq</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVDropTbReq</name> <modifier>*</modifier></type><name>pDropTbReq</name> <init>= <expr><name><name>req</name><operator>.</operator><name>pReqs</name></name> <operator>+</operator> <name>iReq</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SVDropTbRsp</name></type>  <name>dropTbRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>tb_uid_t</name></type>     <name>tbUid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="block">/* code */</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>metaDropTable</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pDropTbReq</name></expr></argument>, <argument><expr><name>tbUids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tbUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pDropTbReq</name><operator>-&gt;</operator><name>igNotExists</name></name> <operator>&amp;&amp;</operator> <name>terrno</name> <operator>==</operator> <name>TSDB_CODE_TDB_TABLE_NOT_EXIST</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dropTbRsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>dropTbRsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>dropTbRsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>tbUid</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tdFetchTbUidList</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pStore</name></expr></argument>, <argument><expr><name><name>pDropTbReq</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>tbUid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dropTbRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tqUpdateTbUidList</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>tbUids</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdUpdateTbUidList</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><name>pStore</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>tbUids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tdUidStoreFree</name><argument_list>(<argument><expr><name>pStore</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVDropTbBatchRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSVDropTbBatchRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>rsp</name><operator>.</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeDebugPrintSingleSubmitMsg</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>SSubmitBlk</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SSubmitMsgIter</name> <modifier>*</modifier></type><name>msgIter</name></decl></parameter>,
                                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubmitBlkIter</name></type> <name>blkIter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSchema</name>      <modifier>*</modifier></type><name>pSchema</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>       <name>suid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSRow</name>        <modifier>*</modifier></type><name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>rv</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tInitSubmitBlkIter</name><argument_list>(<argument><expr><name>msgIter</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blkIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>blkIter</name><operator>.</operator><name>row</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pSchema</name> <operator>=</operator> <call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name><name>msgIter</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><call><name>TD_ROW_SVER</name><argument_list>(<argument><expr><name><name>blkIter</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// TODO: use the real schema</comment>
  <if_stmt><if>if <condition>(<expr><name>pSchema</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>suid</name> <operator>=</operator> <name><name>msgIter</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rv</name> <operator>=</operator> <call><name>TD_ROW_SVER</name><argument_list>(<argument><expr><name><name>blkIter</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pSchema</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s:%d no valid schema\n"</literal></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>__tags</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>__tags</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"%s: uid %"</literal> <name>PRIi64</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><name>tags</name></expr></argument>, <argument><expr><name><name>msgIter</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>tGetSubmitBlkNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blkIter</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tdSRowPrint</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>__tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeDebugPrintSubmitMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SSubmitReq</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pMsg</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SSubmitMsgIter</name></type> <name>msgIter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMeta</name>         <modifier>*</modifier></type><name>pMeta</name> <init>= <expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitBlk</name>    <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tInitSubmitMsgIter</name><argument_list>(<argument><expr><name>pMsg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgIter</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tGetSubmitMsgNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>vnodeDebugPrintSingleSubmitMsg</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgIter</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessSubmitReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSubmitReq</name>    <modifier>*</modifier></type><name>pSubmitReq</name> <init>= <expr><operator>(</operator><name>SSubmitReq</name> <operator>*</operator><operator>)</operator><name>pReq</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitRsp</name></type>     <name>submitRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitMsgIter</name></type> <name>msgIter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitBlk</name>    <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVCreateTbReq</name></type>  <name>createTbReq</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>       <name>decoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>nRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>tsize</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type>       <name>encoder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>        <modifier>*</modifier></type><name>newTbUids</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVStatis</name></type>       <name>statis</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>           <name>tbCreated</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSubmitReq</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>statis</name><operator>.</operator><name>nBatchInsert</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_DEBUG_PRINT_ROW</name></cpp:ifdef>
  <expr_stmt><expr><call><name>vnodeDebugPrintSubmitMsg</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><call><name>tsdbScanAndConvertSubmitMsg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name>pSubmitReq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// handle the request</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tInitSubmitMsgIter</name><argument_list>(<argument><expr><name>pSubmitReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgIter</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>submitRsp</name><operator>.</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>msgIter</name><operator>.</operator><name>numOfBlocks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSubmitBlkRsp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>newTbUids</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>msgIter</name><operator>.</operator><name>numOfBlocks</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>submitRsp</name><operator>.</operator><name>pArray</name></name> <operator>||</operator> <operator>!</operator><name>newTbUids</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tGetSubmitMsgNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>msgIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SSubmitBlkRsp</name></type> <name>submitBlkRsp</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>tbCreated</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <comment type="line">// create table for auto create table mode</comment>
    <if_stmt><if>if <condition>(<expr><name><name>msgIter</name><operator>.</operator><name>schemaLen</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>msgIter</name><operator>.</operator><name>schemaLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateTbReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>grantCheck</name><argument_list>(<argument><expr><name>TSDB_GRANT_TIMESERIES</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>=</operator> <call><name>grantCheck</name><argument_list>(<argument><expr><name>TSDB_GRANT_TABLE</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>metaCreateTable</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>createTbReq</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>submitBlkRsp</name><operator>.</operator><name>pMeta</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_TDB_TABLE_ALREADY_EXIST</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>submitBlkRsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name><name>submitBlkRsp</name><operator>.</operator><name>pMeta</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>vnodeUpdateMetaRsp</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>submitBlkRsp</name><operator>.</operator><name>pMeta</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>newTbUids</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>createTbReq</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>submitBlkRsp</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>createTbReq</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>submitBlkRsp</name><operator>.</operator><name>tblFName</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>dbname</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>createTbReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>submitBlkRsp</name><operator>.</operator><name>tblFName</name></name></expr></argument>, <argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>dbname</name></name></expr></argument>, <argument><expr><name><name>createTbReq</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>tbCreated</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>msgIter</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>createTbReq</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>createTbReq</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>msgIter</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>msgIter</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>TD_DEBUG_PRINT_ROW</name></cpp:ifdef>
      <expr_stmt><expr><call><name>vnodeDebugPrintSingleSubmitMsg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgIter</name></expr></argument>, <argument><expr><literal type="string">"real uid"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>createTbReq</name><operator>.</operator><name>ctb</name><operator>.</operator><name>tagName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tsdbInsertTableData</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>msgIter</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>submitBlkRsp</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>submitBlkRsp</name><operator>.</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>submitRsp</name><operator>.</operator><name>numOfRows</name></name> <operator>+=</operator> <name><name>submitBlkRsp</name><operator>.</operator><name>numOfRows</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>submitRsp</name><operator>.</operator><name>affectedRows</name></name> <operator>+=</operator> <name><name>submitBlkRsp</name><operator>.</operator><name>affectedRows</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>tbCreated</name> <operator>||</operator> <name><name>submitBlkRsp</name><operator>.</operator><name>code</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>submitRsp</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>submitBlkRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>newTbUids</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, add %d table into query table list in handling submit"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>newTbUids</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tqUpdateTbUidList</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTq</name></name></expr></argument>, <argument><expr><name>newTbUids</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>newTbUids</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSSubmitRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>submitRsp</name></expr></argument>, <argument><expr><name>tsize</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name>tsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <name>tsize</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name>tsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSSubmitRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>submitRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>encoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>submitRsp</name><operator>.</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>tFreeSSubmitBlkRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// TODO: the partial success scenario and the error case</comment>
  <comment type="line">// =&gt; If partial success, extract the success submitted rows and reconstruct a new submit msg, and push to level</comment>
  <comment type="line">// 1/level 2.</comment>
  <comment type="line">// TODO: refactor</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>statis</name><operator>.</operator><name>nBatchInsertSuccess</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tdProcessRSmaSubmit</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>STREAM_INPUT__DATA_SUBMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// N.B. not strict as the following procedure is not atomic</comment>
  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nInsert</name></name></expr></argument>, <argument><expr><name><name>submitRsp</name><operator>.</operator><name>numOfRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nInsertSuccess</name></name></expr></argument>, <argument><expr><name><name>submitRsp</name><operator>.</operator><name>affectedRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nBatchInsert</name></name></expr></argument>, <argument><expr><name><name>statis</name><operator>.</operator><name>nBatchInsert</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>atomic_add_fetch_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>statis</name><operator>.</operator><name>nBatchInsertSuccess</name></name></expr></argument>, <argument><expr><name><name>statis</name><operator>.</operator><name>nBatchInsertSuccess</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, submit success, index:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessCreateTSmaReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVCreateTSmaReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>        <name>coder</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pRsp</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_CREATE_SMA_RSP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// decode and process req</comment>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tDecodeSVCreateTSmaReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_MSG_DECODE_ERROR</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRsp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tdProcessTSmaCreate</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pSma</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pRsp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, success to create tsma %s:%"</literal> <name>PRIi64</name> <literal type="string">" version %"</literal> <name>PRIi64</name> <literal type="string">" for table %"</literal> <name>PRIi64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name><name>req</name><operator>.</operator><name>indexName</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>indexUid</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>tableUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>coder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to create tsma %s:%"</literal> <name>PRIi64</name> <literal type="string">" version %"</literal> <name>PRIi64</name> <literal type="string">"for table %"</literal> <name>PRIi64</name> <literal type="string">" since %s"</literal></expr></argument>,
         <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>indexName</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>indexUid</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>tableUid</name></name></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief specific for smaDstVnode
 *
 * @param pVnode
 * @param pCont
 * @param contLen
 * @return int32_t
 */</comment>
<function><type><name>int32_t</name></type> <name>vnodeProcessCreateTSma</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pCont</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>contLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>vnodeProcessCreateTSmaReq</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pCont</name></expr></argument>, <argument><expr><name>contLen</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessAlterConfirmReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, alter replica confim msg is processed"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_ALTER_CONFIRM_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessAlterHashRangeReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, alter hashrange msg will be processed"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// todo</comment>
  <comment type="line">// 1. stop work</comment>
  <comment type="line">// 2. adjust hash range / compact / remove wals / rename vgroups</comment>
  <comment type="line">// 3. reload sync</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessAlterConfigReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>walChanged</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>tsdbChanged</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SAlterVnodeConfigReq</name></type> <name>req</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDeserializeSAlterVnodeConfigReq</name><argument_list>(<argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>req</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_INVALID_MSG</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, start to alter vnode config, page:%d pageSize:%d buffer:%d szPage:%d szBuf:%"</literal> <name>PRIu64</name>
        <literal type="string">" cacheLast:%d cacheLastSize:%d days:%d keep0:%d keep1:%d keep2:%d fsync:%d level:%d"</literal></expr></argument>,
        <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>pages</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>pageSize</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>pageSize</name></name> <operator>*</operator> <literal type="number">1024</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>req</name><operator>.</operator><name>buffer</name></name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>,
        <argument><expr><name><name>req</name><operator>.</operator><name>cacheLast</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>cacheLastSize</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>daysPerFile</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>daysToKeep0</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>daysToKeep1</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>daysToKeep2</name></name></expr></argument>,
        <argument><expr><name><name>req</name><operator>.</operator><name>walFsyncPeriod</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>walLevel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cacheLastSize</name></name> <operator>!=</operator> <name><name>req</name><operator>.</operator><name>cacheLastSize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cacheLastSize</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>cacheLastSize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbCacheSetCapacity</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cacheLastSize</name></name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szBuf</name></name> <operator>!=</operator> <name><name>req</name><operator>.</operator><name>buffer</name></name> <operator>*</operator> <literal type="number">1024LL</literal> <operator>*</operator> <literal type="number">1024LL</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode buffer is changed from %"</literal> <name>PRId64</name> <literal type="string">" to %"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szBuf</name></name></expr></argument>,
          <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name><name>req</name><operator>.</operator><name>buffer</name></name> <operator>*</operator> <literal type="number">1024LL</literal> <operator>*</operator> <literal type="number">1024LL</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szBuf</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>buffer</name></name> <operator>*</operator> <literal type="number">1024LL</literal> <operator>*</operator> <literal type="number">1024LL</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szCache</name></name> <operator>!=</operator> <name><name>req</name><operator>.</operator><name>pages</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>metaAlterCache</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>pages</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to change vnode pages from %d to %d failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>,
             <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szCache</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>pages</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>errno</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>vInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode pages is changed from %d to %d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szCache</name></name></expr></argument>, <argument><expr><name><name>req</name><operator>.</operator><name>pages</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szCache</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>pages</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cacheLast</name></name> <operator>!=</operator> <name><name>req</name><operator>.</operator><name>cacheLast</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cacheLast</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>cacheLast</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>walCfg</name><operator>.</operator><name>fsyncPeriod</name></name> <operator>!=</operator> <name><name>req</name><operator>.</operator><name>walFsyncPeriod</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>walCfg</name><operator>.</operator><name>fsyncPeriod</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>walFsyncPeriod</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>walChanged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>walCfg</name><operator>.</operator><name>level</name></name> <operator>!=</operator> <name><name>req</name><operator>.</operator><name>walLevel</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>walCfg</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>walLevel</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>walChanged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>keep0</name></name> <operator>!=</operator> <name><name>req</name><operator>.</operator><name>daysToKeep0</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>keep0</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>daysToKeep0</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tsdbChanged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>keep1</name></name> <operator>!=</operator> <name><name>req</name><operator>.</operator><name>daysToKeep1</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>keep1</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>daysToKeep1</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tsdbChanged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>keep2</name></name> <operator>!=</operator> <name><name>req</name><operator>.</operator><name>daysToKeep2</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>keep2</name></name> <operator>=</operator> <name><name>req</name><operator>.</operator><name>daysToKeep2</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tsdbChanged</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>walChanged</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>walAlter</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pWal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>walCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tsdbChanged</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbSetKeepCfg</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessBatchDeleteReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBatchDeleteReq</name></type> <name>deleteReq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name></type>        <name>decoder</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecodeSBatchDeleteReq</name><argument_list>(<argument><expr><operator>&amp;</operator><name>decoder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>deleteReq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>sz</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>deleteReq</name><operator>.</operator><name>deleteReqs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>sz</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSingleDeleteReq</name> <modifier>*</modifier></type><name>pOneReq</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>deleteReq</name><operator>.</operator><name>deleteReqs</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>             <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>pOneReq</name><operator>-&gt;</operator><name>tbname</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByName</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>vDebug</name><argument_list>(<argument><expr><literal type="string">"stream delete msg, skip vgId:%d since no table: %s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>vgId</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name> <init>= <expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsdbDeleteTableData</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>deleteReq</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name><name>pOneReq</name><operator>-&gt;</operator><name>startTs</name></name></expr></argument>, <argument><expr><name><name>pOneReq</name><operator>-&gt;</operator><name>endTs</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>vError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, delete error since %s, suid:%"</literal> <name>PRId64</name> <literal type="string">", uid:%"</literal> <name>PRId64</name> <literal type="string">", start ts:%"</literal> <name>PRId64</name> <literal type="string">", end ts:%"</literal> <name>PRId64</name></expr></argument>,
             <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>terrstr</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name><name>deleteReq</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name><name>pOneReq</name><operator>-&gt;</operator><name>startTs</name></name></expr></argument>, <argument><expr><name><name>pOneReq</name><operator>-&gt;</operator><name>endTs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>deleteReq</name><operator>.</operator><name>deleteReqs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>vnodeProcessDeleteReq</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pReq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>SRpcMsg</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDecoder</name>   <modifier>*</modifier></type><name>pCoder</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SDecoder</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDeleteRes</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SDeleteRes</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>msgType</name></name> <operator>=</operator> <name>TDMT_VND_DELETE_RSP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>code</name></name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_uid_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tDecoderInit</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name>pReq</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDecodeDeleteRes</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <operator>(</operator><name><name>pRes</name><operator>-&gt;</operator><name>skey</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pRes</name><operator>-&gt;</operator><name>ekey</name></name> <operator>!=</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iUid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iUid</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iUid</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDeleteTableData</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name></expr></argument>, <argument><expr><name>iUid</name></expr></argument>)</argument_list></call></expr></argument>,
                               <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><name>pCoder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pRes</name><operator>-&gt;</operator><name>uidList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SVDeleteRsp</name></type> <name>rsp</name> <init>= <expr><block>{<expr><operator>.</operator><name>affectedRows</name> <operator>=</operator> <name><name>pRes</name><operator>-&gt;</operator><name>affectedRows</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncodeSize</name><argument_list>(<argument><expr><name>tEncodeSVDeleteRsp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name> <operator>=</operator> <call><name>rpcMallocCont</name><argument_list>(<argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SEncoder</name></type> <name>ec</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tEncoderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>pCont</name></name></expr></argument>, <argument><expr><name><name>pRsp</name><operator>-&gt;</operator><name>contLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncodeSVDeleteRsp</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tEncoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
