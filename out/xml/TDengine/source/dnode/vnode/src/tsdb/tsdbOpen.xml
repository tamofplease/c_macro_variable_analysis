<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbOpen.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>tsdbSetKeepCfg</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>STsdbCfg</name> <modifier>*</modifier></type><name>pCfg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STsdbKeepCfg</name> <modifier>*</modifier></type><name>pKeepCfg</name> <init>= <expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>days</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>days</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>keep0</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>keep0</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>keep1</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>keep1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>keep2</name></name> <operator>=</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>keep2</name></name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief
 *
 * @param pVnode
 * @param ppTsdb
 * @param dir
 * @return int
 */</comment>
<function><type><name>int</name></type> <name>tsdbOpen</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>STsdb</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTsdb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dir</name></decl></parameter>, <parameter><decl><type><name>STsdbKeepCfg</name> <modifier>*</modifier></type><name>pKeepCfg</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>slen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppTsdb</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>slen</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>

  <comment type="line">// create handle</comment>
  <expr_stmt><expr><name>pTsdb</name> <operator>=</operator> <operator>(</operator><name>STsdb</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pTsdb</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>slen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTsdb</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTsdb</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_PATH_MAX</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// taosRealPath(pTsdb-&gt;path, NULL, slen);</comment>
  <expr_stmt><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name> <operator>=</operator> <name>pVnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pKeepCfg</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbSetKeepCfg</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name></name></expr></argument>, <argument><expr><name>pKeepCfg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STsdbKeepCfg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// create dir</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tfsMkdir</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosMkDir</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// open tsdb</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tsdbFSOpen</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>rollback</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tsdbOpenCache</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb is opened at %s, days:%d, keep:%d,%d,%d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name><operator>.</operator><name>days</name></name></expr></argument>,
            <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name><operator>.</operator><name>keep0</name></name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name><operator>.</operator><name>keep1</name></name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name><operator>.</operator><name>keep2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppTsdb</name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>tsdbClose</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier><modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pTsdb</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pTsdb</name><operator>)</operator><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbMemTableDestroy</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pTsdb</name><operator>)</operator><operator>-&gt;</operator><name>mem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pTsdb</name><operator>)</operator><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pTsdb</name><operator>)</operator><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadRwlockDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pTsdb</name><operator>)</operator><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tsdbFSClose</name><argument_list>(<argument><expr><operator>*</operator><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbCloseCache</name><argument_list>(<argument><expr><operator>*</operator><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><operator>*</operator><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
