<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbFile.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>tPutHeadFile</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SHeadFile</name> <modifier>*</modifier></type><name>pHeadFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tGetHeadFile</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SHeadFile</name> <modifier>*</modifier></type><name>pHeadFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHeadFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHeadFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHeadFile</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tPutDataFile</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SDataFile</name> <modifier>*</modifier></type><name>pDataFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tGetDataFile</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SDataFile</name> <modifier>*</modifier></type><name>pDataFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tPutSttFile</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SSttFile</name> <modifier>*</modifier></type><name>pSttFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttFile</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tGetSttFile</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SSttFile</name> <modifier>*</modifier></type><name>pSttFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttFile</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tPutSmaFile</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SSmaFile</name> <modifier>*</modifier></type><name>pSmaFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSmaFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSmaFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tGetSmaFile</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SSmaFile</name> <modifier>*</modifier></type><name>pSmaFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSmaFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSmaFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// EXPOSED APIS ==================================================</comment>
<function><type><name>void</name></type> <name>tsdbHeadFileName</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDiskID</name></type> <name>did</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fid</name></decl></parameter>, <parameter><decl><type><name>SHeadFile</name> <modifier>*</modifier></type><name>pHeadF</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>fname</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%s%s%sv%df%dver%"</literal> <name>PRId64</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>tfsGetDiskPath</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name>did</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><name><name>pHeadF</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>, <argument><expr><literal type="string">".head"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbDataFileName</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDiskID</name></type> <name>did</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fid</name></decl></parameter>, <parameter><decl><type><name>SDataFile</name> <modifier>*</modifier></type><name>pDataF</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>fname</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%s%s%sv%df%dver%"</literal> <name>PRId64</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>tfsGetDiskPath</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name>did</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><name><name>pDataF</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>, <argument><expr><literal type="string">".data"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbSttFileName</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDiskID</name></type> <name>did</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fid</name></decl></parameter>, <parameter><decl><type><name>SSttFile</name> <modifier>*</modifier></type><name>pSttF</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>fname</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%s%s%sv%df%dver%"</literal> <name>PRId64</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>tfsGetDiskPath</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name>did</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><name><name>pSttF</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>, <argument><expr><literal type="string">".stt"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbSmaFileName</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDiskID</name></type> <name>did</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fid</name></decl></parameter>, <parameter><decl><type><name>SSmaFile</name> <modifier>*</modifier></type><name>pSmaF</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>fname</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%s%s%sv%df%dver%"</literal> <name>PRId64</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>tfsGetDiskPath</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name>did</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><name><name>pSmaF</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>, <argument><expr><literal type="string">".sma"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tsdbDelFileIsSame</name><parameter_list>(<parameter><decl><type><name>SDelFile</name> <modifier>*</modifier></type><name>pDelFile1</name></decl></parameter>, <parameter><decl><type><name>SDelFile</name> <modifier>*</modifier></type><name>pDelFile2</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pDelFile1</name><operator>-&gt;</operator><name>commitID</name></name> <operator>==</operator> <name><name>pDelFile2</name><operator>-&gt;</operator><name>commitID</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbDFileRollback</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>, <parameter><decl><type><name>EDataFileT</name></type> <name>ftype</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFD</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>hdr</name><index>[<expr><name>TSDB_FHDR_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// truncate</comment>
  <switch>switch <condition>(<expr><name>ftype</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_FILE</name></expr>:</case>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbDataFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tPutDataFile</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_SMA_FILE</name></expr>:</case>
      <expr_stmt><expr><name>size</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbSmaFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tPutSmaFile</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <expr_stmt><expr><call><name>taosCalcChecksumAppend</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// open</comment>
  <expr_stmt><expr><name>pFD</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TD_FILE_WRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// ftruncate</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosFtruncateFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><call><name>tsdbLogicToFileSize</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbPageSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// update header</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>taosLSeekFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// sync</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// close</comment>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb rollback file failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tPutDFileSet</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// data</comment>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutHeadFile</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutDataFile</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutSmaFile</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// stt</comment>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutU8</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutSttFile</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGetDFileSet</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name><operator>.</operator><name>level</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// head</comment>
  <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name> <operator>=</operator> <operator>(</operator><name>SHeadFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHeadFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetHeadFile</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// data</comment>
  <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name> <operator>=</operator> <operator>(</operator><name>SDataFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetDataFile</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// sma</comment>
  <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name> <operator>=</operator> <operator>(</operator><name>SSmaFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmaFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetSmaFile</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// stt</comment>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetU8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SSttFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>nRef</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetSttFile</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SDelFile ===============================================</comment>
<function><type><name>void</name></type> <name>tsdbDelFileName</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDelFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>char</name></type> <name><name>fname</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%s%s%sv%dver%"</literal> <name>PRId64</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>, <argument><expr><literal type="string">".del"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tPutDelFile</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SDelFile</name> <modifier>*</modifier></type><name>pDelFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDelFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDelFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDelFile</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGetDelFile</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SDelFile</name> <modifier>*</modifier></type><name>pDelFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelFile</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>
</unit>
