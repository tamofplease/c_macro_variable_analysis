<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbRead.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osDef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ASCENDING_TRAVERSE</name><parameter_list>(<parameter><type><name>o</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(o == TSDB_ORDER_ASC)</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>EXTERNAL_ROWS_PREV</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
  <decl><name>EXTERNAL_ROWS_MAIN</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
  <decl><name>EXTERNAL_ROWS_NEXT</name> <init>= <expr><literal type="number">0x3</literal></expr></init></decl>,
}</block></enum></type> <name>EContentData</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>STbDataIter</name><modifier>*</modifier></type> <name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>         <name>hasVal</name></decl>;</decl_stmt>
}</block></struct></type> <name>SIterInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfBlocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfLastFiles</name></decl>;</decl_stmt>
}</block></struct></type> <name>SBlockNumber</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SBlockIndex</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>ordinalIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>inFileOffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>window</name></decl>;</decl_stmt>  <comment type="line">// todo replace it with overlap flag.</comment>
}</block></struct></type> <name>SBlockIndex</name>;</typedef>

<typedef>typedef <type><struct>struct <name>STableBlockScanInfo</name> <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type>  <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>     <name>lastKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMapData</name></type>  <name>mapData</name></decl>;</decl_stmt>            <comment type="line">// block info (compressed)</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>   <name>pBlockList</name></decl>;</decl_stmt>         <comment type="line">// block data index list, SArray&lt;SBlockIndex&gt;</comment>
  <decl_stmt><decl><type><name>SIterInfo</name></type> <name>iter</name></decl>;</decl_stmt>               <comment type="line">// mem buffer skip list iterator</comment>
  <decl_stmt><decl><type><name>SIterInfo</name></type> <name>iiter</name></decl>;</decl_stmt>              <comment type="line">// imem buffer skip list iterator</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>   <name>delSkyline</name></decl>;</decl_stmt>         <comment type="line">// delete info for this table</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>fileDelIndex</name></decl>;</decl_stmt>       <comment type="line">// file block delete index</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>lastBlockDelIndex</name></decl>;</decl_stmt>  <comment type="line">// delete index for last block</comment>
  <decl_stmt><decl><type><name>bool</name></type>      <name>iterInit</name></decl>;</decl_stmt>           <comment type="line">// whether to initialize the in-memory skip list iterator or not</comment>
}</block></struct></type> <name>STableBlockScanInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SBlockOrderWrapper</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name></decl>;</decl_stmt>
}</block></struct></type> <name>SBlockOrderWrapper</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SBlockOrderSupporter</name> <block>{
  <decl_stmt><decl><type><name>SBlockOrderWrapper</name><modifier>*</modifier><modifier>*</modifier></type> <name>pDataBlockInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>             <name>indexPerTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>             <name>numOfBlocksPerTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>numOfTables</name></decl>;</decl_stmt>
}</block></struct></type> <name>SBlockOrderSupporter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SIOCostSummary</name> <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfBlocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>blockLoadTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>buildmemBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>headFileLoad</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>headFileLoadTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>smaDataLoad</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>smaLoadTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>lastBlockLoad</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>lastBlockLoadTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>composedBlocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>buildComposedBlockTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>createScanInfoList</name></decl>;</decl_stmt>
}</block></struct></type> <name>SIOCostSummary</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SBlockLoadSuppInfo</name> <block>{
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>          <name>pColAgg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnDataAgg</name></type>   <name>tsColAgg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type>         <name>colId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type>         <name>slotId</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>numOfCols</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type>           <name>buildBuf</name></decl>;</decl_stmt>  <comment type="line">// build string tmp buffer, todo remove it later after all string format being updated.</comment>
  <decl_stmt><decl><type><name>bool</name></type>             <name>smaValid</name></decl>;</decl_stmt>  <comment type="line">// the sma on all queried columns are activated</comment>
}</block></struct></type> <name>SBlockLoadSuppInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SLastBlockReader</name> <block>{
  <decl_stmt><decl><type><name>STimeWindow</name></type>        <name>window</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVersionRange</name></type>      <name>verRange</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>order</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMergeTree</name></type>         <name>mergeTree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttBlockLoadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>SLastBlockReader</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SFilesetIter</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>numOfFiles</name></decl>;</decl_stmt>  <comment type="line">// number of total files</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>index</name></decl>;</decl_stmt>       <comment type="line">// current accessed index in the list</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>           <name>pFileList</name></decl>;</decl_stmt>   <comment type="line">// data file list</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>order</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl>;</decl_stmt>  <comment type="line">// last file block reader</comment>
}</block></struct></type> <name>SFilesetIter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SFileDataBlockInfo</name> <block>{
  <comment type="line">// index position in STableBlockScanInfo in order to check whether neighbor block overlaps with it</comment>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>tbBlockIdx</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFileDataBlockInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SDataBlockIter</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>numOfBlocks</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>index</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>   <name>blockList</name></decl>;</decl_stmt>  <comment type="line">// SArray&lt;SFileDataBlockInfo&gt;</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>order</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlk</name></type>  <name>block</name></decl>;</decl_stmt>  <comment type="line">// current SDataBlk data</comment>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pTableMap</name></decl>;</decl_stmt>
}</block></struct></type> <name>SDataBlockIter</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SFileBlockDumpInfo</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalRows</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>lastKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>allDumped</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFileBlockDumpInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SUidOrderCheckInfo</name> <block>{
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>tableUidList</name></decl>;</decl_stmt>  <comment type="line">// access table uid list in uid ascending order list</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>currentIndex</name></decl>;</decl_stmt>  <comment type="line">// index in table uid list</comment>
}</block></struct></type> <name>SUidOrderCheckInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SReaderStatus</name> <block>{
  <decl_stmt><decl><type><name>bool</name></type>                  <name>loadFromFile</name></decl>;</decl_stmt>       <comment type="line">// check file stage</comment>
  <decl_stmt><decl><type><name>bool</name></type>                  <name>composedDataBlock</name></decl>;</decl_stmt>  <comment type="line">// the returned data block is a composed block or not</comment>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type>             <name>pTableMap</name></decl>;</decl_stmt>          <comment type="line">// SHash&lt;STableBlockScanInfo&gt;</comment>
  <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTableIter</name></decl>;</decl_stmt>         <comment type="line">// table iterator used in building in-memory buffer data blocks.</comment>
  <decl_stmt><decl><type><name>SUidOrderCheckInfo</name></type>    <name>uidCheckInfo</name></decl>;</decl_stmt>       <comment type="line">// check all table in uid order</comment>
  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name></type>    <name>fBlockDumpInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDFileSet</name><modifier>*</modifier></type>            <name>pCurrentFileset</name></decl>;</decl_stmt>  <comment type="line">// current opened file set</comment>
  <decl_stmt><decl><type><name>SBlockData</name></type>            <name>fileBlockData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFilesetIter</name></type>          <name>fileIter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlockIter</name></type>        <name>blockIter</name></decl>;</decl_stmt>
}</block></struct></type> <name>SReaderStatus</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SBlockInfoBuf</name> <block>{
  <decl_stmt><decl><type><name>int32_t</name></type> <name>currentIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numPerBucket</name></decl>;</decl_stmt>
}</block></struct></type> <name>SBlockInfoBuf</name>;</typedef>

<struct>struct <name>STsdbReader</name> <block>{
  <decl_stmt><decl><type><name>STsdb</name><modifier>*</modifier></type>             <name>pTsdb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>suid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>            <name>order</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>               <name>freeBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type>        <name>window</name></decl>;</decl_stmt>  <comment type="line">// the primary query time window that applies to all queries</comment>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>       <name>pResBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>capacity</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SReaderStatus</name></type>      <name>status</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>              <name>idStr</name></decl>;</decl_stmt>  <comment type="line">// query info handle, for debug purpose</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>type</name></decl>;</decl_stmt>   <comment type="line">// query type: 1. retrieve all data blocks, 2. retrieve direct prev|next rows</comment>
  <decl_stmt><decl><type><name>SBlockLoadSuppInfo</name></type> <name>suppInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbReadSnap</name><modifier>*</modifier></type>     <name>pReadSnap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SIOCostSummary</name></type>     <name>cost</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type>          <name>pSchema</name></decl>;</decl_stmt>     <comment type="line">// the newest version schema</comment>
  <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type>          <name>pMemSchema</name></decl>;</decl_stmt>  <comment type="line">// the previous schema for in-memory data, to avoid load schema too many times</comment>
  <decl_stmt><decl><type><name>SDataFReader</name><modifier>*</modifier></type>      <name>pFileReader</name></decl>;</decl_stmt> <comment type="line">// the file reader</comment>
  <decl_stmt><decl><type><name>SDelFReader</name><modifier>*</modifier></type>       <name>pDelFReader</name></decl>;</decl_stmt> <comment type="line">// the del file reader</comment>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>            <name>pDelIdx</name></decl>;</decl_stmt>     <comment type="line">// del file block index;</comment>
  <decl_stmt><decl><type><name>SVersionRange</name></type>      <name>verRange</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockInfoBuf</name></type>      <name>blockInfoBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>step</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbReader</name><modifier>*</modifier></type>       <name><name>innerReader</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>getCurrentBlockInfo</name><parameter_list>(<parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type>      <name>buildDataBlockFromBufImpl</name><parameter_list>(<parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>endKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>,
                                          <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TSDBROW</name><modifier>*</modifier></type> <name>getValidMemRow</name><parameter_list>(<parameter><decl><type><name>SIterInfo</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pDelList</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>doMergeRowsInFileBlocks</name><parameter_list>(<parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>,
                                        <parameter><decl><type><name>SRowMerger</name><modifier>*</modifier></type> <name>pMerger</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>doMergeRowsInLastBlock</name><parameter_list>(<parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>,
                                       <parameter><decl><type><name>SRowMerger</name><modifier>*</modifier></type> <name>pMerger</name></decl></parameter>, <parameter><decl><type><name>SVersionRange</name><modifier>*</modifier></type> <name>pVerRange</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>doMergeRowsInBuf</name><parameter_list>(<parameter><decl><type><name>SIterInfo</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDelList</name></decl></parameter>, <parameter><decl><type><name>SRowMerger</name><modifier>*</modifier></type> <name>pMerger</name></decl></parameter>,
                                 <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>doAppendRowFromTSRow</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>pTSRow</name></decl></parameter>,
                                     <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>  <name>doAppendRowFromFileBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>,
                                         <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>     <name>setComposedBlockFlag</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>composed</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>     <name>hasBeenDropped</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pDelList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>,
                               <parameter><decl><type><name>SVersionRange</name><modifier>*</modifier></type> <name>pVerRange</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>doMergeMemTableMultiRows</name><parameter_list>(<parameter><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>pRow</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SIterInfo</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDelList</name></decl></parameter>,
                                        <parameter><decl><type><name>STSRow</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTSRow</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>freeTSRow</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>doMergeMemIMemRows</name><parameter_list>(<parameter><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>pRow</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>piRow</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>,
                                  <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STSRow</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTSRow</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>mergeRowsInFileBlocks</name><parameter_list>(<parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>key</name></decl></parameter>,
                                     <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>initDelSkylineIterator</name><parameter_list>(<parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STbData</name><modifier>*</modifier></type> <name>pMemTbData</name></decl></parameter>,
                                      <parameter><decl><type><name>STbData</name><modifier>*</modifier></type> <name>piMemTbData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>STsdb</name><modifier>*</modifier></type>  <name>getTsdbByRetentions</name><parameter_list>(<parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>winSKey</name></decl></parameter>, <parameter><decl><type><name>SRetention</name><modifier>*</modifier></type> <name>retentions</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idstr</name></decl></parameter>,
                                   <parameter><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>pLevel</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>SVersionRange</name></type> <name>getQueryVerRange</name><parameter_list>(<parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>level</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int64_t</name></type>       <name>getCurrentKeyInLastBlock</name><parameter_list>(<parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>          <name>hasDataInLastBlock</name><parameter_list>(<parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type>       <name>doBuildDataBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>TSDBKEY</name></type>       <name>getCurrentKeyInBuf</name><parameter_list>(<parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>          <name>hasDataInFileBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>          <name>initBlockDumpInfo</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>outOfTimeWindow</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWindow</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>(</operator><name>ts</name> <operator>&gt;</operator> <name><name>pWindow</name><operator>-&gt;</operator><name>ekey</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>ts</name> <operator>&lt;</operator> <name><name>pWindow</name><operator>-&gt;</operator><name>skey</name></name><operator>)</operator></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setColumnIdSlotList</name><parameter_list>(<parameter><decl><type><name>SBlockLoadSuppInfo</name><modifier>*</modifier></type> <name>pSupInfo</name></decl></parameter>, <parameter><decl><type><name>SColumnInfo</name><modifier>*</modifier></type> <name>pCols</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>pSlotIdList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>smaValid</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>numOfCols</name> <operator>*</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof><operator>*</operator><literal type="number">2</literal> <operator>+</operator> <name>POINTER_BYTES</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name></name> <operator>+</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfCols</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>buildBuf</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>*</operator><operator>)</operator> <operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name></name> <operator>+</operator> <operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfCols</name><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfCols</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>pSlotIdList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>buildBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>pCols</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>buildBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>updateBlockSMAInfo</name><parameter_list>(<parameter><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>, <parameter><decl><type><name>SBlockLoadSuppInfo</name><modifier>*</modifier></type> <name>pSupInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while<condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>pSupInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STColumn</name><modifier>*</modifier></type> <name>pTCol</name> <init>= <expr><operator>&amp;</operator><name><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_BSMA_ON</name><argument_list>(<argument><expr><name>pTCol</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>smaValid</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <return>return;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTCol</name><operator>-&gt;</operator><name>colId</name></name> <operator>&lt;</operator> <name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// do nothing</comment>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initBlockScanInfoBuf</name><parameter_list>(<parameter><decl><type><name>SBlockInfoBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><name>numOfTables</name> <operator>/</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>numPerBucket</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>remainder</name> <init>= <expr><name>numOfTables</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>numPerBucket</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name>num</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>numPerBucket</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableBlockScanInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>remainder</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>remainder</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STableBlockScanInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearBlockScanInfoBuf</name><parameter_list>(<parameter><decl><type><name>SBlockInfoBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>getPosInBlockInfoBuf</name><parameter_list>(<parameter><decl><type><name>SBlockInfoBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>bucketIndex</name> <init>= <expr><name>index</name> <operator>/</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>numPerBucket</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type>  <name>pBucket</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBuf</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>bucketIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><operator>(</operator><operator>*</operator><name>pBucket</name><operator>)</operator> <operator>+</operator> <operator>(</operator><name>index</name> <operator>%</operator> <name><name>pBuf</name><operator>-&gt;</operator><name>numPerBucket</name></name><operator>)</operator> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STableBlockScanInfo</name></expr></argument>)</argument_list></sizeof></expr>;</return>
</block_content>}</block></function>

<comment type="line">// NOTE: speedup the whole processing by preparing the buffer for STableBlockScanInfo in batch model</comment>
<function><type><specifier>static</specifier> <name>SHashObj</name><modifier>*</modifier></type> <name>createDataBlockScanInfo</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pTsdbReader</name></decl></parameter>, <parameter><decl><type><name>SBlockInfoBuf</name><modifier>*</modifier></type> <name>pBuf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>STableKeyInfo</name><modifier>*</modifier></type> <name>idList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// allocate buffer in order to load data blocks from file</comment>
  <comment type="line">// todo use simple hash instead, optimize the memory consumption</comment>
  <decl_stmt><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pTableMap</name> <init>=
      <expr><call><name>taosHashInit</name><argument_list>(<argument><expr><name>numOfTables</name></expr></argument>, <argument><expr><call><name>taosGetDefaultHashFunction</name><argument_list>(<argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>HASH_NO_LOCK</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTableMap</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>initBlockScanInfoBuf</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>numOfTables</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><call><name>getPosInBlockInfoBuf</name><argument_list>(<argument><expr><name>pBuf</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>idList</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>uid</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pTsdbReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>skey</name> <init>= <expr><name><name>pTsdbReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>skey</name> <operator>&gt;</operator> <name>INT64_MIN</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>skey</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>skey</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>ekey</name> <init>= <expr><name><name>pTsdbReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>ekey</name> <operator>&lt;</operator> <name>INT64_MAX</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>ekey</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr> </then><else>: <expr><name>ekey</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name>pTableMap</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pScanInfo</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbTrace</name><argument_list>(<argument><expr><literal type="string">"%p check table uid:%"</literal> <name>PRId64</name> <literal type="string">" from lastKey:%"</literal> <name>PRId64</name> <literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>pTsdbReader</name></expr></argument>, <argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
              <argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>lastKey</name></name></expr></argument>, <argument><expr><name><name>pTsdbReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pTsdbReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>createScanInfoList</name></name> <operator>=</operator> <operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p create %d tables scan-info, size:%.2f Kb, elapsed time:%.2f ms, %s"</literal></expr></argument>, <argument><expr><name>pTsdbReader</name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>,
            <argument><expr><operator>(</operator><sizeof>sizeof<argument_list>(<argument><expr><name>STableBlockScanInfo</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfTables</name><operator>)</operator> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>, <argument><expr><name><name>pTsdbReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>createScanInfoList</name></name></expr></argument>,
            <argument><expr><name><name>pTsdbReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pTableMap</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resetAllDataBlockScanInfo</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pTableMap</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pTableMap</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>STableBlockScanInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iterInit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>hasVal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>hasVal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iter</name></name> <operator>=</operator> <call><name>tsdbTbDataIterDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>iter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>iter</name></name> <operator>=</operator> <call><name>tsdbTbDataIterDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>delSkyline</name></name> <operator>=</operator> <call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name>ts</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>clearBlockScanInfo</name><parameter_list>(<parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iterInit</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>hasVal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>hasVal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iter</name></name> <operator>=</operator> <call><name>tsdbTbDataIterDestroy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>iter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>iter</name></name> <operator>=</operator> <call><name>tsdbTbDataIterDestroy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>delSkyline</name></name> <operator>=</operator> <call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pBlockList</name></name> <operator>=</operator> <call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMapDataClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>p</name><operator>-&gt;</operator><name>mapData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>destroyAllBlockScanInfo</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pTableMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pTableMap</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>clearBlockScanInfo</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><name>STableBlockScanInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosHashCleanup</name><argument_list>(<argument><expr><name>pTableMap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isEmptyQueryTimeWindow</name><parameter_list>(<parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pWindow</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pWindow</name><operator>-&gt;</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pWindow</name><operator>-&gt;</operator><name>ekey</name></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Update the query time window according to the data time to live(TTL) information, in order to avoid to return</comment>
<comment type="line">// the expired data to client, even it is queried already.</comment>
<function><type><specifier>static</specifier> <name>STimeWindow</name></type> <name>updateQueryTimeWindow</name><parameter_list>(<parameter><decl><type><name>STsdb</name><modifier>*</modifier></type> <name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STsdbKeepCfg</name><modifier>*</modifier></type> <name>pCfg</name> <init>= <expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>taosGetTimestamp</name><argument_list>(<argument><expr><name><name>pCfg</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>earilyTs</name> <init>= <expr><name>now</name> <operator>-</operator> <operator>(</operator><name><name>tsTickPerMin</name><index>[<expr><name><name>pCfg</name><operator>-&gt;</operator><name>precision</name></name></expr>]</index></name> <operator>*</operator> <name><name>pCfg</name><operator>-&gt;</operator><name>keep2</name></name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// needs to add one tick</comment>

  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><operator>*</operator><name>pWindow</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>&lt;</operator> <name>earilyTs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name>earilyTs</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>win</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>limitOutputBufferSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>rowLen</name> <operator>+=</operator> <name><name>pCond</name><operator>-&gt;</operator><name>colList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// make sure the output SSDataBlock size be less than 2MB.</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>int32_t</name></type> <name>TWOMB</name> <init>= <expr><literal type="number">2</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>capacity</name><operator>)</operator> <operator>*</operator> <name>rowLen</name> <operator>&gt;</operator> <name>TWOMB</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>capacity</name><operator>)</operator> <operator>=</operator> <name>TWOMB</name> <operator>/</operator> <name>rowLen</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// init file iterator</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initFilesetIterator</name><parameter_list>(<parameter><decl><type><name>SFilesetIter</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>aDFileSet</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfFileset</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aDFileSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <ternary><condition><expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><name>numOfFileset</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pFileList</name></name> <operator>=</operator> <name>aDFileSet</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>numOfFiles</name></name> <operator>=</operator> <name>numOfFileset</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pLastBlockReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLastBlockReader</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>SLastBlockReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pLastBlockReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"failed to prepare the last block iterator, since:%s %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLReader</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pLastBlockReader</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pLReader</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLReader</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLReader</name><operator>-&gt;</operator><name>verRange</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pLReader</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMergeTreeClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pLReader</name><operator>-&gt;</operator><name>pInfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// here we ignore the first column, which is always be the primary timestamp column</comment>
    <expr_stmt><expr><name><name>pLReader</name><operator>-&gt;</operator><name>pInfo</name></name> <operator>=</operator>
        <call><name>tCreateLastBlockLoadInfo</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name><operator>.</operator><name>colId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name><operator>.</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pLReader</name><operator>-&gt;</operator><name>pInfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"init fileset iterator failed, code:%s %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>terrno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"init fileset iterator, total files:%d %s"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>numOfFiles</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>filesetIteratorNext</name><parameter_list>(<parameter><decl><type><name>SFilesetIter</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>    <name>asc</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>asc</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>numOfFiles</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>asc</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SIOCostSummary</name><modifier>*</modifier></type> <name>pSum</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>cost</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getLastBlockLoadInfo</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLastBlockReader</name><operator>-&gt;</operator><name>pInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSum</name><operator>-&gt;</operator><name>lastBlockLoad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>lastBlockLoadTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLastBlockReader</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMergeTreeClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resetLastBlockLoadInfo</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pLastBlockReader</name><operator>-&gt;</operator><name>pInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// check file the time range of coverage</comment>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>win</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pCurrentFileset</name></name> <operator>=</operator> <operator>(</operator><name>SDFileSet</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pFileList</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsdbDataFReaderOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pCurrentFileset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>headFileLoad</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>fid</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pCurrentFileset</name><operator>-&gt;</operator><name>fid</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tsdbFidKeyRange</name><argument_list>(<argument><expr><name>fid</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name><operator>.</operator><name>days</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name><operator>.</operator><name>precision</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>win</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>win</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// current file are no longer overlapped with query time window, ignore remain files</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>asc</name> <operator>&amp;&amp;</operator> <name><name>win</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>!</operator><name>asc</name> <operator>&amp;&amp;</operator> <name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p remain files are not qualified for qrange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">", ignore, %s"</literal></expr></argument>, <argument><expr><name>pReader</name></expr></argument>,
                <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>asc</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>win</name><operator>.</operator><name>ekey</name></name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>asc</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>win</name><operator>.</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>asc</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>numOfFiles</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>asc</name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p file found fid:%d for qrange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">", %s"</literal></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>,
              <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></while>

<label><name>_err</name>:</label>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>resetDataBlockIterator</name><parameter_list>(<parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>blockList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>blockList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFileDataBlockInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanupDataBlockIterator</name><parameter_list>(<parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>initReaderStatus</name><parameter_list>(<parameter><decl><type><name>SReaderStatus</name><modifier>*</modifier></type> <name>pStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>loadFromFile</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>createResBlock</name><parameter_list>(<parameter><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><call><name>createDataBlock</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pResBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name></type> <name>colInfo</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>colInfo</name><operator>.</operator><name>info</name></name> <operator>=</operator> <name><name>pCond</name><operator>-&gt;</operator><name>colList</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>blockDataAppendColInfo</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>blockDataEnsureCapacity</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>pResBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbReaderCreate</name><parameter_list>(<parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>,
                                <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>       <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><operator>(</operator><name>STsdbReader</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>VND_IS_TSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsma is selected to query"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initReaderStatus</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name> <operator>=</operator> <call><name>getTsdbByRetentions</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>retentions</name></name></expr></argument>, <argument><expr><name>idstr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pCond</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name><name>pCond</name><operator>-&gt;</operator><name>order</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>capacity</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name> <operator>=</operator> <name>pResBlock</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>idstr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>strdup</name><argument_list>(<argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name> <operator>=</operator> <call><name>getQueryVerRange</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pCond</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name><name>pCond</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>updateQueryTimeWindow</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>blockInfoBuf</name><operator>.</operator><name>numPerBucket</name></name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>  <comment type="line">// 1000 tables per bucket</comment>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>freeBlock</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name> <operator>=</operator> <call><name>createResBlock</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// todo refactor.</comment>
  <expr_stmt><expr><call><name>limitOutputBufferSize</name><argument_list>(<argument><expr><name>pCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// allocate buffer in order to load data blocks from file</comment>
  <decl_stmt><decl><type><name>SBlockLoadSuppInfo</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pColAgg</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnDataAgg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSup</name><operator>-&gt;</operator><name>pColAgg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>tsColAgg</name><operator>.</operator><name>colId</name></name> <operator>=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileBlockData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>setColumnIdSlotList</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name></name></expr></argument>, <argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>colList</name></name></expr></argument>, <argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>pSlotList</name></name></expr></argument>, <argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>pReader</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_end</name>:</label>
  <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doLoadBlockIndex</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SDataFReader</name><modifier>*</modifier></type> <name>pFileReader</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pIndexList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>aBlockIdx</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsdbReadBlockIdx</name><argument_list>(<argument><expr><name>pFileReader</name></expr></argument>, <argument><expr><name>aBlockIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aBlockIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>aBlockIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>et1</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockIdx</name><modifier>*</modifier></type> <name>pBlockIdx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pBlockIdx</name> <operator>=</operator> <operator>(</operator><name>SBlockIdx</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aBlockIdx</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// uid check</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// this block belongs to a table that is not queried.</comment>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockIdx</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>STableBlockScanInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockIndex</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pIndexList</name></expr></argument>, <argument><expr><name>pBlockIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>et2</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"load block index for %d tables completed, elapsed time:%.2f ms, set blockIdx:%.2f ms, size:%.2f Kb %s"</literal></expr></argument>,
            <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>num</name></expr></argument>, <argument><expr><operator>(</operator><name>et1</name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><operator>(</operator><name>et2</name> <operator>-</operator> <name>et1</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><name>num</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SBlockIdx</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">1024.0</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>headFileLoadTime</name></name> <operator>+=</operator> <operator>(</operator><name>et1</name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr>;</expr_stmt>

<label><name>_end</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>aBlockIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanupTableScanInfo</name><parameter_list>(<parameter><decl><type><name>SHashObj</name><modifier>*</modifier></type> <name>pTableMap</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>px</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>px</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name>pTableMap</name></expr></argument>, <argument><expr><name>px</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>px</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// reset the index in last block when handing a new file</comment>
    <expr_stmt><expr><call><name>tMapDataClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>px</name><operator>)</operator><operator>-&gt;</operator><name>mapData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>px</name><operator>)</operator><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doLoadFileBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pIndexList</name></decl></parameter>, <parameter><decl><type><name>SBlockNumber</name><modifier>*</modifier></type> <name>pBlockNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfQTable</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>sizeInDisk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>numOfTables</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pIndexList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>cleanupTableScanInfo</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfTables</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockIdx</name><modifier>*</modifier></type> <name>pBlockIdx</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pIndexList</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>=
        <expr><operator>*</operator><operator>(</operator><name>STableBlockScanInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockIdx</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tMapDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pScanInfo</name><operator>-&gt;</operator><name>mapData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbReadDataBlk</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name></name></expr></argument>, <argument><expr><name>pBlockIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pScanInfo</name><operator>-&gt;</operator><name>mapData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayEnsureCap</name><argument_list>(<argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>mapData</name><operator>.</operator><name>nItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>sizeInDisk</name> <operator>+=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>mapData</name><operator>.</operator><name>nData</name></name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SDataBlk</name></type> <name>block</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>mapData</name><operator>.</operator><name>nItem</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>tGetDataBlk</name><argument_list>(<argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>mapData</name><operator>.</operator><name>pData</name></name> <operator>+</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>mapData</name><operator>.</operator><name>aOffset</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// 1. time range check</comment>
      <if_stmt><if>if <condition>(<expr><name><name>block</name><operator>.</operator><name>minKey</name><operator>.</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>||</operator> <name><name>block</name><operator>.</operator><name>maxKey</name><operator>.</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// 2. version range check</comment>
      <if_stmt><if>if <condition>(<expr><name><name>block</name><operator>.</operator><name>minVer</name></name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>maxVer</name></name> <operator>||</operator> <name><name>block</name><operator>.</operator><name>maxVer</name></name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>minVer</name></name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>SBlockIndex</name></type> <name>bIndex</name> <init>= <expr><block>{<expr><operator>.</operator><name>ordinalIndex</name> <operator>=</operator> <name>j</name></expr>, <expr><operator>.</operator><name>inFileOffset</name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>aSubBlock</name><operator>-&gt;</operator><name>offset</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>bIndex</name><operator>.</operator><name>window</name></name> <operator>=</operator> <operator>(</operator><name>STimeWindow</name><operator>)</operator><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name><name>block</name><operator>.</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr>}</block></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tMapDataClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pScanInfo</name><operator>-&gt;</operator><name>mapData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pBlockNum</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numOfQTable</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pBlockNum</name><operator>-&gt;</operator><name>numOfLastFiles</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name><operator>-&gt;</operator><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>total</name> <init>= <expr><name><name>pBlockNum</name><operator>-&gt;</operator><name>numOfLastFiles</name></name> <operator>+</operator> <name><name>pBlockNum</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>el</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(
      <argument><expr><literal type="string">"load block of %ld tables completed, blocks:%d in %d tables, last-files:%d, block-info-size:%.2f Kb, elapsed "</literal>
      <literal type="string">"time:%.2f ms %s"</literal></expr></argument>,
      <argument><expr><name>numOfTables</name></expr></argument>, <argument><expr><name><name>pBlockNum</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>, <argument><expr><name>numOfQTable</name></expr></argument>, <argument><expr><name><name>pBlockNum</name><operator>-&gt;</operator><name>numOfLastFiles</name></name></expr></argument>, <argument><expr><name>sizeInDisk</name> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><name>el</name></expr></argument>,
      <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>numOfBlocks</name></name> <operator>+=</operator> <name>total</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>headFileLoadTime</name></name> <operator>+=</operator> <name>el</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setBlockAllDumped</name><parameter_list>(<parameter><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>maxKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>allDumped</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name>maxKey</name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>doCopyColVal</name><parameter_list>(<parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colIndex</name></decl></parameter>, <parameter><decl><type><name>SColVal</name><modifier>*</modifier></type> <name>pColVal</name></decl></parameter>,
                         <parameter><decl><type><name>SBlockLoadSuppInfo</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>buildBuf</name><index>[<expr><name>colIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&lt;=</operator> <name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// pData may be null, if nData is 0</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>buildBuf</name><index>[<expr><name>colIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>buildBuf</name><index>[<expr><name>colIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name></name></expr></argument>, <argument><expr><operator>!</operator><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>getCurrentBlockInfo</name><parameter_list>(<parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>==</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>, <argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>pBlockInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SDataBlk</name><modifier>*</modifier></type> <name>getCurrentBlock</name><parameter_list>(<parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>pBlockIter</name><operator>-&gt;</operator><name>block</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>binarySearchForTs</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pValue</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>midPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name> <operator>||</operator> <name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TSKEY</name><modifier>*</modifier></type>  <name>keyList</name> <init>= <expr><operator>(</operator><name>TSKEY</name><operator>*</operator><operator>)</operator><name>pValue</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>firstPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lastPos</name> <init>= <expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_DESC</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// find the first position which is smaller than the key</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name><name>keyList</name><index>[<expr><name>firstPos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>firstPos</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name><name>keyList</name><index>[<expr><name>lastPos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <name><name>keyList</name><index>[<expr><name>lastPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastPos</name> <operator>&gt;=</operator> <name>num</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><name>lastPos</name></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name>lastPos</name> <operator>-</operator> <name>firstPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>midPos</name> <operator>=</operator> <operator>(</operator><name>numOfRows</name> <operator>&gt;&gt;</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <name>firstPos</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <name><name>keyList</name><index>[<expr><name>midPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>firstPos</name> <operator>=</operator> <name>midPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>&gt;</operator> <name><name>keyList</name><index>[<expr><name>midPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>midPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// find the first position which is bigger than the key</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;=</operator> <name><name>keyList</name><index>[<expr><name>firstPos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>firstPos</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>==</operator> <name><name>keyList</name><index>[<expr><name>lastPos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;</operator> <name><name>keyList</name><index>[<expr><name>lastPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>lastPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>lastPos</name> <operator>&gt;=</operator> <name>num</name></expr>)</condition><block type="pseudo"><block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
          <return>return <expr><name>lastPos</name></expr>;</return></block_content></block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <name>lastPos</name> <operator>-</operator> <name>firstPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>midPos</name> <operator>=</operator> <operator>(</operator><name>numOfRows</name> <operator>&gt;&gt;</operator> <literal type="number">1u</literal><operator>)</operator> <operator>+</operator> <name>firstPos</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <name><name>keyList</name><index>[<expr><name>midPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>midPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>&gt;</operator> <name><name>keyList</name><index>[<expr><name>midPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>firstPos</name> <operator>=</operator> <name>midPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>midPos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>doBinarySearchKey</name><parameter_list>(<parameter><decl><type><name>TSKEY</name><modifier>*</modifier></type> <name>keyList</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// start end position</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>, <decl><type ref="prev"/><name>e</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>s</name> <operator>=</operator> <name>pos</name></expr>;</expr_stmt>

  <comment type="line">// check</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>pos</name> <operator>&lt;</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>num</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// find the first position which is smaller than the key</comment>
    <expr_stmt><expr><name>e</name> <operator>=</operator> <name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <name><name>keyList</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// check can return</comment>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name><name>keyList</name><index>[<expr><name>e</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>e</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;=</operator> <name><name>keyList</name><index>[<expr><name>s</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>e</name> <operator>-</operator> <name>s</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

      <comment type="line">// change start or end position</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>s</name> <operator>+</operator> <operator>(</operator><name>e</name> <operator>-</operator> <name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>keyList</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&gt;</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>keyList</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>mid</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// DESC</comment>
    <comment type="line">// find the first position which is bigger than the key</comment>
    <expr_stmt><expr><name>e</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;</operator> <name><name>keyList</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// check can return</comment>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;=</operator> <name><name>keyList</name><index>[<expr><name>e</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>e</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&gt;=</operator> <name><name>keyList</name><index>[<expr><name>s</name></expr>]</index></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>s</name> <operator>-</operator> <name>e</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>s</name></expr>;</return></block_content></block></if></if_stmt>

      <comment type="line">// change start or end position</comment>
      <decl_stmt><decl><type><name>int</name></type> <name>mid</name> <init>= <expr><name>s</name> <operator>-</operator> <operator>(</operator><name>s</name> <operator>-</operator> <name>e</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>keyList</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&lt;</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>e</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
      <if type="elseif">else if <condition>(<expr><name><name>keyList</name><index>[<expr><name>mid</name></expr>]</index></name> <operator>&gt;</operator> <name>key</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>s</name> <operator>=</operator> <name>mid</name></expr>;</expr_stmt></block_content></block></if>
      <else>else<block type="pseudo"><block_content>
        <return>return <expr><name>mid</name></expr>;</return></block_content></block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getEndPosInDataBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// NOTE: reverse the order to find the end position in data block</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>endPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>asc</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>asc</name> <operator>&amp;&amp;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>endPos</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>asc</name> <operator>&amp;&amp;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>&lt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>endPos</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>key</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr> </then><else>: <expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>endPos</name> <operator>=</operator> <call><name>doBinarySearchKey</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>endPos</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>copyPrimaryTsCol</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name></decl></parameter>,
                             <parameter><decl><type><name>int32_t</name></type> <name>dumpedRows</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>asc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>asc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr>]</index></name></expr></argument>, <argument><expr><name>dumpedRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>startIndex</name> <init>= <expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>-</operator> <name>dumpedRows</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name>startIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>dumpedRows</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// todo: opt perf by extract the loop</comment>
    <comment type="line">// reverse the array list</comment>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>mid</name> <init>= <expr><name>dumpedRows</name> <operator>&gt;&gt;</operator> <literal type="number">1u</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pts</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mid</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name><name>pts</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pts</name><index>[<expr><name>dumpedRows</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pts</name><index>[<expr><name>dumpedRows</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// a faster version of copy procedure.</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>copyNumericCols</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SColData</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name></decl></parameter>, <parameter><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name></decl></parameter>,
                            <parameter><decl><type><name>int32_t</name></type> <name>dumpedRows</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>asc</name></decl></parameter>)</parameter_list>  <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>asc</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>*</operator> <name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>startIndex</name> <init>= <expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>-</operator> <name>dumpedRows</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>*</operator> <name>startIndex</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr>?</condition><then> <expr><literal type="number">1</literal></expr></then><else>:<expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <comment type="line">// make sure it is aligned to 8bit</comment>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator> <operator>&amp;</operator> <operator>(</operator><literal type="number">0x8</literal> <operator>-</operator> <literal type="number">1</literal><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// 1. copy data in a batch model</comment>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>dumpedRows</name> <operator>*</operator> <name><name>tDataTypes</name><index>[<expr><name><name>pData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// 2. reverse the array list in case of descending order scan data block</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asc</name></expr>)</condition> <block>{<block_content>
    <switch>switch<condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
      <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type>  <name>mid</name> <init>= <expr><name>dumpedRows</name> <operator>&gt;&gt;</operator> <literal type="number">1u</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>pts</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mid</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name><name>pts</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pts</name><index>[<expr><name>dumpedRows</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pts</name><index>[<expr><name>dumpedRows</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type>  <name>mid</name> <init>= <expr><name>dumpedRows</name> <operator>&gt;&gt;</operator> <literal type="number">1u</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>pts</name> <init>= <expr><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mid</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int8_t</name></type> <name>t</name> <init>= <expr><name><name>pts</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pts</name><index>[<expr><name>dumpedRows</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pts</name><index>[<expr><name>dumpedRows</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type>  <name>mid</name> <init>= <expr><name>dumpedRows</name> <operator>&gt;&gt;</operator> <literal type="number">1u</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type> <name>pts</name> <init>= <expr><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mid</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name><name>pts</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pts</name><index>[<expr><name>dumpedRows</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pts</name><index>[<expr><name>dumpedRows</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <break>break;</break>
      </block_content>}</block>

      <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type>  <name>mid</name> <init>= <expr><name>dumpedRows</name> <operator>&gt;&gt;</operator> <literal type="number">1u</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>pts</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>mid</name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><name><name>pts</name><index>[<expr><name>j</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>pts</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <name><name>pts</name><index>[<expr><name>dumpedRows</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pts</name><index>[<expr><name>dumpedRows</name> <operator>-</operator> <name>j</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>
        </block_content>}</block></for>
        <break>break;</break>
      </block_content>}</block>
    </block_content>}</block></switch>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// 3. if the  null value exists, check items one-by-one</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_VALUE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>rowIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>rowIndex</name> <operator>&lt;</operator> <name>dumpedRows</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>step</name></expr><operator>,</operator> <expr><name>rowIndex</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint8_t</name></type> <name>v</name> <init>= <expr><call><name>tColDataGetBitValue</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>v</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>v</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataSetNull_f</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nullbitmap</name></name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>hasNull</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>copyBlockDataToSDataBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type>      <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type>     <name>pBlockIter</name> <init>= <expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>blockIter</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockLoadSuppInfo</name><modifier>*</modifier></type> <name>pSupInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockData</name><modifier>*</modifier></type>         <name>pBlockData</name> <init>= <expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>fileBlockData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><call><name>getCurrentBlockInfo</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlk</name><modifier>*</modifier></type>           <name>pBlock</name> <init>= <expr><call><name>getCurrentBlock</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type>        <name>pResBlock</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>numOfOutputCols</name> <init>= <expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColVal</name></type> <name>cv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>asc</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>asc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>==</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>asc</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>asc</name> <operator>&amp;&amp;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>&lt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// pDumpInfo-&gt;rowIndex = 0;</comment>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><name>asc</name> <operator>&amp;&amp;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// pDumpInfo-&gt;rowIndex = pBlock-&gt;nRow - 1;</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>order</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><name>TSDB_ORDER_DESC</name></expr> </then><else>: <expr><name>TSDB_ORDER_ASC</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>key</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr> </then><else>: <expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>=</operator> <call><name>doBinarySearchKey</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// time window check</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>endIndex</name> <init>= <expr><call><name>getEndPosInDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>endIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>setBlockAllDumped</name><argument_list>(<argument><expr><name>pDumpInfo</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>endIndex</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dumpedRows</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><operator>(</operator><name>endIndex</name> <operator>-</operator> <name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>-</operator> <name>endIndex</name><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>dumpedRows</name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// output buffer check</comment>
    <expr_stmt><expr><name>dumpedRows</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>copyPrimaryTsCol</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pDumpInfo</name></expr></argument>, <argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>dumpedRows</name></expr></argument>, <argument><expr><name>asc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>colIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>numOfOutputCols</name> <operator>&amp;&amp;</operator> <name>colIndex</name> <operator>&lt;</operator> <name>num</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rowIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SColData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>tBlockDataGetColDataByIdx</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>colIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>cid</name></name> <operator>&lt;</operator> <name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>colIndex</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pColData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NONE</name> <operator>||</operator> <name><name>pData</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NULL</name> <operator>||</operator> <name><name>pData</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>colDataAppendNNULL</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dumpedRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>IS_MATHABLE_TYPE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>copyNumericCols</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>pDumpInfo</name></expr></argument>, <argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>dumpedRows</name></expr></argument>, <argument><expr><name>asc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// varchar/nchar type</comment>
          <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></init></decl>;</init> <condition><expr><name>rowIndex</name> <operator>&lt;</operator> <name>dumpedRows</name></expr>;</condition> <incr><expr><name>j</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>tColDataGetValue</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>doCopyColVal</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>rowIndex</name><operator>++</operator></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>, <argument><expr><name>pSupInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></for>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>colIndex</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// the specified column does not exist in file block, fill with null data</comment>
      <expr_stmt><expr><name>pColData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppendNNULL</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dumpedRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <comment type="line">// fill the mis-matched columns with null value</comment>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>numOfOutputCols</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pColData</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>colDataAppendNNULL</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>dumpedRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>=</operator> <name>dumpedRows</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>+=</operator> <name>step</name> <operator>*</operator> <name>dumpedRows</name></expr>;</expr_stmt>

  <comment type="line">// check if current block are all handled</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>outOfTimeWindow</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// the remain data has out of query time window, ignore current block</comment>
      <expr_stmt><expr><call><name>setBlockAllDumped</name><argument_list>(<argument><expr><name>pDumpInfo</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr> </then><else>: <expr><name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>setBlockAllDumped</name><argument_list>(<argument><expr><name>pDumpInfo</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>elapsedTime</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>blockLoadTime</name></name> <operator>+=</operator> <name>elapsedTime</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>unDumpedRows</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name> <operator>-</operator> <name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr> </then><else>: <expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p copy file block to sdatablock, global index:%d, table index:%d, brange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name>
            <literal type="string">", rows:%d, remain:%d, minVer:%"</literal> <name>PRId64</name> <literal type="string">", maxVer:%"</literal> <name>PRId64</name> <literal type="string">", elapsed time:%.2f ms, %s"</literal></expr></argument>,
            <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>tbBlockIdx</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name>dumpedRows</name></expr></argument>,
            <argument><expr><name>unDumpedRows</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>minVer</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxVer</name></name></expr></argument>, <argument><expr><name>elapsedTime</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doLoadFileBlockData</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>,
                                   <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TABLEID</name></type> <name>tid</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>uid</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
      <expr><call><name>tBlockDataInit</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name><operator>.</operator><name>colId</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name><operator>.</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><call><name>getCurrentBlockInfo</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pBlockInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>getCurrentBlock</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"%p error occurs in loading file block, global index:%d, table index:%d, brange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name>
              <literal type="string">", rows:%d, code:%s %s"</literal></expr></argument>,
              <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>tbBlockIdx</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>elapsedTime</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p load file block into buffer, global index:%d, index in table block list:%d, brange:%"</literal> <name>PRId64</name> <literal type="string">"-%"</literal> <name>PRId64</name>
            <literal type="string">", rows:%d, minVer:%"</literal> <name>PRId64</name> <literal type="string">", maxVer:%"</literal> <name>PRId64</name> <literal type="string">", elapsed time:%.2f ms, %s"</literal></expr></argument>,
            <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>tbBlockIdx</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>,
            <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>minVer</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxVer</name></name></expr></argument>, <argument><expr><name>elapsedTime</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>blockLoadTime</name></name> <operator>+=</operator> <name>elapsedTime</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>allDumped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>cleanupBlockOrderSupporter</name><parameter_list>(<parameter><decl><type><name>SBlockOrderSupporter</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfBlocksPerTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>indexPerTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSup</name><operator>-&gt;</operator><name>numOfTables</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockOrderWrapper</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><name><name>pSup</name><operator>-&gt;</operator><name>pDataBlockInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pBlockInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pDataBlockInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initBlockOrderSupporter</name><parameter_list>(<parameter><decl><type><name>SBlockOrderSupporter</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfTables</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfTables</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfBlocksPerTable</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>indexPerTable</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>numOfTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSup</name><operator>-&gt;</operator><name>pDataBlockInfo</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name> <operator>*</operator> <name>numOfTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfBlocksPerTable</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pSup</name><operator>-&gt;</operator><name>indexPerTable</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pSup</name><operator>-&gt;</operator><name>pDataBlockInfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>cleanupBlockOrderSupporter</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>fileDataBlockOrderCompar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pLeft</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pRight</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>leftIndex</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pLeft</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rightIndex</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>pRight</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockOrderSupporter</name><modifier>*</modifier></type> <name>pSupporter</name> <init>= <expr><operator>(</operator><name>SBlockOrderSupporter</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>leftTableBlockIndex</name> <init>= <expr><name><name>pSupporter</name><operator>-&gt;</operator><name>indexPerTable</name><index>[<expr><name>leftIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rightTableBlockIndex</name> <init>= <expr><name><name>pSupporter</name><operator>-&gt;</operator><name>indexPerTable</name><index>[<expr><name>rightIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>leftTableBlockIndex</name> <operator>&gt;</operator> <name><name>pSupporter</name><operator>-&gt;</operator><name>numOfBlocksPerTable</name><index>[<expr><name>leftIndex</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* left block is empty */</comment>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>rightTableBlockIndex</name> <operator>&gt;</operator> <name><name>pSupporter</name><operator>-&gt;</operator><name>numOfBlocksPerTable</name><index>[<expr><name>rightIndex</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <comment type="block">/* right block is empty */</comment>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SBlockOrderWrapper</name><modifier>*</modifier></type> <name>pLeftBlock</name> <init>= <expr><operator>&amp;</operator><name><name>pSupporter</name><operator>-&gt;</operator><name>pDataBlockInfo</name><index>[<expr><name>leftIndex</name></expr>]</index><index>[<expr><name>leftTableBlockIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockOrderWrapper</name><modifier>*</modifier></type> <name>pRightBlock</name> <init>= <expr><operator>&amp;</operator><name><name>pSupporter</name><operator>-&gt;</operator><name>pDataBlockInfo</name><index>[<expr><name>rightIndex</name></expr>]</index><index>[<expr><name>rightTableBlockIndex</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <return>return <expr><ternary><condition><expr><name><name>pLeftBlock</name><operator>-&gt;</operator><name>offset</name></name> <operator>&gt;</operator> <name><name>pRightBlock</name><operator>-&gt;</operator><name>offset</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doSetCurrentBlock</name><parameter_list>(<parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><call><name>getCurrentBlockInfo</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBlockInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pScanInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"failed to locate the uid:%"</literal> <name>PRIu64</name> <literal type="string">" in query table uid list, %s"</literal></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SBlockIndex</name><modifier>*</modifier></type> <name>pIndex</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>pScanInfo</name><operator>)</operator><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>tbBlockIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>pScanInfo</name><operator>)</operator><operator>-&gt;</operator><name>mapData</name></name></expr></argument>, <argument><expr><name><name>pIndex</name><operator>-&gt;</operator><name>ordinalIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockIter</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><name>tGetDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  qDebug("check file block, table uid:%"PRIu64" index:%d offset:%"PRId64", ", pScanInfo-&gt;uid, *mapDataIndex, pBlockIter-&gt;block.aSubBlock[0].offset);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initBlockIterator</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfBlocks</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>asc</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockOrderSupporter</name></type> <name>sup</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <name>numOfBlocks</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>pTableMap</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr>;</expr_stmt>

  <comment type="line">// access data blocks according to the offset of each block in asc/desc order.</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTables</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>initBlockOrderSupporter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sup</name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type>   <name>ptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ptr</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pTableScanInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>STableBlockScanInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name>ptr</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>sup</name><operator>.</operator><name>numOfBlocksPerTable</name><index>[<expr><name><name>sup</name><operator>.</operator><name>numOfTables</name></name></expr>]</index></name> <operator>=</operator> <name>num</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockOrderWrapper</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>buf</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>cleanupBlockOrderSupporter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>sup</name><operator>.</operator><name>pDataBlockInfo</name><index>[<expr><name><name>sup</name><operator>.</operator><name>numOfTables</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SBlockOrderWrapper</name><operator>*</operator><operator>)</operator><name>buf</name></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SBlockIndex</name><modifier>*</modifier></type> <name>pIndex</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>sup</name><operator>.</operator><name>pDataBlockInfo</name><index>[<expr><name><name>sup</name><operator>.</operator><name>numOfTables</name></name></expr>]</index><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator>
          <operator>(</operator><name>SBlockOrderWrapper</name><operator>)</operator><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pTableScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name><name>pIndex</name><operator>-&gt;</operator><name>inFileOffset</name></name></expr>}</block></expr>;</expr_stmt>
      <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>sup</name><operator>.</operator><name>numOfTables</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>numOfBlocks</name> <operator>==</operator> <name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// since there is only one table qualified, blocks are not sorted</comment>
  <if_stmt><if>if <condition>(<expr><name><name>sup</name><operator>.</operator><name>numOfTables</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfBlocks</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SFileDataBlockInfo</name></type> <name>blockInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>sup</name><operator>.</operator><name>pDataBlockInfo</name><index>[<expr><literal type="number">0</literal></expr>]</index><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name></expr>, <expr><operator>.</operator><name>tbBlockIdx</name> <operator>=</operator> <name>i</name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>et</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p create blocks info struct completed for one table, %d blocks not sorted, elapsed time:%.2f ms %s"</literal></expr></argument>,
              <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>numOfBlocks</name></expr></argument>, <argument><expr><operator>(</operator><name>et</name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>numOfBlocks</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>cleanupBlockOrderSupporter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>doSetCurrentBlock</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p create data blocks info struct completed, %d blocks in %d tables %s"</literal></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr><name><name>sup</name><operator>.</operator><name>numOfTables</name></name></expr></argument>,
            <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cnt</name> <operator>&lt;=</operator> <name>numOfBlocks</name> <operator>&amp;&amp;</operator> <name><name>sup</name><operator>.</operator><name>numOfTables</name></name> <operator>&lt;=</operator> <name>numOfTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SMultiwayMergeTreeInfo</name><modifier>*</modifier></type> <name>pTree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>                 <name>ret</name> <init>= <expr><call><name>tMergeTreeCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pTree</name></expr></argument>, <argument><expr><name><name>sup</name><operator>.</operator><name>numOfTables</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sup</name></expr></argument>, <argument><expr><name>fileDataBlockOrderCompar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>cleanupBlockOrderSupporter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>numOfTotal</name> <operator>&lt;</operator> <name>cnt</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><call><name>tMergeTreeGetChosenIndex</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><name><name>sup</name><operator>.</operator><name>indexPerTable</name><index>[<expr><name>pos</name></expr>]</index></name><operator>++</operator></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SFileDataBlockInfo</name></type> <name>blockInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>sup</name><operator>.</operator><name>pDataBlockInfo</name><index>[<expr><name>pos</name></expr>]</index><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>uid</name></expr>, <expr><operator>.</operator><name>tbBlockIdx</name> <operator>=</operator> <name>index</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// set data block index overflow, in order to disable the offset comparator</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sup</name><operator>.</operator><name>indexPerTable</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&gt;=</operator> <name><name>sup</name><operator>.</operator><name>numOfBlocksPerTable</name><index>[<expr><name>pos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>sup</name><operator>.</operator><name>indexPerTable</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>=</operator> <name><name>sup</name><operator>.</operator><name>numOfBlocksPerTable</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>numOfTotal</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tMergeTreeAdjust</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>, <argument><expr><call><name>tMergeTreeGetAdjustIndex</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>et</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p %d data blocks access order completed, elapsed time:%.2f ms %s"</literal></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>numOfBlocks</name></expr></argument>,
            <argument><expr><operator>(</operator><name>et</name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupBlockOrderSupporter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name> <operator>=</operator> <ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><name>numOfBlocks</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doSetCurrentBlock</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>blockIteratorNext</name><parameter_list>(<parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>asc</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name> <operator>&gt;=</operator> <name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>asc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>asc</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>doSetCurrentBlock</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * This is an two rectangles overlap cases.
 */</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>dataBlockPartiallyRequired</name><parameter_list>(<parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWindow</name></decl></parameter>, <parameter><decl><type><name>SVersionRange</name><modifier>*</modifier></type> <name>pVerRange</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>pWindow</name><operator>-&gt;</operator><name>ekey</name></name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>pWindow</name><operator>-&gt;</operator><name>ekey</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name><operator>)</operator> <operator>||</operator>
         <operator>(</operator><name><name>pWindow</name><operator>-&gt;</operator><name>skey</name></name> <operator>&gt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>pWindow</name><operator>-&gt;</operator><name>skey</name></name> <operator>&lt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name><operator>)</operator> <operator>||</operator>
         <operator>(</operator><name><name>pVerRange</name><operator>-&gt;</operator><name>minVer</name></name> <operator>&gt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minVer</name></name> <operator>&amp;&amp;</operator> <name><name>pVerRange</name><operator>-&gt;</operator><name>minVer</name></name> <operator>&lt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxVer</name></name><operator>)</operator> <operator>||</operator>
         <operator>(</operator><name><name>pVerRange</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>&amp;&amp;</operator> <name><name>pVerRange</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minVer</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>getNeighborBlockOfSameTable</name><parameter_list>(<parameter><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pTableBlockScanInfo</name></decl></parameter>,
                                        <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>nextIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>SBlockIndex</name><modifier>*</modifier></type> <name>pBlockIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>asc</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>asc</name> <operator>&amp;&amp;</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>tbBlockIdx</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTableBlockScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>asc</name> <operator>&amp;&amp;</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>tbBlockIdx</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>nextIndex</name> <operator>=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>tbBlockIdx</name></name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pBlockIndex</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>SBlockIndex</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTableBlockScanInfo</name><operator>-&gt;</operator><name>pBlockList</name></name></expr></argument>, <argument><expr><operator>*</operator><name>nextIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//  tMapDataGetItemByIdx(&amp;pTableBlockScanInfo-&gt;mapData, pIndex-&gt;ordinalIndex, pBlock, tGetDataBlk);</comment>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>findFileBlockInfoIndex</name><parameter_list>(<parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>, <parameter><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pFBlockInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pBlockIter</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pFBlockInfo</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>index</name> <operator>&lt;</operator> <name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pFBlock</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pFBlock</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name><name>pFBlockInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>&amp;&amp;</operator> <name><name>pFBlock</name><operator>-&gt;</operator><name>tbBlockIdx</name></name> <operator>==</operator> <name><name>pFBlockInfo</name><operator>-&gt;</operator><name>tbBlockIdx</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>index</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>index</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>setFileBlockActiveInBlockIter</name><parameter_list>(<parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>index</name> <operator>&gt;=</operator> <name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFileDataBlockInfo</name></type> <name>fblock</name> <init>= <expr><operator>*</operator><operator>(</operator><name>SFileDataBlockInfo</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayInsert</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>, <argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fblock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>blockList</name></name></expr></argument>, <argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>index</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name><name>fblock</name><operator>.</operator><name>uid</name></name> <operator>&amp;&amp;</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>tbBlockIdx</name></name> <operator>==</operator> <name><name>fblock</name><operator>.</operator><name>tbBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doSetCurrentBlock</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// todo: this attribute could be acquired during extractin the global ordered block list.</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>overlapWithNeighborBlock</name><parameter_list>(<parameter><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SBlockIndex</name><modifier>*</modifier></type> <name>pNeighborBlockIndex</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// it is the last block in current file, no chance to overlap with neighbor blocks.</comment>
  <if_stmt><if>if <condition>(<expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name> <operator>==</operator> <name><name>pNeighborBlockIndex</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name> <operator>==</operator> <name><name>pNeighborBlockIndex</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>bufferDataInFileBlockGap</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>TSDBKEY</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>ascScan</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <return>return <expr><operator>(</operator><name>ascScan</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>key</name><operator>.</operator><name>ts</name></name> <operator>!=</operator> <name>TSKEY_INITIAL_VAL</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>.</operator><name>ts</name></name> <operator>&lt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name><operator>)</operator><operator>)</operator> <operator>||</operator>
         <operator>(</operator><operator>!</operator><name>ascScan</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>key</name><operator>.</operator><name>ts</name></name> <operator>!=</operator> <name>TSKEY_INITIAL_VAL</name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>.</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>keyOverlapFileBlock</name><parameter_list>(<parameter><decl><type><name>TSDBKEY</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SVersionRange</name><modifier>*</modifier></type> <name>pVerRange</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name><name>key</name><operator>.</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>.</operator><name>ts</name></name> <operator>&lt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pBlock</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>&gt;=</operator> <name><name>pVerRange</name><operator>-&gt;</operator><name>minVer</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
         <operator>(</operator><name><name>pBlock</name><operator>-&gt;</operator><name>minVer</name></name> <operator>&lt;=</operator> <name><name>pVerRange</name><operator>-&gt;</operator><name>maxVer</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>doCheckforDatablockOverlap</name><parameter_list>(<parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                                       <parameter><decl><type><name>int32_t</name></type> <name>startIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>startIndex</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minVer</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// p-&gt;ts &lt; pBlock-&gt;minKey.ts</comment>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minVer</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>pnext</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pnext</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>true</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// it must be the last point</comment>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// (p-&gt;ts &gt; pBlock-&gt;maxKey.ts) {</comment>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>overlapWithDelSkyline</name><parameter_list>(<parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// ts is not overlap</comment>
  <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>pFirst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>pLast</name> <init>= <expr><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>pLast</name><operator>-&gt;</operator><name>ts</name></name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>pFirst</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// version is not overlap</comment>
  <if_stmt><if>if <condition>(<expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>doCheckforDatablockOverlap</name><argument_list>(<argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>fileDelIndex</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>fileDelIndex</name></name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>index</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// find the first point that is smaller than the minKey.ts of dataBlock.</comment>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <return>return <expr><call><name>doCheckforDatablockOverlap</name><argument_list>(<argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>bool</name></type> <name>overlapWithNeighborBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasDupTs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>overlapWithDelInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>overlapWithLastBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>overlapWithKeyInBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>partiallyRequired</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>moreThanCapcity</name></decl>;</decl_stmt>
}</block></struct></type> <name>SDataBlockToLoadInfo</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getBlockToLoadInfo</name><parameter_list>(<parameter><decl><type><name>SDataBlockToLoadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                               <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>TSDBKEY</name></type> <name>keyInBuf</name></decl></parameter>, <parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>,
                               <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>neighborIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockIndex</name></type> <name>bIndex</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>hasNeighbor</name> <init>= <expr><call><name>getNeighborBlockOfSameTable</name><argument_list>(<argument><expr><name>pBlockInfo</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>neighborIndex</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// overlap with neighbor</comment>
  <if_stmt><if>if <condition>(<expr><name>hasNeighbor</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>overlapWithNeighborBlock</name></name> <operator>=</operator> <call><name>overlapWithNeighborBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bIndex</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// has duplicated ts of different version in this block</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>hasDupTs</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pBlock</name><operator>-&gt;</operator><name>nSubBlock</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>pBlock</name><operator>-&gt;</operator><name>hasDup</name></name></expr> </then><else>: <expr><name>true</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>overlapWithDelInfo</name></name> <operator>=</operator> <call><name>overlapWithDelSkyline</name><argument_list>(<argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>tsLast</name> <init>= <expr><call><name>getCurrentKeyInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>overlapWithLastBlock</name></name> <operator>=</operator> <operator>!</operator><operator>(</operator><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name> <operator>&lt;</operator> <name>tsLast</name> <operator>||</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name> <operator>&gt;</operator> <name>tsLast</name><operator>)</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>moreThanCapcity</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>partiallyRequired</name></name> <operator>=</operator> <call><name>dataBlockPartiallyRequired</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>window</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>overlapWithKeyInBuf</name></name> <operator>=</operator> <call><name>keyOverlapFileBlock</name><argument_list>(<argument><expr><name>keyInBuf</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// 1. the version of all rows should be less than the endVersion</comment>
<comment type="line">// 2. current block should not overlap with next neighbor block</comment>
<comment type="line">// 3. current timestamp should not be overlap with each other</comment>
<comment type="line">// 4. output buffer should be large enough to hold all rows in current block</comment>
<comment type="line">// 5. delete info should not overlap with current block data</comment>
<comment type="line">// 6. current block should not contain the duplicated ts</comment>
<function><type><specifier>static</specifier> <name>bool</name></type> <name>fileBlockShouldLoad</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                                <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>TSDBKEY</name></type> <name>keyInBuf</name></decl></parameter>, <parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlockToLoadInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getBlockToLoadInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>pBlockInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>keyInBuf</name></expr></argument>, <argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>loadDataBlock</name> <init>=
      <expr><operator>(</operator><name><name>info</name><operator>.</operator><name>overlapWithNeighborBlock</name></name> <operator>||</operator> <name><name>info</name><operator>.</operator><name>hasDupTs</name></name> <operator>||</operator> <name><name>info</name><operator>.</operator><name>partiallyRequired</name></name> <operator>||</operator> <name><name>info</name><operator>.</operator><name>overlapWithKeyInBuf</name></name> <operator>||</operator>
       <name><name>info</name><operator>.</operator><name>moreThanCapcity</name></name> <operator>||</operator> <name><name>info</name><operator>.</operator><name>overlapWithDelInfo</name></name> <operator>||</operator> <name><name>info</name><operator>.</operator><name>overlapWithLastBlock</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>

  <comment type="line">// log the reason why load the datablock for profile</comment>
  <if_stmt><if>if <condition>(<expr><name>loadDataBlock</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p uid:%"</literal> <name>PRIu64</name>
              <literal type="string">" need to load the datablock, overlapwithneighborblock:%d, hasDup:%d, partiallyRequired:%d, "</literal>
              <literal type="string">"overlapWithKey:%d, greaterThanBuf:%d, overlapWithDel:%d, overlapWithlastBlock:%d, %s"</literal></expr></argument>,
              <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>overlapWithNeighborBlock</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>hasDupTs</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>partiallyRequired</name></name></expr></argument>,
              <argument><expr><name><name>info</name><operator>.</operator><name>overlapWithKeyInBuf</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>moreThanCapcity</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>overlapWithDelInfo</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>overlapWithLastBlock</name></name></expr></argument>,
              <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>loadDataBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isCleanFileDataBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                                 <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>TSDBKEY</name></type> <name>keyInBuf</name></decl></parameter>, <parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlockToLoadInfo</name></type> <name>info</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>getBlockToLoadInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>pBlockInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>keyInBuf</name></expr></argument>, <argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>isCleanFileBlock</name> <init>= <expr><operator>!</operator><operator>(</operator><name><name>info</name><operator>.</operator><name>overlapWithNeighborBlock</name></name> <operator>||</operator> <name><name>info</name><operator>.</operator><name>hasDupTs</name></name> <operator>||</operator> <name><name>info</name><operator>.</operator><name>overlapWithKeyInBuf</name></name> <operator>||</operator>
                            <name><name>info</name><operator>.</operator><name>overlapWithDelInfo</name></name> <operator>||</operator> <name><name>info</name><operator>.</operator><name>overlapWithLastBlock</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>isCleanFileBlock</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildDataBlockFromBuf</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>endKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>hasVal</name></name> <operator>||</operator> <name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>hasVal</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>buildDataBlockFromBufImpl</name><argument_list>(<argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>endKey</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name><operator>.</operator><name>slotId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setComposedBlockFlag</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>elapsedTime</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p build data block from cache completed, elapsed time:%.2f ms, numOfRows:%d, brange:%"</literal> <name>PRId64</name>
            <literal type="string">" - %"</literal> <name>PRId64</name> <literal type="string">" %s"</literal></expr></argument>,
            <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>elapsedTime</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>,
            <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>buildmemBlock</name></name> <operator>+=</operator> <name>elapsedTime</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>tryCopyDistinctRowFromFileBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>key</name></decl></parameter>,
                                            <parameter><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// opt version</comment>
  <comment type="line">// 1. it is not a border point</comment>
  <comment type="line">// 2. the direct next point is not an duplicated timestamp</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>asc</name> <init>= <expr><operator>(</operator><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&lt;</operator> <name><name>pDumpInfo</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>asc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>asc</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nextKey</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>+</operator> <name>step</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nextKey</name> <operator>!=</operator> <name>key</name></expr>)</condition> <block>{<block_content>  <comment type="line">// merge is not needed</comment>
      <expr_stmt><expr><call><name>doAppendRowFromFileBlock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>nextRowFromLastBlocks</name><parameter_list>(<parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>,
                                  <parameter><decl><type><name>SVersionRange</name><modifier>*</modifier></type> <name>pVerRange</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>hasVal</name> <init>= <expr><call><name>tMergeTreeNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasVal</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>TSDBROW</name></type> <name>row</name> <init>= <expr><call><name>tMergeTreeGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>k</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasBeenDropped</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>lastBlockDelIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>,
                        <argument><expr><name>pVerRange</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>tryCopyDistinctRowFromSttBlock</name><parameter_list>(<parameter><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>fRow</name></decl></parameter>, <parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>,
                                           <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasVal</name> <init>= <expr><call><name>nextRowFromLastBlocks</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasVal</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>next1</name> <init>= <expr><call><name>getCurrentKeyInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>next1</name> <operator>!=</operator> <name>ts</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doAppendRowFromFileBlock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>fRow</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>, <argument><expr><name><name>fRow</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>doAppendRowFromFileBlock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>fRow</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>, <argument><expr><name><name>fRow</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>STSchema</name><modifier>*</modifier></type> <name>doGetSchemaForTSRow</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>sversion</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// always set the newest schema version in pReader-&gt;pSchema</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>&amp;&amp;</operator> <name>sversion</name> <operator>==</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>=
        <expr><call><name>metaGetTbTSchemaEx</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>sversion</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <name>sversion</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>metaGetTbTSchemaEx</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>sversion</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doMergeBufAndFileRows</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>pRow</name></decl></parameter>,
                                     <parameter><decl><type><name>SIterInfo</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRowMerger</name></type>          <name>merge</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type>             <name>pTSRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockData</name><modifier>*</modifier></type>         <name>pBlockData</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileBlockData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsLast</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsLast</name> <operator>=</operator> <call><name>getCurrentKeyInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>k</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>minKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>  <comment type="line">// chosen the minimum value</comment>
    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&gt;</operator> <name>tsLast</name> <operator>&amp;&amp;</operator> <call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>tsLast</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&gt;</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&gt;</operator> <name>key</name> <operator>&amp;&amp;</operator> <call><name>hasDataInFileBlock</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pDumpInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&lt;</operator> <name>tsLast</name> <operator>&amp;&amp;</operator> <call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>tsLast</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&lt;</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&lt;</operator> <name>key</name> <operator>&amp;&amp;</operator> <call><name>hasDataInFileBlock</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pDumpInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>init</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// ASC: file block ---&gt; last block -----&gt; imem -----&gt; mem</comment>
  <comment type="line">// DESC: mem -----&gt; imem -----&gt; last block -----&gt; file block</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>doMergeRowsInFileBlocks</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name>tsLast</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow1</name> <init>= <expr><call><name>tMergeTreeGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow1</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>doMergeRowsInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>tsLast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doMergeRowsInBuf</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doMergeRowsInBuf</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name><name>merge</name><operator>.</operator><name>pTSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name>tsLast</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow1</name> <init>= <expr><call><name>tMergeTreeGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow1</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>doMergeRowsInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>tsLast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>doMergeRowsInFileBlocks</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTSRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doAppendRowFromTSRow</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tRowMergerClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doMergeFileBlockAndLastBlock</name><parameter_list>(<parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>,
                                            <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>,
                                            <parameter><decl><type><name>bool</name></type> <name>mergeBlockData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>             <name>tsLastBlock</name> <init>= <expr><call><name>getCurrentKeyInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type>    <name>pTSRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRowMerger</name></type> <name>merge</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name></type>    <name>fRow</name> <init>= <expr><call><name>tMergeTreeGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsdbTrace</name><argument_list>(<argument><expr><literal type="string">"fRow ptr:%p, %d, uid:%"</literal> <name>PRIu64</name> <literal type="string">", %s"</literal></expr></argument>, <argument><expr><name><name>fRow</name><operator>.</operator><name>pBlockData</name></name></expr></argument>, <argument><expr><name><name>fRow</name><operator>.</operator><name>iRow</name></name></expr></argument>, <argument><expr><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// only last block exists</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>mergeBlockData</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>tsLastBlock</name> <operator>!=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tryCopyDistinctRowFromSttBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>, <argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>tsLastBlock</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name>tsLastBlock</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow1</name> <init>= <expr><call><name>tMergeTreeGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doMergeRowsInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>tsLastBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>doAppendRowFromTSRow</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tRowMergerClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// not merge block data</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doMergeRowsInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>tsLastBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>mergeBlockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// merge with block data if ts == key</comment>
    <if_stmt><if>if <condition>(<expr><name>tsLastBlock</name> <operator>==</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>doMergeRowsInFileBlocks</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doAppendRowFromTSRow</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tRowMergerClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mergeFileBlockAndLastBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>key</name></decl></parameter>,
                                          <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>hasDataInFileBlock</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pDumpInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// no last block available, only data block exists</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>mergeRowsInFileBlocks</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// row in last file block</comment>
    <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><call><name>getCurrentKeyInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ts</name> <operator>&gt;=</operator> <name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <name>ts</name></expr>)</condition> <block>{<block_content>  <comment type="line">// imem, mem are all empty, file blocks (data blocks and last block) exist</comment>
        <return>return <expr><call><name>mergeRowsInFileBlocks</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>key</name> <operator>==</operator> <name>ts</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type>    <name>pTSRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SRowMerger</name></type> <name>merge</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>doMergeRowsInFileBlocks</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow1</name> <init>= <expr><call><name>tMergeTreeGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>doMergeRowsInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>ts</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>doAppendRowFromTSRow</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tRowMergerClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// desc order</comment>
      <return>return <expr><call><name>doMergeFileBlockAndLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// only last block exists</comment>
    <return>return <expr><call><name>doMergeFileBlockAndLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doMergeMultiLevelRows</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>,
                                     <parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRowMerger</name></type>          <name>merge</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type>             <name>pTSRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>             <name>pDelList</name> <init>= <expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>pRow</name> <init>= <expr><call><name>getValidMemRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name>pDelList</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>piRow</name> <init>= <expr><call><name>getValidMemRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name></name></expr></argument>, <argument><expr><name>pDelList</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pRow</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>piRow</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsLast</name> <init>= <expr><name>INT64_MIN</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tsLast</name> <operator>=</operator> <call><name>getCurrentKeyInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>key</name> <init>= <expr><ternary><condition><expr><call><name>hasDataInFileBlock</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pDumpInfo</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr>]</index></name></expr> </then><else>: <expr><name>INT64_MIN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>k</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>ik</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>piRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>minKey</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>  <comment type="line">// let's find the minimum</comment>
    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&gt;</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&gt;</operator> <name><name>ik</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name><name>ik</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&gt;</operator> <name>key</name> <operator>&amp;&amp;</operator> <call><name>hasDataInFileBlock</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pDumpInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&gt;</operator> <name>tsLast</name> <operator>&amp;&amp;</operator> <call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>tsLast</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>  <comment type="line">// let find the maximum ts value</comment>
    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&lt;</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&lt;</operator> <name><name>ik</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name><name>ik</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&lt;</operator> <name>key</name> <operator>&amp;&amp;</operator> <call><name>hasDataInFileBlock</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pDumpInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>&lt;</operator> <name>tsLast</name> <operator>&amp;&amp;</operator> <call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>minKey</name> <operator>=</operator> <name>tsLast</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>init</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// ASC: file block -----&gt; last block -----&gt; imem -----&gt; mem</comment>
  <comment type="line">// DESC: mem -----&gt; imem -----&gt; last block -----&gt; file block</comment>
  <if_stmt><if>if <condition>(<expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>doMergeRowsInFileBlocks</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name>tsLast</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow1</name> <init>= <expr><call><name>tMergeTreeGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow1</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><call><name>doMergeRowsInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>tsLast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name><name>ik</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>piRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><name>piRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pSchema</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>piRow</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doMergeRowsInBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>ik</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>,
                              <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>merge</name><operator>.</operator><name>pTSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doMergeRowsInBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>,
                              <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doMergeRowsInBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>,
                              <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name><name>ik</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>piRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><name>piRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>piRow</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doMergeRowsInBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>ik</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>,
                              <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name>tsLast</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow1</name> <init>= <expr><call><name>tMergeTreeGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>init</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>init</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow1</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>doMergeRowsInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>tsLast</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>minKey</name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>init</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>merge</name><operator>.</operator><name>pTSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>doMergeRowsInFileBlocks</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>merge</name><operator>.</operator><name>pTSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>doAppendRowFromTSRow</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tRowMergerClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initMemDataIterator</name><parameter_list>(<parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iterInit</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>startKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>startKey</name> <operator>=</operator> <operator>(</operator><name>TSDBKEY</name><operator>)</operator><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>minVer</name></name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>startKey</name> <operator>=</operator> <operator>(</operator><name>TSDBKEY</name><operator>)</operator><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>maxVer</name></name></expr>}</block></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>backward</name> <init>= <expr><operator>(</operator><operator>!</operator><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STbData</name><modifier>*</modifier></type> <name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name><operator>-&gt;</operator><name>pMem</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>tsdbGetTbDataFromMemTable</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name><operator>-&gt;</operator><name>pMem</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iter</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbTbDataIterCreate</name><argument_list>(<argument><expr><name>d</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startKey</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>hasVal</name></name> <operator>=</operator> <operator>(</operator><call><name>tsdbTbDataIterGet</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p uid:%"</literal> <name>PRId64</name> <literal type="string">", check data in mem from skey:%"</literal> <name>PRId64</name> <literal type="string">", order:%d, ts range in buf:%"</literal> <name>PRId64</name>
                  <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">" %s"</literal></expr></argument>,
                  <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>startKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>minKey</name></name></expr></argument>, <argument><expr><name><name>d</name><operator>-&gt;</operator><name>maxKey</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"%p uid:%"</literal> <name>PRId64</name> <literal type="string">", failed to create iterator for imem, code:%s, %s"</literal></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
                  <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p uid:%"</literal> <name>PRId64</name> <literal type="string">", no data in mem, %s"</literal></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>STbData</name><modifier>*</modifier></type> <name>di</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name><operator>-&gt;</operator><name>pIMem</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>tsdbGetTbDataFromMemTable</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name><operator>-&gt;</operator><name>pIMem</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbTbDataIterCreate</name><argument_list>(<argument><expr><name>di</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startKey</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>hasVal</name></name> <operator>=</operator> <operator>(</operator><call><name>tsdbTbDataIterGet</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>iter</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p uid:%"</literal> <name>PRId64</name> <literal type="string">", check data in imem from skey:%"</literal> <name>PRId64</name> <literal type="string">", order:%d, ts range in buf:%"</literal> <name>PRId64</name>
                  <literal type="string">"-%"</literal> <name>PRId64</name> <literal type="string">" %s"</literal></expr></argument>,
                  <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>startKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name><name>di</name><operator>-&gt;</operator><name>minKey</name></name></expr></argument>, <argument><expr><name><name>di</name><operator>-&gt;</operator><name>maxKey</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"%p uid:%"</literal> <name>PRId64</name> <literal type="string">", failed to create iterator for mem, code:%s, %s"</literal></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
                  <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p uid:%"</literal> <name>PRId64</name> <literal type="string">", no data in imem, %s"</literal></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>initDelSkylineIterator</name><argument_list>(<argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iterInit</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>isValidFileBlockRow</name><parameter_list>(<parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name></decl></parameter>,
                                <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// it is an multi-table data block</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>!=</operator> <name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// move to next row</comment>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// check for version and time range</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ver</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name><index>[<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>maxVer</name></name> <operator>||</operator> <name>ver</name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>minVer</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>||</operator> <name>ts</name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>k</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>ts</name></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>ver</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>hasBeenDropped</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>fileDelIndex</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>k</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>initLastBlockReader</name><parameter_list>(<parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLBlockReader</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// the last block reader has been initialized for this table.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pLBlockReader</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLBlockReader</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pLBlockReader</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tMergeTreeClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initMemDataIterator</name><argument_list>(<argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pLBlockReader</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>step</name> <init>= <expr><ternary><condition><expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pLBlockReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>w</name> <init>= <expr><name><name>pLBlockReader</name><operator>-&gt;</operator><name>window</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pLBlockReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>w</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>w</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>+</operator> <name>step</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tMergeTreeOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>, <argument><expr><operator>(</operator><name><name>pLBlockReader</name><operator>-&gt;</operator><name>order</name></name> <operator>==</operator> <name>TSDB_ORDER_DESC</name><operator>)</operator></expr></argument>,
                                <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pLBlockReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>,
                                <argument><expr><name><name>pLBlockReader</name><operator>-&gt;</operator><name>pInfo</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>nextRowFromLastBlocks</name><argument_list>(<argument><expr><name>pLBlockReader</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>getCurrentKeyInLastBlock</name><parameter_list>(<parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TSDBROW</name></type> <name>row</name> <init>= <expr><call><name>tMergeTreeGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>TSDBROW_TS</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>hasDataInLastBlock</name><parameter_list>(<parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name><operator>.</operator><name>pIter</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>hasDataInFileBlock</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>==</operator> <name><name>pDumpInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>allDumped</name></name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>mergeRowsInFileBlocks</name><parameter_list>(<parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>key</name></decl></parameter>,
                              <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tryCopyDistinctRowFromFileBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pDumpInfo</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type>    <name>pTSRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRowMerger</name></type> <name>merge</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doMergeRowsInFileBlocks</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doAppendRowFromTSRow</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tRowMergerClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildComposedDataBlockImpl</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>,
                                          <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>key</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>allDumped</name></name><operator>)</operator><operator>)</operator></expr> ?</condition><then> <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr>]</index></name></expr> </then><else>: <expr><name>INT64_MIN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>hasVal</name></name> <operator>&amp;&amp;</operator> <name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>hasVal</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>doMergeMultiLevelRows</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>piRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>hasVal</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>getValidMemRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>hasVal</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>piRow</name> <operator>=</operator> <call><name>getValidMemRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// imem + file + last block</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>hasVal</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>doMergeBufAndFileRows</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>piRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// mem + file + last block</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>hasVal</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>doMergeBufAndFileRows</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// files data blocks + last block</comment>
    <return>return <expr><call><name>mergeFileBlockAndLastBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildComposedDataBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pBlockInfo</name> <init>= <expr><call><name>getCurrentBlockInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type>   <name>pLastBlockReader</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileIter</name><operator>.</operator><name>pLastBlockReader</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>asc</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBlockInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"failed to locate the uid:%"</literal> <name>PRIu64</name> <literal type="string">" in query table uid list, total tables:%d, %s"</literal></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
                <argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pBlockScanInfo</name> <operator>=</operator> <operator>*</operator><operator>(</operator><name>STableBlockScanInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>getCurrentBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSDBKEY</name></type>   <name>keyInBuf</name> <init>= <expr><call><name>getCurrentKeyInBuf</name><argument_list>(<argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// it is a clean block, load it directly</comment>
    <if_stmt><if>if <condition>(<expr><call><name>isCleanFileDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>keyInBuf</name></expr></argument>, <argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> 
        <name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&lt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>asc</name> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>asc</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>copyBlockDataToSDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// record the last key value</comment>
        <expr_stmt><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr> </then><else>: <expr><name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr></else></ternary></expr>;</expr_stmt>
        <goto>goto <name>_end</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// file blocks not exist</comment>
    <expr_stmt><expr><name>pBlockScanInfo</name> <operator>=</operator> <operator>*</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableIter</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockData</name><modifier>*</modifier></type>         <name>pBlockData</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileBlockData</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>hasBlockData</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <block>{<block_content>
      <while>while <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// find the first qualified row in data block</comment>
        <if_stmt><if>if <condition>(<expr><call><name>isValidFileBlockRow</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pDumpInfo</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>hasBlockData</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>getCurrentBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name> <operator>||</operator> <name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>

          <decl_stmt><decl><type><name>int32_t</name></type> <name>nextIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>SBlockIndex</name></type> <name>bIndex</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>bool</name></type> <name>hasNeighbor</name> <init>= <expr><call><name>getNeighborBlockOfSameTable</name><argument_list>(<argument><expr><name>pBlockInfo</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextIndex</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNeighbor</name></expr>)</condition> <block>{<block_content>  <comment type="line">// do nothing</comment>
            <expr_stmt><expr><call><name>setBlockAllDumped</name><argument_list>(<argument><expr><name>pDumpInfo</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><call><name>overlapWithNeighborBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bIndex</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// load next block</comment>
            <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type>  <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name> <init>= <expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>blockIter</name></name></expr></init></decl>;</decl_stmt>

            <comment type="line">// 1. find the next neighbor block in the scan block list</comment>
            <decl_stmt><decl><type><name>SFileDataBlockInfo</name></type> <name>fb</name> <init>= <expr><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>, <expr><operator>.</operator><name>tbBlockIdx</name> <operator>=</operator> <name>nextIndex</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int32_t</name></type>            <name>neighborIndex</name> <init>= <expr><call><name>findFileBlockInfoIndex</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// 2. remove it from the scan block list</comment>
            <expr_stmt><expr><call><name>setFileBlockActiveInBlockIter</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><name>neighborIndex</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// 3. load the neighbor block, and set it to be the currently accessed file data block</comment>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doLoadFileBlockData</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>fileBlockData</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>setBlockAllDumped</name><argument_list>(<argument><expr><name>pDumpInfo</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// 4. check the data values</comment>
            <expr_stmt><expr><call><name>initBlockDumpInfo</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>setBlockAllDumped</name><argument_list>(<argument><expr><name>pDumpInfo</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block>

    <decl_stmt><decl><type><name>bool</name></type> <name>hasBlockLData</name> <init>= <expr><call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// no data in last block and block, no need to proceed.</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>hasBlockData</name> <operator>==</operator> <name>false</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>hasBlockLData</name> <operator>==</operator> <name>false</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>buildComposedDataBlockImpl</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// currently loaded file data block is consumed</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&gt;=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>||</operator> <name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>getCurrentBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>setBlockAllDumped</name><argument_list>(<argument><expr><name>pDumpInfo</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

<label><name>_end</name>:</label>
  <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>pBlockScanInfo</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>blockDataUpdateTsWindow</name><argument_list>(<argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name><operator>.</operator><name>slotId</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>setComposedBlockFlag</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>el</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>composedBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>buildComposedBlockTime</name></name> <operator>+=</operator> <name>el</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p uid:%"</literal> <name>PRIu64</name> <literal type="string">", composed data block created, brange:%"</literal> <name>PRIu64</name> <literal type="string">"-%"</literal> <name>PRIu64</name>
              <literal type="string">" rows:%d, elapsed time:%.2f ms %s"</literal></expr></argument>,
              <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>,
              <argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>setComposedBlockFlag</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>composed</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>composedDataBlock</name></name> <operator>=</operator> <name>composed</name></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>initDelSkylineIterator</name><parameter_list>(<parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STbData</name><modifier>*</modifier></type> <name>pMemTbData</name></decl></parameter>,
                               <parameter><decl><type><name>STbData</name><modifier>*</modifier></type> <name>piMemTbData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDelData</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDelFile</name><modifier>*</modifier></type> <name>pDelFile</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDelFile</name> <operator>&amp;&amp;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelIdx</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDelIdx</name></type>  <name>idx</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDelIdx</name><modifier>*</modifier></type> <name>pIdx</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>idx</name></expr></argument>, <argument><expr><name>tCmprDelIdx</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>pIdx</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDelData</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>, <argument><expr><name>pDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDelData</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMemTbData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pMemTbData</name><operator>-&gt;</operator><name>pHead</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pDelData</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>piMemTbData</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>piMemTbData</name><operator>-&gt;</operator><name>pHead</name></name></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pDelData</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>pNext</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDelData</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSDBKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbBuildDeleteSkyline</name><argument_list>(<argument><expr><name>pDelData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDelData</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>index</name></name> <operator>=</operator>
      <ternary><condition><expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>index</name></name> <operator>=</operator> <name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>fileDelIndex</name></name> <operator>=</operator> <name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>lastBlockDelIndex</name></name> <operator>=</operator> <name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>index</name></name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSDBKEY</name></type> <name>getCurrentKeyInBuf</name><parameter_list>(<parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>  <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>TSKEY_INITIAL_VAL</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>pRow</name> <init>= <expr><call><name>getValidMemRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pScanInfo</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>getValidMemRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pScanInfo</name><operator>-&gt;</operator><name>iiter</name></name></expr></argument>, <argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>k</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>key</name> <operator>=</operator> <name>k</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>key</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>moveToNextFile</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SBlockNumber</name><modifier>*</modifier></type> <name>pBlockNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type> <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBlockNum</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockNum</name><operator>-&gt;</operator><name>numOfLastFiles</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type>  <name>numOfTables</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pIndexList</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>numOfTables</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>hasNext</name> <init>= <expr><call><name>filesetIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>fileIter</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNext</name></expr>)</condition> <block>{<block_content>  <comment type="line">// no data files on disk</comment>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>pIndexList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doLoadBlockIndex</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name></name></expr></argument>, <argument><expr><name>pIndexList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pIndexList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pIndexList</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name><operator>-&gt;</operator><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doLoadFileBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pIndexList</name></expr></argument>, <argument><expr><name>pBlockNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pIndexList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pBlockNum</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>+</operator> <name><name>pBlockNum</name><operator>-&gt;</operator><name>numOfLastFiles</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// no blocks in current file, try next files</comment>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pIndexList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>

    <decl_stmt><decl><type><name>SDelFile</name><modifier>*</modifier></type> <name>pDelFile</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pDelFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsdbDelFReaderOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name>pDelFile</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelIdx</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelIdx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDelIdx</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>uidComparFunc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>pu1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>pu2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pu1</name> <operator>==</operator> <name>pu2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>pu1</name> <operator>&lt;</operator> <name>pu2</name><operator>)</operator></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>extractOrderedTableUidList</name><parameter_list>(<parameter><decl><type><name>SUidOrderCheckInfo</name><modifier>*</modifier></type> <name>pOrderCheckInfo</name></decl></parameter>, <parameter><decl><type><name>SReaderStatus</name><modifier>*</modifier></type> <name>pStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>total</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>p</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>STableBlockScanInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name>p</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>tableUidList</name><index>[<expr><name>index</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosSort</name><argument_list>(<argument><expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>tableUidList</name></name></expr></argument>, <argument><expr><name>total</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>uidComparFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initOrderCheckInfo</name><parameter_list>(<parameter><decl><type><name>SUidOrderCheckInfo</name><modifier>*</modifier></type> <name>pOrderCheckInfo</name></decl></parameter>, <parameter><decl><type><name>SReaderStatus</name><modifier>*</modifier></type> <name>pStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>total</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>total</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>tableUidList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>currentIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>tableUidList</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>total</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>tableUidList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>extractOrderedTableUidList</name><argument_list>(<argument><expr><name>pOrderCheckInfo</name></expr></argument>, <argument><expr><name>pStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>tableUidList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// it is the last block of a new file</comment>
      <expr_stmt><expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>currentIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>tableUidList</name><index>[<expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>currentIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// the tableMap has already updated</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryRealloc</name><argument_list>(<argument><expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>tableUidList</name></name></expr></argument>, <argument><expr><name>total</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>tableUidList</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>extractOrderedTableUidList</name><argument_list>(<argument><expr><name>pOrderCheckInfo</name></expr></argument>, <argument><expr><name>pStatus</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>pOrderCheckInfo</name><operator>-&gt;</operator><name>tableUidList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>moveToNextTable</name><parameter_list>(<parameter><decl><type><name>SUidOrderCheckInfo</name><modifier>*</modifier></type> <name>pOrderedCheckInfo</name></decl></parameter>, <parameter><decl><type><name>SReaderStatus</name><modifier>*</modifier></type> <name>pStatus</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pOrderedCheckInfo</name><operator>-&gt;</operator><name>currentIndex</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pOrderedCheckInfo</name><operator>-&gt;</operator><name>currentIndex</name></name> <operator>&gt;=</operator> <call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pOrderedCheckInfo</name><operator>-&gt;</operator><name>tableUidList</name><index>[<expr><name><name>pOrderedCheckInfo</name><operator>-&gt;</operator><name>currentIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>=</operator> <call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>uid</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doLoadLastBlockSequentially</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type>    <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name> <init>= <expr><name><name>pStatus</name><operator>-&gt;</operator><name>fileIter</name><operator>.</operator><name>pLastBlockReader</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SUidOrderCheckInfo</name><modifier>*</modifier></type> <name>pOrderedCheckInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>uidCheckInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><call><name>initOrderCheckInfo</name><argument_list>(<argument><expr><name>pOrderedCheckInfo</name></expr></argument>, <argument><expr><name>pStatus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <operator>(</operator><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// load the last data block of current table</comment>
    <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>STableBlockScanInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>hasVal</name> <init>= <expr><call><name>initLastBlockReader</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasVal</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>bool</name></type> <name>hasNexTable</name> <init>= <expr><call><name>moveToNextTable</name><argument_list>(<argument><expr><name>pOrderedCheckInfo</name></expr></argument>, <argument><expr><name>pStatus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNexTable</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doBuildDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// current table is exhausted, let's try next table</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>hasNexTable</name> <init>= <expr><call><name>moveToNextTable</name><argument_list>(<argument><expr><name>pOrderedCheckInfo</name></expr></argument>, <argument><expr><name>pStatus</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNexTable</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doBuildDataBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type>       <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type>      <name>pBlockIter</name> <init>= <expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>blockIter</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type>  <name>pBlockInfo</name> <init>= <expr><call><name>getCurrentBlockInfo</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type>    <name>pLastBlockReader</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileIter</name><operator>.</operator><name>pLastBlockReader</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pBlockInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pScanInfo</name> <operator>=</operator>
        <operator>*</operator><operator>(</operator><name>STableBlockScanInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pScanInfo</name> <operator>=</operator> <operator>*</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableIter</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pScanInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"failed to get table scan-info, %s"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pBlockInfo</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pBlock</name> <operator>=</operator> <call><name>getCurrentBlock</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>initLastBlockReader</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>keyInBuf</name> <init>= <expr><call><name>getCurrentKeyInBuf</name><argument_list>(<argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pBlockInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// build data block from last data file</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildComposedDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>fileBlockShouldLoad</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockInfo</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>keyInBuf</name></expr></argument>, <argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doLoadFileBlockData</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>fileBlockData</name></name></expr></argument>, <argument><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// build composed data block</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildComposedDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>bufferDataInFileBlockGap</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><name>keyInBuf</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// data in memory that are earlier than current file block</comment>
    <comment type="line">// rows in buffer should be less than the file block in asc, greater than file block in desc</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>endKey</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr> </then><else>: <expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildDataBlockFromBuf</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>endKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>hasDataInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// only return the rows in last block</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>tsLast</name> <init>= <expr><call><name>getCurrentKeyInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>tsLast</name> <operator>&gt;=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileBlockData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"load data in last block firstly, due to desc scan data, %s"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildComposedDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// whole block is required, return it directly</comment>
      <decl_stmt><decl><type><name>SDataBlockInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rows</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <operator>(</operator><name>STimeWindow</name><operator>)</operator><block>{<expr><operator>.</operator><name>skey</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr>, <expr><operator>.</operator><name>ekey</name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr>}</block></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setComposedBlockFlag</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>setBlockAllDumped</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>fBlockDumpInfo</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// update the last key for the corresponding table</comment>
      <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <ternary><condition><expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr> </then><else>: <expr><name><name>pInfo</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildBlockFromBufferSequentially</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type> <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>pBlockScanInfo</name> <init>= <expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>initMemDataIterator</name><argument_list>(<argument><expr><operator>*</operator><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>endKey</name> <init>= <expr><ternary><condition><expr><operator>(</operator><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr> ?</condition><then> <expr><name>INT64_MAX</name></expr> </then><else>: <expr><name>INT64_MIN</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>buildDataBlockFromBuf</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>*</operator><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>endKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// current table is exhausted, let's try the next table</comment>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="line">// set the correct start position in case of the first/last file block, according to the query time window</comment>
<function><type><name>void</name></type> <name>initBlockDumpInfo</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>getCurrentBlock</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type> <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>=</operator> <name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>allDumped</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>=</operator> <ternary><condition><expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>initForFirstBlockInFile</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBlockNumber</name></type> <name>num</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>moveToNextFile</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// all data files are consumed, try data in buffer</comment>
  <if_stmt><if>if <condition>(<expr><name><name>num</name><operator>.</operator><name>numOfBlocks</name></name> <operator>+</operator> <name><name>num</name><operator>.</operator><name>numOfLastFiles</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>loadFromFile</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// initialize the block iterator for a new fileset</comment>
  <if_stmt><if>if <condition>(<expr><name><name>num</name><operator>.</operator><name>numOfBlocks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initBlockIterator</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><name><name>num</name><operator>.</operator><name>numOfBlocks</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// no block data, only last block exists</comment>
    <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileBlockData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>resetDataBlockIterator</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// set the correct start position according to the query time window</comment>
  <expr_stmt><expr><call><name>initBlockDumpInfo</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>fileBlockPartiallyRead</name><parameter_list>(<parameter><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>asc</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><operator>!</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>allDumped</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
         <operator>(</operator><operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>asc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&lt;</operator> <operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>asc</name><operator>)</operator><operator>)</operator><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>buildBlockFromFiles</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>asc</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
  <label><name>_begin</name>:</label>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doLoadLastBlockSequentially</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// all data blocks are checked in this last block file, now let's try the next file</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initForFirstBlockInFile</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="line">// error happens or all the data files are completely checked</comment>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>loadFromFile</name></name> <operator>==</operator> <name>false</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// this file does not have data files, let's start check the last block file if exists</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_begin</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doBuildDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>fileBlockPartiallyRead</name><argument_list>(<argument><expr><name>pDumpInfo</name></expr></argument>, <argument><expr><name>asc</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// file data block is partially loaded</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>buildComposedDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// current block are exhausted, try the next file block</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>allDumped</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// try next data block in current file</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>hasNext</name> <init>= <expr><call><name>blockIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>hasNext</name></expr>)</condition> <block>{<block_content>  <comment type="line">// check for the next block in the block accessed order list</comment>
          <expr_stmt><expr><call><name>initBlockDumpInfo</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pCurrentFileset</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// data blocks in current file are exhausted, let's try the next file now</comment>
            <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileBlockData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>resetDataBlockIterator</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>_begin</name>;</goto>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initForFirstBlockInFile</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// error happens or all the data files are completely checked</comment>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>loadFromFile</name></name> <operator>==</operator> <name>false</name><operator>)</operator></expr>)</condition> <block>{<block_content>
              <return>return <expr><name>code</name></expr>;</return>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// this file does not have blocks, let's start check the last block file</comment>
            <if_stmt><if>if <condition>(<expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <goto>goto <name>_begin</name>;</goto>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doBuildDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>STsdb</name><modifier>*</modifier></type> <name>getTsdbByRetentions</name><parameter_list>(<parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>winSKey</name></decl></parameter>, <parameter><decl><type><name>SRetention</name><modifier>*</modifier></type> <name>retentions</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idStr</name></decl></parameter>,
                                  <parameter><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>pLevel</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>VND_IS_RSMA</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int8_t</name></type>  <name>level</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type>  <name>precision</name> <init>= <expr><name><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>precision</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>now</name> <init>= <expr><call><name>taosGetTimestamp</name><argument_list>(<argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><name>tsQueryRsmaTolerance</name> <operator>*</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MILLI</name><operator>)</operator></expr>   ?</condition><then> <expr><literal type="number">1L</literal></expr>
                                             </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1000L</literal></expr>
                                                                                        </then><else>: <expr><literal type="number">1000000L</literal></expr></else></ternary></expr></else></ternary><operator>)</operator></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_RETENTION_MAX</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SRetention</name><modifier>*</modifier></type> <name>pRetention</name> <init>= <expr><name>retentions</name> <operator>+</operator> <name>level</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRetention</name><operator>-&gt;</operator><name>keep</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>--</operator><name>level</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>now</name> <operator>-</operator> <name><name>pRetention</name><operator>-&gt;</operator><name>keep</name></name><operator>)</operator> <operator>&lt;=</operator> <operator>(</operator><name>winSKey</name> <operator>+</operator> <name>offset</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>++</operator><name>level</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>idStr</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name>idStr</name></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>==</operator> <name>TSDB_RETENTION_L0</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pLevel</name> <operator>=</operator> <name>TSDB_RETENTION_L0</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma level %d is selected to query %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_RETENTION_L0</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>VND_RSMA0</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>level</name> <operator>==</operator> <name>TSDB_RETENTION_L1</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pLevel</name> <operator>=</operator> <name>TSDB_RETENTION_L1</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma level %d is selected to query %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_RETENTION_L1</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>VND_RSMA1</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pLevel</name> <operator>=</operator> <name>TSDB_RETENTION_L2</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, rsma level %d is selected to query %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TSDB_RETENTION_L2</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><call><name>VND_RSMA2</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>VND_TSDB</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>SVersionRange</name></type> <name>getQueryVerRange</name><parameter_list>(<parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>level</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>startVer</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pCond</name><operator>-&gt;</operator><name>startVersion</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name><name>pCond</name><operator>-&gt;</operator><name>startVersion</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>endVer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCond</name><operator>-&gt;</operator><name>endVersion</name></name> <operator>==</operator>
      <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// user not specified end version, set current maximum version of vnode as the endVersion</comment>
    <expr_stmt><expr><name>endVer</name> <operator>=</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>endVer</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pCond</name><operator>-&gt;</operator><name>endVersion</name></name> <operator>&gt;</operator> <name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>applied</name></name></expr> </then><else>: <expr><name><name>pCond</name><operator>-&gt;</operator><name>endVersion</name></name></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><operator>(</operator><name>SVersionRange</name><operator>)</operator><block>{<expr><operator>.</operator><name>minVer</name> <operator>=</operator> <name>startVer</name></expr>, <expr><operator>.</operator><name>maxVer</name> <operator>=</operator> <name>endVer</name></expr>}</block></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>hasBeenDropped</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pDelList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>pKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>order</name></decl></parameter>, <parameter><decl><type><name>SVersionRange</name><modifier>*</modifier></type> <name>pVerRange</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pKey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDelList</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>asc</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name>order</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>asc</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>index</name> <operator>&gt;=</operator> <name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>last</name> <init>= <expr><call><name>taosArrayGetLast</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>last</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>last</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>==</operator> <name><name>last</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>prev</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><name>num</name> <operator>-</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <return>return <expr><operator>(</operator><name><name>prev</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>version</name></name> <operator>&amp;&amp;</operator> <name><name>prev</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;=</operator> <name><name>pVerRange</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>&amp;&amp;</operator> <name><name>prev</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pVerRange</name><operator>-&gt;</operator><name>minVer</name></name><operator>)</operator></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>pCurrent</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><operator>*</operator><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>pNext</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>pCurrent</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pCurrent</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>pNext</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>pCurrent</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>version</name></name> <operator>&amp;&amp;</operator>
          <name><name>pVerRange</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>&gt;=</operator> <name><name>pCurrent</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <while>while <condition>(<expr><name><name>pNext</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>index</name><operator>)</operator> <operator>&lt;</operator> <name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator> <operator>&lt;</operator> <name>num</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pCurrent</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><operator>*</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pNext</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="line">// it is not a consecutive deletion range, ignore it</comment>
          <if_stmt><if>if <condition>(<expr><name><name>pCurrent</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pNext</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>pCurrent</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>pNext</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>pCurrent</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>version</name></name> <operator>&amp;&amp;</operator>
              <name><name>pVerRange</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>&gt;=</operator> <name><name>pCurrent</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>true</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>

      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>index</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>pFirst</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>pFirst</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>==</operator> <name><name>pFirst</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>pFirst</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>version</name></name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>pCurrent</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><operator>*</operator><name>index</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TSDBKEY</name><modifier>*</modifier></type> <name>pPrev</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>pCurrent</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pPrev</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>pCurrent</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>pPrev</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <while>while <condition>(<expr><name><name>pPrev</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>index</name><operator>)</operator> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pCurrent</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><operator>*</operator><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pPrev</name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><name>index</name><operator>)</operator> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="line">// it is not a consecutive deletion range, ignore it</comment>
          <if_stmt><if>if <condition>(<expr><name><name>pCurrent</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pPrev</name><operator>-&gt;</operator><name>version</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>pPrev</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>pCurrent</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>pPrev</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pKey</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>true</name></expr>;</return>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></while>

      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSDBROW</name><modifier>*</modifier></type> <name>getValidMemRow</name><parameter_list>(<parameter><decl><type><name>SIterInfo</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SArray</name><modifier>*</modifier></type> <name>pDelList</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>hasVal</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>pRow</name> <init>= <expr><call><name>tsdbTbDataIterGet</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>  <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>pTSRow</name><operator>-&gt;</operator><name>ts</name></name></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name><name>pRow</name><operator>-&gt;</operator><name>version</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>outOfTimeWindow</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>hasVal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// it is a valid data version</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>key</name><operator>.</operator><name>version</name></name> <operator>&lt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>maxVer</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>minVer</name></name><operator>)</operator> <operator>&amp;&amp;</operator>
      <operator>(</operator><operator>!</operator><call><name>hasBeenDropped</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>pRow</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>hasVal</name></name> <operator>=</operator> <call><name>tsdbTbDataIterNext</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>hasVal</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>tsdbTbDataIterGet</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>key</name> <operator>=</operator> <call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>outOfTimeWindow</name><argument_list>(<argument><expr><name><name>key</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>hasVal</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>version</name></name> <operator>&lt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>maxVer</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>.</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>minVer</name></name> <operator>&amp;&amp;</operator>
        <operator>(</operator><operator>!</operator><call><name>hasBeenDropped</name><argument_list>(<argument><expr><name>pDelList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>index</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>pRow</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doMergeRowsInBuf</name><parameter_list>(<parameter><decl><type><name>SIterInfo</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDelList</name></decl></parameter>, <parameter><decl><type><name>SRowMerger</name><modifier>*</modifier></type> <name>pMerger</name></decl></parameter>,
                         <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>hasVal</name></name> <operator>=</operator> <call><name>tsdbTbDataIterNext</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>hasVal</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// data exists but not valid</comment>
    <decl_stmt><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>pRow</name> <init>= <expr><call><name>getValidMemRow</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>pDelList</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// ts is not identical, quit</comment>
    <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>k</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>k</name><operator>.</operator><name>ts</name></name> <operator>!=</operator> <name>ts</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pTSchema</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTSchema</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tRowMergerAdd</name><argument_list>(<argument><expr><name>pMerger</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doMergeRowsInFileBlockImpl</name><parameter_list>(<parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>SRowMerger</name><modifier>*</modifier></type> <name>pMerger</name></decl></parameter>,
                                          <parameter><decl><type><name>SVersionRange</name><modifier>*</modifier></type> <name>pVerRange</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>step</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><name>rowIndex</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&amp;&amp;</operator> <name>rowIndex</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name>rowIndex</name></expr>]</index></name> <operator>==</operator> <name>key</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name><index>[<expr><name>rowIndex</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pVerRange</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>||</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name><index>[<expr><name>rowIndex</name></expr>]</index></name> <operator>&lt;</operator> <name><name>pVerRange</name><operator>-&gt;</operator><name>minVer</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>rowIndex</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><name>pMerger</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowIndex</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>rowIndex</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>CHECK_FILEBLOCK_CONT</name> <init>= <expr><literal type="number">0x1</literal></expr></init></decl>,
  <decl><name>CHECK_FILEBLOCK_QUIT</name> <init>= <expr><literal type="number">0x2</literal></expr></init></decl>,
}</block></enum></type> <name>CHECK_FILEBLOCK_STATE</name>;</typedef>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>checkForNeighborFileBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>,
                                         <parameter><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pFBlock</name></decl></parameter>, <parameter><decl><type><name>SRowMerger</name><modifier>*</modifier></type> <name>pMerger</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>key</name></decl></parameter>,
                                         <parameter><decl><type><name>CHECK_FILEBLOCK_STATE</name><modifier>*</modifier></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockData</name><modifier>*</modifier></type>         <name>pBlockData</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileBlockData</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>CHECK_FILEBLOCK_QUIT</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>nextIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockIndex</name></type> <name>bIndex</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>hasNeighbor</name> <init>= <expr><call><name>getNeighborBlockOfSameTable</name><argument_list>(<argument><expr><name>pFBlock</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nextIndex</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bIndex</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasNeighbor</name></expr>)</condition> <block>{<block_content>  <comment type="line">// do nothing</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>overlap</name> <init>= <expr><call><name>overlapWithNeighborBlock</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bIndex</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>overlap</name></expr>)</condition> <block>{<block_content>  <comment type="line">// load next block</comment>
    <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type>  <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name> <init>= <expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>blockIter</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// 1. find the next neighbor block in the scan block list</comment>
    <decl_stmt><decl><type><name>SFileDataBlockInfo</name></type> <name>fb</name> <init>= <expr><block>{<expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pFBlock</name><operator>-&gt;</operator><name>uid</name></name></expr>, <expr><operator>.</operator><name>tbBlockIdx</name> <operator>=</operator> <name>nextIndex</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>            <name>neighborIndex</name> <init>= <expr><call><name>findFileBlockInfoIndex</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// 2. remove it from the scan block list</comment>
    <expr_stmt><expr><call><name>setFileBlockActiveInBlockIter</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><name>neighborIndex</name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// 3. load the neighbor block, and set it to be the currently accessed file data block</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doLoadFileBlockData</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>fileBlockData</name></name></expr></argument>, <argument><expr><name><name>pFBlock</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// 4. check the data values</comment>
    <expr_stmt><expr><call><name>initBlockDumpInfo</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>=</operator>
        <call><name>doMergeRowsInFileBlockImpl</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pMerger</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&gt;=</operator> <name><name>pDumpInfo</name><operator>-&gt;</operator><name>totalRows</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>state</name> <operator>=</operator> <name>CHECK_FILEBLOCK_CONT</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doMergeRowsInFileBlocks</name><parameter_list>(<parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>,
                                <parameter><decl><type><name>SRowMerger</name><modifier>*</modifier></type> <name>pMerger</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFileBlockDumpInfo</name><modifier>*</modifier></type> <name>pDumpInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fBlockDumpInfo</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>asc</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>key</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>asc</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&lt;=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>asc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>asc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>=</operator>
        <call><name>doMergeRowsInFileBlockImpl</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>pMerger</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name></name></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// all rows are consumed, let's try next file block</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&gt;=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&amp;&amp;</operator> <name>asc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pDumpInfo</name><operator>-&gt;</operator><name>rowIndex</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>asc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>CHECK_FILEBLOCK_STATE</name></type> <name>st</name></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pFileBlockInfo</name> <init>= <expr><call><name>getCurrentBlockInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SDataBlk</name><modifier>*</modifier></type>           <name>pCurrentBlock</name> <init>= <expr><call><name>getCurrentBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>checkForNeighborFileBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>pCurrentBlock</name></expr></argument>, <argument><expr><name>pFileBlockInfo</name></expr></argument>, <argument><expr><name>pMerger</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>st</name> <operator>==</operator> <name>CHECK_FILEBLOCK_QUIT</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doMergeRowsInLastBlock</name><parameter_list>(<parameter><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLastBlockReader</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ts</name></decl></parameter>,
                               <parameter><decl><type><name>SRowMerger</name><modifier>*</modifier></type> <name>pMerger</name></decl></parameter>, <parameter><decl><type><name>SVersionRange</name><modifier>*</modifier></type> <name>pVerRange</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <while>while <condition>(<expr><call><name>nextRowFromLastBlocks</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>, <argument><expr><name>pScanInfo</name></expr></argument>, <argument><expr><name>pVerRange</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>next1</name> <init>= <expr><call><name>getCurrentKeyInLastBlock</name><argument_list>(<argument><expr><name>pLastBlockReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>next1</name> <operator>==</operator> <name>ts</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBROW</name></type> <name>fRow1</name> <init>= <expr><call><name>tMergeTreeGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLastBlockReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><name>pMerger</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fRow1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doMergeMemTableMultiRows</name><parameter_list>(<parameter><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>pRow</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SIterInfo</name><modifier>*</modifier></type> <name>pIter</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pDelList</name></decl></parameter>, <parameter><decl><type><name>STSRow</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTSRow</name></decl></parameter>,
                                 <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>freeTSRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>pNextRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name></type>  <name>current</name> <init>= <expr><operator>*</operator><name>pRow</name></expr></init></decl>;</decl_stmt>

  <block>{<block_content>  <comment type="line">// if the timestamp of the next valid row has a different ts, return current row directly</comment>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>hasVal</name></name> <operator>=</operator> <call><name>tsdbTbDataIterNext</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>hasVal</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pTSRow</name> <operator>=</operator> <name><name>current</name><operator>.</operator><name>pTSRow</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>freeTSRow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// has next point in mem/imem</comment>
      <expr_stmt><expr><name>pNextRow</name> <operator>=</operator> <call><name>getValidMemRow</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>pDelList</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pNextRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pTSRow</name> <operator>=</operator> <name><name>current</name><operator>.</operator><name>pTSRow</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>freeTSRow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>current</name><operator>.</operator><name>pTSRow</name><operator>-&gt;</operator><name>ts</name></name> <operator>!=</operator> <name><name>pNextRow</name><operator>-&gt;</operator><name>pTSRow</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pTSRow</name> <operator>=</operator> <name><name>current</name><operator>.</operator><name>pTSRow</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>freeTSRow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name>SRowMerger</name></type> <name>merge</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// get the correct schema for data in memory</comment>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pTSchema</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><operator>&amp;</operator><name>current</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTSchema</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name>pTSchema</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerInit2</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>current</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pTSchema1</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><name>pNextRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTSchema1</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tRowMergerAdd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pNextRow</name></expr></argument>, <argument><expr><name>pTSchema1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doMergeRowsInBuf</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name><name>current</name><operator>.</operator><name>pTSRow</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>pDelList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRowMergerGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tRowMergerClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>freeTSRow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doMergeMemIMemRows</name><parameter_list>(<parameter><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>pRow</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>piRow</name></decl></parameter>, <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>,
                           <parameter><decl><type><name>STSRow</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTSRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRowMerger</name></type> <name>merge</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>k</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>ik</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>piRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// ascending order imem --&gt; mem</comment>
    <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>piRow</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doMergeRowsInBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>ik</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>,
                            <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator>
        <call><name>doMergeRowsInBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type> <name>pSchema</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name> <operator>||</operator> <name><name>merge</name><operator>.</operator><name>pTSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator>
        <call><name>doMergeRowsInBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>k</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tRowMerge</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>piRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doMergeRowsInBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>ik</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>,
                            <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tRowMergerGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name>merge</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbGetNextRowInMem</name><parameter_list>(<parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STSRow</name><modifier>*</modifier><modifier>*</modifier></type> <name>pTSRow</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>endKey</name></decl></parameter>,
                            <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>freeTSRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>pRow</name> <init>= <expr><call><name>getValidMemRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name><modifier>*</modifier></type> <name>piRow</name> <init>= <expr><call><name>getValidMemRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>  <name>pDelList</name> <init>= <expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>delSkyline</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>uid</name> <init>= <expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// todo refactor</comment>
  <decl_stmt><decl><type><name>bool</name></type> <name>asc</name> <init>= <expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>hasVal</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>k</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>k</name><operator>.</operator><name>ts</name></name> <operator>&gt;=</operator> <name>endKey</name> <operator>&amp;&amp;</operator> <name>asc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>k</name><operator>.</operator><name>ts</name></name> <operator>&lt;=</operator> <name>endKey</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>asc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>hasVal</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>k</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>piRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>k</name><operator>.</operator><name>ts</name></name> <operator>&gt;=</operator> <name>endKey</name> <operator>&amp;&amp;</operator> <name>asc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>k</name><operator>.</operator><name>ts</name></name> <operator>&lt;=</operator> <name>endKey</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>asc</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>piRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>hasVal</name></name> <operator>&amp;&amp;</operator> <name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>hasVal</name></name> <operator>&amp;&amp;</operator> <name>pRow</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>piRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>k</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>ik</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>piRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ik</name><operator>.</operator><name>ts</name></name> <operator>!=</operator> <name><name>k</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>ik</name><operator>.</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>k</name><operator>.</operator><name>ts</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>asc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>ik</name><operator>.</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>k</name><operator>.</operator><name>ts</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>asc</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>  <comment type="line">// ik.ts &lt; k.ts</comment>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doMergeMemTableMultiRows</name><argument_list>(<argument><expr><name>piRow</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name></name></expr></argument>, <argument><expr><name>pDelList</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>freeTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name><name>k</name><operator>.</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>ik</name><operator>.</operator><name>ts</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name>asc</name><operator>)</operator> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>k</name><operator>.</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>ik</name><operator>.</operator><name>ts</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>asc</name><operator>)</operator><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doMergeMemTableMultiRows</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name>pDelList</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>freeTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// ik.ts == k.ts</comment>
      <expr_stmt><expr><operator>*</operator><name>freeTSRow</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doMergeMemIMemRows</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>piRow</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>hasVal</name></name> <operator>&amp;&amp;</operator> <name>pRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>doMergeMemTableMultiRows</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>, <argument><expr><name>pDelList</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>,
                                    <argument><expr><name>freeTSRow</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>hasVal</name></name> <operator>&amp;&amp;</operator> <name>piRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>doMergeMemTableMultiRows</name><argument_list>(<argument><expr><name>piRow</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name></name></expr></argument>, <argument><expr><name>pDelList</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>freeTSRow</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doAppendRowFromTSRow</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>pTSRow</name></decl></parameter>,
                             <parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pScanInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>outputRowIndex</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>uid</name> <init>= <expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockLoadSuppInfo</name><modifier>*</modifier></type> <name>pSupInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSchema</name><modifier>*</modifier></type>           <name>pSchema</name> <init>= <expr><call><name>doGetSchemaForTSRow</name><argument_list>(<argument><expr><name><name>pTSRow</name><operator>-&gt;</operator><name>sver</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColVal</name></type> <name>colVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>outputRowIndex</name></expr>]</index> <operator>=</operator> <name><name>pTSRow</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pSupInfo</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>col_id_t</name></type> <name>colId</name> <init>= <expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>colId</name> <operator>==</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>colId</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>tTSRowGetVal</name><argument_list>(<argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pSchema</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doCopyColVal</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>outputRowIndex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colVal</name></expr></argument>, <argument><expr><name>pSupInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>colId</name> <operator>&lt;</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>colId</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>outputRowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>colId</name> <operator>&gt;</operator> <name><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>colId</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <comment type="line">// set null value since current column does not exist in the "pSchema"</comment>
  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name><name>pSupInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>outputRowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pScanInfo</name><operator>-&gt;</operator><name>lastKey</name></name> <operator>=</operator> <name><name>pTSRow</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>doAppendRowFromFileBlock</name><parameter_list>(<parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>,
                                 <parameter><decl><type><name>int32_t</name></type> <name>rowIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>outputRowIndex</name> <init>= <expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockLoadSuppInfo</name><modifier>*</modifier></type> <name>pSupInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name><operator>.</operator><name>colId</name><index>[<expr><name>i</name></expr>]</index></name><operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>outputRowIndex</name></expr>]</index> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name>rowIndex</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SColVal</name></type> <name>cv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfInputCols</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfOutputCols</name> <init>= <expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>numOfOutputCols</name> <operator>&amp;&amp;</operator> <name>j</name> <operator>&lt;</operator> <name>numOfInputCols</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColData</name><modifier>*</modifier></type> <name>pData</name> <init>= <expr><call><name>tBlockDataGetColDataByIdx</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>j</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>cid</name></name> <operator>&lt;</operator> <name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>TARRAY_GET_ELEM</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tColDataGetValue</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>rowIndex</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>doCopyColVal</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>outputRowIndex</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>, <argument><expr><name>pSupInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pData</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;</operator> <name><name>pCol</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// the specified column does not exist in file block, fill with null data</comment>
      <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>outputRowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <while>while <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>numOfOutputCols</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>, <argument><expr><name>outputRowIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>buildDataBlockFromBufImpl</name><parameter_list>(<parameter><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>endKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>capacity</name></decl></parameter>,
                                  <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></init></decl>;</decl_stmt>

  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>STSRow</name><modifier>*</modifier></type> <name>pTSRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>freeTSRow</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tsdbGetNextRowInMem</name><argument_list>(<argument><expr><name>pBlockScanInfo</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTSRow</name></expr></argument>, <argument><expr><name>endKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>freeTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pTSRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>doAppendRowFromTSRow</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pTSRow</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>freeTSRow</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pTSRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// no data in buffer, return immediately</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>hasVal</name></name> <operator>||</operator> <name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>iiter</name><operator>.</operator><name>hasVal</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name>capacity</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><literal type="number">1</literal></expr>)</condition>;</do>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&lt;=</operator> <name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TODO refactor: with createDataBlockScanInfo</comment>
<function><type><name>int32_t</name></type> <name>tsdbSetTableList</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>pTableList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pReader</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>p</name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>clearBlockScanInfo</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// todo handle the case where size is less than the value of num</comment>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>&gt;=</operator> <name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosHashClear</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pList</name> <init>= <expr><operator>(</operator><name>STableKeyInfo</name><operator>*</operator><operator>)</operator><name>pTableList</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><call><name>getPosInBlockInfoBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>blockInfoBuf</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>uid</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosHashPut</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name>pInfo</name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>TDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>tsdbGetIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMeta</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>metaGetIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>tsdbGetIvtIdx</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMeta</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><call><name>metaGetIvtIdx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type> <name>getReaderMaxVersion</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pReader</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>maxVer</name></name></expr>;</return> </block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doOpenReaderImpl</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>initFilesetIterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileIter</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resetDataBlockIterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// no data in files, let's try buffer in memory</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileIter</name><operator>.</operator><name>numOfFiles</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>loadFromFile</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>initForFirstBlockInFile</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// ====================================== EXPOSED APIs ======================================</comment>
<function><type><name>int32_t</name></type> <name>tsdbReaderOpen</name><parameter_list>(<parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pTableList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfTables</name></decl></parameter>,
                       <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name></decl></parameter>, <parameter><decl><type><name>STsdbReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idstr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STimeWindow</name></type> <name>window</name> <init>= <expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCond</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TIMEWINDOW_RANGE_EXTERNAL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>skey</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>ekey</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>capacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pResBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>capacity</name> <operator>=</operator> <literal type="number">4096</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>capacity</name> <operator>=</operator> <name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tsdbReaderCreate</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pCond</name></expr></argument>, <argument><expr><name>ppReader</name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// check for query time window</comment>
  <decl_stmt><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><operator>*</operator><name>ppReader</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>isEmptyQueryTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pCond</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TIMEWINDOW_RANGE_CONTAINED</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p query window not overlaps with the data set, no result returned, %s"</literal></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCond</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TIMEWINDOW_RANGE_EXTERNAL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// update the SQueryTableDataCond to create inner reader</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>order</name> <init>= <expr><name><name>pCond</name><operator>-&gt;</operator><name>order</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>window</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>TSDB_ORDER_DESC</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>window</name><operator>.</operator><name>ekey</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>TSDB_ORDER_ASC</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// here we only need one more row, so the capacity is set to be ONE.</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReaderCreate</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>order</name> <operator>==</operator> <name>TSDB_ORDER_ASC</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name><name>window</name><operator>.</operator><name>ekey</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>skey</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>ekey</name></name> <operator>=</operator> <name><name>window</name><operator>.</operator><name>ekey</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pCond</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name>order</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReaderCreate</name><argument_list>(<argument><expr><name>pVnode</name></expr></argument>, <argument><expr><name>pCond</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// NOTE: the endVersion in pCond is the data version not schema version, so pCond-&gt;endVersion is not correct here.</comment>
  <comment type="line">//  no valid error code set in metaGetTbTSchema, so let's set the error code here.</comment>
  <comment type="line">//  we should proceed in case of tmq processing.</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pCond</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"failed to get table schema, suid:%"</literal> <name>PRIu64</name> <literal type="string">", ver:-1, %s"</literal></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>numOfTables</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pKey</name> <init>= <expr><name>pTableList</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"failed to get table schema, uid:%"</literal> <name>PRIu64</name> <literal type="string">", ver:-1, %s"</literal></expr></argument>, <argument><expr><name><name>pKey</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>updateBlockSMAInfo</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><name>pReader</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name> <operator>=</operator> <call><name>createDataBlockScanInfo</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>blockInfoBuf</name></name></expr></argument>, <argument><expr><name>pTableList</name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfTables</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbTakeReadSnap</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TIMEWINDOW_RANGE_CONTAINED</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doOpenReaderImpl</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pPrevReader</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pNextReader</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <comment type="line">// we need only one row</comment>
      <expr_stmt><expr><name><name>pPrevReader</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPrevReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPrevReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPrevReader</name><operator>-&gt;</operator><name>pMemSchema</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pPrevReader</name><operator>-&gt;</operator><name>pReadSnap</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pNextReader</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNextReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNextReader</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNextReader</name><operator>-&gt;</operator><name>pMemSchema</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pNextReader</name><operator>-&gt;</operator><name>pReadSnap</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doOpenReaderImpl</name><argument_list>(<argument><expr><name>pPrevReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p total numOfTable:%d in this query %s"</literal></expr></argument>, <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"failed to create data reader, code:%s %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbReaderClose</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pReadSnap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pMemSchema</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>p</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pReadSnap</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pMemSchema</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbReaderClose</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block>

  <decl_stmt><decl><type><name>SBlockLoadSuppInfo</name><modifier>*</modifier></type> <name>pSupInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>pColAgg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pSupInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>buildBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>buildBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>freeBlock</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name> <operator>=</operator> <call><name>blockDataDestroy</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSupInfo</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileBlockData</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>cleanupDataBlockIterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfTables</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>destroyAllBlockScanInfo</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>clearBlockScanInfoBuf</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>blockInfoBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDelFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelIdx</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelIdx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbUntakeReadSnap</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>uidCheckInfo</name><operator>.</operator><name>tableUidList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SIOCostSummary</name><modifier>*</modifier></type> <name>pCost</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>cost</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SFilesetIter</name><modifier>*</modifier></type> <name>pFilesetIter</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileIter</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFilesetIter</name><operator>-&gt;</operator><name>pLastBlockReader</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SLastBlockReader</name><modifier>*</modifier></type> <name>pLReader</name> <init>= <expr><name><name>pFilesetIter</name><operator>-&gt;</operator><name>pLastBlockReader</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tMergeTreeClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLReader</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>getLastBlockLoadInfo</name><argument_list>(<argument><expr><name><name>pLReader</name><operator>-&gt;</operator><name>pInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCost</name><operator>-&gt;</operator><name>lastBlockLoad</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCost</name><operator>-&gt;</operator><name>lastBlockLoadTime</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pLReader</name><operator>-&gt;</operator><name>pInfo</name></name> <operator>=</operator> <call><name>destroyLastBlockLoadInfo</name><argument_list>(<argument><expr><name><name>pLReader</name><operator>-&gt;</operator><name>pInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pLReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p :io-cost summary: head-file:%"</literal> <name>PRIu64</name> <literal type="string">", head-file time:%.2f ms, SMA:%"</literal> <name>PRId64</name>
            <literal type="string">" SMA-time:%.2f ms, fileBlocks:%"</literal> <name>PRId64</name>
            <literal type="string">", fileBlocks-load-time:%.2f ms, "</literal>
            <literal type="string">"build in-memory-block-time:%.2f ms, lastBlocks:%"</literal> <name>PRId64</name>
            <literal type="string">", lastBlocks-time:%.2f ms, composed-blocks:%"</literal> <name>PRId64</name>
            <literal type="string">", composed-blocks-time:%.2fms, STableBlockScanInfo size:%.2f Kb, creatTime:%.2f ms, %s"</literal></expr></argument>,
            <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>headFileLoad</name></name></expr></argument>, <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>headFileLoadTime</name></name></expr></argument>, <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>smaDataLoad</name></name></expr></argument>, <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>smaLoadTime</name></name></expr></argument>,
            <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr></argument>, <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>blockLoadTime</name></name></expr></argument>, <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>buildmemBlock</name></name></expr></argument>, <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>lastBlockLoad</name></name></expr></argument>,
            <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>lastBlockLoadTime</name></name></expr></argument>, <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>composedBlocks</name></name></expr></argument>, <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>buildComposedBlockTime</name></name></expr></argument>,
            <argument><expr><name>numOfTables</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>STableBlockScanInfo</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <literal type="number">1000.0</literal></expr></argument>, <argument><expr><name><name>pCost</name><operator>-&gt;</operator><name>createScanInfoList</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name> <operator>!=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pMemSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>doTsdbNextDataBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// cleanup the data that belongs to the previous data block</comment>
  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>blockDataCleanup</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type> <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStatus</name><operator>-&gt;</operator><name>loadFromFile</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>buildBlockFromFiles</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>buildBlockFromBufferSequentially</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// no data in files, let's try the buffer</comment>
    <expr_stmt><expr><call><name>buildBlockFromBufferSequentially</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tsdbNextDataBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isEmptyQueryTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>step</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>doTsdbNextDataBlock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>EXTERNAL_ROWS_PREV</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>ret</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>step</name></name> <operator>==</operator> <name>EXTERNAL_ROWS_PREV</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// prepare for the main scan</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doOpenReaderImpl</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>resetAllDataBlockScanInfo</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>EXTERNAL_ROWS_MAIN</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><call><name>doTsdbNextDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>step</name></name> <operator>==</operator> <name>EXTERNAL_ROWS_MAIN</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// prepare for the next row scan</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doOpenReaderImpl</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>resetAllDataBlockScanInfo</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>-&gt;</operator><name><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>ret1</name> <init>= <expr><call><name>doTsdbNextDataBlock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>step</name></name> <operator>=</operator> <name>EXTERNAL_ROWS_NEXT</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret1</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>ret1</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>setBlockInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pReader</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>rows</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>uid</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pWindow</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbRetrieveDataBlockInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>rows</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name><modifier>*</modifier></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name><modifier>*</modifier></type> <name>pWindow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TIMEWINDOW_RANGE_EXTERNAL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>step</name></name> <operator>==</operator> <name>EXTERNAL_ROWS_MAIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setBlockInfo</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>step</name></name> <operator>==</operator> <name>EXTERNAL_ROWS_PREV</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>setBlockInfo</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>setBlockInfo</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>setBlockInfo</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pWindow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>doFillNullColSMA</name><parameter_list>(<parameter><decl><type><name>SBlockLoadSuppInfo</name><modifier>*</modifier></type> <name>pSup</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>,
    <parameter><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type> <name>pTsAgg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// do fill all null column value SMA info</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pColAgg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosArrayInsert</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pColAgg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pTsAgg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>numOfCols</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type> <name>pAgg</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pColAgg</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pAgg</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name><name>pSup</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pAgg</name><operator>-&gt;</operator><name>colId</name></name> <operator>&lt;</operator> <name><name>pSup</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSup</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pSup</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>j</name></expr>]</index></name> <operator>!=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SColumnDataAgg</name></type> <name>nullColAgg</name> <init>= <expr><block>{<expr><operator>.</operator><name>colId</name> <operator>=</operator> <name><name>pSup</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>j</name></expr>]</index></name></expr>, <expr><operator>.</operator><name>numOfNull</name> <operator>=</operator> <name>numOfRows</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosArrayInsert</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pColAgg</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument> ,<argument><expr><operator>&amp;</operator><name>nullColAgg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbRetrieveDatablockSMA</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pDataBlock</name></decl></parameter>, <parameter><decl><type><name>bool</name><modifier>*</modifier></type> <name>allHave</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier><modifier>*</modifier><modifier>*</modifier></type><name>pBlockSMA</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>allHave</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TIMEWINDOW_RANGE_EXTERNAL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pBlockSMA</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// there is no statistics data for composed block</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>composedDataBlock</name></name> <operator>||</operator> <operator>(</operator><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name><operator>.</operator><name>smaValid</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pBlockSMA</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type> <name>pFBlock</name> <init>= <expr><call><name>getCurrentBlockInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockLoadSuppInfo</name><modifier>*</modifier></type> <name>pSup</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name><name>pFBlock</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>getCurrentBlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tDataBlkHasSma</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadBlockSma</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pColAgg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to load block SMA for uid %"</literal> <name>PRIu64</name> <literal type="string">", code:%s, %s"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pFBlock</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pBlockSMA</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>allHave</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

  <comment type="line">// always load the first primary timestamp column data</comment>
  <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type> <name>pTsAgg</name> <init>= <expr><operator>&amp;</operator><name><name>pSup</name><operator>-&gt;</operator><name>tsColAgg</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pTsAgg</name><operator>-&gt;</operator><name>numOfNull</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTsAgg</name><operator>-&gt;</operator><name>colId</name></name> <operator>=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTsAgg</name><operator>-&gt;</operator><name>min</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>skey</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTsAgg</name><operator>-&gt;</operator><name>max</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr>;</expr_stmt>

  <comment type="line">// update the number of NULL data rows</comment>
  <decl_stmt><decl><type><name>size_t</name></type> <name>numOfCols</name> <init>= <expr><name><name>pSup</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pColAgg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// ensure capacity</comment>
  <if_stmt><if>if<condition>(<expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr>)</condition> <block>{<block_content>
     <decl_stmt><decl><type><name>size_t</name></type> <name>colsNum</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDataBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>taosArrayEnsureCap</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pColAgg</name></name></expr></argument>, <argument><expr><name>colsNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>num</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnDataAgg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// do fill all null column value SMA info</comment>
  <expr_stmt><expr><call><name>doFillNullColSMA</name><argument_list>(<argument><expr><name>pSup</name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name>numOfCols</name></expr></argument>, <argument><expr><name>pTsAgg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>j</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>j</name> <operator>&lt;</operator> <name>numOfCols</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnDataAgg</name><modifier>*</modifier></type> <name>pAgg</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>pColAgg</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pAgg</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name><name>pSup</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pBlockAgg</name><index>[<expr><name><name>pSup</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <name>pAgg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pAgg</name><operator>-&gt;</operator><name>colId</name></name> <operator>&lt;</operator> <name><name>pSup</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>j</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>i</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSup</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>j</name></expr>]</index></name> <operator>&lt;</operator> <name><name>pAgg</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSup</name><operator>-&gt;</operator><name>colId</name><index>[<expr><name>j</name></expr>]</index></name> <operator>==</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pResBlock</name><operator>-&gt;</operator><name>pBlockAgg</name><index>[<expr><name><name>pSup</name><operator>-&gt;</operator><name>slotId</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pSup</name><operator>-&gt;</operator><name>tsColAgg</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>pBlockSMA</name> <operator>=</operator> <name><name>pResBlock</name><operator>-&gt;</operator><name>pBlockAgg</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>cost</name><operator>.</operator><name>smaDataLoad</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, succeed to load block SMA for uid %"</literal> <name>PRIu64</name> <literal type="string">", %s"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pFBlock</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SSDataBlock</name><modifier>*</modifier></type> <name>doRetrieveDataBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type> <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pStatus</name><operator>-&gt;</operator><name>composedDataBlock</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SFileDataBlockInfo</name><modifier>*</modifier></type>  <name>pBlockInfo</name> <init>= <expr><call><name>getCurrentBlockInfo</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>blockIter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name> <init>=
      <expr><operator>*</operator><operator>(</operator><name>STableBlockScanInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosHashGet</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBlockScanInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"failed to locate the uid:%"</literal> <name>PRIu64</name> <literal type="string">" in query table uid list, total tables:%d, %s"</literal></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
              <argument><expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>doLoadFileBlockData</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>blockIter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>fileBlockData</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>fileBlockData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>copyBlockDataToSDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockScanInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name><name>pReader</name><operator>-&gt;</operator><name>pResBlock</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>tsdbRetrieveDataBlock</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pIdList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TIMEWINDOW_RANGE_EXTERNAL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>step</name></name> <operator>==</operator> <name>EXTERNAL_ROWS_PREV</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>doRetrieveDataBlock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>step</name></name> <operator>==</operator> <name>EXTERNAL_ROWS_NEXT</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>doRetrieveDataBlock</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>innerReader</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>doRetrieveDataBlock</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbReaderReset</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SQueryTableDataCond</name><modifier>*</modifier></type> <name>pCond</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>isEmptyQueryTimeWindow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>window</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>blockIter</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name> <operator>=</operator> <name><name>pCond</name><operator>-&gt;</operator><name>order</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TIMEWINDOW_RANGE_CONTAINED</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>loadFromFile</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name></name> <operator>=</operator> <call><name>updateQueryTimeWindow</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// allocate buffer in order to load data blocks from file</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name><operator>.</operator><name>tsColAgg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColumnDataAgg</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>suppInfo</name><operator>.</operator><name>tsColAgg</name><operator>.</operator><name>colId</name></name> <operator>=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pFileReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTables</name> <init>= <expr><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>initFilesetIterator</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileIter</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resetDataBlockIterator</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><ternary><condition><expr><call><name>ASCENDING_TRAVERSE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>order</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name> <operator>-</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>resetAllDataBlockScanInfo</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><name>ts</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// no data in files, let's try buffer in memory</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>fileIter</name><operator>.</operator><name>numOfFiles</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>loadFromFile</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initForFirstBlockInFile</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"%p reset reader failed, numOfTables:%d, query range:%"</literal> <name>PRId64</name> <literal type="string">" - %"</literal> <name>PRId64</name> <literal type="string">" in query %s"</literal></expr></argument>, <argument><expr><name>pReader</name></expr></argument>,
                <argument><expr><name>numOfTables</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"%p reset reader, suid:%"</literal> <name>PRIu64</name> <literal type="string">", numOfTables:%d, skey:%"</literal> <name>PRId64</name> <literal type="string">", query range:%"</literal> <name>PRId64</name> <literal type="string">" - %"</literal> <name>PRId64</name>
            <literal type="string">" in query %s"</literal></expr></argument>,
            <argument><expr><name>pReader</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>, <argument><expr><name><name>pCond</name><operator>-&gt;</operator><name>twindows</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>skey</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>window</name><operator>.</operator><name>ekey</name></name></expr></argument>,
            <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getBucketIndex</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>startRow</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bucketRange</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>(</operator><name>numOfRows</name> <operator>-</operator> <name>startRow</name><operator>)</operator> <operator>/</operator> <name>bucketRange</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbGetFileBlocksDistInfo</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>STableBlockDistInfo</name><modifier>*</modifier></type> <name>pTableBlockInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>totalSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// find the start data block in file</comment>
  <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type> <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STsdbCfg</name><modifier>*</modifier></type> <name>pc</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>defMinRows</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>minRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>defMaxRows</name></name> <operator>=</operator> <name><name>pc</name><operator>-&gt;</operator><name>maxRows</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bucketRange</name> <init>= <expr><call><name>ceil</name><argument_list>(<argument><expr><operator>(</operator><name><name>pc</name><operator>-&gt;</operator><name>maxRows</name></name> <operator>-</operator> <name><name>pc</name><operator>-&gt;</operator><name>minRows</name></name><operator>)</operator> <operator>/</operator> <literal type="number">20.0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>numOfFiles</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTables</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>taosHashGetSize</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>defaultRows</name> <init>= <expr><literal type="number">4096</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDataBlockIter</name><modifier>*</modifier></type> <name>pBlockIter</name> <init>= <expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>blockIter</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>numOfFiles</name></name> <operator>+=</operator> <name><name>pStatus</name><operator>-&gt;</operator><name>fileIter</name><operator>.</operator><name>numOfFiles</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>+=</operator> <name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <name>numOfTables</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>hasNext</name> <init>= <expr><operator>(</operator><name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>hasNext</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pBlock</name> <init>= <expr><call><name>getCurrentBlock</name><argument_list>(<argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>totalRows</name></name> <operator>+=</operator> <name>numOfRows</name></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&gt;</operator> <name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>maxRows</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>maxRows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>minRows</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>minRows</name></name> <operator>=</operator> <name>numOfRows</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>defaultRows</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>numOfSmallBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>bucketIndex</name> <init>= <expr><call><name>getBucketIndex</name><argument_list>(<argument><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>defMinRows</name></name></expr></argument>, <argument><expr><name>bucketRange</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>blockRowsHisto</name><index>[<expr><name>bucketIndex</name></expr>]</index></name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>hasNext</name> <operator>=</operator> <call><name>blockIteratorNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pStatus</name><operator>-&gt;</operator><name>blockIter</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>initForFirstBlockInFile</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>pBlockIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name><operator>.</operator><name>loadFromFile</name></name> <operator>==</operator> <name>false</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pTableBlockInfo</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>+=</operator> <name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>hasNext</name> <operator>=</operator> <operator>(</operator><name><name>pBlockIter</name><operator>-&gt;</operator><name>numOfBlocks</name></name> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">//    tsdbDebug("%p %d blocks found in file for %d table(s), fid:%d, %s", pReader, numOfBlocks, numOfTables,</comment>
    <comment type="line">//              pReader-&gt;pFileGroup-&gt;fid, pReader-&gt;idStr);</comment>
  </block_content>}</block></while>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>tsdbGetNumOfRowsInMemTable</name><parameter_list>(<parameter><decl><type><name>STsdbReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SReaderStatus</name><modifier>*</modifier></type> <name>pStatus</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>status</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STableBlockScanInfo</name><modifier>*</modifier></type> <name>pBlockScanInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>STableBlockScanInfo</name><operator>*</operator><operator>*</operator><operator>)</operator><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>STbData</name><modifier>*</modifier></type> <name>d</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>mem</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>d</name> <operator>=</operator> <call><name>tsdbGetTbDataFromMemTable</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name><operator>-&gt;</operator><name>pMem</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>d</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rows</name> <operator>+=</operator> <call><name>tsdbGetNRowsInTbData</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>STbData</name><modifier>*</modifier></type> <name>di</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>di</name> <operator>=</operator> <call><name>tsdbGetTbDataFromMemTable</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadSnap</name><operator>-&gt;</operator><name>pIMem</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pBlockScanInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>di</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rows</name> <operator>+=</operator> <call><name>tsdbGetNRowsInTbData</name><argument_list>(<argument><expr><name>di</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// current table is exhausted, let's try the next table</comment>
    <expr_stmt><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name> <operator>=</operator> <call><name>taosHashIterate</name><argument_list>(<argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableMap</name></name></expr></argument>, <argument><expr><name><name>pStatus</name><operator>-&gt;</operator><name>pTableIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>rows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbGetTableSchema</name><parameter_list>(<parameter><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STSchema</name><modifier>*</modifier><modifier>*</modifier></type> <name>pSchema</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>suid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sversion</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_INVALID_TABLE_ID</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>terrno</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>suid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tDecoderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>mr</name><operator>.</operator><name>coder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>suid</name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><operator>*</operator><name>suid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_TDB_INVALID_TABLE_ID</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>terrno</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>sversion</name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>stbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>sversion</name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ntbEntry</name><operator>.</operator><name>schemaRow</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pSchema</name> <operator>=</operator> <call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>sversion</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbTakeReadSnap</name><parameter_list>(<parameter><decl><type><name>STsdb</name><modifier>*</modifier></type> <name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>STsdbReadSnap</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppSnap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><operator>*</operator><name>ppSnap</name> <operator>=</operator> <operator>(</operator><name>STsdbReadSnap</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STsdbReadSnap</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppSnap</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// lock</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// take snapshot</comment>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppSnap</name><operator>)</operator><operator>-&gt;</operator><name>pMem</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>mem</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>ppSnap</name><operator>)</operator><operator>-&gt;</operator><name>pIMem</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>ppSnap</name><operator>)</operator><operator>-&gt;</operator><name>pMem</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbRefMemTable</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppSnap</name><operator>)</operator><operator>-&gt;</operator><name>pMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>ppSnap</name><operator>)</operator><operator>-&gt;</operator><name>pIMem</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbRefMemTable</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppSnap</name><operator>)</operator><operator>-&gt;</operator><name>pIMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// fs</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSRef</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppSnap</name><operator>)</operator><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// unlock</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, take read snapshot, %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbUntakeReadSnap</name><parameter_list>(<parameter><decl><type><name>STsdb</name><modifier>*</modifier></type> <name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>STsdbReadSnap</name><modifier>*</modifier></type> <name>pSnap</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>idStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pSnap</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSnap</name><operator>-&gt;</operator><name>pMem</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbUnrefMemTable</name><argument_list>(<argument><expr><name><name>pSnap</name><operator>-&gt;</operator><name>pMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pSnap</name><operator>-&gt;</operator><name>pIMem</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbUnrefMemTable</name><argument_list>(<argument><expr><name><name>pSnap</name><operator>-&gt;</operator><name>pIMem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tsdbFSUnref</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSnap</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSnap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tsdbTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, untake read snapshot, %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
