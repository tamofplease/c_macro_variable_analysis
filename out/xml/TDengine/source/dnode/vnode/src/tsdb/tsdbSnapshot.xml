<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbSnapshot.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<comment type="line">// STsdbSnapReader ========================================</comment>
<typedef>typedef <type><enum>enum <block>{ <decl><name>SNAP_DATA_FILE_ITER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>SNAP_STT_FILE_ITER</name></decl> }</block></enum></type> <name>EFIterT</name>;</typedef>
<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SRBTreeNode</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRowInfo</name></type>    <name>rInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EFIterT</name></type>     <name>type</name></decl>;</decl_stmt>
  <union>union <block>{
    <struct>struct <block>{
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>    <name>aBlockIdx</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>    <name>iBlockIdx</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SBlockIdx</name><modifier>*</modifier></type> <name>pBlockIdx</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SMapData</name></type>   <name>mBlock</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>    <name>iBlock</name></decl>;</decl_stmt>
    }</block>;</struct>  <comment type="line">// .data file</comment>
    <struct>struct <block>{
      <decl_stmt><decl><type><name>int32_t</name></type> <name>iStt</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type> <name>aSttBlk</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>iSttBlk</name></decl>;</decl_stmt>
    }</block>;</struct>  <comment type="line">// .stt file</comment>
  }</block>;</union>
  <decl_stmt><decl><type><name>SBlockData</name></type> <name>bData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>iRow</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFDataIter</name>;</typedef>

<struct>struct <name>STsdbSnapReader</name> <block>{
  <decl_stmt><decl><type><name>STsdb</name><modifier>*</modifier></type>  <name>pTsdb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ever</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbFS</name></type> <name>fs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>type</name></decl>;</decl_stmt>
  <comment type="line">// for data file</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>        <name>dataDone</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>fid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataFReader</name><modifier>*</modifier></type> <name>pDataFReader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFDataIter</name><modifier>*</modifier></type>   <name>pIter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRBTree</name></type>       <name>rbt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFDataIter</name></type>    <name><name>aFDataIter</name><index>[<expr><name>TSDB_MAX_STT_TRIGGER</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockData</name></type>    <name>bData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSkmInfo</name></type>      <name>skmTable</name></decl>;</decl_stmt>
  <comment type="line">// for del file</comment>
  <decl_stmt><decl><type><name>int8_t</name></type>       <name>delDone</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelFReader</name><modifier>*</modifier></type> <name>pDelFReader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>aDelIdx</name></decl>;</decl_stmt>  <comment type="line">// SArray&lt;SDelIdx&gt;</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>iDelIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>aDelData</name></decl>;</decl_stmt>  <comment type="line">// SArray&lt;SDelData&gt;</comment>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type>     <name><name>aBuf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function_decl><type><specifier>extern</specifier> <name>int32_t</name></type> <name>tRowInfoCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>p2</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int32_t</name></type> <name>tsdbReadDataBlockEx</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name><modifier>*</modifier></type> <name>pDataBlk</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int32_t</name></type> <name>tsdbUpdateTableSchema</name><parameter_list>(<parameter><decl><type><name>SMeta</name><modifier>*</modifier></type> <name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SSkmInfo</name><modifier>*</modifier></type> <name>pSkmInfo</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tFDataIterCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRBTreeNode</name><modifier>*</modifier></type> <name>pNode1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRBTreeNode</name><modifier>*</modifier></type> <name>pNode2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFDataIter</name><modifier>*</modifier></type> <name>pIter1</name> <init>= <expr><operator>(</operator><name>SFDataIter</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pNode1</name><operator>)</operator> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>SFDataIter</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFDataIter</name><modifier>*</modifier></type> <name>pIter2</name> <init>= <expr><operator>(</operator><name>SFDataIter</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>pNode2</name><operator>)</operator> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>SFDataIter</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>tRowInfoCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter1</name><operator>-&gt;</operator><name>rInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter2</name><operator>-&gt;</operator><name>rInfo</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapReadOpenFile</name><parameter_list>(<parameter><decl><type><name>STsdbSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDFileSet</name></type>  <name>dFileSet</name> <init>= <expr><block>{<expr><operator>.</operator><name>fid</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>fid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDFileSet</name><modifier>*</modifier></type> <name>pSet</name> <init>= <expr><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dFileSet</name></expr></argument>, <argument><expr><name>tDFileSetCmprFn</name></expr></argument>, <argument><expr><name>TD_GT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSet</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>fid</name></name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDataFReaderOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tRBTreeCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><name>tFDataIterCmprFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// .data file</comment>
  <decl_stmt><decl><type><name>SFDataIter</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aFDataIter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNAP_DATA_FILE_ITER</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadBlockIdx</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <for>for <control>(<init><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlockIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlockIdx</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlockIdx</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBlockIdx</name></name> <operator>=</operator> <operator>(</operator><name>SBlockIdx</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlk</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>mBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlock</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>mBlock</name><operator>.</operator><name>nItem</name></name></expr>;</condition> <incr><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlock</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SDataBlk</name></type> <name>dataBlk</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>, <argument><expr><name>tGetDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>dataBlk</name><operator>.</operator><name>minVer</name></name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name> <operator>||</operator> <name><name>dataBlk</name><operator>.</operator><name>maxVer</name></name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlockEx</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBlockIdx</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBlockIdx</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>rowVer</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>aVersion</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>rowVer</name> <operator>&gt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name> <operator>&amp;&amp;</operator> <name>rowVer</name> <operator>&lt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pBlockIdx</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pBlockIdx</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>row</name></name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>_add_iter_and_break</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <continue>continue;</continue>

  <label><name>_add_iter_and_break</name>:</label>
    <expr_stmt><expr><call><name>tRBTreePut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name><operator>*</operator><operator>)</operator><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></for>

  <comment type="line">// .stt file</comment>
  <expr_stmt><expr><name>pIter</name> <operator>=</operator> <operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aFDataIter</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNAP_STT_FILE_ITER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iStt</name></name> <operator>=</operator> <name>iStt</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadSttBlk</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><name>iStt</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <for>for <control>(<init><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSttBlk</name><modifier>*</modifier></type> <name>pSttBlk</name> <init>= <expr><operator>(</operator><name>SSttBlk</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>minVer</name></name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadSttBlockEx</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><name>iStt</name></expr></argument>, <argument><expr><name>pSttBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

      <for>for <control>(<init><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>rowVer</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>aVersion</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>rowVer</name> <operator>&gt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name> <operator>&amp;&amp;</operator> <name>rowVer</name> <operator>&lt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name></expr> ?</condition><then> <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name></expr> </then><else>: <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>aUid</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>row</name></name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>_add_iter</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <continue>continue;</continue>

  <label><name>_add_iter</name>:</label>
    <expr_stmt><expr><call><name>tRBTreePut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name><operator>*</operator><operator>)</operator><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pIter</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tsdbInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb open data file to read for %s, fid:%d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb snap read open file failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapNextRow</name><parameter_list>(<parameter><decl><type><name>STsdbSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SFDataIter</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <label><name>_find_row</name>:</label>
      <expr_stmt><expr><name>pIter</name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name></expr>;</expr_stmt>
      <for>for <control>(<init><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name><operator>++</operator></expr>;</init> <condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>rowVer</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>aVersion</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>rowVer</name> <operator>&gt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name> <operator>&amp;&amp;</operator> <name>rowVer</name> <operator>&lt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name></expr> ?</condition><then> <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name></expr> </then><else>: <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>aUid</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>row</name></name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>_out</name>;</goto>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNAP_DATA_FILE_ITER</name></expr>)</condition> <block>{<block_content>
        <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
          <for>for <control>(<init><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlock</name></name><operator>++</operator></expr>;</init> <condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlock</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>mBlock</name><operator>.</operator><name>nItem</name></name></expr>;</condition> <incr><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlock</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>SDataBlk</name></type> <name>dataBlk</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>, <argument><expr><name>tGetDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>dataBlk</name><operator>.</operator><name>minVer</name></name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name> <operator>||</operator> <name><name>dataBlk</name><operator>.</operator><name>maxVer</name></name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlockEx</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
            <goto>goto <name>_find_row</name>;</goto>
          </block_content>}</block></for>

          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlockIdx</name></name><operator>++</operator></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlockIdx</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBlockIdx</name></name> <operator>=</operator> <operator>(</operator><name>SBlockIdx</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlk</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>mBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iBlock</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNAP_STT_FILE_ITER</name></expr>)</condition> <block>{<block_content>
        <for>for <control>(<init><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name><operator>++</operator></expr>;</init> <condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SSttBlk</name><modifier>*</modifier></type> <name>pSttBlk</name> <init>= <expr><operator>(</operator><name>SSttBlk</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>minVer</name></name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name> <operator>||</operator> <name><name>pSttBlk</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadSttBlockEx</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iStt</name></name></expr></argument>, <argument><expr><name>pSttBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
          <goto>goto <name>_find_row</name>;</goto>
        </block_content>}</block></for>

        <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

  <label><name>_out</name>:</label>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <operator>(</operator><name>SFDataIter</name><operator>*</operator><operator>)</operator><call><name>tRBTreeMin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name> <operator>&amp;&amp;</operator> <name>pIter</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>tRowInfoCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>rInfo</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tRBTreePut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name><operator>*</operator><operator>)</operator><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <operator>(</operator><name>SFDataIter</name><operator>*</operator><operator>)</operator><call><name>tRBTreeMin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tRBTreeDrop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name><operator>*</operator><operator>)</operator><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SRowInfo</name><modifier>*</modifier></type> <name>tsdbSnapGetRow</name><parameter_list>(<parameter><decl><type><name>STsdbSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>rInfo</name></name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbSnapNextRow</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>rInfo</name></name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapCmprData</name><parameter_list>(<parameter><decl><type><name>STsdbSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>nRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name><name>aBufN</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCmprBlockData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><name>TWO_STAGE_COMP</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>, <argument><expr><name>aBufN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSnapDataHdr</name><modifier>*</modifier></type> <name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name><operator>*</operator><operator>)</operator><operator>*</operator><name>ppData</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNAP_DATA_TSDB</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapReadData</name><parameter_list>(<parameter><decl><type><name>STsdbSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name><modifier>*</modifier></type>  <name>pTsdb</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapReadOpenFile</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SRowInfo</name><modifier>*</modifier></type> <name>pRowInfo</name> <init>= <expr><call><name>tsdbSnapGetRow</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRowInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>TABLEID</name></type>     <name>id</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>bData</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbUpdateTableSchema</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>skmTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataInit</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <while>while <condition>(<expr><name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>&amp;&amp;</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapNextRow</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <call><name>tsdbSnapGetRow</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pRowInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;=</operator> <literal type="number">4096</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapCmprData</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <break>break;</break>
  </block_content>}</block></while>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb read data for %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
            <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapReadDel</name><parameter_list>(<parameter><decl><type><name>STsdbSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name><modifier>*</modifier></type>    <name>pTsdb</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelFile</name><modifier>*</modifier></type> <name>pDelFile</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pDelFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// open</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDelFReaderOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name>pDelFile</name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <comment type="line">// read index</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDelIdx</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>iDelIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>iDelIdx</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelIdx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbDelFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SDelIdx</name><modifier>*</modifier></type> <name>pDelIdx</name> <init>= <expr><operator>(</operator><name>SDelIdx</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelIdx</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>iDelIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>iDelIdx</name></name><operator>++</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDelData</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name>pDelIdx</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iDelData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iDelData</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iDelData</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SDelData</name><modifier>*</modifier></type> <name>pDelData</name> <init>= <expr><operator>(</operator><name>SDelData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>, <argument><expr><name>iDelData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pDelData</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name> <operator>&amp;&amp;</operator> <name><name>pDelData</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>tPutDelData</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <comment type="line">// org data</comment>
    <expr_stmt><expr><name>size</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TABLEID</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SSnapDataHdr</name><modifier>*</modifier></type> <name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>*</operator><name>ppData</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SNAP_DATA_DEL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHdr</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>TABLEID</name><modifier>*</modifier></type> <name>pId</name> <init>= <expr><operator>(</operator><name>TABLEID</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><name><name>pHdr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pId</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pDelIdx</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pId</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pDelIdx</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TABLEID</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iDelData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iDelData</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iDelData</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SDelData</name><modifier>*</modifier></type> <name>pDelData</name> <init>= <expr><operator>(</operator><name>SDelData</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>, <argument><expr><name>iDelData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pDelData</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pDelData</name><operator>-&gt;</operator><name>version</name></name> <operator>&gt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutDelData</name><argument_list>(<argument><expr><operator>(</operator><operator>*</operator><name>ppData</name><operator>)</operator> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>pDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>tsdbInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb read del data for %s, suid:%"</literal> <name>PRId64</name> <literal type="string">" uid:%"</literal> <name>PRId64</name> <literal type="string">" size:%d"</literal></expr></argument>,
             <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name><name>pDelIdx</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pDelIdx</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <break>break;</break>
  </block_content>}</block></while>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb read del for %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
            <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbSnapReaderOpen</name><parameter_list>(<parameter><decl><type><name>STsdb</name><modifier>*</modifier></type> <name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ever</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>STsdbSnapReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbSnapReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pReader</name> <operator>=</operator> <operator>(</operator><name>STsdbSnapReader</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name>sver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>ever</name></name> <operator>=</operator> <name>ever</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosThreadRwlockRdlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSRef</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// data</comment>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>fid</name></name> <operator>=</operator> <name>INT32_MIN</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iIter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iIter</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aFDataIter</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aFDataIter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>iIter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFDataIter</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aFDataIter</name><index>[<expr><name>iIter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>iIter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aBlockIdx</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>aBlockIdx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// del</comment>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelIdx</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelIdx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelData</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s, TSDB path: %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pReader</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbFSDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>pReader</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb reader opened for %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbSnapReaderClose</name><parameter_list>(<parameter><decl><type><name>STsdbSnapReader</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbSnapReader</name><modifier>*</modifier></type> <name>pReader</name> <init>= <expr><operator>*</operator><name>ppReader</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// data</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iIter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iIter</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aFDataIter</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aFDataIter</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>iIter</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SFDataIter</name><modifier>*</modifier></type> <name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aFDataIter</name><index>[<expr><name>iIter</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>iIter</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tMapDataClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>mBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDestroyTSchema</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>pTSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// del</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tsdbDelFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbFSUnref</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb reader closed for %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBuf</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>iBuf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><name>iBuf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbSnapRead</name><parameter_list>(<parameter><decl><type><name>STsdbSnapReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// read data file</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>dataDone</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapReadData</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>dataDone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// read del file</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pReader</name><operator>-&gt;</operator><name>delDone</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapReadDel</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>ppData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppData</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>delDone</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb read for %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb read for %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// STsdbSnapWriter ========================================</comment>
<struct>struct <name>STsdbSnapWriter</name> <block>{
  <decl_stmt><decl><type><name>STsdb</name><modifier>*</modifier></type>  <name>pTsdb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sver</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ever</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbFS</name></type> <name>fs</name></decl>;</decl_stmt>

  <comment type="line">// config</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>minutes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>precision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>minRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>maxRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>cmprAlg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>commitID</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name><name>aBuf</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>

  <comment type="line">// for data file</comment>
  <decl_stmt><decl><type><name>SBlockData</name></type> <name>bData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>fid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TABLEID</name></type>    <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSkmInfo</name></type>   <name>skmTable</name></decl>;</decl_stmt>
  <struct>struct <block>{
    <decl_stmt><decl><type><name>SDataFReader</name><modifier>*</modifier></type> <name>pReader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>       <name>aBlockIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>iBlockIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SBlockIdx</name><modifier>*</modifier></type>    <name>pBlockIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMapData</name></type>      <name>mDataBlk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>iDataBlk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SBlockData</name></type>    <name>bData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>iRow</name></decl>;</decl_stmt>
  }</block> <decl><name>dReader</name></decl>;</struct>
  <struct>struct <block>{
    <decl_stmt><decl><type><name>SDataFWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>       <name>aBlockIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMapData</name></type>      <name>mDataBlk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>       <name>aSttBlk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SBlockData</name></type>    <name>bData</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SBlockData</name></type>    <name>sData</name></decl>;</decl_stmt>
  }</block> <decl><name>dWriter</name></decl>;</struct>

  <comment type="line">// for del file</comment>
  <decl_stmt><decl><type><name>SDelFReader</name><modifier>*</modifier></type> <name>pDelFReader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelFWriter</name><modifier>*</modifier></type> <name>pDelFWriter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>iDelIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>aDelIdxR</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>aDelData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>      <name>aDelIdxW</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">// SNAP_DATA_TSDB</comment>
<function_decl><type><specifier>extern</specifier> <name>int32_t</name></type> <name>tsdbWriteDataBlock</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SMapData</name><modifier>*</modifier></type> <name>mDataBlk</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmprAlg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int32_t</name></type> <name>tsdbWriteSttBlock</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>aSttBlk</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmprAlg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapNextTableData</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iRow</name></name> <operator>&gt;=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name><operator>.</operator><name>nRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iBlockIdx</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name> <operator>=</operator> <operator>(</operator><name>SBlockIdx</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlk</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iBlockIdx</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tMapDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iDataBlk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// point to the next one</comment>
  <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapWriteCopyData</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>TABLEID</name><modifier>*</modifier></type> <name>pId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tTABLEIDCmprFn</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr></argument>, <argument><expr><name>pId</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SBlockIdx</name></type> <name>blkIdx</name> <init>= <expr><operator>*</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlk</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blkIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blkIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapNextTableData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></while>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapWriteTableDataStart</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>TABLEID</name><modifier>*</modifier></type> <name>pId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteCopyData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>pId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pId</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbUpdateTableSchema</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pId</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>skmTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>tMapDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><name>pId</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapWriteTableDataEnd</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>suid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>tTABLEIDCmprFn</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBData</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iRow</name></name> <operator>&lt;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name><operator>.</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iRow</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBROW</name></type> <name>row</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pBData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <for>for <control>(<init>;</init> <condition><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iDataBlk</name></name> <operator>&lt;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mDataBlk</name><operator>.</operator><name>nItem</name></name></expr>;</condition> <incr><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iDataBlk</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SDataBlk</name></type> <name>dataBlk</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iDataBlk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>, <argument><expr><name>tGetDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tMapDataPutItem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>, <argument><expr><name>tPutDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapNextTableData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name><operator>.</operator><name>nItem</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockIdx</name></type> <name>blockIdx</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlk</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapWriteOpenFile</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name><modifier>*</modifier></type>  <name>pTsdb</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fid</name></name> <operator>=</operator> <name>fid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>TABLEID</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDFileSet</name><modifier>*</modifier></type> <name>pSet</name> <init>= <macro><name>taosArraySearch</name><argument_list>(<argument>pWriter-&gt;fs.aDFileSet</argument>, <argument>&amp;(SDFileSet){.fid = fid}</argument>, <argument>tDFileSetCmprFn</argument>, <argument>TD_EQ</argument>)</argument_list></macro></init></decl>;</decl_stmt>

  <comment type="line">// Reader</comment>
  <if_stmt><if>if <condition>(<expr><name>pSet</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDataFReaderOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name>pSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadBlockIdx</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iBlockIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// point to the next one</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapNextTableData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// Writer</comment>
  <decl_stmt><decl><type><name>SHeadFile</name></type> <name>fHead</name> <init>= <expr><block>{<expr><operator>.</operator><name>commitID</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>commitID</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataFile</name></type> <name>fData</name> <init>= <expr><block>{<expr><operator>.</operator><name>commitID</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>commitID</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaFile</name></type>  <name>fSma</name> <init>= <expr><block>{<expr><operator>.</operator><name>commitID</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>commitID</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttFile</name></type>  <name>fStt</name> <init>= <expr><block>{<expr><operator>.</operator><name>commitID</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>commitID</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDFileSet</name></type> <name>wSet</name> <init>= <expr><block>{<expr><operator>.</operator><name>fid</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>fid</name></name></expr>, <expr><operator>.</operator><name>pHeadF</name> <operator>=</operator> <operator>&amp;</operator><name>fHead</name></expr>, <expr><operator>.</operator><name>pDataF</name> <operator>=</operator> <operator>&amp;</operator><name>fData</name></expr>, <expr><operator>.</operator><name>pSmaF</name> <operator>=</operator> <operator>&amp;</operator><name>fSma</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSet</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>diskId</name></name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fData</name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fSma</name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="line">// TODO: fix pSet-&gt;nSttF == pTsdb-&gt;maxFile</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SDiskID</name></type> <name>did</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tfsAllocDisk</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>did</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tfsMkdirRecurAt</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>did</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>diskId</name></name> <operator>=</operator> <name>did</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>aSttF</name><index>[<expr><name><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>fStt</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDataFWriterOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMapDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapWriteCloseFile</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteTableDataEnd</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// copy remain table data</comment>
  <decl_stmt><decl><type><name>TABLEID</name></type> <name>id</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>INT64_MAX</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteCopyData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator>
      <call><name>tsdbWriteSttBlock</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>sData</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// Indices</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteBlockIdx</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteSttBlk</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbUpdateDFileSetHeader</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSUpsertFSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name><operator>-&gt;</operator><name>wSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDataFWriterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapWriteToDataFile</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iRow</name></decl></parameter>, <parameter><decl><type><name>int8_t</name><modifier>*</modifier></type> <name>done</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBData</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>bData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TABLEID</name></type>     <name>id</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pBData</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pBData</name><operator>-&gt;</operator><name>uid</name></name> <operator>?</operator> <name><name>pBData</name><operator>-&gt;</operator><name>uid</name></name> <operator>:</operator> <name><name>pBData</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><name>iRow</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name></type>     <name>row</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBData</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>     <name>key</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>row</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iRow</name></name> <operator>&lt;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name><operator>.</operator><name>nRow</name></name> <operator>||</operator>
         <name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iDataBlk</name></name> <operator>&lt;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mDataBlk</name><operator>.</operator><name>nItem</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// Merge row by row</comment>
    <for>for <control>(<init>;</init> <condition><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iRow</name></name> <operator>&lt;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name><operator>.</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iRow</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBROW</name></type> <name>trow</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>tKey</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><operator>&amp;</operator><name>trow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name><operator>.</operator><name>suid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>&amp;&amp;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>trow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name><operator>.</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>,
                                  <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Merge row by block</comment>
    <decl_stmt><decl><type><name>SDataBlk</name></type> <name>tDataBlk</name> <init>= <expr><block>{<expr><operator>.</operator><name>minKey</name> <operator>=</operator> <name>key</name></expr>, <expr><operator>.</operator><name>maxKey</name> <operator>=</operator> <name>key</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iDataBlk</name></name> <operator>&lt;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mDataBlk</name><operator>.</operator><name>nItem</name></name></expr>;</condition> <incr><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iDataBlk</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SDataBlk</name></type> <name>dataBlk</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iDataBlk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>, <argument><expr><name>tGetDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>tDataBlkCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tDataBlk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>,
                                  <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tMapDataPutItem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>, <argument><expr><name>tPutDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name><operator>.</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>,
                                    <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>done</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlockEx</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iDataBlk</name></name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></while>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapWriteToSttFile</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TABLEID</name></type>     <name>id</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>suid</name></name></expr>,
                    <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name> <operator>?</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name> <operator>:</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>aUid</name><index>[<expr><name>iRow</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name></type>     <name>row</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBData</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>sData</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBData</name><operator>-&gt;</operator><name>suid</name></name> <operator>||</operator> <name><name>pBData</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TABLE_SAME_SCHEMA</name><argument_list>(<argument><expr><name><name>pBData</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pBData</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteSttBlock</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBData</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><name><name>pBData</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBData</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBData</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pBData</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbUpdateTableSchema</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>skmTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>TABLEID</name></type> <name>tid</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>suid</name></name> <operator>?</operator> <literal type="number">0</literal> <operator>:</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataInit</name><argument_list>(<argument><expr><name>pBData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteSttBlock</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBData</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapWriteRowData</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>bData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TABLEID</name></type>     <name>id</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name> <operator>?</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name> <operator>:</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><name>iRow</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// End last table data write if need</comment>
  <if_stmt><if>if <condition>(<expr><call><name>tTABLEIDCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteTableDataEnd</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Start new table data write if need</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>suid</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>id</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteTableDataStart</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Merge with .data file data</comment>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>done</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name> <operator>&amp;&amp;</operator> <call><name>tTABLEIDCmprFn</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteToDataFile</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>done</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Append to the .stt data block (todo: check if need to set/reload sst block)</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteToSttFile</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapWriteData</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name><modifier>*</modifier></type>      <name>pTsdb</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockData</name><modifier>*</modifier></type> <name>pBlockData</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>bData</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Decode data</comment>
  <decl_stmt><decl><type><name>SSnapDataHdr</name><modifier>*</modifier></type> <name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name><operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecmprBlockData</name><argument_list>(<argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Loop to handle each row</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iRow</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TSKEY</name></type>   <name>ts</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name>iRow</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>fid</name> <init>= <expr><call><name>tsdbKeyFid</name><argument_list>(<argument><expr><name>ts</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>minutes</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>fid</name></name> <operator>!=</operator> <name>fid</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>fid</name> <operator>&gt;</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteCloseFile</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteOpenFile</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteRowData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb write data for %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
            <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SNAP_DATA_DEL</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapMoveWriteDelData</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>TABLEID</name><modifier>*</modifier></type> <name>pId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>iDelIdx</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SDelIdx</name><modifier>*</modifier></type> <name>pDelIdx</name> <init>= <expr><operator>(</operator><name>SDelIdx</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iDelIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tTABLEIDCmprFn</name><argument_list>(<argument><expr><name>pDelIdx</name></expr></argument>, <argument><expr><name>pId</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDelData</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name>pDelIdx</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SDelIdx</name></type> <name>delIdx</name> <init>= <expr><operator>*</operator><name>pDelIdx</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDelData</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFWriter</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxW</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iDelIdx</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapWriteDel</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name><modifier>*</modifier></type>  <name>pTsdb</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// Open del file if not opened yet</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFWriter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDelFile</name><modifier>*</modifier></type> <name>pDelFile</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr></init></decl>;</decl_stmt>

    <comment type="line">// reader</comment>
    <if_stmt><if>if <condition>(<expr><name>pDelFile</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDelFReaderOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name>pDelFile</name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDelIdx</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iDelIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// writer</comment>
    <decl_stmt><decl><type><name>SDelFile</name></type> <name>delFile</name> <init>= <expr><block>{<expr><operator>.</operator><name>commitID</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>commitID</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDelFWriterOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delFile</name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SSnapDataHdr</name><modifier>*</modifier></type> <name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name><operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TABLEID</name></type>       <name>id</name> <init>= <expr><operator>*</operator><operator>(</operator><name>TABLEID</name><operator>*</operator><operator>)</operator><name><name>pHdr</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Move write data &lt; id</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapMoveWriteDelData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// Merge incoming data with current</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>iDelIdx</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
      <call><name>tTABLEIDCmprFn</name><argument_list>(<argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iDelIdx</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDelIdx</name><modifier>*</modifier></type> <name>pDelIdx</name> <init>= <expr><operator>(</operator><name>SDelIdx</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iDelIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDelData</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name>pDelIdx</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>iDelIdx</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSnapDataHdr</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TABLEID</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>nData</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDelData</name></type> <name>delData</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetDelData</name><argument_list>(<argument><expr><name>pData</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delData</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <decl_stmt><decl><type><name>SDelIdx</name></type> <name>delIdx</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDelData</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFWriter</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxW</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb write del for %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
            <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSnapWriteDelEnd</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name><modifier>*</modifier></type>  <name>pTsdb</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFWriter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>TABLEID</name></type> <name>id</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name>INT64_MAX</name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>INT64_MAX</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapMoveWriteDelData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDelIdx</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFWriter</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbUpdateDelFileHdr</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSUpsertDelFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFWriter</name><operator>-&gt;</operator><name>fDel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDelFWriterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFWriter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDelFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb write del for %s end"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb write del end for %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
            <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// APIs</comment>
<function><type><name>int32_t</name></type> <name>tsdbSnapWriterOpen</name><parameter_list>(<parameter><decl><type><name>STsdb</name><modifier>*</modifier></type> <name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>sver</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>ever</name></decl></parameter>, <parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pWriter</name> <operator>=</operator> <operator>(</operator><name>STsdbSnapWriter</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pWriter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWriter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name>sver</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>ever</name></name> <operator>=</operator> <name>ever</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSCopy</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// config</comment>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>minutes</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name><operator>.</operator><name>days</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>minRow</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>minRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>maxRow</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>maxRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>cmprAlg</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>compression</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>commitID</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>state</name><operator>.</operator><name>commitID</name></name></expr>;</expr_stmt>

  <comment type="line">// SNAP_DATA_TSDB</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fid</name></name> <operator>=</operator> <name>INT32_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>id</name></name> <operator>=</operator> <operator>(</operator><name>TABLEID</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>
  <comment type="line">// Reader</comment>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Writer</comment>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>sData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// SNAP_DATA_DEL</comment>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelData</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxW</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxW</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pWriter</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxW</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelData</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>sData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbFSDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d %s done"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>pWriter</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbSnapWriterClose</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier><modifier>*</modifier></type> <name>ppWriter</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name> <init>= <expr><operator>*</operator><name>ppWriter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name><modifier>*</modifier></type>           <name>pTsdb</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>rollback</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// code = tsdbFSRollback(pWriter-&gt;pTsdb-&gt;pFS);</comment>
    <comment type="line">// if (code) goto _err;</comment>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteCloseFile</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteDelEnd</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSPrepareCommit</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <comment type="line">// lock</comment>
    <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSCommit</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// unlock</comment>
    <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// SNAP_DATA_DEL</comment>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxW</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aDelIdxR</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// SNAP_DATA_TSDB</comment>

  <comment type="line">// Writer</comment>
  <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>sData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMapDataClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Reader</comment>
  <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMapDataClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mDataBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDestroyTSchema</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>pTSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBuf</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>iBuf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><name>iBuf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>tsdbInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d %s done"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, vnode snapshot tsdb writer close for %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbSnapWrite</name><parameter_list>(<parameter><decl><type><name>STsdbSnapWriter</name><modifier>*</modifier></type> <name>pWriter</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name><modifier>*</modifier></type> <name>pData</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>nData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSnapDataHdr</name><modifier>*</modifier></type> <name>pHdr</name> <init>= <expr><operator>(</operator><name>SSnapDataHdr</name><operator>*</operator><operator>)</operator><name>pData</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// ts data</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNAP_DATA_TSDB</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteCloseFile</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// del data</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pHdr</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SNAP_DATA_DEL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSnapWriteDel</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb snapshot write for %s succeed"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb snapshot write for %s failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>,
            <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
