<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbDiskData.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>SDiskColBuilder</name></name></type> <name>SDiskColBuilder</name>;</typedef>

<struct>struct <name>SDiskColBuilder</name> <block>{
  <decl_stmt><decl><type><name>int16_t</name></type>        <name>cid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>         <name>type</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>        <name>cmprAlg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>        <name>calcSma</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>         <name>flag</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>nVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name>       <modifier>*</modifier></type><name>pBitMap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>        <name>offset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCompressor</name>   <modifier>*</modifier></type><name>pOffC</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCompressor</name>   <modifier>*</modifier></type><name>pValC</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColumnDataAgg</name></type> <name>sma</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>        <name>minSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>        <name>maxSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name>       <modifier>*</modifier></type><name><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">// SDiskData ================================================</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tDiskDataDestroy</name><parameter_list>(<parameter><decl><type><name>SDiskData</name> <modifier>*</modifier></type><name>pDiskData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name> <operator>=</operator> <call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SDiskColBuilder ================================================</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tDiskColBuilderCreate</name><parameter_list>()</parameter_list></cpp:macro> \
  <cpp:value>(SDiskColBuilder) { 0 }</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tDiskColBuilderDestroy</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pOffC</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tCompressorDestroy</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pOffC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pValC</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tCompressorDestroy</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pValC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBuf</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>iBuf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><name>iBuf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tDiskColBuilderInit</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>cid</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>cmprAlg</name></decl></parameter>,
                                   <parameter><decl><type><name>uint8_t</name></type> <name>calcSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>cid</name></name> <operator>=</operator> <name>cid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>cmprAlg</name></name> <operator>=</operator> <name>cmprAlg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>calcSma</name></name> <operator>=</operator> <ternary><condition><expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>calcSma</name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pOffC</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name> <operator>=</operator> <call><name>tCompressorCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pOffC</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompressStart</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pOffC</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pValC</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name> <operator>=</operator> <call><name>tCompressorCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pValC</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompressStart</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pValC</name></name></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>calcSma</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>sma</name></name> <operator>=</operator> <operator>(</operator><name>SColumnDataAgg</name><operator>)</operator><block>{<expr><operator>.</operator><name>colId</name> <operator>=</operator> <name>cid</name></expr>}</block></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>minSet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>maxSet</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tGnrtDiskCol</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SDiskCol</name> <modifier>*</modifier></type><name>pDiskCol</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;&amp;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pDiskCol</name> <operator>=</operator> <operator>(</operator><name>SDiskCol</name><operator>)</operator><block>{<expr><operator>(</operator><name>SBlockCol</name><operator>)</operator><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>cid</name></name></expr>,
                                     <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>type</name></name></expr>,
                                     <expr><operator>.</operator><name>smaOn</name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>calcSma</name></name></expr>,
                                     <expr><operator>.</operator><name>flag</name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name></expr>,
                                     <expr><operator>.</operator><name>szOrigin</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                     <expr><operator>.</operator><name>szBitmap</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                     <expr><operator>.</operator><name>szOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                     <expr><operator>.</operator><name>szValue</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                     <expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>,
                         <expr><operator>.</operator><name>pBit</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>pOff</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>pVal</name> <operator>=</operator> <name>NULL</name></expr>, <expr><operator>.</operator><name>agg</name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>sma</name></name></expr>}</block></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// BITMAP</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_VALUE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>nBit</name> <operator>=</operator> <call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>nBit</name> <operator>=</operator> <call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nBit</name> <operator>+</operator> <name>COMP_OVERFLOW_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nBit</name> <operator>+</operator> <name>COMP_OVERFLOW_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>szBitmap</name></name> <operator>=</operator>
        <call><name>tsCompressTinyint</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nBit</name> <operator>+</operator> <name>COMP_OVERFLOW_BYTES</name></expr></argument>,
                          <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>nBit</name> <operator>+</operator> <name>COMP_OVERFLOW_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>pBit</name></name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// OFFSET</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompressEnd</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pOffC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskCol</name><operator>-&gt;</operator><name>pOff</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>szOffset</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// VALUE</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompressEnd</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pValC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskCol</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>szValue</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>szOrigin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColPutValue</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompress</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pOffC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>offset</name></name> <operator>+=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompress</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pValC</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompress</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pValC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>tDataTypes</name><index>[<expr><name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal00</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>HAS_VALUE</name></expr>;</expr_stmt>
  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal01</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>HAS_NONE</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal02</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>HAS_NULL</name></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal10</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// bit map</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// value</comment>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_VALUE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColVal</name></type> <name>cv</name> <init>= <macro><name>COL_VAL_VALUE</name><argument_list>(<argument>pColVal-&gt;cid</argument>, <argument>pColVal-&gt;type</argument>, <argument>(SValue){<literal type="number">0</literal>}</argument>)</argument_list></macro></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal12</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal20</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_VALUE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColVal</name></type> <name>cv</name> <init>= <macro><name>COL_VAL_VALUE</name><argument_list>(<argument>pColVal-&gt;cid</argument>, <argument>pColVal-&gt;type</argument>, <argument>(SValue){<literal type="number">0</literal>}</argument>)</argument_list></macro></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal21</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NONE</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal30</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_VALUE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pBitMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBitMap</name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>, <argument><expr><call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name> <operator>=</operator> <name>pBitMap</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColVal</name></type> <name>cv</name> <init>= <macro><name>COL_VAL_VALUE</name><argument_list>(<argument>pColVal-&gt;cid</argument>, <argument>pColVal-&gt;type</argument>, <argument>(SValue){<literal type="number">0</literal>}</argument>)</argument_list></macro></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal31</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal32</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal40</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal41</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NONE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal42</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nBit</name> <init>= <expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><literal type="number">255</literal></expr></argument>, <argument><expr><name>nBit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal50</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal51</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal52</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pBitMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBitMap</name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name> <operator>=</operator> <name>pBitMap</name></expr>;</expr_stmt>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal60</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal61</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>|=</operator> <name>HAS_NONE</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pBitMap</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pBitMap</name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iVal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iVal</name> <operator>&lt;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr>;</condition> <incr><expr><name>iVal</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>GET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name>pBitMap</name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name> <operator>=</operator> <name>pBitMap</name></expr>;</expr_stmt>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal62</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT1</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal70</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal71</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tDiskColAddVal72</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>SET_BIT2</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><call><name>tDiskColPutValue</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> (<modifier>*</modifier><name>tDiskColAddValImpl</name><index>[<expr><literal type="number">8</literal></expr>]</index><index>[<expr><literal type="number">3</literal></expr>]</index>)<parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <init>= <expr><block>{
    <expr><block>{<expr><name>tDiskColAddVal00</name></expr></block></expr></block></expr></init><operator>,</operator> tDiskColAddVal01<operator>,</operator> tDiskColAddVal02</function_decl>},  <comment type="line">// 0</comment>
    <block>{<block_content><expr><name>tDiskColAddVal10</name></expr><operator>,</operator> <expr><name>NULL</name></expr><operator>,</operator> <expr><name>tDiskColAddVal12</name></expr></block_content>}</block><operator>,</operator>              <comment type="line">// HAS_NONE</comment>
    <block>{<block_content><expr><name>tDiskColAddVal20</name></expr><operator>,</operator> <expr><name>tDiskColAddVal21</name></expr><operator>,</operator> <expr><name>NULL</name></expr></block_content>}</block><operator>,</operator>              <comment type="line">// HAS_NULL</comment>
    <block>{<block_content><expr><name>tDiskColAddVal30</name></expr><operator>,</operator> <expr><name>tDiskColAddVal31</name></expr><operator>,</operator> <expr><name>tDiskColAddVal32</name></expr></block_content>}</block><operator>,</operator>  <comment type="line">// HAS_NULL|HAS_NONE</comment>
    <block>{<block_content><expr><name>tDiskColAddVal40</name></expr><operator>,</operator> <expr><name>tDiskColAddVal41</name></expr><operator>,</operator> <expr><name>tDiskColAddVal42</name></expr></block_content>}</block><operator>,</operator>  <comment type="line">// HAS_VALUE</comment>
    <block>{<block_content><expr><name>tDiskColAddVal50</name></expr><operator>,</operator> <expr><name>tDiskColAddVal51</name></expr><operator>,</operator> <expr><name>tDiskColAddVal52</name></expr></block_content>}</block><operator>,</operator>  <comment type="line">// HAS_VALUE|HAS_NONE</comment>
    <block>{<block_content><expr><name>tDiskColAddVal60</name></expr><operator>,</operator> <expr><name>tDiskColAddVal61</name></expr><operator>,</operator> <expr><name>tDiskColAddVal62</name></expr></block_content>}</block><operator>,</operator>  <comment type="line">// HAS_VALUE|HAS_NULL</comment>
    <block>{<block_content><expr><name>tDiskColAddVal70</name></expr><operator>,</operator> <expr><name>tDiskColAddVal71</name></expr><operator>,</operator> <expr><name>tDiskColAddVal72</name></expr></block_content>}</block>   <comment type="line">// HAS_VALUE|HAS_NULL|HAS_NONE</comment>
};
<comment type="line">// extern void (*tSmaUpdateImpl[])(SColumnDataAgg *pColAgg, SColVal *pColVal, uint8_t *minSet, uint8_t *maxSet);</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tDiskColAddVal</name><parameter_list>(<parameter><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>calcSma</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// tSmaUpdateImpl[pBuilder-&gt;type](&amp;pBuilder-&gt;sma, pColVal, &amp;pBuilder-&gt;minSet, &amp;pBuilder-&gt;maxSet);</comment>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>sma</name><operator>.</operator><name>numOfNull</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tDiskColAddValImpl</name><index>[<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name></expr>]</index><index>[<expr><name><name>pColVal</name><operator>-&gt;</operator><name>flag</name></name></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>tDiskColAddValImpl</name><index>[<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>flag</name></name></expr>]</index><index>[<expr><name><name>pColVal</name><operator>-&gt;</operator><name>flag</name></name></expr>]</index></name><operator>(</operator><name>pBuilder</name><operator>,</operator> <name>pColVal</name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nVal</name></name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SDiskDataBuilder ================================================</comment>
<function><type><name>int32_t</name></type> <name>tDiskDataBuilderCreate</name><parameter_list>(<parameter><decl><type><name>SDiskDataBuilder</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBuilder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppBuilder</name> <operator>=</operator> <operator>(</operator><name>SDiskDataBuilder</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDiskDataBuilder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppBuilder</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tDiskDataBuilderDestroy</name><parameter_list>(<parameter><decl><type><name>SDiskDataBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pBuilder</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pUidC</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tCompressorDestroy</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pUidC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pVerC</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tCompressorDestroy</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pVerC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pKeyC</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tCompressorDestroy</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pKeyC</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBuilder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBuilder</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iBuilder</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pDCBuilder</name> <init>= <expr><operator>(</operator><name>SDiskColBuilder</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name></expr></argument>, <argument><expr><name>iBuilder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tDiskColBuilderDestroy</name><argument_list>(<argument><expr><name>pDCBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBuf</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>iBuf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><name>iBuf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>tDiskDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>dd</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tDiskDataBuilderInit</name><parameter_list>(<parameter><decl><type><name>SDiskDataBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>TABLEID</name> <modifier>*</modifier></type><name>pId</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>cmprAlg</name></decl></parameter>,
                             <parameter><decl><type><name>uint8_t</name></type> <name>calcSma</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pId</name><operator>-&gt;</operator><name>suid</name></name> <operator>||</operator> <name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pId</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>cmprAlg</name></name> <operator>=</operator> <name>cmprAlg</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>calcSma</name></name> <operator>=</operator> <name>calcSma</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name></name> <operator>=</operator> <operator>(</operator><name>SBlkInfo</name><operator>)</operator><block>{<expr><operator>.</operator><name>minUid</name> <operator>=</operator> <name>INT64_MAX</name></expr>,
                            <expr><operator>.</operator><name>maxUid</name> <operator>=</operator> <name>INT64_MIN</name></expr>,
                            <expr><operator>.</operator><name>minKey</name> <operator>=</operator> <name>TSKEY_MAX</name></expr>,
                            <expr><operator>.</operator><name>maxKey</name> <operator>=</operator> <name>TSKEY_MIN</name></expr>,
                            <expr><operator>.</operator><name>minVer</name> <operator>=</operator> <name>VERSION_MAX</name></expr>,
                            <expr><operator>.</operator><name>maxVer</name> <operator>=</operator> <name>VERSION_MIN</name></expr>,
                            <expr><operator>.</operator><name>minTKey</name> <operator>=</operator> <name>TSDBKEY_MAX</name></expr>,
                            <expr><operator>.</operator><name>maxTKey</name> <operator>=</operator> <name>TSDBKEY_MIN</name></expr>}</block></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pUidC</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name> <operator>=</operator> <call><name>tCompressorCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pUidC</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompressStart</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pUidC</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pVerC</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name> <operator>=</operator> <call><name>tCompressorCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pVerC</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompressStart</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pVerC</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pKeyC</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>code</name> <operator>=</operator> <call><name>tCompressorCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>pKeyC</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompressStart</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pKeyC</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDiskColBuilder</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBuilder</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><name>iCol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iCol</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBuilder</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SDiskColBuilder</name></type> <name>dc</name> <init>= <expr><call><name>tDiskColBuilderCreate</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dc</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pDCBuilder</name> <init>= <expr><operator>(</operator><name>SDiskColBuilder</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBuilder</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDiskColBuilderInit</name><argument_list>(<argument><expr><name>pDCBuilder</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>,
                               <argument><expr><operator>(</operator><name>calcSma</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pTColumn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COL_SMA_ON</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBuilder</name></name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tDiskDataBuilderClear</name><parameter_list>(<parameter><decl><type><name>SDiskDataBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tDiskDataAddRow</name><parameter_list>(<parameter><decl><type><name>SDiskDataBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>TABLEID</name> <modifier>*</modifier></type><name>pId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>suid</name></name> <operator>||</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pId</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>kRow</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>minTKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kRow</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>minTKey</name></name> <operator>=</operator> <name>kRow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>maxTKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>kRow</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>maxTKey</name></name> <operator>=</operator> <name>kRow</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="line">// uid</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name> <operator>&amp;&amp;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iRow</name> <operator>&lt;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompress</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pUidC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompress</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pUidC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>minUid</name></name> <operator>&gt;</operator> <name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>minUid</name></name> <operator>=</operator> <name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>maxUid</name></name> <operator>&lt;</operator> <name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>maxUid</name></name> <operator>=</operator> <name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="line">// version</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompress</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pVerC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kRow</name><operator>.</operator><name>version</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>minVer</name></name> <operator>&gt;</operator> <name><name>kRow</name><operator>.</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>minVer</name></name> <operator>=</operator> <name><name>kRow</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>maxVer</name></name> <operator>&lt;</operator> <name><name>kRow</name><operator>.</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>maxVer</name></name> <operator>=</operator> <name><name>kRow</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="line">// TSKEY</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompress</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pKeyC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>kRow</name><operator>.</operator><name>ts</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>minKey</name></name> <operator>&gt;</operator> <name><name>kRow</name><operator>.</operator><name>ts</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>minKey</name></name> <operator>=</operator> <name><name>kRow</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>maxKey</name></name> <operator>&lt;</operator> <name><name>kRow</name><operator>.</operator><name>ts</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name><operator>.</operator><name>maxKey</name></name> <operator>=</operator> <name><name>kRow</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>STSDBRowIter</name></type> <name>iter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsdbRowIterInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name> <init>= <expr><call><name>tsdbRowIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBuilder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBuilder</name> <operator>&lt;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nBuilder</name></name></expr>;</condition> <incr><expr><name>iBuilder</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pDCBuilder</name> <init>= <expr><operator>(</operator><name>SDiskColBuilder</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name></expr></argument>, <argument><expr><name>iBuilder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pColVal</name> <operator>&amp;&amp;</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>&lt;</operator> <name><name>pDCBuilder</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <call><name>tsdbRowIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>pColVal</name> <operator>&amp;&amp;</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>pDCBuilder</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDiskColAddVal</name><argument_list>(<argument><expr><name>pDCBuilder</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>pColVal</name> <operator>=</operator> <call><name>tsdbRowIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDiskColAddVal</name><argument_list>(<argument><expr><name>pDCBuilder</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pDCBuilder</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pDCBuilder</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nRow</name></name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGnrtDiskData</name><parameter_list>(<parameter><decl><type><name>SDiskDataBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDiskData</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppDiskData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SBlkInfo</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBlkInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppDiskData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppBlkInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDiskData</name> <modifier>*</modifier></type><name>pDiskData</name> <init>= <expr><operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>dd</name></name></expr></init></decl>;</decl_stmt>
  <comment type="line">// reset SDiskData</comment>
  <expr_stmt><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name></name> <operator>=</operator> <operator>(</operator><name>SDiskDataHdr</name><operator>)</operator><block>{<expr><operator>.</operator><name>delimiter</name> <operator>=</operator> <name>TSDB_FILE_DLMT</name></expr>,
                                  <expr><operator>.</operator><name>fmtVer</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                  <expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>suid</name></name></expr>,
                                  <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name></expr>,
                                  <expr><operator>.</operator><name>szUid</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                  <expr><operator>.</operator><name>szVer</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                  <expr><operator>.</operator><name>szKey</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                  <expr><operator>.</operator><name>szBlkCol</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                                  <expr><operator>.</operator><name>nRow</name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nRow</name></name></expr>,
                                  <expr><operator>.</operator><name>cmprAlg</name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>pUid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>pVer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>pKey</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// UID</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompressEnd</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pUidC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskData</name><operator>-&gt;</operator><name>pUid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szUid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// VERSION</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompressEnd</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pVerC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskData</name><operator>-&gt;</operator><name>pVer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szVer</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// TSKEY</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCompressEnd</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>pKeyC</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskData</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// aDiskCol</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nBuilder</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDiskCol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBuilder</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBuilder</name> <operator>&lt;</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nBuilder</name></name></expr>;</condition> <incr><expr><name>iBuilder</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDiskColBuilder</name> <modifier>*</modifier></type><name>pDCBuilder</name> <init>= <expr><operator>(</operator><name>SDiskColBuilder</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>aBuilder</name></name></expr></argument>, <argument><expr><name>iBuilder</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pDCBuilder</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NONE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SDiskCol</name></type> <name>dCol</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tGnrtDiskCol</name><argument_list>(<argument><expr><name>pDCBuilder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>dCol</name><operator>.</operator><name>bCol</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>offset</name> <operator>=</operator> <name>offset</name> <operator>+</operator> <name><name>dCol</name><operator>.</operator><name>bCol</name><operator>.</operator><name>szBitmap</name></name> <operator>+</operator> <name><name>dCol</name><operator>.</operator><name>bCol</name><operator>.</operator><name>szOffset</name></name> <operator>+</operator> <name><name>dCol</name><operator>.</operator><name>bCol</name><operator>.</operator><name>szValue</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dCol</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szBlkCol</name></name> <operator>+=</operator> <call><name>tPutBlockCol</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dCol</name><operator>.</operator><name>bCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>ppDiskData</name> <operator>=</operator> <name>pDiskData</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppBlkInfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>bi</name></name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
