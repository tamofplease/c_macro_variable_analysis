<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbUtil.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tdataformat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<comment type="line">// SMapData =======================================================================</comment>
<function><type><name>void</name></type> <name>tMapDataReset</name><parameter_list>(<parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>pMapData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMapData</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tMapDataClear</name><parameter_list>(<parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>pMapData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pMapData</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMapData</name><operator>-&gt;</operator><name>pData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMapData</name><operator>-&gt;</operator><name>aOffset</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tMapDataPutItem</name><parameter_list>(<parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>pMapData</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>tPutItemFn</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name> <init>= <expr><name><name>pMapData</name><operator>-&gt;</operator><name>nData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nItem</name> <init>= <expr><name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMapData</name><operator>-&gt;</operator><name>nData</name></name> <operator>+=</operator> <call><name>tPutItemFn</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pMapData</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMapData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// put</comment>
  <expr_stmt><expr><name><name>pMapData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>nItem</name></expr>]</index></name> <operator>=</operator> <name>offset</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tPutItemFn</name><argument_list>(<argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tMapDataCopy</name><parameter_list>(<parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>pFrom</name></decl></parameter>, <parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>pTo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>nItem</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>nItem</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTo</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTo</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>nItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTo</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTo</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pFrom</name><operator>-&gt;</operator><name>nItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pTo</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pFrom</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tMapDataSearch</name><parameter_list>(<parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>pMapData</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pSearchItem</name></decl></parameter>, <parameter><function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>tGetItemFn</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                       <parameter><function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>tItemCmprFn</name>)<parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ridx</name> <init>= <expr><name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>midx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>lidx</name> <operator>&lt;=</operator> <name>ridx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>midx</name> <operator>=</operator> <operator>(</operator><name>lidx</name> <operator>+</operator> <name>ridx</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><name>pMapData</name></expr></argument>, <argument><expr><name>midx</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>, <argument><expr><name>tGetItemFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>tItemCmprFn</name><argument_list>(<argument><expr><name>pSearchItem</name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ridx</name> <operator>=</operator> <name>midx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>midx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_NOT_FOUND</name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tMapDataGetItemByIdx</name><parameter_list>(<parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>pMapData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>pItem</name></decl></parameter>, <parameter><function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>tGetItemFn</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tGetItemFn</name><argument_list>(<argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>pData</name></name> <operator>+</operator> <name><name>pMapData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>idx</name></expr>]</index></name></expr></argument>, <argument><expr><name>pItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tMapDataToArray</name><parameter_list>(<parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>pMapData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>itemSize</name></decl></parameter>, <parameter><function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>tGetItemFn</name>)<parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list></function_decl></parameter>,
                        <parameter><decl><type><name>SArray</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppArray</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr></argument>, <argument><expr><name>itemSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><name>pMapData</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>taosArrayReserve</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>tGetItemFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppArray</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pArray</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppArray</name> <operator>=</operator> <name>pArray</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tPutMapData</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>pMapData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>lOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iItem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iItem</name> <operator>&lt;</operator> <name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr>;</condition> <incr><expr><name>iItem</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iItem</name></expr>]</index></name> <operator>-</operator> <name>lOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>lOffset</name> <operator>=</operator> <name><name>pMapData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iItem</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>pMapData</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGetMapData</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>pMapData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>offset</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tMapDataReset</name><argument_list>(<argument><expr><name>pMapData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pMapData</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>lOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iItem</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iItem</name> <operator>&lt;</operator> <name><name>pMapData</name><operator>-&gt;</operator><name>nItem</name></name></expr>;</condition> <incr><expr><name>iItem</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMapData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iItem</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pMapData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iItem</name></expr>]</index></name> <operator>+=</operator> <name>lOffset</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>lOffset</name> <operator>=</operator> <name><name>pMapData</name><operator>-&gt;</operator><name>aOffset</name><index>[<expr><name>iItem</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pMapData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMapData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>pMapData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>pMapData</name><operator>-&gt;</operator><name>nData</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// TABLEID =======================================================================</comment>
<function><type><name>int32_t</name></type> <name>tTABLEIDCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TABLEID</name> <modifier>*</modifier></type><name>pId1</name> <init>= <expr><operator>(</operator><name>TABLEID</name> <operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TABLEID</name> <modifier>*</modifier></type><name>pId2</name> <init>= <expr><operator>(</operator><name>TABLEID</name> <operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pId1</name><operator>-&gt;</operator><name>suid</name></name> <operator>&lt;</operator> <name><name>pId2</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pId1</name><operator>-&gt;</operator><name>suid</name></name> <operator>&gt;</operator> <name><name>pId2</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pId1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>pId2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pId1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>pId2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SBlockIdx ======================================================</comment>
<function><type><name>int32_t</name></type> <name>tPutBlockIdx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockIdx</name> <modifier>*</modifier></type><name>pBlockIdx</name> <init>= <expr><operator>(</operator><name>SBlockIdx</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGetBlockIdx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockIdx</name> <modifier>*</modifier></type><name>pBlockIdx</name> <init>= <expr><operator>(</operator><name>SBlockIdx</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockIdx</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockIdx</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockIdx</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockIdx</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tCmprBlockIdx</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBlockIdx</name> <modifier>*</modifier></type><name>lBlockIdx</name> <init>= <expr><operator>(</operator><name>SBlockIdx</name> <operator>*</operator><operator>)</operator><name>lhs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockIdx</name> <modifier>*</modifier></type><name>rBlockIdx</name> <init>= <expr><operator>(</operator><name>SBlockIdx</name> <operator>*</operator><operator>)</operator><name>rhs</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lBlockIdx</name><operator>-&gt;</operator><name>suid</name></name> <operator>&lt;</operator> <name><name>rBlockIdx</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lBlockIdx</name><operator>-&gt;</operator><name>suid</name></name> <operator>&gt;</operator> <name><name>rBlockIdx</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lBlockIdx</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>rBlockIdx</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lBlockIdx</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>rBlockIdx</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tCmprBlockL</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SBlockIdx</name> <modifier>*</modifier></type><name>lBlockIdx</name> <init>= <expr><operator>(</operator><name>SBlockIdx</name> <operator>*</operator><operator>)</operator><name>lhs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttBlk</name>   <modifier>*</modifier></type><name>rBlockL</name> <init>= <expr><operator>(</operator><name>SSttBlk</name> <operator>*</operator><operator>)</operator><name>rhs</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lBlockIdx</name><operator>-&gt;</operator><name>suid</name></name> <operator>&lt;</operator> <name><name>rBlockL</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lBlockIdx</name><operator>-&gt;</operator><name>suid</name></name> <operator>&gt;</operator> <name><name>rBlockL</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lBlockIdx</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>rBlockL</name><operator>-&gt;</operator><name>minUid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lBlockIdx</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>rBlockL</name><operator>-&gt;</operator><name>maxUid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SDataBlk ======================================================</comment>
<function><type><name>void</name></type> <name>tDataBlkReset</name><parameter_list>(<parameter><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pDataBlk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pDataBlk</name> <operator>=</operator> <operator>(</operator><name>SDataBlk</name><operator>)</operator><block>{<expr><operator>.</operator><name>minKey</name> <operator>=</operator> <name>TSDBKEY_MAX</name></expr>, <expr><operator>.</operator><name>maxKey</name> <operator>=</operator> <name>TSDBKEY_MIN</name></expr>, <expr><operator>.</operator><name>minVer</name> <operator>=</operator> <name>VERSION_MAX</name></expr>, <expr><operator>.</operator><name>maxVer</name> <operator>=</operator> <name>VERSION_MIN</name></expr>}</block></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tPutDataBlk</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pDataBlk</name> <init>= <expr><operator>(</operator><name>SDataBlk</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>minVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>maxVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI8</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>hasDup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI8</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>nSubBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iSubBlock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iSubBlock</name> <operator>&lt;</operator> <name><name>pDataBlk</name><operator>-&gt;</operator><name>nSubBlock</name></name></expr>;</condition> <incr><expr><name>iSubBlock</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>aSubBlock</name><index>[<expr><name>iSubBlock</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>aSubBlock</name><index>[<expr><name>iSubBlock</name></expr>]</index></name><operator>.</operator><name>szBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>aSubBlock</name><index>[<expr><name>iSubBlock</name></expr>]</index></name><operator>.</operator><name>szKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>nSubBlock</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>hasDup</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>smaInfo</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>smaInfo</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGetDataBlk</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pDataBlk</name> <init>= <expr><operator>(</operator><name>SDataBlk</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>minKey</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>maxKey</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>minVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>maxVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>hasDup</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>nSubBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iSubBlock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iSubBlock</name> <operator>&lt;</operator> <name><name>pDataBlk</name><operator>-&gt;</operator><name>nSubBlock</name></name></expr>;</condition> <incr><expr><name>iSubBlock</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>aSubBlock</name><index>[<expr><name>iSubBlock</name></expr>]</index></name><operator>.</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>aSubBlock</name><index>[<expr><name>iSubBlock</name></expr>]</index></name><operator>.</operator><name>szBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>aSubBlock</name><index>[<expr><name>iSubBlock</name></expr>]</index></name><operator>.</operator><name>szKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>nSubBlock</name></name> <operator>==</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>hasDup</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>smaInfo</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>smaInfo</name><operator>.</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>smaInfo</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>smaInfo</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tDataBlkCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pBlock1</name> <init>= <expr><operator>(</operator><name>SDataBlk</name> <operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pBlock2</name> <init>= <expr><operator>(</operator><name>SDataBlk</name> <operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock1</name><operator>-&gt;</operator><name>maxKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock2</name><operator>-&gt;</operator><name>minKey</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pBlock1</name><operator>-&gt;</operator><name>minKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlock2</name><operator>-&gt;</operator><name>maxKey</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tDataBlkHasSma</name><parameter_list>(<parameter><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pDataBlk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>nSubBlock</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>hasDup</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <return>return <expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>smaInfo</name><operator>.</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SSttBlk ======================================================</comment>
<function><type><name>int32_t</name></type> <name>tPutSttBlk</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttBlk</name> <modifier>*</modifier></type><name>pSttBlk</name> <init>= <expr><operator>(</operator><name>SSttBlk</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>minUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>maxUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>minKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>maxKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>minVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>maxVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>szBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGetSttBlk</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttBlk</name> <modifier>*</modifier></type><name>pSttBlk</name> <init>= <expr><operator>(</operator><name>SSttBlk</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>minUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>maxUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>minKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>maxKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>minVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>maxVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>szBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SBlockCol ======================================================</comment>
<function><type><name>int32_t</name></type> <name>tPutBlockCol</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockCol</name> <modifier>*</modifier></type><name>pBlockCol</name> <init>= <expr><operator>(</operator><name>SBlockCol</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_NONE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI16v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI8</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI8</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>smaOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI8</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szOrigin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_VALUE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szBitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGetBlockCol</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockCol</name> <modifier>*</modifier></type><name>pBlockCol</name> <init>= <expr><operator>(</operator><name>SBlockCol</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI16v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>smaOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>szOrigin</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_NONE</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szBitmap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szValue</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_VALUE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>szBitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>szOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>szValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBlockColCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SBlockCol</name> <operator>*</operator><operator>)</operator><name>p1</name><operator>)</operator><operator>-&gt;</operator><name>cid</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>SBlockCol</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><operator>-&gt;</operator><name>cid</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>SBlockCol</name> <operator>*</operator><operator>)</operator><name>p1</name><operator>)</operator><operator>-&gt;</operator><name>cid</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>SBlockCol</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><operator>-&gt;</operator><name>cid</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SDelIdx ======================================================</comment>
<function><type><name>int32_t</name></type> <name>tCmprDelIdx</name><parameter_list>(<parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type><name>lhs</name></decl></parameter>, <parameter><decl><type><name>void</name> <specifier>const</specifier> <modifier>*</modifier></type><name>rhs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>lDelIdx</name> <init>= <expr><operator>(</operator><name>SDelIdx</name> <operator>*</operator><operator>)</operator><name>lhs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>rDelIdx</name> <init>= <expr><operator>(</operator><name>SDelIdx</name> <operator>*</operator><operator>)</operator><name>rhs</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lDelIdx</name><operator>-&gt;</operator><name>suid</name></name> <operator>&lt;</operator> <name><name>rDelIdx</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lDelIdx</name><operator>-&gt;</operator><name>suid</name></name> <operator>&gt;</operator> <name><name>rDelIdx</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>lDelIdx</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>rDelIdx</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>lDelIdx</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>rDelIdx</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tPutDelIdx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>pDelIdx</name> <init>= <expr><operator>(</operator><name>SDelIdx</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDelIdx</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDelIdx</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDelIdx</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDelIdx</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGetDelIdx</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>pDelIdx</name> <init>= <expr><operator>(</operator><name>SDelIdx</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelIdx</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelIdx</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelIdx</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelIdx</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SDelData ======================================================</comment>
<function><type><name>int32_t</name></type> <name>tPutDelData</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDelData</name> <modifier>*</modifier></type><name>pDelData</name> <init>= <expr><operator>(</operator><name>SDelData</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDelData</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDelData</name><operator>-&gt;</operator><name>sKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pDelData</name><operator>-&gt;</operator><name>eKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGetDelData</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDelData</name> <modifier>*</modifier></type><name>pDelData</name> <init>= <expr><operator>(</operator><name>SDelData</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelData</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelData</name><operator>-&gt;</operator><name>sKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelData</name><operator>-&gt;</operator><name>eKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbKeyFid</name><parameter_list>(<parameter><decl><type><name>TSKEY</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>minutes</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>key</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>tsTickPerMin</name><index>[<expr><name>precision</name></expr>]</index></name> <operator>/</operator> <name>minutes</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><operator>(</operator><name>key</name> <operator>/</operator> <name><name>tsTickPerMin</name><index>[<expr><name>precision</name></expr>]</index></name> <operator>/</operator> <name>minutes</name><operator>)</operator><operator>)</operator></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbFidKeyRange</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>fid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>minutes</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>precision</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name> <modifier>*</modifier></type><name>minKey</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name> <modifier>*</modifier></type><name>maxKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>minKey</name> <operator>=</operator> <name><name>tsTickPerMin</name><index>[<expr><name>precision</name></expr>]</index></name> <operator>*</operator> <name>fid</name> <operator>*</operator> <name>minutes</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>maxKey</name> <operator>=</operator> <operator>*</operator><name>minKey</name> <operator>+</operator> <name><name>tsTickPerMin</name><index>[<expr><name>precision</name></expr>]</index></name> <operator>*</operator> <name>minutes</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbFidLevel</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>fid</name></decl></parameter>, <parameter><decl><type><name>STsdbKeepCfg</name> <modifier>*</modifier></type><name>pKeepCfg</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>now</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name><name>aFid</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>key</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>precision</name></name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>now</name> <operator>=</operator> <name>now</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>precision</name></name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>now</name> <operator>=</operator> <name>now</name> <operator>*</operator> <literal type="number">1000000l</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>precision</name></name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>now</name> <operator>=</operator> <name>now</name> <operator>*</operator> <literal type="number">1000000000l</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>key</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name><name>pKeepCfg</name><operator>-&gt;</operator><name>keep0</name></name> <operator>*</operator> <name><name>tsTickPerMin</name><index>[<expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>precision</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aFid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <call><name>tsdbKeyFid</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>days</name></name></expr></argument>, <argument><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>key</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name><name>pKeepCfg</name><operator>-&gt;</operator><name>keep1</name></name> <operator>*</operator> <name><name>tsTickPerMin</name><index>[<expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>precision</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aFid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <call><name>tsdbKeyFid</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>days</name></name></expr></argument>, <argument><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>key</name> <operator>=</operator> <name>now</name> <operator>-</operator> <name><name>pKeepCfg</name><operator>-&gt;</operator><name>keep2</name></name> <operator>*</operator> <name><name>tsTickPerMin</name><index>[<expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>precision</name></name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>aFid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <call><name>tsdbKeyFid</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>days</name></name></expr></argument>, <argument><expr><name><name>pKeepCfg</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>fid</name> <operator>&gt;=</operator> <name><name>aFid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fid</name> <operator>&gt;=</operator> <name><name>aFid</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>fid</name> <operator>&gt;=</operator> <name><name>aFid</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">2</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// TSDBROW ======================================================</comment>
<function><type><name>void</name></type> <name>tsdbRowGetColVal</name><parameter_list>(<parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iCol</name></decl></parameter>, <parameter><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iCol</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SValue</name></type>    <name>value</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>iCol</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tTSRowGetVal</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pTSRow</name></name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>tBlockDataGetColData</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pColData</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tColDataGetValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<comment type="line">// int32_t tPutTSDBRow(uint8_t *p, TSDBROW *pRow) {</comment>
<comment type="line">//   int32_t n = 0;</comment>

<comment type="line">//   n += tPutI64(p, pRow-&gt;version);</comment>
<comment type="line">//   if (p) memcpy(p + n, pRow-&gt;pTSRow, pRow-&gt;pTSRow-&gt;len);</comment>
<comment type="line">//   n += pRow-&gt;pTSRow-&gt;len;</comment>

<comment type="line">//   return n;</comment>
<comment type="line">// }</comment>

<function><type><name>int32_t</name></type> <name>tsdbRowCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><operator>(</operator><name>TSDBROW</name> <operator>*</operator><operator>)</operator><name>p1</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><operator>(</operator><name>TSDBROW</name> <operator>*</operator><operator>)</operator><name>p2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// STSDBRowIter ======================================================</comment>
<function><type><name>void</name></type> <name>tsdbRowIterInit</name><parameter_list>(<parameter><decl><type><name>STSDBRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name> <operator>=</operator> <name>pRow</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTSchema</name></name> <operator>=</operator> <name>pTSchema</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTSchema</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>i</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>SColVal</name> <modifier>*</modifier></type><name>tsdbRowIterNext</name><parameter_list>(<parameter><decl><type><name>STSDBRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tTSRowGetVal</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>pTSRow</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>i</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>

      <return>return <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>colVal</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>i</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name> <init>= <expr><call><name>tBlockDataGetColDataByIdx</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>i</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>tColDataGetValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>i</name></name><operator>++</operator></expr>;</expr_stmt>

      <return>return <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>colVal</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SRowMerger ======================================================</comment>

<function><type><name>int32_t</name></type> <name>tRowMergerInit2</name><parameter_list>(<parameter><decl><type><name>SRowMerger</name> <modifier>*</modifier></type><name>pMerger</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pResTSchema</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>   <name>key</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColVal</name>  <modifier>*</modifier></type><name>pColVal</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SColVal</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>iCol</name></decl>, <decl><type ref="prev"/><name>jCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pTSchema</name></name> <operator>=</operator> <name>pResTSchema</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMerger</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pResTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// ts</comment>
  <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>jCol</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <macro><name>COL_VAL_VALUE</name><argument_list>(<argument>pTColumn-&gt;colId</argument>, <argument>pTColumn-&gt;type</argument>, <argument>(SValue){.val = key.ts}</argument>)</argument_list></macro></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// other</comment>
  <for>for <control>(<init><expr><name>iCol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>jCol</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>&amp;&amp;</operator> <name>iCol</name> <operator>&lt;</operator> <name><name>pResTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <operator>&amp;</operator><name><name>pResTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>jCol</name></expr>]</index></name><operator>.</operator><name>colId</name> <operator>&lt;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>jCol</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name>iCol</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>jCol</name></expr>]</index></name><operator>.</operator><name>colId</name> <operator>&gt;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tsdbRowGetColVal</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>jCol</name><operator>++</operator></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name><name>pResTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <operator>&amp;</operator><name><name>pResTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tRowMergerAdd</name><parameter_list>(<parameter><decl><type><name>SRowMerger</name> <modifier>*</modifier></type><name>pMerger</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>   <name>key</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColVal</name>  <modifier>*</modifier></type><name>pColVal</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SColVal</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>iCol</name></decl>, <decl><type ref="prev"/><name>jCol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>val</name></name> <operator>==</operator> <name><name>key</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><expr><name>iCol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name><name>pMerger</name><operator>-&gt;</operator><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>&amp;&amp;</operator> <name>jCol</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <operator>&amp;</operator><name><name>pMerger</name><operator>-&gt;</operator><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iCol</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>jCol</name></expr>]</index></name><operator>.</operator><name>colId</name> <operator>&lt;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>jCol</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>--</operator><name>iCol</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>jCol</name></expr>]</index></name><operator>.</operator><name>colId</name> <operator>&gt;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>tsdbRowGetColVal</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>jCol</name><operator>++</operator></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name><name>pMerger</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>pMerger</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>tColVal</name> <init>= <expr><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>tColVal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"dup versions not allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pMerger</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tRowMergerInit</name><parameter_list>(<parameter><decl><type><name>SRowMerger</name> <modifier>*</modifier></type><name>pMerger</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>   <name>key</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColVal</name>  <modifier>*</modifier></type><name>pColVal</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SColVal</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pTSchema</name></name> <operator>=</operator> <name>pTSchema</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMerger</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// ts</comment>
  <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <macro><name>COL_VAL_VALUE</name><argument_list>(<argument>pTColumn-&gt;colId</argument>, <argument>pTColumn-&gt;type</argument>, <argument>(SValue){.val = key.ts}</argument>)</argument_list></macro></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// other</comment>
  <for>for <control>(<init><decl><type><name>int16_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><name>iCol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbRowGetColVal</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tRowMergerClear</name><parameter_list>(<parameter><decl><type><name>SRowMerger</name> <modifier>*</modifier></type><name>pMerger</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tRowMerge</name><parameter_list>(<parameter><decl><type><name>SRowMerger</name> <modifier>*</modifier></type><name>pMerger</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>  <name>key</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>pColVal</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SColVal</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>val</name></name> <operator>==</operator> <name><name>key</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name><name>pMerger</name><operator>-&gt;</operator><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><name>iCol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbRowGetColVal</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name><name>pMerger</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>pMerger</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>tColVal</name> <init>= <expr><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>tColVal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pMerger</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tRowMergerGetRow</name><parameter_list>(<parameter><decl><type><name>SRowMerger</name> <modifier>*</modifier></type><name>pMerger</name></decl></parameter>, <parameter><decl><type><name>STSRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tdSTSRowNew</name><argument_list>(<argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pArray</name></name></expr></argument>, <argument><expr><name><name>pMerger</name><operator>-&gt;</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name>ppRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// delete skyline ======================================================</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbMergeSkyline</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aSkyline1</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aSkyline2</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aSkyline</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>i1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>n1</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aSkyline1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>i2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>n2</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aSkyline2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name> <modifier>*</modifier></type><name>pSkyline1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name> <modifier>*</modifier></type><name>pSkyline2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>  <name>item</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>version1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>version2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n1</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n2</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>aSkyline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name>n1</name> <operator>&amp;&amp;</operator> <name>i2</name> <operator>&lt;</operator> <name>n2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pSkyline1</name> <operator>=</operator> <operator>(</operator><name>TSDBKEY</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aSkyline1</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pSkyline2</name> <operator>=</operator> <operator>(</operator><name>TSDBKEY</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aSkyline2</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pSkyline1</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>pSkyline2</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>version1</name> <operator>=</operator> <name><name>pSkyline1</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSkyline1</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>pSkyline2</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>version2</name> <operator>=</operator> <name><name>pSkyline2</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>version1</name> <operator>=</operator> <name><name>pSkyline1</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>version2</name> <operator>=</operator> <name><name>pSkyline2</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>item</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pSkyline1</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name><name>pSkyline2</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>.</operator><name>version</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name>version1</name></expr></argument>, <argument><expr><name>version2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aSkyline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <while>while <condition>(<expr><name>i1</name> <operator>&lt;</operator> <name>n1</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pSkyline1</name> <operator>=</operator> <operator>(</operator><name>TSDBKEY</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aSkyline1</name></expr></argument>, <argument><expr><name>i1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name><name>pSkyline1</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pSkyline1</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aSkyline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>i1</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <while>while <condition>(<expr><name>i2</name> <operator>&lt;</operator> <name>n2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pSkyline2</name> <operator>=</operator> <operator>(</operator><name>TSDBKEY</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aSkyline2</name></expr></argument>, <argument><expr><name>i2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name><name>pSkyline2</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>item</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pSkyline2</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aSkyline</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>item</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>i2</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<function><type><name>int32_t</name></type> <name>tsdbBuildDeleteSkyline</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aDelData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sidx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eidx</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aSkyline</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelData</name> <modifier>*</modifier></type><name>pDelData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>midx</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>aSkyline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sidx</name> <operator>==</operator> <name>eidx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pDelData</name> <operator>=</operator> <operator>(</operator><name>SDelData</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>, <argument><expr><name>sidx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>taosArrayPush</name><argument_list>(<argument>aSkyline</argument>, <argument>&amp;(TSDBKEY){.ts = pDelData-&gt;sKey</argument>, <argument>.version = pDelData-&gt;version}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>taosArrayPush</name><argument_list>(<argument>aSkyline</argument>, <argument>&amp;(TSDBKEY){.ts = pDelData-&gt;eKey</argument>, <argument>.version = <literal type="number">0</literal>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aSkyline1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aSkyline2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>aSkyline1</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSDBKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>aSkyline2</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSDBKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>aSkyline1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>aSkyline2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_clear</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>midx</name> <operator>=</operator> <operator>(</operator><name>sidx</name> <operator>+</operator> <name>eidx</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbBuildDeleteSkyline</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>, <argument><expr><name>sidx</name></expr></argument>, <argument><expr><name>midx</name></expr></argument>, <argument><expr><name>aSkyline1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_clear</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbBuildDeleteSkyline</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>, <argument><expr><name>midx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>eidx</name></expr></argument>, <argument><expr><name>aSkyline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_clear</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbMergeSkyline</name><argument_list>(<argument><expr><name>aSkyline1</name></expr></argument>, <argument><expr><name>aSkyline2</name></expr></argument>, <argument><expr><name>aSkyline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <label><name>_clear</name>:</label>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>aSkyline1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>aSkyline2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SBlockData ======================================================</comment>
<function><type><name>int32_t</name></type> <name>tBlockDataCreate</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aColData</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aColData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tBlockDataDestroy</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>deepClear</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aColData</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>deepClear</name></expr> ?</condition><then> <expr><name>tColDataDestroy</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aColData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBlockDataInit</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>TABLEID</name> <modifier>*</modifier></type><name>pId</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>aCid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nCid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pId</name><operator>-&gt;</operator><name>suid</name></name> <operator>||</operator> <name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>pId</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>pId</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>aCid</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>iColumn</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iColumn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iCid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iCid</name> <operator>&lt;</operator> <name>nCid</name></expr>;</condition> <incr><expr><name>iCid</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <while>while <condition>(<expr><name>pTColumn</name> <operator>&amp;&amp;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>&lt;</operator> <name><name>aCid</name><index>[<expr><name>iCid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>iColumn</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iColumn</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if <condition>(<expr><name>pTColumn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name><name>aCid</name><index>[<expr><name>iCid</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAddColData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>tColDataInit</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>pTColumn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COL_SMA_ON</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>iColumn</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iColumn</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iColumn</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>iColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><name>iColumn</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iColumn</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAddColData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><call><name>tColDataInit</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>pTColumn</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>COL_SMA_ON</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tBlockDataReset</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tBlockDataClear</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name> <operator>||</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iColData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iColData</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr>;</condition> <incr><expr><name>iColData</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name> <init>= <expr><call><name>tBlockDataGetColDataByIdx</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>iColData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tColDataClear</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBlockDataAddColData</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SColData</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppColData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name> <operator>&gt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aColData</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><macro><name>taosArrayPush</name><argument_list>(<argument>pBlockData-&gt;aColData</argument>, <argument>&amp;((SColData){<literal type="number">0</literal>})</argument>)</argument_list></macro> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>pColData</name> <operator>=</operator> <operator>(</operator><name>SColData</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aColData</name></name></expr></argument>, <argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppColData</name> <operator>=</operator> <name>pColData</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>ppColData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tBlockDataAppendBlockRow</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockDataFrom</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SColVal</name></type>   <name>cv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>iColDataFrom</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColDataFrom</name> <init>=
      <expr><ternary><condition><expr><operator>(</operator><name>iColDataFrom</name> <operator>&lt;</operator> <name><name>pBlockDataFrom</name><operator>-&gt;</operator><name>nColData</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SColData</name> <operator>*</operator><operator>)</operator><name><name>pBlockDataFrom</name><operator>-&gt;</operator><name>aColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iColDataFrom</name></expr>]</index></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iColDataTo</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iColDataTo</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr>;</condition> <incr><expr><name>iColDataTo</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColDataTo</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SColData</name> <operator>*</operator><operator>)</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iColDataTo</name></expr>]</index></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pColDataFrom</name> <operator>&amp;&amp;</operator> <name><name>pColDataFrom</name><operator>-&gt;</operator><name>cid</name></name> <operator>&lt;</operator> <name><name>pColDataTo</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>iColDataFrom</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColDataFrom</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iColDataFrom</name> <operator>&lt;</operator> <name><name>pBlockDataFrom</name><operator>-&gt;</operator><name>nColData</name></name><operator>)</operator></expr>
                         ?</condition><then> <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SColData</name> <operator>*</operator><operator>)</operator><name><name>pBlockDataFrom</name><operator>-&gt;</operator><name>aColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iColDataFrom</name></expr>]</index></expr>
                         </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>pColDataFrom</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pColDataFrom</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;</operator> <name><name>pColDataTo</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColDataTo</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pColDataTo</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColDataTo</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tColDataGetValue</name><argument_list>(<argument><expr><name>pColDataFrom</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColDataTo</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>iColDataFrom</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>pColDataFrom</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iColDataFrom</name> <operator>&lt;</operator> <name><name>pBlockDataFrom</name><operator>-&gt;</operator><name>nColData</name></name><operator>)</operator></expr>
                         ?</condition><then> <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SColData</name> <operator>*</operator><operator>)</operator><name><name>pBlockDataFrom</name><operator>-&gt;</operator><name>aColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iColDataFrom</name></expr>]</index></expr>
                         </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tBlockDataAppendTPRow</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>iTColumn</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iTColumn</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>pBitmap</name> <init>= <expr><ternary><condition><expr><name><name>pRow</name><operator>-&gt;</operator><name>statis</name></name></expr> ?</condition><then> <expr><call><name>tdGetBitmapAddrTp</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name><name>pTSchema</name><operator>-&gt;</operator><name>flen</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iColData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iColData</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr>;</condition> <incr><expr><name>iColData</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SColData</name> <operator>*</operator><operator>)</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iColData</name></expr>]</index></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pTColumn</name> <operator>&amp;&amp;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>iTColumn</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iTColumn</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>pTColumn</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>&gt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SColVal</name></type> <name>cv</name> <init>= <expr><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>statis</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>TDRowValT</name></type> <name>vt</name> <init>= <expr><name>TD_VTYPE_MAX</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tdGetBitmapValTypeII</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>iTColumn</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>vt</name> <operator>==</operator> <name>TD_VTYPE_NORM</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>cv</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CV_FLAG_VALUE</name></expr>;</expr_stmt>

          <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pRow</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pRow</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>

          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vt</name> <operator>==</operator> <name>TD_VTYPE_NONE</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vt</name> <operator>==</operator> <name>TD_VTYPE_NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>cv</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CV_FLAG_VALUE</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>pRow</name> <operator>+</operator> <operator>*</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>pRow</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>iTColumn</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iTColumn</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tBlockDataAppendKVRow</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>col_id_t</name></type>  <name>kvIter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>col_id_t</name></type>  <name>nKvCols</name> <init>= <expr><call><name>tdRowGetNCols</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>pColIdx</name> <init>= <expr><call><name>TD_ROW_COL_IDX</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>     <modifier>*</modifier></type><name>pBitmap</name> <init>= <expr><call><name>tdGetBitmapAddrKv</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><call><name>tdRowGetNCols</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>iTColumn</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iTColumn</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iColData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iColData</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr>;</condition> <incr><expr><name>iColData</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>SColData</name> <operator>*</operator><operator>)</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aColData</name><operator>-&gt;</operator><name>pData</name></name><operator>)</operator><index>[<expr><name>iColData</name></expr>]</index></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pTColumn</name> <operator>&amp;&amp;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>iTColumn</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iTColumn</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>pTColumn</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name> <operator>&gt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SColVal</name></type>    <name>cv</name> <init>= <expr><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>, <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TDRowValT</name></type>  <name>vt</name> <init>= <expr><name>TD_VTYPE_NONE</name></expr></init></decl>;</decl_stmt>  <comment type="line">// default is NONE</comment>
      <decl_stmt><decl><type><name>SKvRowIdx</name> <modifier>*</modifier></type><name>pKvIdx</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

      <while>while <condition>(<expr><name>kvIter</name> <operator>&lt;</operator> <name>nKvCols</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pKvIdx</name> <operator>=</operator> <operator>(</operator><name>SKvRowIdx</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pColIdx</name></expr></argument>, <argument><expr><name>kvIter</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>SKvRowIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pKvIdx</name><operator>-&gt;</operator><name>colId</name></name> <operator>==</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tdGetBitmapValTypeII</name><argument_list>(<argument><expr><name>pBitmap</name></expr></argument>, <argument><expr><name>kvIter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>vt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>++</operator><name>kvIter</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pKvIdx</name><operator>-&gt;</operator><name>colId</name></name> <operator>&gt;</operator> <name><name>pTColumn</name><operator>-&gt;</operator><name>colId</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>vt</name> <operator>=</operator> <name>TD_VTYPE_NONE</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><operator>++</operator><name>kvIter</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>

      <if_stmt><if>if <condition>(<expr><name>vt</name> <operator>==</operator> <name>TD_VTYPE_NORM</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>cv</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name>CV_FLAG_VALUE</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name><name>pKvIdx</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <call><name>varDataLen</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>varDataVal</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>cv</name><operator>.</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name><name>pTColumn</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>cv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vt</name> <operator>==</operator> <name>TD_VTYPE_NONE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vt</name> <operator>==</operator> <name>TD_VTYPE_NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name>iTColumn</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTColumn</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iTColumn</name> <operator>&lt;</operator> <name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>iTColumn</name></expr>]</index></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBlockDataAppendRow</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name> <operator>||</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// uid</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr>]</index></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// version</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name><index>[<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr>]</index></name> <operator>=</operator> <call><name>TSDBROW_VERSION</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// timestamp</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr>]</index></name> <operator>=</operator> <call><name>TSDBROW_TS</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SColVal</name></type> <name>cv</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pRow</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>TD_IS_TP_ROW</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pTSRow</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendTPRow</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pTSRow</name></name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>TD_IS_KV_ROW</name><argument_list>(<argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pTSRow</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendKVRow</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pTSRow</name></name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendBlockRow</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBlockDataCorrectSchema</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockDataFrom</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>iColData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iColDataFrom</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iColDataFrom</name> <operator>&lt;</operator> <name><name>pBlockDataFrom</name><operator>-&gt;</operator><name>nColData</name></name></expr>;</condition> <incr><expr><name>iColDataFrom</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColDataFrom</name> <init>= <expr><call><name>tBlockDataGetColDataByIdx</name><argument_list>(<argument><expr><name>pBlockDataFrom</name></expr></argument>, <argument><expr><name>iColDataFrom</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>iColData</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pColData</name> <operator>=</operator> <call><name>tBlockDataGetColDataByIdx</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>iColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pColData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>pColData</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;</operator> <name><name>pColDataFrom</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAddColData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>tColDataInit</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name><name>pColDataFrom</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColDataFrom</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>pColDataFrom</name><operator>-&gt;</operator><name>smaOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iRow</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><name>iColData</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>pColDataFrom</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>iColData</name><operator>++</operator></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>iColData</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tBlockDataMerge</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData1</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData2</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name><name>pBlockData1</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name><name>pBlockData1</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockData1</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockData2</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tBlockDataClear</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TSDBROW</name></type>  <name>row1</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name></type>  <name>row2</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow1</name> <init>= <expr><operator>&amp;</operator><name>row1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow2</name> <init>= <expr><operator>&amp;</operator><name>row2</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pRow1</name> <operator>&amp;&amp;</operator> <name>pRow2</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>tsdbRowCmprFn</name><argument_list>(<argument><expr><name>pRow1</name></expr></argument>, <argument><expr><name>pRow2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pRow1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><ternary><condition><expr><name><name>pBlockData1</name><operator>-&gt;</operator><name>uid</name></name></expr> ?</condition><then> <expr><name><name>pBlockData1</name><operator>-&gt;</operator><name>uid</name></name></expr> </then><else>: <expr><name><name>pBlockData1</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><name><name>pRow1</name><operator>-&gt;</operator><name>iRow</name></name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><name><name>pRow1</name><operator>-&gt;</operator><name>iRow</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRow1</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&lt;</operator> <name><name>pBlockData1</name><operator>-&gt;</operator><name>nRow</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pRow1</name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData1</name></expr></argument>, <argument><expr><name><name>pRow1</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pRow1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pRow2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                 <argument><expr><ternary><condition><expr><name><name>pBlockData2</name><operator>-&gt;</operator><name>uid</name></name></expr> ?</condition><then> <expr><name><name>pBlockData2</name><operator>-&gt;</operator><name>uid</name></name></expr> </then><else>: <expr><name><name>pBlockData2</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><name><name>pRow2</name><operator>-&gt;</operator><name>iRow</name></name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><name><name>pRow2</name><operator>-&gt;</operator><name>iRow</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRow2</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&lt;</operator> <name><name>pBlockData2</name><operator>-&gt;</operator><name>nRow</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>pRow2</name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData2</name></expr></argument>, <argument><expr><name><name>pRow2</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pRow2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <while>while <condition>(<expr><name>pRow1</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pRow1</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><ternary><condition><expr><name><name>pBlockData1</name><operator>-&gt;</operator><name>uid</name></name></expr> ?</condition><then> <expr><name><name>pBlockData1</name><operator>-&gt;</operator><name>uid</name></name></expr> </then><else>: <expr><name><name>pBlockData1</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><name><name>pRow1</name><operator>-&gt;</operator><name>iRow</name></name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pRow1</name><operator>-&gt;</operator><name>iRow</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRow1</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&lt;</operator> <name><name>pBlockData1</name><operator>-&gt;</operator><name>nRow</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRow1</name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData1</name></expr></argument>, <argument><expr><name><name>pRow1</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pRow1</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <while>while <condition>(<expr><name>pRow2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pRow2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                               <argument><expr><ternary><condition><expr><name><name>pBlockData2</name><operator>-&gt;</operator><name>uid</name></name></expr> ?</condition><then> <expr><name><name>pBlockData2</name><operator>-&gt;</operator><name>uid</name></name></expr> </then><else>: <expr><name><name>pBlockData2</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><name><name>pRow2</name><operator>-&gt;</operator><name>iRow</name></name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pRow2</name><operator>-&gt;</operator><name>iRow</name></name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRow2</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&lt;</operator> <name><name>pBlockData2</name><operator>-&gt;</operator><name>nRow</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>pRow2</name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData2</name></expr></argument>, <argument><expr><name><name>pRow2</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pRow2</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>SColData</name> <modifier>*</modifier></type><name>tBlockDataGetColDataByIdx</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>idx</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>idx</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>SColData</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aColData</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tBlockDataGetColData</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>int16_t</name></type> <name>cid</name></decl></parameter>, <parameter><decl><type><name>SColData</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppColData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>cid</name> <operator>!=</operator> <name>PRIMARYKEY_TIMESTAMP_COL_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lidx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ridx</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>lidx</name> <operator>&lt;=</operator> <name>ridx</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>midx</name> <init>= <expr><operator>(</operator><name>lidx</name> <operator>+</operator> <name>ridx</name><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name> <init>= <expr><call><name>tBlockDataGetColDataByIdx</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>midx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>c</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name>cid</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>(</operator><ternary><condition><expr><operator>(</operator><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;</operator> <name>cid</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ppColData</name> <operator>=</operator> <name>pColData</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lidx</name> <operator>=</operator> <name>midx</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ridx</name> <operator>=</operator> <name>midx</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>ppColData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tCmprBlockData</name><parameter_list>(<parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmprAlg</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>szOut</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>aBuf</name><index>[]</index></name></decl></parameter>,
                       <parameter><decl><type><name>int32_t</name></type> <name><name>aBufN</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SDiskDataHdr</name></type> <name>hdr</name> <init>= <expr><block>{<expr><operator>.</operator><name>delimiter</name> <operator>=</operator> <name>TSDB_FILE_DLMT</name></expr>,
                      <expr><operator>.</operator><name>fmtVer</name> <operator>=</operator> <literal type="number">0</literal></expr>,
                      <expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name></expr>,
                      <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name></expr>,
                      <expr><operator>.</operator><name>nRow</name> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr>,
                      <expr><operator>.</operator><name>cmprAlg</name> <operator>=</operator> <name>cmprAlg</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// encode =================</comment>
  <comment type="line">// columns AND SBlockCol</comment>
  <expr_stmt><expr><name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iColData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iColData</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr>;</condition> <incr><expr><name>iColData</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name> <init>= <expr><call><name>tBlockDataGetColDataByIdx</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>iColData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NONE</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SBlockCol</name></type> <name>blockCol</name> <init>= <expr><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr>,
                          <expr><operator>.</operator><name>type</name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr>,
                          <expr><operator>.</operator><name>smaOn</name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>smaOn</name></name></expr>,
                          <expr><operator>.</operator><name>flag</name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name></expr>,
                          <expr><operator>.</operator><name>szOrigin</name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCmprColData</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><name><name>blockCol</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>blockCol</name><operator>.</operator><name>szBitmap</name></name> <operator>+</operator> <name><name>blockCol</name><operator>.</operator><name>szOffset</name></name> <operator>+</operator> <name><name>blockCol</name><operator>.</operator><name>szValue</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name> <operator>+</operator> <call><name>tPutBlockCol</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockCol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name> <operator>+=</operator> <call><name>tPutBlockCol</name><argument_list>(<argument><expr><name><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// SBlockCol</comment>
  <expr_stmt><expr><name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr>;</expr_stmt>

  <comment type="line">// uid + version + tskey</comment>
  <expr_stmt><expr><name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCmprData</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>.</operator><name>szUid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>hdr</name><operator>.</operator><name>szUid</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCmprData</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>,
                      <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>.</operator><name>szVer</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>hdr</name><operator>.</operator><name>szVer</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCmprData</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>,
                      <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>hdr</name><operator>.</operator><name>szKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+=</operator> <name><name>hdr</name><operator>.</operator><name>szKey</name></name></expr>;</expr_stmt>

  <comment type="line">// hdr</comment>
  <expr_stmt><expr><name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator> <call><name>tPutDiskDataHdr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>tPutDiskDataHdr</name><argument_list>(<argument><expr><name><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// aggragate</comment>
  <if_stmt><if>if <condition>(<expr><name>ppOut</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>szOut</name> <operator>=</operator> <name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><name>ppOut</name></expr></argument>, <argument><expr><operator>*</operator><name>szOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ppOut</name></expr></argument>, <argument><expr><name><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ppOut</name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ppOut</name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ppOut</name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tDecmprBlockData</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>szIn</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>aBuf</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>      <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDiskDataHdr</name></type> <name>hdr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// SDiskDataHdr</comment>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetDiskDataHdr</name><argument_list>(<argument><expr><name>pIn</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>delimiter</name></name> <operator>==</operator> <name>TSDB_FILE_DLMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr>;</expr_stmt>

  <comment type="line">// uid</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>szUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDecmprData</name><argument_list>(<argument><expr><name>pIn</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>szUid</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>cmprAlg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name></name></expr></argument>,
                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>hdr</name><operator>.</operator><name>szUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>hdr</name><operator>.</operator><name>szUid</name></name></expr>;</expr_stmt>

  <comment type="line">// version</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDecmprData</name><argument_list>(<argument><expr><name>pIn</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>szVer</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>cmprAlg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name></name></expr></argument>,
                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>hdr</name><operator>.</operator><name>szVer</name></name></expr>;</expr_stmt>

  <comment type="line">// TSKEY</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDecmprData</name><argument_list>(<argument><expr><name>pIn</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>cmprAlg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name></name></expr></argument>,
                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <name><name>hdr</name><operator>.</operator><name>szKey</name></name></expr>;</expr_stmt>

  <comment type="line">// loop to decode each column data</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>nt</name> <operator>&lt;</operator> <name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockCol</name></type> <name>blockCol</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>nt</name> <operator>+=</operator> <call><name>tGetBlockCol</name><argument_list>(<argument><expr><name>pIn</name> <operator>+</operator> <name>n</name> <operator>+</operator> <name>nt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nt</name> <operator>&lt;=</operator> <name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAddColData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pColData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>tColDataInit</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><name><name>blockCol</name><operator>.</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>blockCol</name><operator>.</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>blockCol</name><operator>.</operator><name>smaOn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>blockCol</name><operator>.</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NULL</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iRow</name> <operator>&lt;</operator> <name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>blockCol</name><operator>.</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>blockCol</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDecmprColData</name><argument_list>(<argument><expr><name>pIn</name> <operator>+</operator> <name>n</name> <operator>+</operator> <name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name> <operator>+</operator> <name><name>blockCol</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockCol</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>cmprAlg</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><name>pColData</name></expr></argument>,
                               <argument><expr><operator>&amp;</operator><name><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SDiskDataHdr ==============================</comment>
<function><type><name>int32_t</name></type> <name>tPutDiskDataHdr</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDiskDataHdr</name> <modifier>*</modifier></type><name>pHdr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutU32</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>delimiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutU32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>fmtVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>szUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>szVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>szBlkCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI8</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pHdr</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGetDiskDataHdr</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ph</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDiskDataHdr</name> <modifier>*</modifier></type><name>pHdr</name> <init>= <expr><operator>(</operator><name>SDiskDataHdr</name> <operator>*</operator><operator>)</operator><name>ph</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetU32</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>delimiter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetU32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>fmtVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>szUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>szVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>szBlkCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI32v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI8</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pHdr</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ALGORITHM ==============================</comment>
<function><type><name>int32_t</name></type> <name>tPutColumnDataAgg</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>pColAgg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI16v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pColAgg</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI16v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pColAgg</name><operator>-&gt;</operator><name>numOfNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pColAgg</name><operator>-&gt;</operator><name>sum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pColAgg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI64</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pColAgg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tGetColumnDataAgg</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>SColumnDataAgg</name> <modifier>*</modifier></type><name>pColAgg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI16v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColAgg</name><operator>-&gt;</operator><name>colId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI16v</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColAgg</name><operator>-&gt;</operator><name>numOfNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColAgg</name><operator>-&gt;</operator><name>sum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColAgg</name><operator>-&gt;</operator><name>max</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI64</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColAgg</name><operator>-&gt;</operator><name>min</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCmprData</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>szIn</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmprAlg</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nOut</name></decl></parameter>,
                     <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>szOut</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>szIn</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ppOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>cmprAlg</name> <operator>==</operator> <name>NO_COMPRESSION</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><name>ppOut</name></expr></argument>, <argument><expr><name>nOut</name> <operator>+</operator> <name>szIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ppOut</name> <operator>+</operator> <name>nOut</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>szIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>szOut</name> <operator>=</operator> <name>szIn</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><name>szIn</name> <operator>+</operator> <name>COMP_OVERFLOW_BYTES</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><name>ppOut</name></expr></argument>, <argument><expr><name>nOut</name> <operator>+</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>cmprAlg</name> <operator>==</operator> <name>TWO_STAGE_COMP</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>ppBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><name>ppBuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>szOut</name> <operator>=</operator>
        <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><call><name>compFunc</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>szIn</name></expr></argument>, <argument><expr><name>szIn</name> <operator>/</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><operator>*</operator><name>ppOut</name> <operator>+</operator> <name>nOut</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><operator>*</operator><name>ppBuf</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><name>szOut</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_COMPRESS_ERROR</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbDecmprData</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>szIn</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmprAlg</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>szOut</name></decl></parameter>,
                       <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><name>ppOut</name></expr></argument>, <argument><expr><name>szOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>cmprAlg</name> <operator>==</operator> <name>NO_COMPRESSION</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>szIn</name> <operator>==</operator> <name>szOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>*</operator><name>ppOut</name></expr></argument>, <argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>szOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>cmprAlg</name> <operator>==</operator> <name>TWO_STAGE_COMP</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><name>ppBuf</name></expr></argument>, <argument><expr><name>szOut</name> <operator>+</operator> <name>COMP_OVERFLOW_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><call><name>decompFunc</name><argument_list>(<argument><expr><name>pIn</name></expr></argument>, <argument><expr><name>szIn</name></expr></argument>, <argument><expr><name>szOut</name> <operator>/</operator> <name><name>tDataTypes</name><index>[<expr><name>type</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><operator>*</operator><name>ppOut</name></expr></argument>, <argument><expr><name>szOut</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>,
                                               <argument><expr><operator>*</operator><name>ppBuf</name></expr></argument>, <argument><expr><name>szOut</name> <operator>+</operator> <name>COMP_OVERFLOW_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_COMPRESS_ERROR</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>size</name> <operator>==</operator> <name>szOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCmprColData</name><parameter_list>(<parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmprAlg</name></decl></parameter>, <parameter><decl><type><name>SBlockCol</name> <modifier>*</modifier></type><name>pBlockCol</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppOut</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nOut</name></decl></parameter>,
                        <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_NONE</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szBitmap</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szValue</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// bitmap</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_VALUE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>szBitMap</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>szBitMap</name> <operator>=</operator> <call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>szBitMap</name> <operator>=</operator> <call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCmprData</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>szBitMap</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_TINYINT</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><name>ppOut</name></expr></argument>, <argument><expr><name>nOut</name> <operator>+</operator> <name>size</name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>szBitmap</name></name></expr></argument>, <argument><expr><name>ppBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>szBitmap</name></name></expr>;</expr_stmt>

  <comment type="line">// offset</comment>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCmprData</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>,
                        <argument><expr><name>ppOut</name></expr></argument>, <argument><expr><name>nOut</name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>szOffset</name></name></expr></argument>, <argument><expr><name>ppBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>szOffset</name></name></expr>;</expr_stmt>

  <comment type="line">// value</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCmprData</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><name>ppOut</name></expr></argument>, <argument><expr><name>nOut</name> <operator>+</operator> <name>size</name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name><name>pBlockCol</name><operator>-&gt;</operator><name>szValue</name></name></expr></argument>, <argument><expr><name>ppBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>size</name> <operator>+=</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>szValue</name></name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbDecmprColData</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pIn</name></decl></parameter>, <parameter><decl><type><name>SBlockCol</name> <modifier>*</modifier></type><name>pBlockCol</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmprAlg</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>nVal</name></decl></parameter>, <parameter><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name></decl></parameter>,
                          <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppBuf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name> <operator>==</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>smaOn</name></name> <operator>=</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>smaOn</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name> <operator>=</operator> <name>nVal</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name> <operator>=</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>szOrigin</name></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>pIn</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// bitmap</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szBitmap</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>szBitMap</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <operator>(</operator><name>HAS_VALUE</name> <operator>|</operator> <name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>szBitMap</name> <operator>=</operator> <call><name>BIT2_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>szBitMap</name> <operator>=</operator> <call><name>BIT1_SIZE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDecmprData</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szBitmap</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_TINYINT</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pBitMap</name></name></expr></argument>, <argument><expr><name>szBitMap</name></expr></argument>, <argument><expr><name>ppBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>szBitmap</name></name></expr>;</expr_stmt>

  <comment type="line">// offset</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szOffset</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDecmprData</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szOffset</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>aOffset</name></name></expr></argument>,
                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>pColData</name><operator>-&gt;</operator><name>nVal</name></name></expr></argument>, <argument><expr><name>ppBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>szOffset</name></name></expr>;</expr_stmt>

  <comment type="line">// value</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szValue</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDecmprData</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szValue</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColData</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>nData</name></name></expr></argument>, <argument><expr><name>ppBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>szValue</name></name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
