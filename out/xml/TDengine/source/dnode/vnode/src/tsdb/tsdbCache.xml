<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbCache.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<function><type><name>int32_t</name></type> <name>tsdbOpenCache</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>pCache</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>     <name>cfgCapacity</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>cacheLastSize</name></name> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pCache</name> <operator>=</operator> <call><name>taosLRUCacheInit</name><argument_list>(<argument><expr><name>cfgCapacity</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">.5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCache</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosLRUCacheSetStrictCapacity</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>lruMutex</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_err</name>:</label>
  <expr_stmt><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>lruCache</name></name> <operator>=</operator> <name>pCache</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbCloseCache</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>pCache</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>lruCache</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pCache</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosLRUCacheEraseUnrefEntries</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosLRUCacheCleanup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>lruMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>getTableCacheKey</name><parameter_list>(<parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>cacheType</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>cacheType</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// last_row</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>key</name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name>uid</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// last</comment>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>key</name> <operator>=</operator> <operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>uid</name><operator>)</operator> <operator>|</operator> <literal type="number">0x8000000000000000</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>len</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>deleteTableCacheLast</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>keyLen</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pLastArray</name> <init>= <expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><name>value</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nCol</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pLastArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int16_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>pLastCol</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLastArray</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pLastCol</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pLastCol</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pLastCol</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCacheDeleteLastrow</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>eKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// getTableCacheKey(uid, "lr", key, &amp;keyLen);</comment>
  <expr_stmt><expr><call><name>getTableCacheKey</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pLast</name> <init>= <expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>invalidate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>nCol</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int16_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>tTsVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>eKey</name> <operator>&gt;=</operator> <name><name>tTsVal</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>invalidate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>invalidate</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// void taosLRUCacheErase(SLRUCache * cache, const void *key, size_t keyLen);</comment>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCacheDeleteLast</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>eKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// getTableCacheKey(uid, "l", key, &amp;keyLen);</comment>
  <expr_stmt><expr><call><name>getTableCacheKey</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pLast</name> <init>= <expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>invalidate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>nCol</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int16_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>tTsVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>eKey</name> <operator>&gt;=</operator> <name><name>tTsVal</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>invalidate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>invalidate</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// void taosLRUCacheErase(SLRUCache * cache, const void *key, size_t keyLen);</comment>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCacheDelete</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>eKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// getTableCacheKey(uid, "lr", key, &amp;keyLen);</comment>
  <expr_stmt><expr><call><name>getTableCacheKey</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pLast</name> <init>= <expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>invalidate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>nCol</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int16_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>tTsVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>eKey</name> <operator>&gt;=</operator> <name><name>tTsVal</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>invalidate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>invalidate</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// getTableCacheKey(uid, "l", key, &amp;keyLen);</comment>
  <expr_stmt><expr><call><name>getTableCacheKey</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pLast</name> <init>= <expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>    <name>invalidate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>nCol</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int16_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>tTsVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>eKey</name> <operator>&gt;=</operator> <name><name>tTsVal</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>invalidate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>invalidate</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// void taosLRUCacheErase(SLRUCache * cache, const void *key, size_t keyLen);</comment>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCacheInsertLastrow</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>dup</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>cacheRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// getTableCacheKey(uid, "lr", key, &amp;keyLen);</comment>
  <expr_stmt><expr><call><name>getTableCacheKey</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name> <init>= <expr><call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSKEY</name></type>     <name>keyTs</name> <init>= <expr><name><name>row</name><operator>-&gt;</operator><name>ts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>      <name>invalidate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pLast</name> <init>= <expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>nCol</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>tTsVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>keyTs</name> <operator>&gt;</operator> <name><name>tTsVal</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColVal</name></type>   <name>tColVal</name> <init>= <macro><name>COL_VAL_VALUE</name><argument_list>(<argument>pTColumn-&gt;colId</argument>, <argument>pTColumn-&gt;type</argument>, <argument>(SValue){.val = keyTs}</argument>)</argument_list></macro></init></decl>;</decl_stmt>

      <macro><name>taosArraySet</name><argument_list>(<argument>pLast</argument>, <argument>iCol</argument>, <argument>&amp;(SLastCol){.ts = keyTs</argument>, <argument>.colVal = tColVal}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><operator>++</operator><name>iCol</name></expr>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>tTsVal1</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>keyTs</name> <operator>&gt;=</operator> <name><name>tTsVal1</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>tColVal</name> <init>= <expr><operator>&amp;</operator><name><name>tTsVal1</name><operator>-&gt;</operator><name>colVal</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SColVal</name></type> <name>colVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tTSRowGetVal</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>colVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>keyTs</name> <operator>==</operator> <name><name>tTsVal1</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>tColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>invalidate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

            <break>break;</break>
          </block_content>}</block></if> <else>else <block>{<block_content>  <comment type="line">// new inserting key is greater than cached, update cached entry</comment>
            <decl_stmt><decl><type><name>SLastCol</name></type> <name>lastCol</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>keyTs</name></expr>, <expr><operator>.</operator><name>colVal</name> <operator>=</operator> <name>colVal</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>colVal</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>pLastCol</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pLastCol</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
                <goto>goto <name>_invalidate</name>;</goto>
              </block_content>}</block></if></if_stmt>
              <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

  <label><name>_invalidate</name>:</label>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>invalidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>invalidate</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheErase</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCacheInsertLast</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>row</name></decl></parameter>, <parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>cacheRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// getTableCacheKey(uid, "l", key, &amp;keyLen);</comment>
  <expr_stmt><expr><call><name>getTableCacheKey</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>h</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name> <init>= <expr><call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSKEY</name></type>     <name>keyTs</name> <init>= <expr><name><name>row</name><operator>-&gt;</operator><name>ts</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>      <name>invalidate</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pLast</name> <init>= <expr><operator>(</operator><name>SArray</name> <operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>nCol</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>tTsVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>keyTs</name> <operator>&gt;</operator> <name><name>tTsVal</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColVal</name></type>   <name>tColVal</name> <init>= <macro><name>COL_VAL_VALUE</name><argument_list>(<argument>pTColumn-&gt;colId</argument>, <argument>pTColumn-&gt;type</argument>, <argument>(SValue){.val = keyTs}</argument>)</argument_list></macro></init></decl>;</decl_stmt>

      <macro><name>taosArraySet</name><argument_list>(<argument>pLast</argument>, <argument>iCol</argument>, <argument>&amp;(SLastCol){.ts = keyTs</argument>, <argument>.colVal = tColVal}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><operator>++</operator><name>iCol</name></expr>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>tTsVal1</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>keyTs</name> <operator>&gt;=</operator> <name><name>tTsVal1</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>tColVal</name> <init>= <expr><operator>&amp;</operator><name><name>tTsVal1</name><operator>-&gt;</operator><name>colVal</name></name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>SColVal</name></type> <name>colVal</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>tTSRowGetVal</name><argument_list>(<argument><expr><name>row</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>colVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><operator>&amp;</operator><name>colVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>keyTs</name> <operator>==</operator> <name><name>tTsVal1</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>tColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>invalidate</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

            <break>break;</break>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>SLastCol</name></type> <name>lastCol</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>keyTs</name></expr>, <expr><operator>.</operator><name>colVal</name> <operator>=</operator> <name>colVal</name></expr>}</block></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>colVal</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
              <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>pLastCol</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pLastCol</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

              <expr_stmt><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
                <goto>goto <name>_invalidate</name>;</goto>
              </block_content>}</block></if></if_stmt>
              <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pLast</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

  <label><name>_invalidate</name>:</label>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>pTSchema</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>invalidate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>invalidate</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosLRUCacheErase</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>tb_uid_t</name></type> <name>getTableSuidByUid</name><parameter_list>(<parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tb_uid_t</name></type> <name>suid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMetaReader</name></type> <name>mr</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>metaReaderInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>metaGetTableEntryByUidCache</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="line">// table not esist</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_CHILD_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>suid</name> <operator>=</operator> <name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>ctbEntry</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>mr</name><operator>.</operator><name>me</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>TSDB_NORMAL_TABLE</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>suid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>suid</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>metaReaderClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name>mr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>suid</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableDelDataFromDelIdx</name><parameter_list>(<parameter><decl><type><name>SDelFReader</name> <modifier>*</modifier></type><name>pDelReader</name></decl></parameter>, <parameter><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>pDelIdx</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aDelData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pDelIdx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDelData</name><argument_list>(<argument><expr><name>pDelReader</name></expr></argument>, <argument><expr><name>pDelIdx</name></expr></argument>, <argument><expr><name>aDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableDelDataFromTbData</name><parameter_list>(<parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aDelData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelData</name> <modifier>*</modifier></type><name>pDelData</name> <init>= <expr><ternary><condition><expr><name>pTbData</name></expr> ?</condition><then> <expr><name><name>pTbData</name><operator>-&gt;</operator><name>pHead</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init>;</init> <condition><expr><name>pDelData</name></expr>;</condition> <incr><expr><name>pDelData</name> <operator>=</operator> <name><name>pDelData</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>, <argument><expr><name>pDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableDelData</name><parameter_list>(<parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pMem</name></decl></parameter>, <parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pIMem</name></decl></parameter>, <parameter><decl><type><name>SDelFReader</name> <modifier>*</modifier></type><name>pDelReader</name></decl></parameter>, <parameter><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>pDelIdx</name></decl></parameter>,
                               <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aDelData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMem</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableDelDataFromTbData</name><argument_list>(<argument><expr><name>pMem</name></expr></argument>, <argument><expr><name>aDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pIMem</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableDelDataFromTbData</name><argument_list>(<argument><expr><name>pIMem</name></expr></argument>, <argument><expr><name>aDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pDelIdx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableDelDataFromDelIdx</name><argument_list>(<argument><expr><name>pDelReader</name></expr></argument>, <argument><expr><name>pDelIdx</name></expr></argument>, <argument><expr><name>aDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getTableDelSkyline</name><parameter_list>(<parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pMem</name></decl></parameter>, <parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pIMem</name></decl></parameter>, <parameter><decl><type><name>SDelFReader</name> <modifier>*</modifier></type><name>pDelReader</name></decl></parameter>, <parameter><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>pDelIdx</name></decl></parameter>,
                                  <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aSkyline</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aDelData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>aDelData</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableDelData</name><argument_list>(<argument><expr><name>pMem</name></expr></argument>, <argument><expr><name>pIMem</name></expr></argument>, <argument><expr><name>pDelReader</name></expr></argument>, <argument><expr><name>pDelIdx</name></expr></argument>, <argument><expr><name>aDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>nDelData</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nDelData</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbBuildDeleteSkyline</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>nDelData</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>, <argument><expr><name>aSkyline</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_err</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>aDelData</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<comment type="block">/*
static int32_t getTableDelIdx(SDelFReader *pDelFReader, tb_uid_t suid, tb_uid_t uid, SDelIdx *pDelIdx) {
  int32_t code = 0;
  SArray *pDelIdxArray = NULL;

  // SMapData delIdxMap;
  pDelIdxArray = taosArrayInit(32, sizeof(SDelIdx));
  SDelIdx idx = {.suid = suid, .uid = uid};

  // tMapDataReset(&amp;delIdxMap);
  code = tsdbReadDelIdx(pDelFReader, pDelIdxArray);
  if (code) goto _err;

  // code = tMapDataSearch(&amp;delIdxMap, &amp;idx, tGetDelIdx, tCmprDelIdx, pDelIdx);
  SDelIdx *pIdx = taosArraySearch(pDelIdxArray, &amp;idx, tCmprDelIdx, TD_EQ);

  *pDelIdx = *pIdx;

_err:
  if (pDelIdxArray) {
    taosArrayDestroy(pDelIdxArray);
  }
  return code;
}
*/</comment>
<typedef>typedef <type><enum>enum <block>{
  <decl><name>SFSLASTNEXTROW_FS</name></decl>,
  <decl><name>SFSLASTNEXTROW_FILESET</name></decl>,
  <decl><name>SFSLASTNEXTROW_BLOCKDATA</name></decl>,
  <decl><name>SFSLASTNEXTROW_BLOCKROW</name></decl>
}</block></enum></type> <name>SFSLASTNEXTROWSTATES</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SFSLASTNEXTROWSTATES</name></type> <name>state</name></decl>;</decl_stmt>     <comment type="line">// [input]</comment>
  <decl_stmt><decl><type><name>STsdb</name>               <modifier>*</modifier></type><name>pTsdb</name></decl>;</decl_stmt>     <comment type="line">// [input]</comment>
  <decl_stmt><decl><type><name>STSchema</name>            <modifier>*</modifier></type><name>pTSchema</name></decl>;</decl_stmt>  <comment type="line">// [input]</comment>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>             <name>suid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>             <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>nFileSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>              <name>iFileSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>              <modifier>*</modifier></type><name>aDFileSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataFReader</name>       <modifier>*</modifier><modifier>*</modifier></type><name>pDataFReader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name></type>              <name>row</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMergeTree</name></type>         <name>mergeTree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMergeTree</name>        <modifier>*</modifier></type><name>pMergeTree</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>pLoadInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFSLastNextRowIter</name>;</typedef>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getNextRowFromFSLast</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFSLastNextRowIter</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>SFSLastNextRowIter</name> <operator>*</operator><operator>)</operator><name>iter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SFSLASTNEXTROW_FS</name></expr>:</case>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>nFileSet</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>iFileSet</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>nFileSet</name></name></expr>;</expr_stmt>

    <case>case <expr><name>SFSLASTNEXTROW_FILESET</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pFileSet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <label><name>_next_fileset</name>:</label>
      <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pMergeTree</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tMergeTreeClose</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pMergeTree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>state</name><operator>-&gt;</operator><name>iFileSet</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pFileSet</name> <operator>=</operator> <operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iFileSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><operator>(</operator><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name><operator>)</operator><operator>-&gt;</operator><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></name> <operator>!=</operator> <name><name>pFileSet</name><operator>-&gt;</operator><name>fid</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><call><name>resetLastBlockLoadInfo</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pLoadInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDataFReaderOpen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name>pFileSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <macro><name>tMergeTreeOpen</name><argument_list>(<argument>&amp;state-&gt;mergeTree</argument>, <argument><literal type="number">1</literal></argument>, <argument>*state-&gt;pDataFReader</argument>, <argument>state-&gt;suid</argument>, <argument>state-&gt;uid</argument>,
                     <argument>&amp;(STimeWindow){.skey = TSKEY_MIN</argument>, <argument>.ekey = TSKEY_MAX}</argument>,
                     <argument>&amp;(SVersionRange){.minVer = <literal type="number">0</literal></argument>, <argument>.maxVer = UINT64_MAX}</argument>, <argument>state-&gt;pLoadInfo</argument>, <argument>false</argument>, <argument>NULL</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pMergeTree</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>mergeTree</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>hasVal</name> <init>= <expr><call><name>tMergeTreeNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasVal</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SFSLASTNEXTROW_FILESET</name></expr>;</expr_stmt>
        <goto>goto <name>_next_fileset</name>;</goto>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SFSLASTNEXTROW_BLOCKROW</name></expr>;</expr_stmt>
    </block_content>}</block>
    <case>case <expr><name>SFSLASTNEXTROW_BLOCKROW</name></expr>:</case>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <call><name>tMergeTreeGetRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>bool</name></type> <name>hasVal</name> <init>= <expr><call><name>tMergeTreeNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>mergeTree</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasVal</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SFSLASTNEXTROW_FILESET</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><name>code</name></expr>;</return>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

<label><name>_err</name>:</label>
  <comment type="block">/*if (state-&gt;pDataFReader) {
    tsdbDataFReaderClose(&amp;state-&gt;pDataFReader);
    state-&gt;pDataFReader = NULL;
    }*/</comment>
  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pMergeTree</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tMergeTreeClose</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pMergeTree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>clearNextRowFromFSLast</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFSLastNextRowIter</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>SFSLastNextRowIter</name> <operator>*</operator><operator>)</operator><name>iter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>             <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*
  if (state-&gt;pDataFReader) {
    tsdbDataFReaderClose(&amp;state-&gt;pDataFReader);
    state-&gt;pDataFReader = NULL;
  }
  */</comment>
  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pMergeTree</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tMergeTreeClose</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pMergeTree</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pMergeTree</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <name>SFSNEXTROWSTATES</name> <block>{
  <decl><name>SFSNEXTROW_FS</name></decl>,
  <decl><name>SFSNEXTROW_FILESET</name></decl>,
  <decl><name>SFSNEXTROW_BLOCKDATA</name></decl>,
  <decl><name>SFSNEXTROW_BLOCKROW</name></decl>
}</block></enum></type> <name>SFSNEXTROWSTATES</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SFSNextRowIter</name> <block>{
  <decl_stmt><decl><type><name>SFSNEXTROWSTATES</name></type>   <name>state</name></decl>;</decl_stmt>         <comment type="line">// [input]</comment>
  <decl_stmt><decl><type><name>STsdb</name>             <modifier>*</modifier></type><name>pTsdb</name></decl>;</decl_stmt>         <comment type="line">// [input]</comment>
  <decl_stmt><decl><type><name>SBlockIdx</name>         <modifier>*</modifier></type><name>pBlockIdxExp</name></decl>;</decl_stmt>  <comment type="line">// [input]</comment>
  <decl_stmt><decl><type><name>STSchema</name>          <modifier>*</modifier></type><name>pTSchema</name></decl>;</decl_stmt>      <comment type="line">// [input]</comment>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>           <name>suid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>           <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>nFileSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>iFileSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>            <modifier>*</modifier></type><name>aDFileSet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataFReader</name>     <modifier>*</modifier><modifier>*</modifier></type><name>pDataFReader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>            <modifier>*</modifier></type><name>aBlockIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockIdx</name>         <modifier>*</modifier></type><name>pBlockIdx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMapData</name></type>           <name>blockMap</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>nBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>iBlock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataBlk</name></type>           <name>block</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockData</name></type>         <name>blockData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockData</name>        <modifier>*</modifier></type><name>pBlockData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>nRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>iRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name></type>            <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>pLoadInfo</name></decl>;</decl_stmt>
}</block></struct></type> <name>SFSNextRowIter</name>;</typedef>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getNextRowFromFS</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SFSNextRowIter</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>SFSNextRowIter</name> <operator>*</operator><operator>)</operator><name>iter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>         <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SFSNEXTROW_FS</name></expr>:</case>
      <comment type="line">// state-&gt;aDFileSet = state-&gt;pTsdb-&gt;pFS-&gt;cState-&gt;aDFileSet;</comment>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>nFileSet</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>iFileSet</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>nFileSet</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <case>case <expr><name>SFSNEXTROW_FILESET</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pFileSet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <label><name>_next_fileset</name>:</label>
      <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>state</name><operator>-&gt;</operator><name>iFileSet</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pFileSet</name> <operator>=</operator> <operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iFileSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// tBlockDataDestroy(&amp;state-&gt;blockData, 1);</comment>
        <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></else></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><operator>(</operator><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name><operator>)</operator><operator>-&gt;</operator><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></name> <operator>!=</operator> <name><name>pFileSet</name><operator>-&gt;</operator><name>fid</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <comment type="line">// resetLastBlockLoadInfo(state-&gt;pLoadInfo);</comment>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDataFReaderOpen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name>pFileSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// tMapDataReset(&amp;state-&gt;blockIdxMap);</comment>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadBlockIdx</name><argument_list>(<argument><expr><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

      <comment type="block">/* if (state-&gt;pBlockIdx) { */</comment>
      <comment type="block">/* } */</comment>
      <comment type="block">/* code = tMapDataSearch(&amp;state-&gt;blockIdxMap, state-&gt;pBlockIdxExp, tGetBlockIdx, tCmprBlockIdx,
       * &amp;state-&gt;blockIdx);
       */</comment>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockIdx</name></name> <operator>=</operator> <call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockIdxExp</name></name></expr></argument>, <argument><expr><name>tCmprBlockIdx</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>pBlockIdx</name></name></expr>)</condition> <block>{<block_content> <comment type="block">/*
         tsdbDataFReaderClose(state-&gt;pDataFReader);
         *state-&gt;pDataFReader = NULL;
         resetLastBlockLoadInfo(state-&gt;pLoadInfo);*/</comment>
        <goto>goto <name>_next_fileset</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>tMapDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>blockMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="block">/*
      if (state-&gt;blockMap.pData != NULL) {
        tMapDataClear(&amp;state-&gt;blockMap);
      }
      */</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlk</name><argument_list>(<argument><expr><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>blockMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>nBlock</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>blockMap</name><operator>.</operator><name>nItem</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>iBlock</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>nBlock</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>blockData</name></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>blockData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <case>case <expr><name>SFSNEXTROW_BLOCKDATA</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>iBlock</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SDataBlk</name></type> <name>block</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>tDataBlkReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// tBlockDataReset(&amp;state-&gt;blockData);</comment>
        <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>blockMap</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name>tGetDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* code = tsdbReadBlockData(state-&gt;pDataFReader, &amp;state-&gt;blockIdx, &amp;block, &amp;state-&gt;blockData, NULL, NULL); */</comment>
        <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TABLEID</name></type> <name>tid</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataInit</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlock</name><argument_list>(<argument><expr><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>block</name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>blockData</name><operator>.</operator><name>nRow</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>iRow</name></name> <operator>=</operator> <name><name>state</name><operator>-&gt;</operator><name>nRow</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SFSNEXTROW_BLOCKROW</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    <case>case <expr><name>SFSNEXTROW_BLOCKROW</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>row</name></name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>, <argument><expr><name><name>state</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>row</name></name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>state</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SFSNEXTROW_BLOCKDATA</name></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>state</name><operator>-&gt;</operator><name>iBlock</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>*</operator><name><name>state</name><operator>-&gt;</operator><name>pDataFReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <comment type="line">// resetLastBlockLoadInfo(state-&gt;pLoadInfo);</comment>

            <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SFSNEXTROW_FILESET</name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <return>return <expr><name>code</name></expr>;</return>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

<label><name>_err</name>:</label>
  <comment type="block">/*
  if (*state-&gt;pDataFReader) {
    tsdbDataFReaderClose(state-&gt;pDataFReader);
    *state-&gt;pDataFReader = NULL;
    resetLastBlockLoadInfo(state-&gt;pLoadInfo);
    }*/</comment>
  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>clearNextRowFromFS</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SFSNextRowIter</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>SFSNextRowIter</name> <operator>*</operator><operator>)</operator><name>iter</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>state</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*
  if (state-&gt;pDataFReader) {
    tsdbDataFReaderClose(&amp;state-&gt;pDataFReader);
    state-&gt;pDataFReader = NULL;
    }*/</comment>
  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>aBlockIdx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// tBlockDataDestroy(&amp;state-&gt;blockData, 1);</comment>
    <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>pBlockData</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>blockMap</name><operator>.</operator><name>pData</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tMapDataClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>blockMap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><enum>enum <name>SMEMNEXTROWSTATES</name> <block>{
  <decl><name>SMEMNEXTROW_ENTER</name></decl>,
  <decl><name>SMEMNEXTROW_NEXT</name></decl>,
}</block></enum></type> <name>SMEMNEXTROWSTATES</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SMemNextRowIter</name> <block>{
  <decl_stmt><decl><type><name>SMEMNEXTROWSTATES</name></type> <name>state</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbData</name>          <modifier>*</modifier></type><name>pMem</name></decl>;</decl_stmt>  <comment type="line">// [input]</comment>
  <decl_stmt><decl><type><name>STbDataIter</name></type>       <name>iter</name></decl>;</decl_stmt>  <comment type="line">// mem buffer skip list iterator</comment>
  <comment type="line">// bool              iterOpened;</comment>
  <comment type="line">// TSDBROW          *curRow;</comment>
}</block></struct></type> <name>SMemNextRowIter</name>;</typedef>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>getNextRowFromMem</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMemNextRowIter</name> <modifier>*</modifier></type><name>state</name> <init>= <expr><operator>(</operator><name>SMemNextRowIter</name> <operator>*</operator><operator>)</operator><name>iter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>          <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>SMEMNEXTROW_ENTER</name></expr>:</case> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>state</name><operator>-&gt;</operator><name>pMem</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tsdbTbDataIterOpen</name><argument_list>(<argument><expr><name><name>state</name><operator>-&gt;</operator><name>pMem</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pMemRow</name> <init>= <expr><call><name>tsdbTbDataIterGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>pMemRow</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <name>pMemRow</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>state</name><operator>-&gt;</operator><name>state</name></name> <operator>=</operator> <name>SMEMNEXTROW_NEXT</name></expr>;</expr_stmt>

          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block>
    <case>case <expr><name>SMEMNEXTROW_NEXT</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><call><name>tsdbTbDataIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <call><name>tsdbTbDataIterGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>state</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    <default>default:</default>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>

<label><name>_err</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* static int32_t tsRowFromTsdbRow(STSchema *pTSchema, TSDBROW *pRow, STSRow **ppRow) { */</comment>
<comment type="block">/*   int32_t code = 0; */</comment>

<comment type="block">/*   SColVal *pColVal = &amp;(SColVal){0}; */</comment>

<comment type="block">/*   if (pRow-&gt;type == 0) { */</comment>
<comment type="block">/*     *ppRow = tdRowDup(pRow-&gt;pTSRow); */</comment>
<comment type="block">/*   } else { */</comment>
<comment type="block">/*     SArray *pArray = taosArrayInit(pTSchema-&gt;numOfCols, sizeof(SColVal)); */</comment>
<comment type="block">/*     if (pArray == NULL) { */</comment>
<comment type="block">/*       code = TSDB_CODE_OUT_OF_MEMORY; */</comment>
<comment type="block">/*       goto _exit; */</comment>
<comment type="block">/*     } */</comment>

<comment type="block">/*     TSDBKEY   key = TSDBROW_KEY(pRow); */</comment>
<comment type="block">/*     STColumn *pTColumn = &amp;pTSchema-&gt;columns[0]; */</comment>
<comment type="block">/*     *pColVal = COL_VAL_VALUE(pTColumn-&gt;colId, pTColumn-&gt;type, (SValue){.ts = key.ts}); */</comment>

<comment type="block">/*     if (taosArrayPush(pArray, pColVal) == NULL) { */</comment>
<comment type="block">/*       code = TSDB_CODE_OUT_OF_MEMORY; */</comment>
<comment type="block">/*       goto _exit; */</comment>
<comment type="block">/*     } */</comment>

<comment type="block">/*     for (int16_t iCol = 1; iCol &lt; pTSchema-&gt;numOfCols; iCol++) { */</comment>
<comment type="block">/*       tsdbRowGetColVal(pRow, pTSchema, iCol, pColVal); */</comment>
<comment type="block">/*       if (taosArrayPush(pArray, pColVal) == NULL) { */</comment>
<comment type="block">/*         code = TSDB_CODE_OUT_OF_MEMORY; */</comment>
<comment type="block">/*         goto _exit; */</comment>
<comment type="block">/*       } */</comment>
<comment type="block">/*     } */</comment>

<comment type="block">/*     code = tdSTSRowNew(pArray, pTSchema, ppRow); */</comment>
<comment type="block">/*     if (code) goto _exit; */</comment>
<comment type="block">/*   } */</comment>

<comment type="block">/* _exit: */</comment>
<comment type="block">/*   return code; */</comment>
<comment type="block">/* } */</comment>

<function><type><specifier>static</specifier> <name>bool</name></type> <name>tsdbKeyDeleted</name><parameter_list>(<parameter><decl><type><name>TSDBKEY</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pSkyline</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>iSkyline</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>deleted</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>iSkyline</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBKEY</name> <modifier>*</modifier></type><name>pItemBack</name> <init>= <expr><operator>(</operator><name>TSDBKEY</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pSkyline</name></expr></argument>, <argument><expr><operator>*</operator><name>iSkyline</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSDBKEY</name> <modifier>*</modifier></type><name>pItemFront</name> <init>= <expr><operator>(</operator><name>TSDBKEY</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pSkyline</name></expr></argument>, <argument><expr><operator>*</operator><name>iSkyline</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>pItemBack</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pItemFront</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>ts</name></name> <operator>&lt;=</operator> <name><name>pItemBack</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;=</operator> <name><name>pItemFront</name><operator>-&gt;</operator><name>version</name></name> <operator>||</operator> <operator>(</operator><name><name>key</name><operator>-&gt;</operator><name>ts</name></name> <operator>==</operator> <name><name>pItemBack</name><operator>-&gt;</operator><name>ts</name></name> <operator>&amp;&amp;</operator> <name><name>key</name><operator>-&gt;</operator><name>version</name></name> <operator>&lt;=</operator> <name><name>pItemBack</name><operator>-&gt;</operator><name>version</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>iSkyline</name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>--</operator><operator>*</operator><name>iSkyline</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><name>false</name></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>deleted</name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>_next_row_fn_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name></decl></parameter>)</parameter_list>;</function_decl></typedef>
<typedef>typedef <function_decl><type><name>int32_t</name></type> (<modifier>*</modifier><name>_next_row_clear_fn_t</name>)<parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>iter</name></decl></parameter>)</parameter_list>;</function_decl></typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>TSDBROW</name>             <modifier>*</modifier></type><name>pRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                 <name>stop</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>                 <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>                <modifier>*</modifier></type><name>iter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>_next_row_fn_t</name></type>       <name>nextRowFn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>_next_row_clear_fn_t</name></type> <name>nextRowClearFn</name></decl>;</decl_stmt>
}</block></struct></type> <name>TsdbNextRowState</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pSkyline</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>iSkyline</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockIdx</name></type>          <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemNextRowIter</name></type>    <name>memState</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemNextRowIter</name></type>    <name>imemState</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFSLastNextRowIter</name></type> <name>fsLastState</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SFSNextRowIter</name></type>     <name>fsState</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name></type>            <name>memRow</name></decl>, <name>imemRow</name>, <name>fsLastRow</name>, <name>fsRow</name>;</decl_stmt>

  <decl_stmt><decl><type><name>TsdbNextRowState</name></type> <name><name>input</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name>           <modifier>*</modifier></type><name>pTsdb</name></decl>;</decl_stmt>
}</block></struct></type> <name>CacheNextRowIter</name>;</typedef>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nextRowIterOpen</name><parameter_list>(<parameter><decl><type><name>CacheNextRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>,
                               <parameter><decl><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>pLoadInfo</name></decl></parameter>, <parameter><decl><type><name>STsdbReadSnap</name> <modifier>*</modifier></type><name>pReadSnap</name></decl></parameter>, <parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier><modifier>*</modifier></type><name>pDataFReader</name></decl></parameter>,
                               <parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier><modifier>*</modifier></type><name>pDataFReaderLast</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pMem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReadSnap</name><operator>-&gt;</operator><name>pMem</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pMem</name> <operator>=</operator> <call><name>tsdbGetTbDataFromMemTable</name><argument_list>(<argument><expr><name><name>pReadSnap</name><operator>-&gt;</operator><name>pMem</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pIMem</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pReadSnap</name><operator>-&gt;</operator><name>pIMem</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pIMem</name> <operator>=</operator> <call><name>tsdbGetTbDataFromMemTable</name><argument_list>(<argument><expr><name><name>pReadSnap</name><operator>-&gt;</operator><name>pIMem</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTsdb</name></name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSkyline</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSDBKEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SDelFile</name> <modifier>*</modifier></type><name>pDelFile</name> <init>= <expr><name><name>pReadSnap</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDelFile</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDelFReader</name> <modifier>*</modifier></type><name>pDelFReader</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDelFReaderOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDelFReader</name></expr></argument>, <argument><expr><name>pDelFile</name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pDelIdxArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">32</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDelIdx</name><argument_list>(<argument><expr><name>pDelFReader</name></expr></argument>, <argument><expr><name>pDelIdxArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pDelIdxArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbDelFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDelFReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>delIdx</name> <init>= <macro><name>taosArraySearch</name><argument_list>(<argument>pDelIdxArray</argument>, <argument>&amp;(SDelIdx){.suid = suid</argument>, <argument>.uid = uid}</argument>, <argument>tCmprDelIdx</argument>, <argument>TD_EQ</argument>)</argument_list></macro></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableDelSkyline</name><argument_list>(<argument><expr><name>pMem</name></expr></argument>, <argument><expr><name>pIMem</name></expr></argument>, <argument><expr><name>pDelFReader</name></expr></argument>, <argument><expr><name>delIdx</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSkyline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pDelIdxArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbDelFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDelFReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pDelIdxArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbDelFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDelFReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>getTableDelSkyline</name><argument_list>(<argument><expr><name>pMem</name></expr></argument>, <argument><expr><name>pIMem</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSkyline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSkyline</name></name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSkyline</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>idx</name></name> <operator>=</operator> <operator>(</operator><name>SBlockIdx</name><operator>)</operator><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name>suid</name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>uid</name></expr>}</block></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsLastState</name><operator>.</operator><name>state</name></name> <operator>=</operator> <operator>(</operator><name>SFSLASTNEXTROWSTATES</name><operator>)</operator><name>SFSNEXTROW_FS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsLastState</name><operator>.</operator><name>pTsdb</name></name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsLastState</name><operator>.</operator><name>aDFileSet</name></name> <operator>=</operator> <name><name>pReadSnap</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsLastState</name><operator>.</operator><name>pTSchema</name></name> <operator>=</operator> <name>pTSchema</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsLastState</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsLastState</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsLastState</name><operator>.</operator><name>pLoadInfo</name></name> <operator>=</operator> <name>pLoadInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsLastState</name><operator>.</operator><name>pDataFReader</name></name> <operator>=</operator> <name>pDataFReaderLast</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsState</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>SFSNEXTROW_FS</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsState</name><operator>.</operator><name>pTsdb</name></name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsState</name><operator>.</operator><name>aDFileSet</name></name> <operator>=</operator> <name><name>pReadSnap</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsState</name><operator>.</operator><name>pBlockIdxExp</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>idx</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsState</name><operator>.</operator><name>pTSchema</name></name> <operator>=</operator> <name>pTSchema</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsState</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsState</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsState</name><operator>.</operator><name>pLoadInfo</name></name> <operator>=</operator> <name>pLoadInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>fsState</name><operator>.</operator><name>pDataFReader</name></name> <operator>=</operator> <name>pDataFReader</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>TsdbNextRowState</name><operator>)</operator><block>{<expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>memRow</name></name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>memState</name></name></expr>, <expr><name>getNextRowFromMem</name></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>TsdbNextRowState</name><operator>)</operator><block>{<expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>imemRow</name></name></expr>, <expr><name>true</name></expr>, <expr><name>false</name></expr>, <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>imemState</name></name></expr>, <expr><name>getNextRowFromMem</name></expr>, <expr><name>NULL</name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>TsdbNextRowState</name><operator>)</operator><block>{<expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>fsLastRow</name></name></expr>,     <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>fsLastState</name></name></expr>, <expr><name>getNextRowFromFSLast</name></expr>,
                                       <expr><name>clearNextRowFromFSLast</name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>=</operator>
      <operator>(</operator><name>TsdbNextRowState</name><operator>)</operator><block>{<expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>fsRow</name></name></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>fsState</name></name></expr>, <expr><name>getNextRowFromFS</name></expr>, <expr><name>clearNextRowFromFS</name></expr>}</block></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>pMem</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>memState</name><operator>.</operator><name>pMem</name></name> <operator>=</operator> <name>pMem</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>memState</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>SMEMNEXTROW_ENTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>stop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pIMem</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>imemState</name><operator>.</operator><name>pMem</name></name> <operator>=</operator> <name>pIMem</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>imemState</name><operator>.</operator><name>state</name></name> <operator>=</operator> <name>SMEMNEXTROW_ENTER</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>stop</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nextRowIterClose</name><parameter_list>(<parameter><decl><type><name>CacheNextRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>nextRowClearFn</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>nextRowClearFn</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pSkyline</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSkyline</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// iterate next row non deleted backward ts, version (from high to low)</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>nextRowIterGet</name><parameter_list>(<parameter><decl><type><name>CacheNextRowIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>TSDBROW</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stop</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><call><name>nextRowFn</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stop</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>stop</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>stop</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>stop</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>stop</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// select maxpoint(s) from mem, imem, fs and last</comment>
    <decl_stmt><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name><name>max</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>      <name><name>iMax</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>      <name>nMax</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TSKEY</name></type>    <name>maxKey</name> <init>= <expr><name>TSKEY_MIN</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">4</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stop</name> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>key</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// merging &amp; deduplicating on client side</comment>
        <if_stmt><if>if <condition>(<expr><name>maxKey</name> <operator>&lt;=</operator> <name><name>key</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><name>maxKey</name> <operator>&lt;</operator> <name><name>key</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>nMax</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>maxKey</name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name><name>iMax</name><index>[<expr><name>nMax</name></expr>]</index></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>max</name><index>[<expr><name>nMax</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pRow</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// delete detection</comment>
    <decl_stmt><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name><name>merge</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>      <name><name>iMerge</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>      <name>nMerge</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>nMax</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>maxKey1</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><name><name>max</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>bool</name></type> <name>deleted</name> <init>= <expr><call><name>tsdbKeyDeleted</name><argument_list>(<argument><expr><operator>&amp;</operator><name>maxKey1</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSkyline</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iSkyline</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>deleted</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>iMerge</name><index>[<expr><name>nMerge</name></expr>]</index></name> <operator>=</operator> <name><name>iMax</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>merge</name><index>[<expr><name>nMerge</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name><name>max</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name><name>iMax</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>deleted</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>nMerge</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>input</name><index>[<expr><name><name>iMerge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>]</index></name><operator>.</operator><name>next</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

      <expr_stmt><expr><operator>*</operator><name>ppRow</name> <operator>=</operator> <name><name>merge</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <return>return <expr><name>code</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mergeLastRow</name><parameter_list>(<parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>bool</name> <modifier>*</modifier></type><name>dup</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppColArray</name></decl></parameter>, <parameter><decl><type><name>SCacheRowsReader</name> <modifier>*</modifier></type><name>pr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name> <init>= <expr><name><name>pr</name><operator>-&gt;</operator><name>pSchema</name></name></expr></init></decl>;</decl_stmt>  <comment type="line">// metaGetTbTSchema(pTsdb-&gt;pVnode-&gt;pMeta, uid, -1, 1);</comment>
  <decl_stmt><decl><type><name>int16_t</name></type>   <name>nCol</name> <init>= <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>   <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>   <name>noneCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>setNoneCol</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>   <modifier>*</modifier></type><name>pColArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>nCol</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLastCol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColVal</name>  <modifier>*</modifier></type><name>pColVal</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SColVal</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>lastRowTs</name> <init>= <expr><name>TSKEY_MAX</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>CacheNextRowIter</name></type> <name>iter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nextRowIterOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>pLoadInfo</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>pReadSnap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>,
                  <argument><expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>pDataFReaderLast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>nextRowIterGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRow</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>TSKEY</name></type> <name>rowTs</name> <init>= <expr><call><name>TSDBROW_TS</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>lastRowTs</name> <operator>==</operator> <name>TSKEY_MAX</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastRowTs</name> <operator>=</operator> <name>rowTs</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <macro><name>COL_VAL_VALUE</name><argument_list>(<argument>pTColumn-&gt;colId</argument>, <argument>pTColumn-&gt;type</argument>, <argument>(SValue){.val = lastRowTs}</argument>)</argument_list></macro></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><macro><name>taosArrayPush</name><argument_list>(<argument>pColArray</argument>, <argument>&amp;(SLastCol){.ts = lastRowTs</argument>, <argument>.colVal = *pColVal}</argument>)</argument_list></macro> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <for>for <control>(<init><expr><name>iCol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>tsdbRowGetColVal</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SLastCol</name></type> <name>lastCol</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>lastRowTs</name></expr>, <expr><operator>.</operator><name>colVal</name> <operator>=</operator> <operator>*</operator><name>pColVal</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
            <goto>goto <name>_err</name>;</goto>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastCol</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <goto>goto <name>_err</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>setNoneCol</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>noneCol</name> <operator>=</operator> <name>iCol</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>setNoneCol</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>setNoneCol</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// done, goto return pColArray</comment>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>rowTs</name> <operator>&lt;</operator> <name>lastRowTs</name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">// done, goto return pColArray</comment>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// merge into pColArray</comment>
    <expr_stmt><expr><name>setNoneCol</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>iCol</name> <operator>=</operator> <name>noneCol</name></expr>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
      <comment type="line">// high version's column value</comment>
      <decl_stmt><decl><type><name>SColVal</name> <modifier>*</modifier></type><name>tColVal</name> <init>= <expr><operator>(</operator><name>SColVal</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>tsdbRowGetColVal</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>tColVal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SLastCol</name></type> <name>lastCol</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>rowTs</name></expr>, <expr><operator>.</operator><name>colVal</name> <operator>=</operator> <operator>*</operator><name>pColVal</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>pLastCol</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pLastCol</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
            <goto>goto <name>_err</name>;</goto>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>tColVal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>COL_VAL_IS_NONE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>setNoneCol</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>noneCol</name> <operator>=</operator> <name>iCol</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>setNoneCol</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block> while <condition>(<expr><name>setNoneCol</name></expr>)</condition>;</do>

  <comment type="line">// build the result ts row here</comment>
  <expr_stmt><expr><operator>*</operator><name>dup</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>nCol</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppColArray</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppColArray</name> <operator>=</operator> <name>pColArray</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nextRowIterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// taosMemoryFreeClear(pTSchema);</comment>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>nextRowIterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// taosMemoryFreeClear(pTSchema);</comment>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>mergeLast</name><parameter_list>(<parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppLastArray</name></decl></parameter>, <parameter><decl><type><name>SCacheRowsReader</name> <modifier>*</modifier></type><name>pr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name> <init>= <expr><name><name>pr</name><operator>-&gt;</operator><name>pSchema</name></name></expr></init></decl>;</decl_stmt>  <comment type="line">// metaGetTbTSchema(pTsdb-&gt;pVnode-&gt;pMeta, uid, -1, 1);</comment>
  <decl_stmt><decl><type><name>int16_t</name></type>   <name>nCol</name> <init>= <expr><name><name>pTSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>   <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type>   <name>noneCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>      <name>setNoneCol</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>   <modifier>*</modifier></type><name>pColArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>nCol</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLastCol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SColVal</name>  <modifier>*</modifier></type><name>pColVal</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><name>SColVal</name><operator>)</operator><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSKEY</name></type> <name>lastRowTs</name> <init>= <expr><name>TSKEY_MAX</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>CacheNextRowIter</name></type> <name>iter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>nextRowIterOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>pLoadInfo</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>pReadSnap</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>,
                  <argument><expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>pDataFReaderLast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>nextRowIterGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pRow</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>TSKEY</name></type> <name>rowTs</name> <init>= <expr><call><name>TSDBROW_TS</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>lastRowTs</name> <operator>==</operator> <name>TSKEY_MAX</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastRowTs</name> <operator>=</operator> <name>rowTs</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>STColumn</name> <modifier>*</modifier></type><name>pTColumn</name> <init>= <expr><operator>&amp;</operator><name><name>pTSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><operator>*</operator><name>pColVal</name> <operator>=</operator> <macro><name>COL_VAL_VALUE</name><argument_list>(<argument>pTColumn-&gt;colId</argument>, <argument>pTColumn-&gt;type</argument>, <argument>(SValue){.val = lastRowTs}</argument>)</argument_list></macro></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><macro><name>taosArrayPush</name><argument_list>(<argument>pColArray</argument>, <argument>&amp;(SLastCol){.ts = lastRowTs</argument>, <argument>.colVal = *pColVal}</argument>)</argument_list></macro> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <for>for <control>(<init><expr><name>iCol</name> <operator>=</operator> <literal type="number">1</literal></expr>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>tsdbRowGetColVal</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>SLastCol</name></type> <name>lastCol</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>lastRowTs</name></expr>, <expr><operator>.</operator><name>colVal</name> <operator>=</operator> <operator>*</operator><name>pColVal</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
            <goto>goto <name>_err</name>;</goto>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastCol</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <goto>goto <name>_err</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>setNoneCol</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>noneCol</name> <operator>=</operator> <name>iCol</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>setNoneCol</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>setNoneCol</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// done, goto return pColArray</comment>
        <break>break;</break>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// merge into pColArray</comment>
    <expr_stmt><expr><name>setNoneCol</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <for>for <control>(<init><expr><name>iCol</name> <operator>=</operator> <name>noneCol</name></expr>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
      <comment type="line">// high version's column value</comment>
      <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>lastColVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SColVal</name>  <modifier>*</modifier></type><name>tColVal</name> <init>= <expr><operator>&amp;</operator><name><name>lastColVal</name><operator>-&gt;</operator><name>colVal</name></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><call><name>tsdbRowGetColVal</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>tColVal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SLastCol</name></type> <name>lastCol</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>rowTs</name></expr>, <expr><operator>.</operator><name>colVal</name> <operator>=</operator> <operator>*</operator><name>pColVal</name></expr>}</block></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>pLastCol</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pLastCol</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
            <goto>goto <name>_err</name>;</goto>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>lastCol</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lastCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>tColVal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>pColVal</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><name>setNoneCol</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>noneCol</name> <operator>=</operator> <name>iCol</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>setNoneCol</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block> while <condition>(<expr><name>setNoneCol</name></expr>)</condition>;</do>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppLastArray</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppLastArray</name> <operator>=</operator> <name>pColArray</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>nextRowIterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// taosMemoryFreeClear(pTSchema);</comment>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>nextRowIterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name>iter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// taosMemoryFreeClear(pTSchema);</comment>
  <expr_stmt><expr><operator>*</operator><name>ppLastArray</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCacheGetLastrowH</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SCacheRowsReader</name> <modifier>*</modifier></type><name>pr</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">//  getTableCacheKeyS(uid, "lr", key, &amp;keyLen);</comment>
  <expr_stmt><expr><call><name>getTableCacheKey</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name><name>pr</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>lruMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>bool</name></type>    <name>dup</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>  <comment type="line">// which is always false for now</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mergeLastRow</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dup</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pArray</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// if table's empty or error, return code of -1</comment>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>dup</name> <operator>&amp;&amp;</operator> <name>pArray</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>lruMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>size_t</name></type>              <name>charge</name> <init>= <expr><name><name>pArray</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <name><name>pArray</name><operator>-&gt;</operator><name>elemSize</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pArray</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>_taos_lru_deleter_t</name></type> <name>deleter</name> <init>= <expr><name>deleteTableCacheLast</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>LRUStatus</name></type> <name>status</name> <init>= <expr><call><name>taosLRUCacheInsert</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>pArray</name></expr></argument>, <argument><expr><name>charge</name></expr></argument>, <argument><expr><name>deleter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>TAOS_LRU_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TAOS_LRU_STATUS_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// taosThreadMutexUnlock(&amp;pTsdb-&gt;lruMutex);</comment>

      <comment type="line">// h = taosLRUCacheLookup(pCache, key, keyLen);</comment>
    </block_content>}</block></if></if_stmt>  <comment type="line">// else {</comment>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>lruMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//}</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCacheLastArray2Row</name><parameter_list>(<parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pLastArray</name></decl></parameter>, <parameter><decl><type><name>STSRow</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppRow</name></decl></parameter>, <parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name></type> <name>nCol</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pLastArray</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pColArray</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>nCol</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SColVal</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int16_t</name></type> <name>iCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iCol</name> <operator>&lt;</operator> <name>nCol</name></expr>;</condition> <incr><expr><operator>++</operator><name>iCol</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLastCol</name> <modifier>*</modifier></type><name>tTsVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLastArray</name></expr></argument>, <argument><expr><name>iCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SColVal</name>  <modifier>*</modifier></type><name>tColVal</name> <init>= <expr><operator>&amp;</operator><name><name>tTsVal</name><operator>-&gt;</operator><name>colVal</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>, <argument><expr><name>tColVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tdSTSRowNew</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name>ppRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name>pColArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCacheGetLastH</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SCacheRowsReader</name> <modifier>*</modifier></type><name>pr</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name> <modifier>*</modifier><modifier>*</modifier></type><name>handle</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>keyLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// getTableCacheKeyS(uid, "l", key, &amp;keyLen);</comment>
  <expr_stmt><expr><call><name>getTableCacheKey</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>h</name> <init>= <expr><call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name><name>pr</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>lruMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>h</name> <operator>=</operator> <call><name>taosLRUCacheLookup</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>h</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pLastArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>mergeLast</name><argument_list>(<argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pLastArray</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// if table's empty or error, return code of -1</comment>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>pLastArray</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>lruMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>size_t</name></type>              <name>charge</name> <init>= <expr><name><name>pLastArray</name><operator>-&gt;</operator><name>capacity</name></name> <operator>*</operator> <name><name>pLastArray</name><operator>-&gt;</operator><name>elemSize</name></name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pLastArray</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>_taos_lru_deleter_t</name></type> <name>deleter</name> <init>= <expr><name>deleteTableCacheLast</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>LRUStatus</name></type>           <name>status</name> <init>=
          <expr><call><name>taosLRUCacheInsert</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>, <argument><expr><name>pLastArray</name></expr></argument>, <argument><expr><name>charge</name></expr></argument>, <argument><expr><name>deleter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>, <argument><expr><name>TAOS_LRU_PRIORITY_LOW</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <name>TAOS_LRU_STATUS_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// taosThreadMutexUnlock(&amp;pTsdb-&gt;lruMutex);</comment>

      <comment type="line">// h = taosLRUCacheLookup(pCache, key, keyLen);</comment>
    </block_content>}</block></if></if_stmt>  <comment type="line">// else {</comment>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>lruMutex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//}</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>handle</name> <operator>=</operator> <name>h</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCacheRelease</name><parameter_list>(<parameter><decl><type><name>SLRUCache</name> <modifier>*</modifier></type><name>pCache</name></decl></parameter>, <parameter><decl><type><name>LRUHandle</name> <modifier>*</modifier></type><name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosLRUCacheRelease</name><argument_list>(<argument><expr><name>pCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbCacheSetCapacity</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>capacity</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosLRUCacheSetCapacity</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>lruCache</name></name></expr></argument>, <argument><expr><name>capacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>size_t</name></type> <name>tsdbCacheGetCapacity</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>taosLRUCacheGetCapacity</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>lruCache</name></name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<function><type><name>size_t</name></type> <name>tsdbCacheGetUsage</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>usage</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>usage</name> <operator>=</operator> <call><name>taosLRUCacheGetUsage</name><argument_list>(<argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>lruCache</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>usage</name></expr>;</return>
</block_content>}</block></function>
</unit>
