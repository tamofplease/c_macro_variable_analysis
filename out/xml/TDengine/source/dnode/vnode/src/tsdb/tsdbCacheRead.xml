<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbCacheRead.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tarray.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HASTYPE</name><parameter_list>(<parameter><type><name>_type</name></type></parameter>, <parameter><type><name>_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((_type) &amp; (_t)) == (_t))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type> <name>saveOneRow</name><parameter_list>(<parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pRow</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SCacheRowsReader</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>slotIds</name></decl></parameter>,
                       <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>&lt;=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>HASTYPE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>CACHESCAN_RETRIEVE_LAST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>allNullRow</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><operator>(</operator><name>SFirstLastRes</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pRes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>slotIds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// the primary timestamp</comment>
        <decl_stmt><decl><type><name>SLastCol</name><modifier>*</modifier></type> <name>pColVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name>TSDB_KEYSIZE</name></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>p</name><operator>-&gt;</operator><name>buf</name></name> <operator>=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>allNullRow</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type>   <name>slotId</name> <init>= <expr><name><name>slotIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SLastCol</name><modifier>*</modifier></type> <name>pColVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <operator>!</operator><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>allNullRow</name> <operator>=</operator> <name><name>p</name><operator>-&gt;</operator><name>isNull</name></name> <operator>&amp;</operator> <name>allNullRow</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>p</name><operator>-&gt;</operator><name>isNull</name></name></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr>;</expr_stmt>  <comment type="line">// binary needs to plus the header size</comment>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>buf</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>slotId</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>slotId</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>

      <comment type="line">// pColInfoData-&gt;info.bytes includes the VARSTR_HEADER_SIZE, need to substruct it</comment>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>hasResult</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>pRes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pColInfoData</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>bytes</name></name> <operator>-</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>pRes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <ternary><condition><expr><name>allNullRow</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>HASTYPE</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>CACHESCAN_RETRIEVE_LAST_ROW</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SColumnInfoData</name><modifier>*</modifier></type> <name>pColInfoData</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>pDataBlock</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>slotIds</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>SLastCol</name><modifier>*</modifier></type> <name>pColVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type>   <name>slotId</name> <init>= <expr><name><name>slotIds</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SLastCol</name><modifier>*</modifier></type> <name>pColVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>SColVal</name><modifier>*</modifier></type>  <name>pVal</name> <init>= <expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name></name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>colDataAppendNULL</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>varDataSetLen</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>transferBuf</name><index>[<expr><name>slotId</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>transferBuf</name><index>[<expr><name>slotId</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>transferBuf</name><index>[<expr><name>slotId</name></expr>]</index></name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>colDataAppend</name><argument_list>(<argument><expr><name>pColInfoData</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pVal</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>val</name></name></expr></argument>, <argument><expr><operator>!</operator><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCacherowsReaderOpen</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pVnode</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pTableIdList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfTables</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>,
                                <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>pReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SCacheRowsReader</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SCacheRowsReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pVnode</name></name> <operator>=</operator> <name>pVnode</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>numOfCols</name></name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>numOfTables</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pReader</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pKeyInfo</name> <init>= <expr><operator>&amp;</operator><operator>(</operator><operator>(</operator><name>STableKeyInfo</name><operator>*</operator><operator>)</operator><name>pTableIdList</name><operator>)</operator><index>[<expr><literal type="number">0</literal></expr>]</index></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>=</operator> <call><name>metaGetTbTSchema</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>pKeyInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pTableList</name></name> <operator>=</operator> <name>pTableIdList</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>numOfTables</name></name> <operator>=</operator> <name>numOfTables</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>transferBuf</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>transferBuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbCacherowsReaderClose</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>transferBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>transferBuf</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tsdbCacherowsReaderClose</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>pLoadInfo</name></name> <operator>=</operator> <call><name>tCreateLastBlockLoadInfo</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pLoadInfo</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbCacherowsReaderClose</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>pReader</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  <return>return <expr><name>TSDB_CODE_SUCCESS</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>tsdbCacherowsReaderClose</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SCacheRowsReader</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>pReader</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>p</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>transferBuf</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>transferBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>destroyLastBlockLoadInfo</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>pLoadInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>doExtractCacheRow</name><parameter_list>(<parameter><decl><type><name>SCacheRowsReader</name><modifier>*</modifier></type> <name>pr</name></decl></parameter>, <parameter><decl><type><name>SLRUCache</name><modifier>*</modifier></type> <name>lruCache</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRow</name></decl></parameter>,
                                 <parameter><decl><type><name>LRUHandle</name><modifier>*</modifier><modifier>*</modifier></type> <name>h</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>pRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>HASTYPE</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>CACHESCAN_RETRIEVE_LAST_ROW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCacheGetLastrowH</name><argument_list>(<argument><expr><name>lruCache</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCacheGetLastH</name><argument_list>(<argument><expr><name>lruCache</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>code</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// no data in the table of Uid</comment>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>h</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>pRow</name> <operator>=</operator> <operator>(</operator><name>SArray</name><operator>*</operator><operator>)</operator><call><name>taosLRUCacheValue</name><argument_list>(<argument><expr><name>lruCache</name></expr></argument>, <argument><expr><operator>*</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>freeItem</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pItem</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLastCol</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SLastCol</name><operator>*</operator><operator>)</operator><name>pItem</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbRetrieveCacheRows</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>pReader</name></decl></parameter>, <parameter><decl><type><name>SSDataBlock</name><modifier>*</modifier></type> <name>pResBlock</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int32_t</name><modifier>*</modifier></type> <name>slotIds</name></decl></parameter>, <parameter><decl><type><name>SArray</name><modifier>*</modifier></type> <name>pTableUidList</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>pResBlock</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_INVALID_PARA</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SCacheRowsReader</name><modifier>*</modifier></type> <name>pr</name> <init>= <expr><name>pReader</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLRUCache</name><modifier>*</modifier></type> <name>lruCache</name> <init>= <expr><name><name>pr</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>lruCache</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>LRUHandle</name><modifier>*</modifier></type> <name>h</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>    <name>pRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>       <name>hasRes</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name><modifier>*</modifier></type>    <name>pLastCols</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name><modifier>*</modifier><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRes</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pr</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pRes</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SFirstLastRes</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <name><name>pr</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name><name>slotIds</name><index>[<expr><name>j</name></expr>]</index></name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>+</operator> <name>VARSTR_HEADER_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>SFirstLastRes</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>SFirstLastRes</name><operator>*</operator><operator>)</operator><call><name>varDataVal</name><argument_list>(<argument><expr><name><name>pRes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name>INT64_MIN</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>pLastCols</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLastCol</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLastCols</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_end</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pr</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>STColumn</name></name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>pSchema</name><operator>-&gt;</operator><name>columns</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SLastCol</name></type>         <name>p</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>INT64_MIN</name></expr>, <expr><operator>.</operator><name><name>colVal</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>p</name><operator>.</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pCol</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pLastCols</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tsdbTakeReadSnap</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>pReadSnap</name></name></expr></argument>, <argument><expr><literal type="string">"cache-l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>pDataFReader</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>pDataFReaderLast</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// retrieve the only one last row of all tables in the uid list.</comment>
  <if_stmt><if>if <condition>(<expr><call><name>HASTYPE</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>CACHESCAN_RETRIEVE_TYPE_SINGLE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pr</name><operator>-&gt;</operator><name>numOfTables</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pKeyInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>pTableList</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doExtractCacheRow</name><argument_list>(<argument><expr><name>pr</name></expr></argument>, <argument><expr><name>lruCache</name></expr></argument>, <argument><expr><name><name>pKeyInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>pr</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>k</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>int32_t</name></type> <name>slotId</name> <init>= <expr><name><name>slotIds</name><index>[<expr><name>k</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

          <if_stmt><if>if <condition>(<expr><name>slotId</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// the primary timestamp</comment>
            <decl_stmt><decl><type><name>SLastCol</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLastCols</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SLastCol</name><modifier>*</modifier></type> <name>pCol</name> <init>= <expr><operator>(</operator><name>SLastCol</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>pCol</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
              <expr_stmt><expr><name>hasRes</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name><name>pCol</name><operator>-&gt;</operator><name>colVal</name></name></expr>;</expr_stmt>

              <comment type="line">// only set value for last row query</comment>
              <if_stmt><if>if <condition>(<expr><call><name>HASTYPE</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>CACHESCAN_RETRIEVE_LAST_ROW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>pTableUidList</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTableUidList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pKeyInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                  <expr_stmt><expr><call><name>taosArraySet</name><argument_list>(<argument><expr><name>pTableUidList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pKeyInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
              </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>SLastCol</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pLastCols</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>SLastCol</name><modifier>*</modifier></type> <name>pColVal</name> <init>= <expr><operator>(</operator><name>SLastCol</name><operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>slotId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>pColVal</name><operator>-&gt;</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>p</name><operator>-&gt;</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
              <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>HASTYPE</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>CACHESCAN_RETRIEVE_LAST</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <continue>continue;</continue>
              </block_content>}</block></if></if_stmt>

              <expr_stmt><expr><name>hasRes</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>

              <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>colVal</name></name> <operator>=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name></name></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>COL_VAL_IS_VALUE</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>pData</name></name></expr></argument>, <argument><expr><name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name> <operator>=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>value</name><operator>.</operator><name>nData</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>flag</name></name> <operator>=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>flag</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>cid</name></name> <operator>=</operator> <name><name>pColVal</name><operator>-&gt;</operator><name>colVal</name><operator>.</operator><name>cid</name></name></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block>

      <expr_stmt><expr><call><name>tsdbCacheRelease</name><argument_list>(<argument><expr><name>lruCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>hasRes</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>saveOneRow</name><argument_list>(<argument><expr><name>pLastCols</name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>slotIds</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>HASTYPE</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>CACHESCAN_RETRIEVE_TYPE_ALL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pr</name><operator>-&gt;</operator><name>tableIndex</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pr</name><operator>-&gt;</operator><name>numOfTables</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>STableKeyInfo</name><modifier>*</modifier></type> <name>pKeyInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>pTableList</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>doExtractCacheRow</name><argument_list>(<argument><expr><name>pr</name></expr></argument>, <argument><expr><name>lruCache</name></expr></argument>, <argument><expr><name><name>pKeyInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>code</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>h</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>saveOneRow</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>pResBlock</name></expr></argument>, <argument><expr><name>pr</name></expr></argument>, <argument><expr><name>slotIds</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// TODO reset the pRes</comment>

      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTableUidList</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pKeyInfo</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbCacheRelease</name><argument_list>(<argument><expr><name>lruCache</name></expr></argument>, <argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pr</name><operator>-&gt;</operator><name>tableIndex</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>rows</name></name> <operator>&gt;=</operator> <name><name>pResBlock</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_end</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_PARA</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_end</name>:</label>
  <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>pDataFReaderLast</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pr</name><operator>-&gt;</operator><name>pDataFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbUntakeReadSnap</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name><name>pr</name><operator>-&gt;</operator><name>pReadSnap</name></name></expr></argument>, <argument><expr><literal type="string">"cache-l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>resetLastBlockLoadInfo</name><argument_list>(<argument><expr><name><name>pr</name><operator>-&gt;</operator><name>pLoadInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>pr</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pRes</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroyEx</name><argument_list>(<argument><expr><name>pLastCols</name></expr></argument>, <argument><expr><name>freeItem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
