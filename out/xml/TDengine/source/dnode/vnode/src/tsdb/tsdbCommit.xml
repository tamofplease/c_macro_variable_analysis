<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbCommit.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<typedef>typedef <type><enum>enum <block>{ <decl><name>MEMORY_DATA_ITER</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><name>STT_DATA_ITER</name></decl> }</block></enum></type> <name>EDataIterT</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_STREAM_COMPRESSION</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>SRBTreeNode</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRowInfo</name></type>    <name>r</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>EDataIterT</name></type>  <name>type</name></decl>;</decl_stmt>
  <union>union <block>{
    <struct>struct <block>{
      <decl_stmt><decl><type><name>int32_t</name></type>     <name>iTbDataP</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>STbDataIter</name></type> <name>iter</name></decl>;</decl_stmt>
    }</block>;</struct>  <comment type="line">// memory data iter</comment>
    <struct>struct <block>{
      <decl_stmt><decl><type><name>int32_t</name></type>    <name>iStt</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SArray</name>    <modifier>*</modifier></type><name>aSttBlk</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>    <name>iSttBlk</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SBlockData</name></type> <name>bData</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>    <name>iRow</name></decl>;</decl_stmt>
    }</block>;</struct>  <comment type="line">// stt file data iter</comment>
  }</block>;</union>
}</block></struct></type> <name>SDataIter</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl>;</decl_stmt>
  <comment type="block">/* commit data */</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>commitID</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>minutes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>precision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>minRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>maxRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>cmprAlg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>  <name>sttTrigger</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aTbDataP</name></decl>;</decl_stmt>  <comment type="line">// memory</comment>
  <decl_stmt><decl><type><name>STsdbFS</name></type> <name>fs</name></decl>;</decl_stmt>        <comment type="line">// disk</comment>
  <comment type="line">// --------------</comment>
  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>nextKey</name></decl>;</decl_stmt>  <comment type="line">// reset by each table commit</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>commitFid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>expLevel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>minKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSKEY</name></type>   <name>maxKey</name></decl>;</decl_stmt>
  <comment type="line">// commit file data</comment>
  <struct>struct <block>{
    <decl_stmt><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name>       <modifier>*</modifier></type><name>aBlockIdx</name></decl>;</decl_stmt>  <comment type="line">// SArray&lt;SBlockIdx&gt;</comment>
    <decl_stmt><decl><type><name>int32_t</name></type>       <name>iBlockIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SBlockIdx</name>    <modifier>*</modifier></type><name>pBlockIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMapData</name></type>      <name>mBlock</name></decl>;</decl_stmt>  <comment type="line">// SMapData&lt;SDataBlk&gt;</comment>
    <decl_stmt><decl><type><name>SBlockData</name></type>    <name>bData</name></decl>;</decl_stmt>
  }</block> <decl><name>dReader</name></decl>;</struct>
  <struct>struct <block>{
    <decl_stmt><decl><type><name>SDataIter</name> <modifier>*</modifier></type><name>pIter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRBTree</name></type>    <name>rbt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDataIter</name></type>  <name>dataIter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDataIter</name></type>  <name><name>aDataIter</name><index>[<expr><name>TSDB_MAX_STT_TRIGGER</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type>     <name>toLastOnly</name></decl>;</decl_stmt>
  }</block>;</struct>
  <struct>struct <block>{
    <decl_stmt><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SArray</name>       <modifier>*</modifier></type><name>aBlockIdx</name></decl>;</decl_stmt>  <comment type="line">// SArray&lt;SBlockIdx&gt;</comment>
    <decl_stmt><decl><type><name>SArray</name>       <modifier>*</modifier></type><name>aSttBlk</name></decl>;</decl_stmt>    <comment type="line">// SArray&lt;SSttBlk&gt;</comment>
    <decl_stmt><decl><type><name>SMapData</name></type>      <name>mBlock</name></decl>;</decl_stmt>     <comment type="line">// SMapData&lt;SDataBlk&gt;</comment>
    <decl_stmt><decl><type><name>SBlockData</name></type>    <name>bData</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_STREAM_COMPRESSION</name></expr></cpp:if>
    <decl_stmt><decl><type><name>SDiskDataBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl>;</decl_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <decl_stmt><decl><type><name>SBlockData</name></type> <name>bDatal</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block> <decl><name>dWriter</name></decl>;</struct>
  <decl_stmt><decl><type><name>SSkmInfo</name></type> <name>skmTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSkmInfo</name></type> <name>skmRow</name></decl>;</decl_stmt>
  <comment type="block">/* commit del */</comment>
  <decl_stmt><decl><type><name>SDelFReader</name> <modifier>*</modifier></type><name>pDelFReader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelFWriter</name> <modifier>*</modifier></type><name>pDelFWriter</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SArray</name>      <modifier>*</modifier></type><name>aDelIdx</name></decl>;</decl_stmt>   <comment type="line">// SArray&lt;SDelIdx&gt;</comment>
  <decl_stmt><decl><type><name>SArray</name>      <modifier>*</modifier></type><name>aDelIdxN</name></decl>;</decl_stmt>  <comment type="line">// SArray&lt;SDelIdx&gt;</comment>
  <decl_stmt><decl><type><name>SArray</name>      <modifier>*</modifier></type><name>aDelData</name></decl>;</decl_stmt>  <comment type="line">// SArray&lt;SDelData&gt;</comment>
}</block></struct></type> <name>SCommitter</name>;</typedef>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbStartCommit</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>SCommitInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitData</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitDel</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitCache</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbEndCommit</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbNextCommitRow</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>tRowInfoCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRowInfo</name> <modifier>*</modifier></type><name>pInfo1</name> <init>= <expr><operator>(</operator><name>SRowInfo</name> <operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRowInfo</name> <modifier>*</modifier></type><name>pInfo2</name> <init>= <expr><operator>(</operator><name>SRowInfo</name> <operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo1</name><operator>-&gt;</operator><name>suid</name></name> <operator>&lt;</operator> <name><name>pInfo2</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo1</name><operator>-&gt;</operator><name>suid</name></name> <operator>&gt;</operator> <name><name>pInfo2</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>pInfo2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pInfo1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>pInfo2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>tsdbRowCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo1</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pInfo2</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbBegin</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTsdb</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbMemTableCreate</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pMemTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// lock</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name>pMemTable</name></expr>;</expr_stmt>

  <comment type="line">// unlock</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbPrepareCommit</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>mem</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>mem</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbCommit</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SCommitInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pTsdb</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCommitter</name></type> <name>commith</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// check</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nRow</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>pMemTable</name><operator>-&gt;</operator><name>nDel</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tsdbUnrefMemTable</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// start commit</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbStartCommit</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>commith</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// commit impl</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commith</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitDel</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commith</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// end commit</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbEndCommit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commith</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbEndCommit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>commith</name></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitDelStart</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name>     <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelIdx</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelData</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelIdxN</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDelFile</name> <modifier>*</modifier></type><name>pDelFileR</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDelFileR</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDelFReaderOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name>pDelFileR</name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDelIdx</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// prepare new</comment>
  <decl_stmt><decl><type><name>SDelFile</name></type> <name>wDelFile</name> <init>= <expr><block>{<expr><operator>.</operator><name>commitID</name> <operator>=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>commitID</name></name></expr>, <expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>, <expr><operator>.</operator><name>offset</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDelFWriterOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>pDelFWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wDelFile</name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, commit del start"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitTableDel</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl></parameter>, <parameter><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>pDelIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelData</name> <modifier>*</modifier></type><name>pDelData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>  <name>suid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>  <name>uid</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTbData</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>suid</name> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTbData</name><operator>-&gt;</operator><name>pHead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pTbData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pDelIdx</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>suid</name> <operator>=</operator> <name><name>pDelIdx</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>uid</name> <operator>=</operator> <name><name>pDelIdx</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDelData</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>, <argument><expr><name>pDelIdx</name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pTbData</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pDelIdx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SDelIdx</name></type> <name>delIdx</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name>suid</name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name>uid</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// memory</comment>
  <expr_stmt><expr><name>pDelData</name> <operator>=</operator> <ternary><condition><expr><name>pTbData</name></expr> ?</condition><then> <expr><name><name>pTbData</name><operator>-&gt;</operator><name>pHead</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name>pDelData</name></expr>;</condition> <incr><expr><name>pDelData</name> <operator>=</operator> <name><name>pDelData</name><operator>-&gt;</operator><name>pNext</name></name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>, <argument><expr><name>pDelData</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// write</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDelData</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pDelFWriter</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// put delIdx</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelIdxN</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitDelEnd</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name>  <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDelIdx</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pDelFWriter</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelIdxN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbUpdateDelFileHdr</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pDelFWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSUpsertDelFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>pDelFWriter</name><operator>-&gt;</operator><name>fDel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDelFWriterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>pDelFWriter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDelFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>pDelFReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelIdxN</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbUpdateTableSchema</name><parameter_list>(<parameter><decl><type><name>SMeta</name> <modifier>*</modifier></type><name>pMeta</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>SSkmInfo</name> <modifier>*</modifier></type><name>pSkmInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>suid</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSkmInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pSkmInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSkmInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name>uid</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pSkmInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSkmInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDestroyTSchema</name><argument_list>(<argument><expr><name><name>pSkmInfo</name><operator>-&gt;</operator><name>pTSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTbTSchemaEx</name><argument_list>(<argument><expr><name>pMeta</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSkmInfo</name><operator>-&gt;</operator><name>pTSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitterUpdateRowSchema</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>sver</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>pTSchema</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>suid</name></name> <operator>==</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>suid</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name>uid</name> <operator>&amp;&amp;</operator> <name>sver</name> <operator>==</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>sver</name> <operator>==</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>pTSchema</name><operator>-&gt;</operator><name>version</name></name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDestroyTSchema</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>pTSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetTbTSchemaEx</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>sver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>pTSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitterNextTableData</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iBlockIdx</name></name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iBlockIdx</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name> <operator>=</operator>
        <operator>(</operator><name>SBlockIdx</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlk</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name><operator>.</operator><name>nItem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tDataIterCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRBTreeNode</name> <modifier>*</modifier></type><name>n1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRBTreeNode</name> <modifier>*</modifier></type><name>n2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SDataIter</name> <modifier>*</modifier></type><name>pIter1</name> <init>= <expr><operator>(</operator><name>SDataIter</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>n1</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>SDataIter</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataIter</name> <modifier>*</modifier></type><name>pIter2</name> <init>= <expr><operator>(</operator><name>SDataIter</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>n2</name> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>SDataIter</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

  <return>return <expr><call><name>tRowInfoCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter1</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter2</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbOpenCommitIter</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tRBTreeCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><name>tDataIterCmprFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// memory</comment>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>    <name>tKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>minKey</name></name></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>VERSION_MIN</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dataIter</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>MEMORY_DATA_ITER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTbDataP</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init>;</init> <condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTbDataP</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTbDataP</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name> <init>= <expr><operator>(</operator><name>STbData</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTbDataP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tsdbTbDataIterOpen</name><argument_list>(<argument><expr><name>pTbData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tKey</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><call><name>tsdbTbDataIterGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>&amp;&amp;</operator> <call><name>TSDBROW_TS</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>maxKey</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>nextKey</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>nextKey</name></name></expr></argument>, <argument><expr><call><name>TSDBROW_TS</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>row</name></name> <operator>=</operator> <operator>*</operator><name>pRow</name></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTbDataP</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tRBTreePut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// disk</comment>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>toLastOnly</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReader</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pReader</name><operator>-&gt;</operator><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>&gt;=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>sttTrigger</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int8_t</name></type> <name>iIter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>pIter</name> <operator>=</operator> <operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>aDataIter</name><index>[<expr><name>iIter</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>STT_DATA_ITER</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iStt</name></name> <operator>=</operator> <name>iStt</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadSttBlk</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><name>iStt</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SSttBlk</name> <modifier>*</modifier></type><name>pSttBlk</name> <init>= <expr><operator>(</operator><name>SSttBlk</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadSttBlockEx</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><name>iStt</name></expr></argument>, <argument><expr><name>pSttBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name></expr> ?</condition><then> <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name></expr> </then><else>: <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>aUid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>row</name></name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>tRBTreePut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>iIter</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pReader</name><operator>-&gt;</operator><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSttFile</name> <modifier>*</modifier></type><name>pSttFile</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pSttFile</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <name><name>pSttFile</name><operator>-&gt;</operator><name>offset</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>toLastOnly</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbNextCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitFileDataStart</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name>     <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pRSet</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// memory</comment>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>commitFid</name></name> <operator>=</operator> <call><name>tsdbKeyFid</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>nextKey</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>minutes</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>expLevel</name></name> <operator>=</operator> <call><name>tsdbFidLevel</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>commitFid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name></name></expr></argument>, <argument><expr><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbFidKeyRange</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>commitFid</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>minutes</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>precision</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>minKey</name></name></expr></argument>,
                  <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>maxKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  ASSERT(pCommitter-&gt;minKey &lt;= pCommitter-&gt;nextKey &amp;&amp; pCommitter-&gt;maxKey &gt;= pCommitter-&gt;nextKey);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>nextKey</name></name> <operator>=</operator> <name>TSKEY_MAX</name></expr>;</expr_stmt>

  <comment type="line">// Reader</comment>
  <decl_stmt><decl><type><name>SDFileSet</name></type> <name>tDFileSet</name> <init>= <expr><block>{<expr><operator>.</operator><name>fid</name> <operator>=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>commitFid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pRSet</name> <operator>=</operator> <operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><call><name>taosArraySearch</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tDFileSet</name></expr></argument>, <argument><expr><name>tDFileSetCmprFn</name></expr></argument>, <argument><expr><name>TD_EQ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRSet</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDataFReaderOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>pRSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// data</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadBlockIdx</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>iBlockIdx</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name> <operator>=</operator> <operator>(</operator><name>SBlockIdx</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlk</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// Writer</comment>
  <decl_stmt><decl><type><name>SHeadFile</name></type> <name>fHead</name> <init>= <expr><block>{<expr><operator>.</operator><name>commitID</name> <operator>=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>commitID</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataFile</name></type> <name>fData</name> <init>= <expr><block>{<expr><operator>.</operator><name>commitID</name> <operator>=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>commitID</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaFile</name></type>  <name>fSma</name> <init>= <expr><block>{<expr><operator>.</operator><name>commitID</name> <operator>=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>commitID</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttFile</name></type>  <name>fStt</name> <init>= <expr><block>{<expr><operator>.</operator><name>commitID</name> <operator>=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>commitID</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDFileSet</name></type> <name>wSet</name> <init>= <expr><block>{<expr><operator>.</operator><name>fid</name> <operator>=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>commitFid</name></name></expr>, <expr><operator>.</operator><name>pHeadF</name> <operator>=</operator> <operator>&amp;</operator><name>fHead</name></expr>, <expr><operator>.</operator><name>pDataF</name> <operator>=</operator> <operator>&amp;</operator><name>fData</name></expr>, <expr><operator>.</operator><name>pSmaF</name> <operator>=</operator> <operator>&amp;</operator><name>fSma</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRSet</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>&lt;=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>sttTrigger</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>fData</name> <operator>=</operator> <operator>*</operator><name><name>pRSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>fSma</name> <operator>=</operator> <operator>*</operator><name><name>pRSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>diskId</name></name> <operator>=</operator> <name><name>pRSet</name><operator>-&gt;</operator><name>diskId</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pRSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>&lt;</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>sttTrigger</name></name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pRSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <name><name>pRSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>=</operator> <name><name>pRSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SDiskID</name></type> <name>did</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>tfsAllocDisk</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>expLevel</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>did</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>terrno</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tfsMkdirRecurAt</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>did</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>diskId</name></name> <operator>=</operator> <name>did</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>wSet</name><operator>.</operator><name>aSttF</name><index>[<expr><name><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name>fStt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDataFWriterOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>wSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMapDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_STREAM_COMPRESSION</name></expr></cpp:if>
  <expr_stmt><expr><call><name>tDiskDataBuilderClear</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pBuilder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bDatal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// open iter</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbOpenCommitIter</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbWriteDataBlock</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>mDataBlk</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmprAlg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SDataBlk</name></type> <name>dataBlk</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tDataBlkReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// info</comment>
  <expr_stmt><expr><name><name>dataBlk</name><operator>.</operator><name>nRow</name></name> <operator>+=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iRow</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name>iRow</name></expr>]</index></name></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name><index>[<expr><name>iRow</name></expr>]</index></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>iRow</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dataBlk</name><operator>.</operator><name>minKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dataBlk</name><operator>.</operator><name>minKey</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name>iRow</name></expr>]</index></name> <operator>==</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name>iRow</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>dataBlk</name><operator>.</operator><name>hasDup</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>iRow</name> <operator>==</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>dataBlk</name><operator>.</operator><name>maxKey</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>dataBlk</name><operator>.</operator><name>maxKey</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>dataBlk</name><operator>.</operator><name>minVer</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>dataBlk</name><operator>.</operator><name>minVer</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>dataBlk</name><operator>.</operator><name>maxVer</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>dataBlk</name><operator>.</operator><name>maxVer</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// write</comment>
  <expr_stmt><expr><name><name>dataBlk</name><operator>.</operator><name>nSubBlock</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteBlockData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>dataBlk</name><operator>.</operator><name>aSubBlock</name><index>[<expr><name><name>dataBlk</name><operator>.</operator><name>nSubBlock</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>,
                            <argument><expr><ternary><condition><expr><operator>(</operator><operator>(</operator><name><name>dataBlk</name><operator>.</operator><name>nSubBlock</name></name> <operator>==</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>dataBlk</name><operator>.</operator><name>hasDup</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>dataBlk</name><operator>.</operator><name>smaInfo</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// put SDataBlk</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tMapDataPutItem</name><argument_list>(<argument><expr><name>mDataBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataBlk</name></expr></argument>, <argument><expr><name>tPutDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// clear</comment>
  <expr_stmt><expr><call><name>tBlockDataClear</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbWriteSttBlock</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aSttBlk</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>cmprAlg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttBlk</name></type> <name>sstBlk</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// info</comment>
  <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>nRow</name></name> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>minKey</name></name> <operator>=</operator> <name>TSKEY_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>maxKey</name></name> <operator>=</operator> <name>TSKEY_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>minVer</name></name> <operator>=</operator> <name>VERSION_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>maxVer</name></name> <operator>=</operator> <name>VERSION_MIN</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iRow</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>minKey</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>sstBlk</name><operator>.</operator><name>minKey</name></name></expr></argument>, <argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name>iRow</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>maxKey</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>sstBlk</name><operator>.</operator><name>maxKey</name></name></expr></argument>, <argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name>iRow</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>minVer</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>sstBlk</name><operator>.</operator><name>minVer</name></name></expr></argument>, <argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name><index>[<expr><name>iRow</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>maxVer</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>sstBlk</name><operator>.</operator><name>maxVer</name></name></expr></argument>, <argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name><index>[<expr><name>iRow</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>minUid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name></expr> ?</condition><then> <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name></expr> </then><else>: <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>sstBlk</name><operator>.</operator><name>maxUid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name></expr> ?</condition><then> <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name></expr> </then><else>: <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>

  <comment type="line">// write</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteBlockData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sstBlk</name><operator>.</operator><name>bInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// push SSttBlk</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aSttBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sstBlk</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// clear</comment>
  <expr_stmt><expr><call><name>tBlockDataClear</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitSttBlk</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SDiskDataBuilder</name> <modifier>*</modifier></type><name>pBuilder</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aSttBlk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>nRow</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// gnrt</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SDiskData</name> <modifier>*</modifier></type><name>pDiskData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>SBlkInfo</name>  <modifier>*</modifier></type><name>pBlkInfo</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tGnrtDiskData</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pDiskData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pBlkInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SSttBlk</name></type> <name>sttBlk</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>suid</name></name></expr>,
                    <expr><operator>.</operator><name>minUid</name> <operator>=</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>minUid</name></name></expr>,
                    <expr><operator>.</operator><name>maxUid</name> <operator>=</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>maxUid</name></name></expr>,
                    <expr><operator>.</operator><name>minKey</name> <operator>=</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>minKey</name></name></expr>,
                    <expr><operator>.</operator><name>maxKey</name> <operator>=</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>maxKey</name></name></expr>,
                    <expr><operator>.</operator><name>minVer</name> <operator>=</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>minVer</name></name></expr>,
                    <expr><operator>.</operator><name>maxVer</name> <operator>=</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>maxVer</name></name></expr>,
                    <expr><operator>.</operator><name>nRow</name> <operator>=</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>nRow</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <comment type="line">// write</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDiskData</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>pDiskData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>sttBlk</name><operator>.</operator><name>bInfo</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// push</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aSttBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sttBlk</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// clear</comment>
  <expr_stmt><expr><call><name>tDiskDataBuilderClear</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitFileDataEnd</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// write aBlockIdx</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteBlockIdx</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// write aSttBlk</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteSttBlk</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// update file header</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbUpdateDFileSetHeader</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// upsert SDFileSet</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSUpsertFSet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name><operator>-&gt;</operator><name>wSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// close and sync</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDataFWriterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbMoveCommitData</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>TABLEID</name></type> <name>toTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name> <operator>&amp;&amp;</operator> <call><name>tTABLEIDCmprFn</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>toTable</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockIdx</name></type> <name>blockIdx</name> <init>= <expr><operator>*</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlk</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitterNextTableData</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitFileDataImpl</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list>;</function_decl>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitFileData</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name>     <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// commit file data start</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitFileDataStart</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// impl</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitFileDataImpl</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// commit file data end</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitFileDataEnd</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbDataFReaderClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbDataFWriterClose</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ----------------------------------------------------------------------------</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbStartCommit</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>SCommitInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pCommitter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name> <operator>&amp;&amp;</operator> <literal type="string">"last tsdb commit incomplete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name></name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>commitID</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>state</name><operator>.</operator><name>commitID</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>minutes</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name><operator>.</operator><name>days</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>keepCfg</name><operator>.</operator><name>precision</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>minRow</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>minRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>maxRow</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>maxRows</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>compression</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>sttTrigger</name></name> <operator>=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>info</name><operator>.</operator><name>config</name><operator>.</operator><name>sttTrigger</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name> <operator>=</operator> <call><name>tsdbMemTableGetTbDataArray</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSCopy</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitDataStart</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// reader</comment>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// merger</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name>TSDB_MAX_STT_TRIGGER</name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDataIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>aDataIter</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// writer</comment>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SBlockIdx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_STREAM_COMPRESSION</name></expr></cpp:if>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDiskDataBuilderCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pBuilder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bDatal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tsdbCommitDataEnd</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// reader</comment>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMapDataClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// merger</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name>TSDB_MAX_STT_TRIGGER</name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDataIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>aDataIter</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// writer</comment>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tMapDataClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_STREAM_COMPRESSION</name></expr></cpp:if>
  <expr_stmt><expr><call><name>tDiskDataBuilderDestroy</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pBuilder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bDatal</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>tDestroyTSchema</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>pTSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tDestroyTSchema</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>pTSchema</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitData</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STsdb</name>     <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// check</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nRow</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// start ====================</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitDataStart</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// impl ====================</comment>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>nextKey</name></name> <operator>=</operator> <name><name>pMemTable</name><operator>-&gt;</operator><name>minKey</name></name></expr>;</expr_stmt>
  <while>while <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>nextKey</name></name> <operator>&lt;</operator> <name>TSKEY_MAX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitFileData</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// end ====================</comment>
  <expr_stmt><expr><call><name>tsdbCommitDataEnd</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitDel</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STsdb</name>     <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nDel</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// start</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitDelStart</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// impl</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>iDelIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>nDelIdx</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelIdx</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>iTbData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>nTbData</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>pDelIdx</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nTbData</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pTbData</name> <operator>=</operator> <operator>(</operator><name>STbData</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name></expr></argument>, <argument><expr><name>iTbData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pDelIdx</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iDelIdx</name> <operator>&lt;</operator> <name>nDelIdx</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SDelIdx</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelIdx</name></name></expr></argument>, <argument><expr><name>iDelIdx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pTbData</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>pDelIdx</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pTbData</name> <operator>&amp;&amp;</operator> <name>pDelIdx</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>tTABLEIDCmprFn</name><argument_list>(<argument><expr><name>pTbData</name></expr></argument>, <argument><expr><name>pDelIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_commit_mem_and_disk_del</name>;</goto>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_commit_mem_del</name>;</goto>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <goto>goto <name>_commit_disk_del</name>;</goto>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pTbData</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_commit_mem_del</name>;</goto>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <goto>goto <name>_commit_disk_del</name>;</goto>
    </block_content>}</block></else></if_stmt>

  <label><name>_commit_mem_del</name>:</label>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitTableDel</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>pTbData</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>iTbData</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTbData</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iTbData</name> <operator>&lt;</operator> <name>nTbData</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>STbData</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name></expr></argument>, <argument><expr><name>iTbData</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <continue>continue;</continue>

  <label><name>_commit_disk_del</name>:</label>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitTableDel</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pDelIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>iDelIdx</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pDelIdx</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iDelIdx</name> <operator>&lt;</operator> <name>nDelIdx</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SDelIdx</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelIdx</name></name></expr></argument>, <argument><expr><name>iDelIdx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <continue>continue;</continue>

  <label><name>_commit_mem_and_disk_del</name>:</label>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitTableDel</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>pTbData</name></expr></argument>, <argument><expr><name>pDelIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>iTbData</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTbData</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iTbData</name> <operator>&lt;</operator> <name>nTbData</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>STbData</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name></expr></argument>, <argument><expr><name>iTbData</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name>iDelIdx</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>pDelIdx</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>iDelIdx</name> <operator>&lt;</operator> <name>nDelIdx</name><operator>)</operator></expr> ?</condition><then> <expr><operator>(</operator><name>SDelIdx</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aDelIdx</name></name></expr></argument>, <argument><expr><name>iDelIdx</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
    <continue>continue;</continue>
  </block_content>}</block></while>

  <comment type="line">// end</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitDelEnd</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, commit del done, nDel:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nDel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbEndCommit</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>eno</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name>  <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>eno</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>eno</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSPrepareCommit</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>tsdbFSDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>||</operator> <name>eno</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb end commit"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// ================================================================================</comment>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>SRowInfo</name> <modifier>*</modifier></type><name>tsdbGetCommitRow</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>r</name></name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbNextCommitRow</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDataIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>MEMORY_DATA_ITER</name></expr>)</condition> <block>{<block_content>  <comment type="line">// memory</comment>
      <expr_stmt><expr><call><name>tsdbTbDataIterNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><call><name>tsdbTbDataIterGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>pRow</name> <operator>&amp;&amp;</operator> <call><name>TSDBROW_TS</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>maxKey</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>nextKey</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>nextKey</name></name></expr></argument>, <argument><expr><call><name>TSDBROW_TS</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>pRow</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>pTbData</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iter</name><operator>.</operator><name>pTbData</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>row</name></name> <operator>=</operator> <operator>*</operator><name>pRow</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTbDataP</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>iTbDataP</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name> <init>= <expr><operator>(</operator><name>STbData</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>aTbDataP</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iTbDataP</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>TSDBKEY</name></type>  <name>keyFrom</name> <init>= <expr><block>{<expr><operator>.</operator><name>ts</name> <operator>=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>minKey</name></name></expr>, <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>VERSION_MIN</name></expr>}</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tsdbTbDataIterOpen</name><argument_list>(<argument><expr><name>pTbData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyFrom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pRow</name> <operator>=</operator> <call><name>tsdbTbDataIterGet</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></while>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>STT_DATA_ITER</name></expr>)</condition> <block>{<block_content>  <comment type="line">// last file</comment>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>nRow</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name></expr> ?</condition><then> <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name></expr> </then><else>: <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>aUid</name><index>[<expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>row</name></name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SSttBlk</name> <modifier>*</modifier></type><name>pSttBlk</name> <init>= <expr><operator>(</operator><name>SSttBlk</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadSttBlockEx</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iStt</name></name></expr></argument>, <argument><expr><name>pSttBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>suid</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name></expr> ?</condition><then> <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>uid</name></name></expr> </then><else>: <expr><name><name>pIter</name><operator>-&gt;</operator><name>bData</name><operator>.</operator><name>aUid</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>r</name><operator>.</operator><name>row</name></name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>bData</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// compare with min in RB Tree</comment>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <operator>(</operator><name>SDataIter</name> <operator>*</operator><operator>)</operator><call><name>tRBTreeMin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name> <operator>&amp;&amp;</operator> <name>pIter</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>tRowInfoCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>r</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>r</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tRBTreePut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <operator>(</operator><name>SDataIter</name> <operator>*</operator><operator>)</operator><call><name>tRBTreeMin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tRBTreeDrop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitAheadBlock</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pDataBlk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name> <init>= <expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRowInfo</name>   <modifier>*</modifier></type><name>pRowInfo</name> <init>= <expr><call><name>tsdbGetCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TABLEID</name></type>     <name>id</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tBlockDataClear</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>pRowInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitterUpdateRowSchema</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbNextCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <call><name>tsdbGetCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pRowInfo</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>||</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>tKey</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>minKey</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator>
          <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitMergeBlock</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pDataBlk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRowInfo</name>   <modifier>*</modifier></type><name>pRowInfo</name> <init>= <expr><call><name>tsdbGetCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TABLEID</name></type>     <name>id</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBDataR</name> <init>= <expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBDataW</name> <init>= <expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadDataBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pReader</name></name></expr></argument>, <argument><expr><name>pDataBlk</name></expr></argument>, <argument><expr><name>pBDataR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tBlockDataClear</name><argument_list>(<argument><expr><name>pBDataW</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>iRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name></type>  <name>row</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBDataR</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name> <modifier>*</modifier></type><name>pRow</name> <init>= <expr><operator>&amp;</operator><name>row</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pRow</name> <operator>&amp;&amp;</operator> <name>pRowInfo</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>tsdbRowCmprFn</name><argument_list>(<argument><expr><name>pRow</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBDataW</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>iRow</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>iRow</name> <operator>&lt;</operator> <name><name>pBDataR</name><operator>-&gt;</operator><name>nRow</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBDataR</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitterUpdateRowSchema</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBDataW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbNextCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <call><name>tsdbGetCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pRowInfo</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>||</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>tKey</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>maxKey</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><literal type="number">0</literal> <operator>&amp;&amp;</operator> <literal type="string">"dup rows not allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBDataW</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBDataW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <while>while <condition>(<expr><name>pRow</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBDataW</name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>iRow</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>iRow</name> <operator>&lt;</operator> <name><name>pBDataR</name><operator>-&gt;</operator><name>nRow</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBDataR</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pRow</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBDataW</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBDataW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBDataW</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbMergeTableData</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>TABLEID</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockIdx</name> <modifier>*</modifier></type><name>pBlockIdx</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>pBlockIdx</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pBlockIdx</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>tTABLEIDCmprFn</name><argument_list>(<argument><expr><name>pBlockIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBlockIdx</name> <operator>&amp;&amp;</operator> <name><name>pBlockIdx</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>&amp;&amp;</operator> <name><name>pBlockIdx</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>iBlock</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDataBlk</name></type>  <name>block</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pDataBlk</name> <init>= <expr><operator>&amp;</operator><name>block</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SRowInfo</name> <modifier>*</modifier></type><name>pRowInfo</name> <init>= <expr><call><name>tsdbGetCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>&amp;&amp;</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name>iBlock</name></expr></argument>, <argument><expr><name>pDataBlk</name></expr></argument>, <argument><expr><name>tGetDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>pDataBlk</name> <operator>&amp;&amp;</operator> <name>pRowInfo</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SDataBlk</name></type> <name>tBlock</name> <init>= <expr><block>{<expr><operator>.</operator><name>minKey</name> <operator>=</operator> <call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>maxKey</name> <operator>=</operator> <macro><name>TSDBROW_KEY</name><argument_list>(<argument>&amp;pRowInfo-&gt;row</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>  <name>c</name> <init>= <expr><call><name>tDataBlkCmprFn</name><argument_list>(<argument><expr><name>pDataBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tBlock</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tMapDataPutItem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name>pDataBlk</name></expr></argument>, <argument><expr><name>tPutDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>iBlock</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>iBlock</name> <operator>&lt;</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name><operator>.</operator><name>nItem</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name>iBlock</name></expr></argument>, <argument><expr><name>pDataBlk</name></expr></argument>, <argument><expr><name>tGetDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>pDataBlk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitAheadBlock</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>pDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <call><name>tsdbGetCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pRowInfo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>||</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>uid</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitMergeBlock</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>pDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>iBlock</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>iBlock</name> <operator>&lt;</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name><operator>.</operator><name>nItem</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name>iBlock</name></expr></argument>, <argument><expr><name>pDataBlk</name></expr></argument>, <argument><expr><name>tGetDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><name>pDataBlk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <call><name>tsdbGetCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>pRowInfo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>||</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>uid</name></name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <while>while <condition>(<expr><name>pDataBlk</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tMapDataPutItem</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name>pDataBlk</name></expr></argument>, <argument><expr><name>tPutDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>iBlock</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>iBlock</name> <operator>&lt;</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name><operator>.</operator><name>nItem</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tMapDataGetItemByIdx</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name>iBlock</name></expr></argument>, <argument><expr><name>pDataBlk</name></expr></argument>, <argument><expr><name>tGetDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>pDataBlk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitterNextTableData</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbInitSttBlockBuilderIfNeed</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>TABLEID</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_STREAM_COMPRESSION</name></expr></cpp:if>
  <decl_stmt><decl><type><name>SDiskDataBuilder</name> <modifier>*</modifier></type><name>pBuilder</name> <init>= <expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pBuilder</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBuilder</name><operator>-&gt;</operator><name>suid</name></name> <operator>||</operator> <name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TABLE_SAME_SCHEMA</name><argument_list>(<argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitSttBlk</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tDiskDataBuilderClear</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>suid</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pBuilder</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>suid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDiskDataBuilderInit</name><argument_list>(<argument><expr><name>pBuilder</name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBData</name> <init>= <expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bDatal</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pBData</name><operator>-&gt;</operator><name>suid</name></name> <operator>||</operator> <name><name>pBData</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>TABLE_SAME_SCHEMA</name><argument_list>(<argument><expr><name><name>pBData</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pBData</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteSttBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBData</name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>tBlockDataReset</name><argument_list>(<argument><expr><name>pBData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBData</name><operator>-&gt;</operator><name>suid</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>pBData</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>suid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TABLEID</name></type> <name>tid</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>?</operator> <literal type="number">0</literal> <operator>:</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataInit</name><argument_list>(<argument><expr><name>pBData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbAppendLastBlock</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBData</name> <init>= <expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TABLEID</name></type>     <name>id</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>pBData</name><operator>-&gt;</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>pBData</name><operator>-&gt;</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbInitSttBlockBuilderIfNeed</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iRow</name> <operator>&lt;</operator> <name><name>pBData</name><operator>-&gt;</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TSDBROW</name></type> <name>row</name> <init>= <expr><call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBData</name></expr></argument>, <argument><expr><name>iRow</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_STREAM_COMPRESSION</name></expr></cpp:if>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDiskDataAddRow</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pBuilder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pBuilder</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitSttBlk</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pBuilder</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbInitSttBlockBuilderIfNeed</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bDatal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bDatal</name><operator>.</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteSttBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bDatal</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>,
                               <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitTableData</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>, <parameter><decl><type><name>TABLEID</name></type> <name>id</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRowInfo</name> <modifier>*</modifier></type><name>pRowInfo</name> <init>= <expr><call><name>tsdbGetCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pRowInfo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>||</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>uid</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pRowInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>toLastOnly</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbInitSttBlockBuilderIfNeed</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>pRowInfo</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitterUpdateRowSchema</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pTSchema</name> <operator>=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>pTSchema</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_STREAM_COMPRESSION</name></expr></cpp:if>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDiskDataAddRow</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pBuilder</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bDatal</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbNextCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <call><name>tsdbGetCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pRowInfo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>||</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>uid</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_STREAM_COMPRESSION</name></expr></cpp:if>
      <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pBuilder</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitSttBlk</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pBuilder</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbInitSttBlockBuilderIfNeed</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
      <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bDatal</name><operator>.</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteSttBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bDatal</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>,
                                 <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBData</name> <init>= <expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while <condition>(<expr><name>pRowInfo</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pTSchema</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name><operator>.</operator><name>type</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitterUpdateRowSchema</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><call><name>TSDBROW_SVERSION</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pTSchema</name> <operator>=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>skmRow</name><operator>.</operator><name>pTSchema</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataAppendRow</name><argument_list>(<argument><expr><name>pBData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>row</name></name></expr></argument>, <argument><expr><name>pTSchema</name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbNextCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <call><name>tsdbGetCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>pRowInfo</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>||</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>uid</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>pRowInfo</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pBData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;=</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>maxRow</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator>
            <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name><name>pBData</name><operator>-&gt;</operator><name>nRow</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pBData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;</operator> <name><name>pCommitter</name><operator>-&gt;</operator><name>minRow</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator>
            <call><name>tsdbWriteDataBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name>pBData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbAppendLastBlock</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbCommitFileDataImpl</name><parameter_list>(<parameter><decl><type><name>SCommitter</name> <modifier>*</modifier></type><name>pCommitter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SRowInfo</name> <modifier>*</modifier></type><name>pRowInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TABLEID</name></type>   <name>id</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>pRowInfo</name> <operator>=</operator> <call><name>tsdbGetCommitRow</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name> <operator>||</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name> <operator>!=</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>id</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pRowInfo</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbMoveCommitData</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// start</comment>
    <expr_stmt><expr><call><name>tMapDataReset</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// impl</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbUpdateTableSchema</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>id</name><operator>.</operator><name>uid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>skmTable</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dReader</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bData</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>skmTable</name><operator>.</operator><name>pTSchema</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* merge with data in .data file */</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbMergeTableData</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* handle remain table data */</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitTableData</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// end</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name><operator>.</operator><name>nItem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SBlockIdx</name></type> <name>blockIdx</name> <init>= <expr><block>{<expr><operator>.</operator><name>suid</name> <operator>=</operator> <name><name>id</name><operator>.</operator><name>suid</name></name></expr>, <expr><operator>.</operator><name>uid</name> <operator>=</operator> <name><name>id</name><operator>.</operator><name>uid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteDataBlk</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>mBlock</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aBlockIdx</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>id</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbMoveCommitData</name><argument_list>(<argument><expr><name>pCommitter</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_STREAM_COMPRESSION</name></expr></cpp:if>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbCommitSttBlk</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pBuilder</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteSttBlock</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>pWriter</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>bDatal</name></name></expr></argument>, <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>dWriter</name><operator>.</operator><name>aSttBlk</name></name></expr></argument>,
                           <argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>cmprAlg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pCommitter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>,
              <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbFinishCommit</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// lock</comment>
  <expr_stmt><expr><call><name>taosThreadRwlockWrlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSCommit</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>imem</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// unlock</comment>
  <expr_stmt><expr><call><name>taosThreadRwlockUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>rwLock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMemTable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbUnrefMemTable</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb finish commit"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbRollbackCommit</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSRollback</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb rollback commit"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
