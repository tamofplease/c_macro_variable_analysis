<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbFS.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<comment type="line">// =================================================================================================</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbFSToBinary</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name></decl></parameter>, <parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>   <name>hasDel</name> <init>= <expr><ternary><condition><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>nSet</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// version</comment>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI8</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// SDelFile</comment>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutI8</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name>hasDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasDel</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutDelFile</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// SArray&lt;SDFileSet&gt;</comment>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutU32v</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><name>nSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>iSet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iSet</name> <operator>&lt;</operator> <name>nSet</name></expr>;</condition> <incr><expr><name>iSet</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutDFileSet</name><argument_list>(<argument><expr><ternary><condition><expr><name>p</name></expr> ?</condition><then> <expr><name>p</name> <operator>+</operator> <name>n</name></expr> </then><else>: <expr><name>p</name></expr></else></ternary></expr></argument>, <argument><expr><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iSet</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbBinaryToFS</name><parameter_list>(<parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>nData</name></decl></parameter>, <parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// version</comment>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI8</name><argument_list>(<argument><expr><name>pData</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// SDelFile</comment>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>hasDel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetI8</name><argument_list>(<argument><expr><name>pData</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hasDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>hasDel</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>=</operator> <operator>(</operator><name>SDelFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetDelFile</name><argument_list>(<argument><expr><name>pData</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// aDFileSet</comment>
  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>nSet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetU32v</name><argument_list>(<argument><expr><name>pData</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>nSet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>uint32_t</name></type> <name>iSet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iSet</name> <operator>&lt;</operator> <name>nSet</name></expr>;</condition> <incr><expr><name>iSet</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDFileSet</name></type> <name>fSet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>nt</name> <init>= <expr><call><name>tGetDFileSet</name><argument_list>(<argument><expr><name>pData</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>nt</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>nt</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fSet</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSCKSUM</name></expr></argument>)</argument_list></sizeof> <operator>==</operator> <name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbSaveFSToFile</name><parameter_list>(<parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// encode to binary</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>size</name> <init>= <expr><call><name>tsdbFSToBinary</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>pFS</name></expr></argument>)</argument_list></call> <operator>+</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>TSCKSUM</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>tsdbFSToBinary</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>pFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCalcChecksumAppend</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// save to file</comment>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFD</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><call><name>taosWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pData</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"%s failed at line %d since %s, fname:%s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbFSCreate</name><parameter_list>(<parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDFileSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbFSDestroy</name><parameter_list>(<parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iSet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iSet</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iSet</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name> <init>= <expr><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbScanAndTryFixFS</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// SDelFile</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDelFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <call><name>tsdbLogicToFileSize</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbPageSize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// SArray&lt;SDFileSet&gt;</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>fid</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iSet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iSet</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iSet</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name> <init>= <expr><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>fid</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr>;</expr_stmt>

    <comment type="line">// head =========</comment>
    <expr_stmt><expr><call><name>tsdbHeadFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <call><name>tsdbLogicToFileSize</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbPageSize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// data =========</comment>
    <expr_stmt><expr><call><name>tsdbDataFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <call><name>tsdbLogicToFileSize</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbPageSize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// else if (size &gt; tsdbLogicToFileSize(pSet-&gt;pDataF-&gt;size, pTsdb-&gt;pVnode-&gt;config.tsdbPageSize)) {</comment>
    <comment type="line">//   code = tsdbDFileRollback(pTsdb, pSet, TSDB_DATA_FILE);</comment>
    <comment type="line">//   TSDB_CHECK_CODE(code, lino, _exit);</comment>
    <comment type="line">// }</comment>

    <comment type="line">// sma =============</comment>
    <expr_stmt><expr><call><name>tsdbSmaFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <call><name>tsdbLogicToFileSize</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbPageSize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <comment type="line">// else if (size &gt; tsdbLogicToFileSize(pSet-&gt;pSmaF-&gt;size, pTsdb-&gt;pVnode-&gt;config.tsdbPageSize)) {</comment>
    <comment type="line">//   code = tsdbDFileRollback(pTsdb, pSet, TSDB_SMA_FILE);</comment>
    <comment type="line">//   TSDB_CHECK_CODE(code, lino, _exit);</comment>
    <comment type="line">// }</comment>

    <comment type="line">// stt ===========</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbSttFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>size</name> <operator>!=</operator> <call><name>tsdbLogicToFileSize</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbPageSize</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <block>{<block_content>
    <comment type="line">// remove those invalid files (todo)</comment>
  </block_content>}</block>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s, fid:%d"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><name>fid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tDFileSetCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><name>p1</name><operator>)</operator><operator>-&gt;</operator><name>fid</name> <operator>&lt;</operator> <operator>(</operator><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><operator>-&gt;</operator><name>fid</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><name>p1</name><operator>)</operator><operator>-&gt;</operator><name>fid</name> <operator>&gt;</operator> <operator>(</operator><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator><operator>-&gt;</operator><name>fid</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tsdbGetCurrentFName</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>current</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>current_t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%s%s%sCURRENT"</literal></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>,
               <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>current_t</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>current_t</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%s%s%sCURRENT.t"</literal></expr></argument>, <argument><expr><call><name>tfsGetPrimaryPath</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pTfs</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>,
               <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>current</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%sCURRENT"</literal></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>current_t</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>current_t</name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"%s%sCURRENT.t"</literal></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>TD_DIRSEP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbLoadFSFromFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// load binary</comment>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFD</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosFStatFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pData</name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name>pData</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckChecksumWhole</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// decode binary</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbBinaryToFS</name><argument_list>(<argument><expr><name>pData</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>pFS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>pData</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"%s failed at line %d since %s, fname:%s"</literal></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbRemoveFileSet</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRef</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbHeadFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDataFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbSmaFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>nRef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbSttFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbNewFileSet</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSetTo</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSetFrom</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>pSetTo</name> <operator>=</operator> <operator>(</operator><name>SDFileSet</name><operator>)</operator><block>{<expr><operator>.</operator><name>diskId</name> <operator>=</operator> <name><name>pSetFrom</name><operator>-&gt;</operator><name>diskId</name></name></expr>, <expr><operator>.</operator><name>fid</name> <operator>=</operator> <name><name>pSetFrom</name><operator>-&gt;</operator><name>fid</name></name></expr>, <expr><operator>.</operator><name>nSttF</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr>;</expr_stmt>

  <comment type="line">// head</comment>
  <expr_stmt><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pHeadF</name></name> <operator>=</operator> <operator>(</operator><name>SHeadFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHeadFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pHeadF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>pSetTo</name><operator>-&gt;</operator><name>pHeadF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSetFrom</name><operator>-&gt;</operator><name>pHeadF</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pHeadF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// data</comment>
  <expr_stmt><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pDataF</name></name> <operator>=</operator> <operator>(</operator><name>SDataFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pDataF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>pSetTo</name><operator>-&gt;</operator><name>pDataF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSetFrom</name><operator>-&gt;</operator><name>pDataF</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pDataF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// sma</comment>
  <expr_stmt><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pSmaF</name></name> <operator>=</operator> <operator>(</operator><name>SSmaFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmaFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pSmaF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>pSetTo</name><operator>-&gt;</operator><name>pSmaF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSetFrom</name><operator>-&gt;</operator><name>pSmaF</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pSmaF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// stt</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSetFrom</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SSttFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSetTo</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>nSttF</name></name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name><name>pSetTo</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>pSetFrom</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>nRef</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbMergeFileSet</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSetOld</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSetNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRef</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>sameDisk</name> <init>= <expr><operator>(</operator><operator>(</operator><name><name>pSetOld</name><operator>-&gt;</operator><name>diskId</name><operator>.</operator><name>level</name></name> <operator>==</operator> <name><name>pSetNew</name><operator>-&gt;</operator><name>diskId</name><operator>.</operator><name>level</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pSetOld</name><operator>-&gt;</operator><name>diskId</name><operator>.</operator><name>id</name></name> <operator>==</operator> <name><name>pSetNew</name><operator>-&gt;</operator><name>diskId</name><operator>.</operator><name>id</name></name><operator>)</operator><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// head</comment>
  <decl_stmt><decl><type><name>SHeadFile</name> <modifier>*</modifier></type><name>pHeadF</name> <init>= <expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>sameDisk</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pHeadF</name><operator>-&gt;</operator><name>commitID</name></name> <operator>!=</operator> <name><name>pSetNew</name><operator>-&gt;</operator><name>pHeadF</name><operator>-&gt;</operator><name>commitID</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pHeadF</name></name> <operator>=</operator> <operator>(</operator><name>SHeadFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHeadFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pHeadF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name><name>pSetOld</name><operator>-&gt;</operator><name>pHeadF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSetNew</name><operator>-&gt;</operator><name>pHeadF</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pHeadF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pHeadF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbHeadFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name>pHeadF</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pHeadF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <name><name>pHeadF</name><operator>-&gt;</operator><name>nRef</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pHeadF</name> <operator>=</operator> <operator>*</operator><name><name>pSetNew</name><operator>-&gt;</operator><name>pHeadF</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHeadF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <name>nRef</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// data</comment>
  <decl_stmt><decl><type><name>SDataFile</name> <modifier>*</modifier></type><name>pDataF</name> <init>= <expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pDataF</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>sameDisk</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pDataF</name><operator>-&gt;</operator><name>commitID</name></name> <operator>!=</operator> <name><name>pSetNew</name><operator>-&gt;</operator><name>pDataF</name><operator>-&gt;</operator><name>commitID</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pDataF</name></name> <operator>=</operator> <operator>(</operator><name>SDataFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pDataF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name><name>pSetOld</name><operator>-&gt;</operator><name>pDataF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSetNew</name><operator>-&gt;</operator><name>pDataF</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pDataF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDataF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbDataFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name>pDataF</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pDataF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <name><name>pDataF</name><operator>-&gt;</operator><name>nRef</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pDataF</name> <operator>=</operator> <operator>*</operator><name><name>pSetNew</name><operator>-&gt;</operator><name>pDataF</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pDataF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <name>nRef</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// sma</comment>
  <decl_stmt><decl><type><name>SSmaFile</name> <modifier>*</modifier></type><name>pSmaF</name> <init>= <expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name>sameDisk</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name><name>pSmaF</name><operator>-&gt;</operator><name>commitID</name></name> <operator>!=</operator> <name><name>pSetNew</name><operator>-&gt;</operator><name>pSmaF</name><operator>-&gt;</operator><name>commitID</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pSmaF</name></name> <operator>=</operator> <operator>(</operator><name>SSmaFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmaFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pSmaF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name><name>pSetOld</name><operator>-&gt;</operator><name>pSmaF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSetNew</name><operator>-&gt;</operator><name>pSmaF</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>pSmaF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSmaF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbSmaFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name>pSmaF</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSmaF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <name><name>pSmaF</name><operator>-&gt;</operator><name>nRef</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>pSmaF</name> <operator>=</operator> <operator>*</operator><name><name>pSetNew</name><operator>-&gt;</operator><name>pSmaF</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSmaF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <name>nRef</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// stt</comment>
  <if_stmt><if>if <condition>(<expr><name>sameDisk</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pSetNew</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>&gt;</operator> <name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSetNew</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>==</operator> <name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SSttFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>pSetNew</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name></expr>]</index></name><operator>-&gt;</operator><name>nRef</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSetNew</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>&lt;</operator> <name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSetNew</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>SSttFile</name> <modifier>*</modifier></type><name>pSttFile</name> <init>= <expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSttFile</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tsdbSttFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name>pSttFile</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSttFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SSttFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>pSetNew</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>nRef</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>commitID</name> <operator>!=</operator> <name><name>pSetNew</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>commitID</name></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>SSttFile</name> <modifier>*</modifier></type><name>pSttFile</name> <init>= <expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSttFile</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>tsdbSttFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name>pSttFile</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSttFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>

          <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SSttFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <expr_stmt><expr><operator>*</operator><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>pSetNew</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>nRef</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>size</name> <operator>==</operator> <name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>offset</name> <operator>==</operator> <name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SSttFile</name> <modifier>*</modifier></type><name>pSttFile</name> <init>= <expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSttFile</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tsdbSttFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name>pSttFile</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pSttFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSetNew</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SSttFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>pSetNew</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>nRef</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>nSttF</name></name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>sameDisk</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSetOld</name><operator>-&gt;</operator><name>diskId</name></name> <operator>=</operator> <name><name>pSetNew</name><operator>-&gt;</operator><name>diskId</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbFSApplyChange</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRef</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// SDelFile</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDelFile</name> <modifier>*</modifier></type><name>pDelFile</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>pDelFile</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>(</operator><name><name>pDelFile</name><operator>-&gt;</operator><name>commitID</name></name> <operator>!=</operator> <name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name><operator>-&gt;</operator><name>commitID</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name> <operator>=</operator> <operator>(</operator><name>SDelFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><operator>*</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name> <operator>=</operator> <operator>*</operator><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>pDelFile</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDelFile</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>tsdbDelFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>pDelFile</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pDelFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// aDFileSet</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>iOld</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>iNew</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>nOld</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>   <name>nNew</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDFileSet</name></type> <name>fSet</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type>    <name>sameDisk</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>iOld</name> <operator>&gt;=</operator> <name>nOld</name> <operator>&amp;&amp;</operator> <name>iNew</name> <operator>&gt;=</operator> <name>nNew</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSetOld</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>iOld</name> <operator>&lt;</operator> <name>nOld</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iOld</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSetNew</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>iNew</name> <operator>&lt;</operator> <name>nNew</name><operator>)</operator></expr> ?</condition><then> <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iNew</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>pSetOld</name> <operator>&amp;&amp;</operator> <name>pSetNew</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>fid</name></name> <operator>==</operator> <name><name>pSetNew</name><operator>-&gt;</operator><name>fid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbMergeFileSet</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>pSetOld</name></expr></argument>, <argument><expr><name>pSetNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>iOld</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>iNew</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSetOld</name><operator>-&gt;</operator><name>fid</name></name> <operator>&lt;</operator> <name><name>pSetNew</name><operator>-&gt;</operator><name>fid</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbRemoveFileSet</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>pSetOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbNewFileSet</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fSet</name></expr></argument>, <argument><expr><name>pSetNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>TSDB_CHECK_CODE</name><argument_list>(<argument>code</argument>, <argument>lino</argument>, <argument>_exit</argument>)</argument_list></macro>

        <if_stmt><if>if <condition>(<expr><call><name>taosArrayInsert</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iOld</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fSet</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>iOld</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>iNew</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>pSetOld</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbRemoveFileSet</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>pSetOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosArrayRemove</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbNewFileSet</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fSet</name></expr></argument>, <argument><expr><name>pSetNew</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <macro><name>TSDB_CHECK_CODE</name><argument_list>(<argument>code</argument>, <argument>lino</argument>, <argument>_exit</argument>)</argument_list></macro>

      <if_stmt><if>if <condition>(<expr><call><name>taosArrayInsert</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iOld</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fSet</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>iOld</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><name>iNew</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// EXPOSED APIS ====================================================================================</comment>
<function><type><name>int32_t</name></type> <name>tsdbFSCommit</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbFS</name></type> <name>fs</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>current</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>current_t</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsdbGetCurrentFName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>current_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>current_t</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// rename the file</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosRenameFile</name><argument_list>(<argument><expr><name>current_t</name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Load the new FS</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbLoadFSFromFile</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// apply file change</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSApplyChange</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>tsdbFSDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbFSRollback</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>current_t</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsdbGetCurrentFName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>current_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>current_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbFSOpen</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>rollback</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// open handle</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// open impl</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>current</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>current_t</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tsdbGetCurrentFName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>current</name></expr></argument>, <argument><expr><name>current_t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbLoadFSFromFile</name><argument_list>(<argument><expr><name>current</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosCheckExistFile</name><argument_list>(<argument><expr><name>current_t</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>rollback</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSRollback</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFSCommit</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// empty one</comment>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSaveFSToFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name></name></expr></argument>, <argument><expr><name>current</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>rollback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// scan and fix FS</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbScanAndTryFixFS</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbFSClose</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name><operator>-&gt;</operator><name>nRef</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iSet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iSet</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iSet</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name> <init>= <expr><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// head</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// data</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// sma</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name><operator>-&gt;</operator><name>nRef</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// stt</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>nRef</name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbFSCopy</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDFileSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>=</operator> <operator>(</operator><name>SDelFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>=</operator> <operator>*</operator><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iSet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iSet</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iSet</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name> <init>= <expr><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SDFileSet</name></type>  <name>fSet</name> <init>= <expr><block>{<expr><operator>.</operator><name>diskId</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr>, <expr><operator>.</operator><name>fid</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// head</comment>
    <expr_stmt><expr><name><name>fSet</name><operator>.</operator><name>pHeadF</name></name> <operator>=</operator> <operator>(</operator><name>SHeadFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHeadFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fSet</name><operator>.</operator><name>pHeadF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name><name>fSet</name><operator>.</operator><name>pHeadF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr>;</expr_stmt>

    <comment type="line">// data</comment>
    <expr_stmt><expr><name><name>fSet</name><operator>.</operator><name>pDataF</name></name> <operator>=</operator> <operator>(</operator><name>SDataFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fSet</name><operator>.</operator><name>pDataF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name><name>fSet</name><operator>.</operator><name>pDataF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr>;</expr_stmt>

    <comment type="line">// sma</comment>
    <expr_stmt><expr><name><name>fSet</name><operator>.</operator><name>pSmaF</name></name> <operator>=</operator> <operator>(</operator><name>SSmaFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmaFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fSet</name><operator>.</operator><name>pSmaF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name><name>fSet</name><operator>.</operator><name>pSmaF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr>;</expr_stmt>

    <comment type="line">// stt</comment>
    <for>for <control>(<init><expr><name><name>fSet</name><operator>.</operator><name>nSttF</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name><name>fSet</name><operator>.</operator><name>nSttF</name></name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name><name>fSet</name><operator>.</operator><name>nSttF</name></name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>fSet</name><operator>.</operator><name>aSttF</name><index>[<expr><name><name>fSet</name><operator>.</operator><name>nSttF</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SSttFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>fSet</name><operator>.</operator><name>aSttF</name><index>[<expr><name><name>fSet</name><operator>.</operator><name>nSttF</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name><name>fSet</name><operator>.</operator><name>aSttF</name><index>[<expr><name><name>fSet</name><operator>.</operator><name>nSttF</name></name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name><name>fSet</name><operator>.</operator><name>nSttF</name></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fSet</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbFSUpsertDelFile</name><parameter_list>(<parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>, <parameter><decl><type><name>SDelFile</name> <modifier>*</modifier></type><name>pDelFile</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>=</operator> <operator>(</operator><name>SDelFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDelFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>=</operator> <operator>*</operator><name>pDelFile</name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbFSUpsertFSet</name><parameter_list>(<parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><call><name>taosArraySearchIdx</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>pSet</name></expr></argument>, <argument><expr><name>tDFileSetCmprFn</name></expr></argument>, <argument><expr><name>TD_GE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>idx</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>idx</name> <operator>=</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pDFileSet</name> <init>= <expr><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>    <name>c</name> <init>= <expr><call><name>tDFileSetCmprFn</name><argument_list>(<argument><expr><name>pSet</name></expr></argument>, <argument><expr><name>pDFileSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name><name>pDFileSet</name><operator>-&gt;</operator><name>pHeadF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name><name>pDFileSet</name><operator>-&gt;</operator><name>pDataF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name><name>pDFileSet</name><operator>-&gt;</operator><name>pSmaF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr>;</expr_stmt>
      <comment type="line">// stt</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>&gt;</operator> <name><name>pDFileSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>==</operator> <name><name>pDFileSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>pDFileSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name><name>pDFileSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SSttFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>pDFileSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name><name>pDFileSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
          <goto>goto <name>_exit</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name><name>pDFileSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name><name>pDFileSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pDFileSet</name><operator>-&gt;</operator><name>nSttF</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>&lt;</operator> <name><name>pDFileSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pDFileSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pDFileSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><operator>*</operator><name><name>pDFileSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pDFileSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><operator>*</operator><name><name>pDFileSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr>;</expr_stmt>
        </block_content>}</block></for>
      </block_content>}</block></else></if_stmt>

      <expr_stmt><expr><name><name>pDFileSet</name><operator>-&gt;</operator><name>diskId</name></name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SDFileSet</name></type> <name>fSet</name> <init>= <expr><block>{<expr><operator>.</operator><name>diskId</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr>, <expr><operator>.</operator><name>fid</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr>, <expr><operator>.</operator><name>nSttF</name> <operator>=</operator> <literal type="number">1</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// head</comment>
  <expr_stmt><expr><name><name>fSet</name><operator>.</operator><name>pHeadF</name></name> <operator>=</operator> <operator>(</operator><name>SHeadFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SHeadFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fSet</name><operator>.</operator><name>pHeadF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>fSet</name><operator>.</operator><name>pHeadF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr>;</expr_stmt>

  <comment type="line">// data</comment>
  <expr_stmt><expr><name><name>fSet</name><operator>.</operator><name>pDataF</name></name> <operator>=</operator> <operator>(</operator><name>SDataFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDataFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fSet</name><operator>.</operator><name>pDataF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>fSet</name><operator>.</operator><name>pDataF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr>;</expr_stmt>

  <comment type="line">// sma</comment>
  <expr_stmt><expr><name><name>fSet</name><operator>.</operator><name>pSmaF</name></name> <operator>=</operator> <operator>(</operator><name>SSmaFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSmaFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fSet</name><operator>.</operator><name>pSmaF</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>fSet</name><operator>.</operator><name>pSmaF</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr>;</expr_stmt>

  <comment type="line">// stt</comment>
  <expr_stmt><expr><name><name>fSet</name><operator>.</operator><name>aSttF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>SSttFile</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttFile</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>fSet</name><operator>.</operator><name>aSttF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><operator>*</operator><name><name>fSet</name><operator>.</operator><name>aSttF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosArrayInsert</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fSet</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbFSPrepareCommit</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFSNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>tfname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tsdbGetCurrentFName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>tfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// gnrt CURRENT.t</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbSaveFSToFile</name><argument_list>(<argument><expr><name>pFSNew</name></expr></argument>, <argument><expr><name>tfname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbFSRef</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRef</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SDFileSet</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>pDelFile</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_fetch_add_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SDFileSet</name></type> <name>fSet</name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iSet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iSet</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iSet</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name> <init>= <expr><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>fs</name><operator>.</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>fSet</name> <operator>=</operator> <operator>*</operator><name>pSet</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_fetch_add_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_fetch_add_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_fetch_add_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_fetch_add_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>nRef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fSet</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbFSUnref</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>STsdbFS</name> <modifier>*</modifier></type><name>pFS</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRef</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbDelFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>pDelFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iSet</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iSet</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iSet</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name> <init>= <expr><operator>(</operator><name>SDFileSet</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>, <argument><expr><name>iSet</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// head</comment>
    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbHeadFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// data</comment>
    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbDataFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// sma</comment>
    <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbSmaFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// stt</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>nRef</name> <operator>=</operator> <call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>nRef</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tsdbSttFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><call><name>taosRemoveFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="block">/* code */</comment>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pFS</name><operator>-&gt;</operator><name>aDFileSet</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
