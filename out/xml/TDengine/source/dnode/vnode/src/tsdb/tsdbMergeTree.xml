<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbMergeTree.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<comment type="line">// SLDataIter =================================================</comment>
<struct>struct <name>SLDataIter</name> <block>{
  <decl_stmt><decl><type><name>SRBTreeNode</name></type>        <name>node</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttBlk</name>           <modifier>*</modifier></type><name>pSttBlk</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataFReader</name>      <modifier>*</modifier></type><name>pReader</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>iStt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>             <name>backward</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>iSttBlk</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>            <name>iRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SRowInfo</name></type>           <name>rInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type>           <name>uid</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STimeWindow</name></type>        <name>timeWindow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVersionRange</name></type>      <name>verRange</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>pBlockLoadInfo</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>tCreateLastBlockLoadInfo</name><parameter_list>(<parameter><decl><type><name>STSchema</name> <modifier>*</modifier></type><name>pSchema</name></decl></parameter>, <parameter><decl><type><name>int16_t</name> <modifier>*</modifier></type><name>colList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfCols</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>pLoadInfo</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>TSDB_DEFAULT_STT_FILE</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttBlockLoadInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pLoadInfo</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_DEFAULT_STT_FILE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>blockIndex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>blockIndex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentLoadBlockIndex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>blockData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>blockData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aSttBlk</name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>pSchema</name> <operator>=</operator> <name>pSchema</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>colIds</name> <operator>=</operator> <name>colList</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOfCols</name> <operator>=</operator> <name>numOfCols</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>pLoadInfo</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>resetLastBlockLoadInfo</name><parameter_list>(<parameter><decl><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>pLoadInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_DEFAULT_STT_FILE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentLoadBlockIndex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>blockIndex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>blockIndex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aSttBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>elapsedTime</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loadBlocks</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>sttBlockLoaded</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getLastBlockLoadInfo</name><parameter_list>(<parameter><decl><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>pLoadInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>blocks</name></decl></parameter>, <parameter><decl><type><name>double</name> <modifier>*</modifier></type><name>el</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_DEFAULT_STT_FILE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>el</name> <operator>+=</operator> <name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>elapsedTime</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>blocks</name> <operator>+=</operator> <name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>loadBlocks</name></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>destroyLastBlockLoadInfo</name><parameter_list>(<parameter><decl><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>pLoadInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>TSDB_DEFAULT_STT_FILE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>currentLoadBlockIndex</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>blockIndex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>blockIndex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>blockData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tBlockDataDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>blockData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>aSttBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pLoadInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>SBlockData</name> <modifier>*</modifier></type><name>loadLastBlock</name><parameter_list>(<parameter><decl><type><name>SLDataIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pBlockLoadInfo</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockIndex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentLoadBlockIndex</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"current load index is set to 0, block index:%d, file index:%d, due to uid:%"</literal> <name>PRIu64</name> <literal type="string">", load data, %s"</literal></expr></argument>,
                <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iStt</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentLoadBlockIndex</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>blockData</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockIndex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentLoadBlockIndex</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"current load index is set to 1, block index:%d, file index:%d, due to uid:%"</literal> <name>PRIu64</name> <literal type="string">", load data, %s"</literal></expr></argument>,
                <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iStt</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentLoadBlockIndex</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>blockData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pSttBlk</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pSchema</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// current block not loaded yet</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentLoadBlockIndex</name></name> <operator>^=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlock</name> <init>= <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>blockData</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentLoadBlockIndex</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TABLEID</name></type> <name>id</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pSttBlk</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>id</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pSttBlk</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>id</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tBlockDataInit</name><argument_list>(<argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>id</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pSchema</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>colIds</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfCols</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadSttBlock</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pReader</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iStt</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSttBlk</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>el</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>elapsedTime</name></name> <operator>+=</operator> <name>el</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadBlocks</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"read last block, total load:%d, trigger by uid:%"</literal> <name>PRIu64</name>
            <literal type="string">", last file index:%d, last block index:%d, entry:%d, rows:%d, %p, elapsed time:%.2f ms, %s"</literal></expr></argument>,
            <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>loadBlocks</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iStt</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentLoadBlockIndex</name></name></expr></argument>, <argument><expr><name><name>pBlock</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>el</name></expr></argument>,
            <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockIndex</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentLoadBlockIndex</name></name></expr>]</index></name> <operator>=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"last block index list:%d, %d, %s"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockIndex</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockIndex</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><name>pInfo</name><operator>-&gt;</operator><name>blockData</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentLoadBlockIndex</name></name></expr>]</index></name><operator>.</operator><name>nRow</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  <return>return <expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>blockData</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>currentLoadBlockIndex</name></name></expr>]</index></name></expr>;</return>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// find the earliest block that contains the required records</comment>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>findEarliestIndex</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SSttBlk</name> <modifier>*</modifier></type><name>pBlockList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>,
                                              <parameter><decl><type><name>int32_t</name></type> <name>backward</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>index</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>backward</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num</name> <operator>&amp;&amp;</operator> <name>uid</name> <operator>&gt;=</operator> <name><name>pBlockList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>minUid</name> <operator>&amp;&amp;</operator> <name>uid</name> <operator>&lt;=</operator> <name><name>pBlockList</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxUid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>i</name> <operator>-</operator> <name>step</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>binarySearchForStartBlock</name><parameter_list>(<parameter><decl><type><name>SSttBlk</name> <modifier>*</modifier></type><name>pBlockList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>backward</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>midPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>firstPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lastPos</name> <init>= <expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// find the first position which is bigger than the key</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uid</name> <operator>&gt;</operator> <name><name>pBlockList</name><index>[<expr><name>lastPos</name></expr>]</index></name><operator>.</operator><name>maxUid</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>uid</name> <operator>&lt;</operator> <name><name>pBlockList</name><index>[<expr><name>firstPos</name></expr>]</index></name><operator>.</operator><name>minUid</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>&gt;=</operator> <name><name>pBlockList</name><index>[<expr><name>firstPos</name></expr>]</index></name><operator>.</operator><name>minUid</name> <operator>&amp;&amp;</operator> <name>uid</name> <operator>&lt;=</operator> <name><name>pBlockList</name><index>[<expr><name>firstPos</name></expr>]</index></name><operator>.</operator><name>maxUid</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>findEarliestIndex</name><argument_list>(<argument><expr><name>firstPos</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>&gt;</operator> <name><name>pBlockList</name><index>[<expr><name>lastPos</name></expr>]</index></name><operator>.</operator><name>maxUid</name> <operator>||</operator> <name>uid</name> <operator>&lt;</operator> <name><name>pBlockList</name><index>[<expr><name>firstPos</name></expr>]</index></name><operator>.</operator><name>minUid</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name>lastPos</name> <operator>-</operator> <name>firstPos</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>midPos</name> <operator>=</operator> <operator>(</operator><name>numOfRows</name> <operator>&gt;&gt;</operator> <literal type="number">1u</literal><operator>)</operator> <operator>+</operator> <name>firstPos</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>&lt;</operator> <name><name>pBlockList</name><index>[<expr><name>midPos</name></expr>]</index></name><operator>.</operator><name>minUid</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>midPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uid</name> <operator>&gt;</operator> <name><name>pBlockList</name><index>[<expr><name>midPos</name></expr>]</index></name><operator>.</operator><name>maxUid</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>firstPos</name> <operator>=</operator> <name>midPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>findEarliestIndex</name><argument_list>(<argument><expr><name>midPos</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pBlockList</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>findEarliestRow</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name> <modifier>*</modifier></type><name>uidList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>,
                                            <parameter><decl><type><name>int32_t</name></type> <name>backward</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>index</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name>backward</name></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>num</name> <operator>&amp;&amp;</operator> <name>uid</name> <operator>==</operator> <name><name>uidList</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>i</name> <operator>-</operator> <name>step</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>binarySearchForStartRowIndex</name><parameter_list>(<parameter><decl><type><name>uint64_t</name> <modifier>*</modifier></type><name>uidList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>backward</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>firstPos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lastPos</name> <init>= <expr><name>num</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// find the first position which is bigger than the key</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>uid</name> <operator>&gt;</operator> <name><name>uidList</name><index>[<expr><name>lastPos</name></expr>]</index></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>uid</name> <operator>&lt;</operator> <name><name>uidList</name><index>[<expr><name>firstPos</name></expr>]</index></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>==</operator> <name><name>uidList</name><index>[<expr><name>firstPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><call><name>findEarliestRow</name><argument_list>(<argument><expr><name>firstPos</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>uidList</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>&gt;</operator> <name><name>uidList</name><index>[<expr><name>lastPos</name></expr>]</index></name> <operator>||</operator> <name>uid</name> <operator>&lt;</operator> <name><name>uidList</name><index>[<expr><name>firstPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><name>lastPos</name> <operator>-</operator> <name>firstPos</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>midPos</name> <init>= <expr><operator>(</operator><name>numOfRows</name> <operator>&gt;&gt;</operator> <literal type="number">1u</literal><operator>)</operator> <operator>+</operator> <name>firstPos</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>uid</name> <operator>&lt;</operator> <name><name>uidList</name><index>[<expr><name>midPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>lastPos</name> <operator>=</operator> <name>midPos</name> <operator>-</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>uid</name> <operator>&gt;</operator> <name><name>uidList</name><index>[<expr><name>midPos</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>firstPos</name> <operator>=</operator> <name>midPos</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>findEarliestRow</name><argument_list>(<argument><expr><name>midPos</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>uidList</name></expr></argument>, <argument><expr><name>num</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tLDataIterOpen</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>SLDataIter</name></name> <modifier>*</modifier><modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iStt</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>backward</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>,
                       <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STimeWindow</name> <modifier>*</modifier></type><name>pTimeWindow</name></decl></parameter>, <parameter><decl><type><name>SVersionRange</name> <modifier>*</modifier></type><name>pRange</name></decl></parameter>, <parameter><decl><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>pBlockLoadInfo</name></decl></parameter>,
                       <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>pIter</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SLDataIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>pIter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>pReader</name></name> <operator>=</operator> <name>pReader</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>iStt</name></name> <operator>=</operator> <name>iStt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>backward</name></name> <operator>=</operator> <name>backward</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>verRange</name></name> <operator>=</operator> <operator>*</operator><name>pRange</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>timeWindow</name></name> <operator>=</operator> <operator>*</operator><name>pTimeWindow</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>pBlockLoadInfo</name></name> <operator>=</operator> <name>pBlockLoadInfo</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>sttBlockLoaded</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>sttBlockLoaded</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadSttBlk</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><name>iStt</name></expr></argument>, <argument><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// only apply to the child tables, ordinary tables will not incur this filter procedure.</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>SSttBlk</name> <modifier>*</modifier></type><name>pStart</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>SSttBlk</name> <modifier>*</modifier></type><name>pEnd</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <comment type="line">// all identical</comment>
      <if_stmt><if>if <condition>(<expr><name><name>pStart</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name><name>pEnd</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pStart</name><operator>-&gt;</operator><name>suid</name></name> <operator>!=</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
          <comment type="line">// no qualified stt block existed</comment>
          <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

          <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>iSttBlk</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
          <decl_stmt><decl><type><name>double</name></type> <name>el</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"load the last file info completed, elapsed time:%.2fms, %s"</literal></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name>code</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>pTmp</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name>size</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SSttBlk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>SSttBlk</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>uint64_t</name></type> <name>s</name> <init>= <expr><name><name>p</name><operator>-&gt;</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>s</name> <operator>&lt;</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name>s</name> <operator>==</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>pTmp</name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>s</name> <operator>&gt;</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name> <operator>=</operator> <name>pTmp</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>double</name></type> <name>el</name> <init>= <expr><operator>(</operator><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"load the last file info completed, elapsed time:%.2fms, %s"</literal></expr></argument>, <argument><expr><name>el</name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// find the start block</comment>
  <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>iSttBlk</name></name> <operator>=</operator> <call><name>binarySearchForStartBlock</name><argument_list>(<argument><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name><operator>-&gt;</operator><name>pData</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>iSttBlk</name></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>pSttBlk</name></name> <operator>=</operator> <call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>iSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>iRow</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name>backward</name></name><operator>)</operator></expr> ?</condition><then> <expr><name><operator>(</operator><operator>*</operator><name>pIter</name><operator>)</operator><operator>-&gt;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>nRow</name></name></name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tLDataIterClose</name><parameter_list>(<parameter><decl><type><name>SLDataIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tLDataIterNextBlock</name><parameter_list>(<parameter><decl><type><name>SLDataIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>oldIndex</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>size</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SSttBlk</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>minUid</name></name> <operator>&gt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>maxUid</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check uid firstly</comment>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>minUid</name></name> <operator>&lt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>maxUid</name></name> <operator>&gt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>minKey</name></name> <operator>&gt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>timeWindow</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>maxKey</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>timeWindow</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// check time range secondly</comment>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>minKey</name></name> <operator>&lt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>timeWindow</name><operator>.</operator><name>ekey</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>maxKey</name></name> <operator>&gt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>timeWindow</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>minVer</name></name> <operator>&gt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>maxVer</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>minVer</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>p</name><operator>-&gt;</operator><name>minVer</name></name> <operator>&lt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>maxVer</name></name> <operator>&amp;&amp;</operator> <name><name>p</name><operator>-&gt;</operator><name>maxVer</name></name> <operator>&gt;=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>minVer</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>index</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSttBlk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pSttBlk</name></name> <operator>=</operator> <operator>(</operator><name>SSttBlk</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pBlockLoadInfo</name><operator>-&gt;</operator><name>aSttBlk</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"try next last file block:%d from %d, trigger by uid:%"</literal> <name>PRIu64</name> <literal type="string">", file index:%d, %s"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr></argument>,
              <argument><expr><name>oldIndex</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iStt</name></name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbDebug</name><argument_list>(<argument><expr><literal type="string">"no more last block qualified, uid:%"</literal> <name>PRIu64</name> <literal type="string">", file index::%d, %s"</literal></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>oldIndex</name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>findNextValidRow</name><parameter_list>(<parameter><decl><type><name>SLDataIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type>    <name>hasVal</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name> <init>= <expr><call><name>loadLastBlock</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// mostly we only need to find the start position for a given table</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><operator>(</operator><name>i</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name><operator>)</operator><operator>)</operator> <operator>||</operator> <operator>(</operator><name>i</name> <operator>==</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>-</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name><operator>)</operator><operator>)</operator> <operator>&amp;&amp;</operator>
      <name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <call><name>binarySearchForStartRowIndex</name><argument_list>(<argument><expr><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name></name></expr></argument>, <argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&amp;&amp;</operator> <name>i</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>i</name> <operator>+=</operator> <name>step</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name></expr>)</condition> <block>{<block_content>               <comment type="line">// asc</comment>
      <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&gt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>timeWindow</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>  <comment type="line">// no more data</comment>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>timeWindow</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>ts</name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>timeWindow</name><operator>.</operator><name>skey</name></name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ts</name> <operator>&gt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>timeWindow</name><operator>.</operator><name>ekey</name></name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>ver</name> <init>= <expr><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&lt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>minVer</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// todo opt handle desc case</comment>
    <if_stmt><if>if <condition>(<expr><name>ver</name> <operator>&gt;</operator> <name><name>pIter</name><operator>-&gt;</operator><name>verRange</name><operator>.</operator><name>maxVer</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>hasVal</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <break>break;</break>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>hasVal</name><operator>)</operator></expr> ?</condition><then> <expr><name>i</name></expr> </then><else>: <expr><operator>-</operator><literal type="number">1</literal></expr></else></ternary></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tLDataIterNextRow</name><parameter_list>(<parameter><decl><type><name>SLDataIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>step</name> <init>= <expr><ternary><condition><expr><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>TSDB_CODE_SUCCESS</name></expr>;</expr_stmt>

  <comment type="line">// no qualified last file block in current file, no need to fetch row</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pSttBlk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>iBlockL</name> <init>= <expr><name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name> <init>= <expr><call><name>loadLastBlock</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pBlockData</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>terrno</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>findNextValidRow</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&gt;=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>||</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tLDataIterNextBlock</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pSttBlk</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// no more data</comment>
        <goto>goto <name>_exit</name>;</goto>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>iBlockL</name> <operator>!=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>iSttBlk</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pBlockData</name> <operator>=</operator> <call><name>loadLastBlock</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name>idStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name> <operator>+=</operator> <name>step</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>suid</name></name> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>uid</name></name> <operator>=</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>row</name></name> <operator>=</operator> <call><name>tsdbRowFromBlockData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>iRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><operator>(</operator><name>terrno</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>pIter</name><operator>-&gt;</operator><name>pSttBlk</name></name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>SRowInfo</name> <modifier>*</modifier></type><name>tLDataIterGet</name><parameter_list>(<parameter><decl><type><name>SLDataIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>rInfo</name></name></expr>;</return> </block_content>}</block></function>

<comment type="line">// SMergeTree =================================================</comment>
<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tLDataIterCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRBTreeNode</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRBTreeNode</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SLDataIter</name> <modifier>*</modifier></type><name>pIter1</name> <init>= <expr><operator>(</operator><name>SLDataIter</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p1</name><operator>)</operator> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>SLDataIter</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SLDataIter</name> <modifier>*</modifier></type><name>pIter2</name> <init>= <expr><operator>(</operator><name>SLDataIter</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>p2</name><operator>)</operator> <operator>-</operator> <call><name>offsetof</name><argument_list>(<argument><expr><name>SLDataIter</name></expr></argument>, <argument><expr><name>node</name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>key1</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter1</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type> <name>key2</name> <init>= <expr><call><name>TSDBROW_KEY</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pIter2</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>row</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>.</operator><name>ts</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key1</name><operator>.</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>key2</name><operator>.</operator><name>ts</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>key1</name><operator>.</operator><name>version</name></name> <operator>&lt;</operator> <name><name>key2</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key1</name><operator>.</operator><name>version</name></name> <operator>&gt;</operator> <name><name>key2</name><operator>.</operator><name>version</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tLDataIterDescCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>SRBTreeNode</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRBTreeNode</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><operator>-</operator><literal type="number">1</literal> <operator>*</operator> <call><name>tLDataIterCmprFn</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><name>p2</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tMergeTreeOpen</name><parameter_list>(<parameter><decl><type><name>SMergeTree</name> <modifier>*</modifier></type><name>pMTree</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>backward</name></decl></parameter>, <parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pFReader</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>uint64_t</name></type> <name>uid</name></decl></parameter>,
                       <parameter><decl><type><name>STimeWindow</name> <modifier>*</modifier></type><name>pTimeWindow</name></decl></parameter>, <parameter><decl><type><name>SVersionRange</name> <modifier>*</modifier></type><name>pVerRange</name></decl></parameter>, <parameter><decl><type><name>SSttBlockLoadInfo</name> <modifier>*</modifier></type><name>pBlockLoadInfo</name></decl></parameter>,
                       <parameter><decl><type><name>bool</name></type> <name>destroyLoadInfo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>idStr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>backward</name></name> <operator>=</operator> <name>backward</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIterList</name></name> <operator>=</operator> <call><name>taosArrayInit</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>POINTER_BYTES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIterList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>idStr</name></name> <operator>=</operator> <name>idStr</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pMTree</name><operator>-&gt;</operator><name>backward</name></name></expr>)</condition> <block>{<block_content> <comment type="line">// asc</comment>
    <expr_stmt><expr><call><name>tRBTreeCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMTree</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><name>tLDataIterCmprFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content> <comment type="line">// desc</comment>
    <expr_stmt><expr><call><name>tRBTreeCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMTree</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><name>tLDataIterDescCmprFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pLoadInfo</name></name> <operator>=</operator> <name>pBlockLoadInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>destroyLoadInfo</name></name> <operator>=</operator> <name>destroyLoadInfo</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pLoadInfo</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pFReader</name><operator>-&gt;</operator><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>  <comment type="line">// open all last file</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>SLDataIter</name></name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tLDataIterOpen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pIter</name></expr></argument>, <argument><expr><name>pFReader</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pMTree</name><operator>-&gt;</operator><name>backward</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>pTimeWindow</name></expr></argument>, <argument><expr><name>pVerRange</name></expr></argument>,
                          <argument><expr><operator>&amp;</operator><name><name>pMTree</name><operator>-&gt;</operator><name>pLoadInfo</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pMTree</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <goto>goto <name>_end</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>hasVal</name> <init>= <expr><call><name>tLDataIterNextRow</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name><name>pMTree</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>hasVal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIterList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tMergeTreeAddIter</name><argument_list>(<argument><expr><name>pMTree</name></expr></argument>, <argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tLDataIterClose</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_end</name>:</label>
  <expr_stmt><expr><call><name>tMergeTreeClose</name><argument_list>(<argument><expr><name>pMTree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tMergeTreeAddIter</name><parameter_list>(<parameter><decl><type><name>SMergeTree</name> <modifier>*</modifier></type><name>pMTree</name></decl></parameter>, <parameter><decl><type><name>SLDataIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tRBTreePut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMTree</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>tMergeTreeNext</name><parameter_list>(<parameter><decl><type><name>SMergeTree</name> <modifier>*</modifier></type><name>pMTree</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><name>TSDB_CODE_SUCCESS</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SLDataIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>hasVal</name> <init>= <expr><call><name>tLDataIterNextRow</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>, <argument><expr><name><name>pMTree</name><operator>-&gt;</operator><name>idStr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>hasVal</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// compare with min in RB Tree</comment>
    <expr_stmt><expr><name>pIter</name> <operator>=</operator> <operator>(</operator><name>SLDataIter</name> <operator>*</operator><operator>)</operator><call><name>tRBTreeMin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMTree</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name> <operator>&amp;&amp;</operator> <name>pIter</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name><name>pMTree</name><operator>-&gt;</operator><name>rbt</name><operator>.</operator><name>cmprFn</name></name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>node</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pIter</name><operator>-&gt;</operator><name>node</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tRBTreePut</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMTree</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <operator>(</operator><name>SLDataIter</name> <operator>*</operator><operator>)</operator><call><name>tRBTreeMin</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMTree</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tRBTreeDrop</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMTree</name><operator>-&gt;</operator><name>rbt</name></name></expr></argument>, <argument><expr><operator>(</operator><name>SRBTreeNode</name> <operator>*</operator><operator>)</operator><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name> <operator>!=</operator> <name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>TSDBROW</name></type> <name>tMergeTreeGetRow</name><parameter_list>(<parameter><decl><type><name>SMergeTree</name> <modifier>*</modifier></type><name>pMTree</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name><operator>-&gt;</operator><name>rInfo</name><operator>.</operator><name>row</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tMergeTreeClose</name><parameter_list>(<parameter><decl><type><name>SMergeTree</name> <modifier>*</modifier></type><name>pMTree</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIterList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>size</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SLDataIter</name> <modifier>*</modifier></type><name>pIter</name> <init>= <expr><call><name>taosArrayGetP</name><argument_list>(<argument><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIterList</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>tLDataIterClose</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIterList</name></name> <operator>=</operator> <call><name>taosArrayDestroy</name><argument_list>(<argument><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIterList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pIter</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMTree</name><operator>-&gt;</operator><name>destroyLoadInfo</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pLoadInfo</name></name> <operator>=</operator> <call><name>destroyLastBlockLoadInfo</name><argument_list>(<argument><expr><name><name>pMTree</name><operator>-&gt;</operator><name>pLoadInfo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pMTree</name><operator>-&gt;</operator><name>destroyLoadInfo</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
