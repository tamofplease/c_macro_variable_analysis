<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbMemTable.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEM_MIN_HASH</name></cpp:macro> <cpp:value>1024</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL_MAX_LEVEL</name></cpp:macro> <cpp:value>5</cpp:value></cpp:define>

<comment type="line">// sizeof(SMemSkipListNode) + sizeof(SMemSkipListNode *) * (l) * 2</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL_NODE_SIZE</name><parameter_list>(<parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro>        <cpp:value>(sizeof(SMemSkipListNode) + ((l) &lt;&lt; 4))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL_NODE_FORWARD</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro>  <cpp:value>((n)-&gt;forwards[l])</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL_NODE_BACKWARD</name><parameter_list>(<parameter><type><name>n</name></type></parameter>, <parameter><type><name>l</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((n)-&gt;forwards[(n)-&gt;level + (l)])</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL_MOVE_BACKWARD</name></cpp:macro> <cpp:value>0x1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SL_MOVE_FROM_POS</name></cpp:macro> <cpp:value>0x2</cpp:value></cpp:define>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>tbDataMovePosTo</name><parameter_list>(<parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl></parameter>, <parameter><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>TSDBKEY</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbGetOrCreateTbData</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STbData</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTbData</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbInsertTableDataImpl</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>, <parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>,
                                       <parameter><decl><type><name>SSubmitMsgIter</name> <modifier>*</modifier></type><name>pMsgIter</name></decl></parameter>, <parameter><decl><type><name>SSubmitBlk</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SSubmitBlkRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>tsdbMemTableCreate</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SMemTable</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppMemTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pMemTable</name> <operator>=</operator> <operator>(</operator><name>SMemTable</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pMemTable</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pMemTable</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosInitRWLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMemTable</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name></name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pPool</name></name> <operator>=</operator> <name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nRef</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>minKey</name></name> <operator>=</operator> <name>TSKEY_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>maxKey</name></name> <operator>=</operator> <name>TSKEY_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nDel</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nTbData</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nBucket</name></name> <operator>=</operator> <name>MEM_MIN_HASH</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>aBucket</name></name> <operator>=</operator> <operator>(</operator><name>STbData</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nBucket</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STbData</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMemTable</name><operator>-&gt;</operator><name>aBucket</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>vnodeBufPoolRef</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppMemTable</name> <operator>=</operator> <name>pMemTable</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>ppMemTable</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbMemTableDestroy</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pMemTable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>vnodeBufPoolUnRef</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pPool</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>aBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>STbData</name> <modifier>*</modifier></type><name>tsdbGetTbDataFromMemTableImpl</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name> <init>= <expr><name><name>pMemTable</name><operator>-&gt;</operator><name>aBucket</name><index>[<expr><call><name>TABS</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pMemTable</name><operator>-&gt;</operator><name>nBucket</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pTbData</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pTbData</name><operator>-&gt;</operator><name>uid</name></name> <operator>==</operator> <name>uid</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>pTbData</name> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>pTbData</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>STbData</name> <modifier>*</modifier></type><name>tsdbGetTbDataFromMemTable</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosRLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMemTable</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTbData</name> <operator>=</operator> <call><name>tsdbGetTbDataFromMemTableImpl</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosRUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMemTable</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>pTbData</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbInsertTableData</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>SSubmitMsgIter</name> <modifier>*</modifier></type><name>pMsgIter</name></decl></parameter>, <parameter><decl><type><name>SSubmitBlk</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>,
                            <parameter><decl><type><name>SSubmitBlkRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>mem</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbData</name>   <modifier>*</modifier></type><name>pTbData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>   <name>suid</name> <init>= <expr><name><name>pMsgIter</name><operator>-&gt;</operator><name>suid</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tb_uid_t</name></type>   <name>uid</name> <init>= <expr><name><name>pMsgIter</name><operator>-&gt;</operator><name>uid</name></name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SMetaInfo</name></type> <name>info</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetInfo</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TDB_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>suid</name></name> <operator>!=</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>metaGetInfo</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>suid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pMsgIter</name><operator>-&gt;</operator><name>sversion</name></name> <operator>!=</operator> <name><name>info</name><operator>.</operator><name>skmVer</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, req sver:%d, skmVer:%d suid:%"</literal> <name>PRId64</name> <literal type="string">" uid:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>,
              <argument><expr><name><name>pMsgIter</name><operator>-&gt;</operator><name>sversion</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>skmVer</name></name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TDB_INVALID_TABLE_SCHEMA_VER</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>sver</name></name> <operator>=</operator> <name><name>info</name><operator>.</operator><name>skmVer</name></name></expr>;</expr_stmt>

  <comment type="line">// create/get STbData to op</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbGetOrCreateTbData</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTbData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// do insert impl</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbInsertTableDataImpl</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>, <argument><expr><name>pTbData</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name>pMsgIter</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><name>pRsp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><name>terrno</name> <operator>=</operator> <name>code</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbDeleteTableData</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>sKey</name></decl></parameter>, <parameter><decl><type><name>TSKEY</name></type> <name>eKey</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>mem</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbData</name>   <modifier>*</modifier></type><name>pTbData</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPool</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>    <name>lastKey</name> <init>= <expr><block>{<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>version</name></expr>, <expr><operator>.</operator><name>ts</name> <operator>=</operator> <name>eKey</name></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// check if table exists</comment>
  <decl_stmt><decl><type><name>SMetaInfo</name></type> <name>info</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>metaGetInfo</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>pMeta</name></name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_TDB_TABLE_NOT_EXIST</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>.</operator><name>suid</name></name> <operator>!=</operator> <name>suid</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_INVALID_MSG</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbGetOrCreateTbData</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTbData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pPool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// do delete</comment>
  <decl_stmt><decl><type><name>SDelData</name> <modifier>*</modifier></type><name>pDelData</name> <init>= <expr><operator>(</operator><name>SDelData</name> <operator>*</operator><operator>)</operator><call><name>vnodeBufPoolMalloc</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pDelData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDelData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pDelData</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDelData</name><operator>-&gt;</operator><name>sKey</name></name> <operator>=</operator> <name>sKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDelData</name><operator>-&gt;</operator><name>eKey</name></name> <operator>=</operator> <name>eKey</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDelData</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTbData</name><operator>-&gt;</operator><name>pHead</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>pTail</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>pHead</name></name> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>pTail</name></name> <operator>=</operator> <name>pDelData</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>pTail</name><operator>-&gt;</operator><name>pNext</name></name> <operator>=</operator> <name>pDelData</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>pTail</name></name> <operator>=</operator> <name>pDelData</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nDel</name></name><operator>++</operator></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TSDB_CACHE_LAST_ROW</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>lastKey</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pTbData</name><operator>-&gt;</operator><name>maxKey</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbCacheDeleteLastrow</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>lruCache</name></name></expr></argument>, <argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>eKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TSDB_CACHE_LAST</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbCacheDeleteLast</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>lruCache</name></name></expr></argument>, <argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>eKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbInfo</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, delete data from table suid:%"</literal> <name>PRId64</name> <literal type="string">" uid:%"</literal> <name>PRId64</name> <literal type="string">" skey:%"</literal> <name>PRId64</name> <literal type="string">" eKey:%"</literal> <name>PRId64</name>
           <literal type="string">" at version %"</literal> <name>PRId64</name> <literal type="string">" since %s"</literal></expr></argument>,
           <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>sKey</name></expr></argument>, <argument><expr><name>eKey</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to delete data from table suid:%"</literal> <name>PRId64</name> <literal type="string">" uid:%"</literal> <name>PRId64</name> <literal type="string">" skey:%"</literal> <name>PRId64</name> <literal type="string">" eKey:%"</literal> <name>PRId64</name>
            <literal type="string">" at version %"</literal> <name>PRId64</name> <literal type="string">" since %s"</literal></expr></argument>,
            <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>, <argument><expr><name>sKey</name></expr></argument>, <argument><expr><name>eKey</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbTbDataIterCreate</name><parameter_list>(<parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl></parameter>, <parameter><decl><type><name>TSDBKEY</name> <modifier>*</modifier></type><name>pFrom</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>backward</name></decl></parameter>, <parameter><decl><type><name>STbDataIter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>(</operator><operator>*</operator><name>ppIter</name><operator>)</operator> <operator>=</operator> <operator>(</operator><name>STbDataIter</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STbDataIter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>*</operator><name>ppIter</name><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbTbDataIterOpen</name><argument_list>(<argument><expr><name>pTbData</name></expr></argument>, <argument><expr><name>pFrom</name></expr></argument>, <argument><expr><name>backward</name></expr></argument>, <argument><expr><operator>*</operator><name>ppIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>tsdbTbDataIterDestroy</name><parameter_list>(<parameter><decl><type><name>STbDataIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pIter</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbTbDataIterOpen</name><parameter_list>(<parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl></parameter>, <parameter><decl><type><name>TSDBKEY</name> <modifier>*</modifier></type><name>pFrom</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>backward</name></decl></parameter>, <parameter><decl><type><name>STbDataIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier></type><name><name>pos</name><index>[<expr><name>SL_MAX_LEVEL</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier></type><name>pHead</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier></type><name>pTail</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pHead</name> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTail</name> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pTbData</name></name> <operator>=</operator> <name>pTbData</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name> <operator>=</operator> <name>backward</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>row</name><operator>.</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFrom</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// create from head or tail</comment>
    <if_stmt><if>if <condition>(<expr><name>backward</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// create from a key</comment>
    <if_stmt><if>if <condition>(<expr><name>backward</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tbDataMovePosTo</name><argument_list>(<argument><expr><name>pTbData</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pFrom</name></expr></argument>, <argument><expr><name>SL_MOVE_BACKWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>tbDataMovePosTo</name><argument_list>(<argument><expr><name>pTbData</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>pFrom</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>tsdbTbDataIterNext</name><parameter_list>(<parameter><decl><type><name>STbDataIter</name> <modifier>*</modifier></type><name>pIter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pRow</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>backward</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>!=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>==</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>==</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>!=</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>==</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>=</operator> <call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pIter</name><operator>-&gt;</operator><name>pNode</name></name> <operator>==</operator> <name><name>pIter</name><operator>-&gt;</operator><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbMemTableRehash</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>   <name>nBucket</name> <init>= <expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nBucket</name></name> <operator>*</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier><modifier>*</modifier></type><name>aBucket</name> <init>= <expr><operator>(</operator><name>STbData</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>nBucket</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STbData</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>aBucket</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBucket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBucket</name> <operator>&lt;</operator> <name><name>pMemTable</name><operator>-&gt;</operator><name>nBucket</name></name></expr>;</condition> <incr><expr><name>iBucket</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name> <init>= <expr><name><name>pMemTable</name><operator>-&gt;</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pTbData</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pNext</name> <init>= <expr><name><name>pTbData</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><call><name>TABS</name><argument_list>(<argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>)</argument_list></call> <operator>%</operator> <name>nBucket</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>aBucket</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>aBucket</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>pTbData</name></expr>;</expr_stmt>

      <expr_stmt><expr><name>pTbData</name> <operator>=</operator> <name>pNext</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>aBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nBucket</name></name> <operator>=</operator> <name>nBucket</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>aBucket</name></name> <operator>=</operator> <name>aBucket</name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbGetOrCreateTbData</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>suid</name></decl></parameter>, <parameter><decl><type><name>tb_uid_t</name></type> <name>uid</name></decl></parameter>, <parameter><decl><type><name>STbData</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppTbData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// get</comment>
  <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name> <init>= <expr><call><name>tsdbGetTbDataFromMemTableImpl</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>, <argument><expr><name>suid</name></expr></argument>, <argument><expr><name>uid</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTbData</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// create</comment>
  <decl_stmt><decl><type><name>SVBufPool</name> <modifier>*</modifier></type><name>pPool</name> <init>= <expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>     <name>maxLevel</name> <init>= <expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbCfg</name><operator>.</operator><name>slLevel</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pPool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTbData</name> <operator>=</operator> <call><name>vnodeBufPoolMalloc</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pTbData</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>SL_NODE_SIZE</name><argument_list>(<argument><expr><name>maxLevel</name></expr></argument>)</argument_list></call> <operator>*</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pTbData</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>suid</name></name> <operator>=</operator> <name>suid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name>uid</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>minKey</name></name> <operator>=</operator> <name>TSKEY_MAX</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>maxKey</name></name> <operator>=</operator> <name>TSKEY_MIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>pHead</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>pTail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>seed</name></name> <operator>=</operator> <call><name>taosRand</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>maxLevel</name></name> <operator>=</operator> <name>maxLevel</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>level</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name> <operator>=</operator> <operator>(</operator><name>SMemSkipListNode</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pTbData</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name> <operator>=</operator> <operator>(</operator><name>SMemSkipListNode</name> <operator>*</operator><operator>)</operator><call><name>POINTER_SHIFT</name><argument_list>(<argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name></expr></argument>, <argument><expr><call><name>SL_NODE_SIZE</name><argument_list>(<argument><expr><name>maxLevel</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>maxLevel</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>maxLevel</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iLevel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iLevel</name> <operator>&lt;</operator> <name>maxLevel</name></expr>;</condition> <incr><expr><name>iLevel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosWLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMemTable</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nTbData</name></name> <operator>&gt;=</operator> <name><name>pMemTable</name><operator>-&gt;</operator><name>nBucket</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbMemTableRehash</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMemTable</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>idx</name> <init>= <expr><call><name>TABS</name><argument_list>(<argument><expr><name>uid</name></expr></argument>)</argument_list></call> <operator>%</operator> <name><name>pMemTable</name><operator>-&gt;</operator><name>nBucket</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name><name>pMemTable</name><operator>-&gt;</operator><name>aBucket</name><index>[<expr><name>idx</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>aBucket</name><index>[<expr><name>idx</name></expr>]</index></name> <operator>=</operator> <name>pTbData</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nTbData</name></name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosWUnLockLatch</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMemTable</name><operator>-&gt;</operator><name>latch</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>ppTbData</name> <operator>=</operator> <name>pTbData</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>ppTbData</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tbDataMovePosTo</name><parameter_list>(<parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl></parameter>, <parameter><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>TSDBKEY</name> <modifier>*</modifier></type><name>pKey</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flags</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier></type><name>px</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier></type><name>pn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>           <name>tKey</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>backward</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>SL_MOVE_BACKWARD</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>fromPos</name> <init>= <expr><name>flags</name> <operator>&amp;</operator> <name>SL_MOVE_FROM_POS</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>backward</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>px</name> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fromPos</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iLevel</name> <init>= <expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>level</name></name></expr></init></decl>;</init> <condition><expr><name>iLevel</name> <operator>&lt;</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>maxLevel</name></name></expr>;</condition> <incr><expr><name>iLevel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>pos</name><index>[<expr><name>iLevel</name></expr>]</index></name> <operator>=</operator> <name>px</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>fromPos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>px</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iLevel</name> <init>= <expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>iLevel</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>iLevel</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>pn</name> <operator>=</operator> <call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>pn</name> <operator>!=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>tKey</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pn</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>tKey</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name><name>pn</name><operator>-&gt;</operator><name>pTSRow</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tKey</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>px</name> <operator>=</operator> <name>pn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pn</name> <operator>=</operator> <call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name><name>pos</name><index>[<expr><name>iLevel</name></expr>]</index></name> <operator>=</operator> <name>px</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>px</name> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pHead</name></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>fromPos</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iLevel</name> <init>= <expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>level</name></name></expr></init></decl>;</init> <condition><expr><name>iLevel</name> <operator>&lt;</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>maxLevel</name></name></expr>;</condition> <incr><expr><name>iLevel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>pos</name><index>[<expr><name>iLevel</name></expr>]</index></name> <operator>=</operator> <name>px</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>fromPos</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>px</name> <operator>=</operator> <name><name>pos</name><index>[<expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iLevel</name> <init>= <expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>level</name></name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>iLevel</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>iLevel</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>pn</name> <operator>=</operator> <call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><name>pn</name> <operator>!=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>tKey</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>pn</name><operator>-&gt;</operator><name>version</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>tKey</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name><name>pn</name><operator>-&gt;</operator><name>pTSRow</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>

          <decl_stmt><decl><type><name>int32_t</name></type> <name>c</name> <init>= <expr><call><name>tsdbKeyCmprFn</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tKey</name></expr></argument>, <argument><expr><name>pKey</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>px</name> <operator>=</operator> <name>pn</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>pn</name> <operator>=</operator> <call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
        </block_content>}</block></while>

        <expr_stmt><expr><name><name>pos</name><index>[<expr><name>iLevel</name></expr>]</index></name> <operator>=</operator> <name>px</name></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int8_t</name></type> <name>tsdbMemSkipListRandLevel</name><parameter_list>(<parameter><decl><type><name>SMemSkipList</name> <modifier>*</modifier></type><name>pSl</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>level</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type> <name>tlevel</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><name><name>pSl</name><operator>-&gt;</operator><name>maxLevel</name></name></expr></argument>, <argument><expr><name><name>pSl</name><operator>-&gt;</operator><name>level</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><operator>(</operator><call><name>taosRandR</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pSl</name><operator>-&gt;</operator><name>seed</name></name></expr></argument>)</argument_list></call> <operator>&amp;</operator> <literal type="number">0x3</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>level</name> <operator>&lt;</operator> <name>tlevel</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>level</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>level</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tbDataDoPut</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>, <parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl></parameter>, <parameter><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier><modifier>*</modifier></type><name>pos</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>,
                           <parameter><decl><type><name>STSRow</name> <modifier>*</modifier></type><name>pRow</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>forward</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name></type>            <name>level</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier></type><name>pNode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SVBufPool</name>        <modifier>*</modifier></type><name>pPool</name> <init>= <expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>inUse</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// node</comment>
  <expr_stmt><expr><name>level</name> <operator>=</operator> <call><name>tsdbMemSkipListRandLevel</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pPool</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pNode</name> <operator>=</operator> <operator>(</operator><name>SMemSkipListNode</name> <operator>*</operator><operator>)</operator><call><name>vnodeBufPoolMalloc</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>, <argument><expr><call><name>SL_NODE_SIZE</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pNode</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>level</name></name> <operator>=</operator> <name>level</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name>version</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTSRow</name></name> <operator>=</operator> <call><name>vnodeBufPoolMalloc</name><argument_list>(<argument><expr><name>pPool</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name><name>pNode</name><operator>-&gt;</operator><name>pTSRow</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pNode</name><operator>-&gt;</operator><name>pTSRow</name></name></expr></argument>, <argument><expr><name>pRow</name></expr></argument>, <argument><expr><name><name>pRow</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iLevel</name> <init>= <expr><name>level</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>iLevel</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>iLevel</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier></type><name>pn</name> <init>= <expr><name><name>pos</name><index>[<expr><name>iLevel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier></type><name>px</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>forward</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>px</name> <operator>=</operator> <call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name>pn</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pn</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>px</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>px</name> <operator>=</operator> <call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name>pn</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>px</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name>pNode</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pn</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iLevel</name> <init>= <expr><name>level</name> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>iLevel</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>iLevel</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier></type><name>pn</name> <init>= <expr><name><name>pos</name><index>[<expr><name>iLevel</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier></type><name>px</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>forward</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>px</name> <operator>=</operator> <call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name>pn</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name>pn</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>px</name> <operator>=</operator> <call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name>pn</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name>px</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name>pn</name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>pos</name><index>[<expr><name>iLevel</name></expr>]</index></name> <operator>=</operator> <name>pNode</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>level</name></name> <operator>&lt;</operator> <name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>level</name></name> <operator>=</operator> <name><name>pNode</name><operator>-&gt;</operator><name>level</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbInsertTableDataImpl</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>, <parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>version</name></decl></parameter>,
                                       <parameter><decl><type><name>SSubmitMsgIter</name> <modifier>*</modifier></type><name>pMsgIter</name></decl></parameter>, <parameter><decl><type><name>SSubmitBlk</name> <modifier>*</modifier></type><name>pBlock</name></decl></parameter>, <parameter><decl><type><name>SSubmitBlkRsp</name> <modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSubmitBlkIter</name></type>    <name>blkIter</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBKEY</name></type>           <name>key</name> <init>= <expr><block>{<expr><operator>.</operator><name>version</name> <operator>=</operator> <name>version</name></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMemSkipListNode</name> <modifier>*</modifier></type><name><name>pos</name><index>[<expr><name>SL_MAX_LEVEL</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TSDBROW</name></type>           <name>row</name> <init>= <expr><call><name>tsdbRowFromTSRow</name><argument_list>(<argument><expr><name>version</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>           <name>nRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STSRow</name>           <modifier>*</modifier></type><name>pLastRow</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tInitSubmitBlkIter</name><argument_list>(<argument><expr><name>pMsgIter</name></expr></argument>, <argument><expr><name>pBlock</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blkIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// backward put first data</comment>
  <expr_stmt><expr><name><name>row</name><operator>.</operator><name>pTSRow</name></name> <operator>=</operator> <call><name>tGetSubmitBlkNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blkIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>row</name><operator>.</operator><name>pTSRow</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name><name>row</name><operator>.</operator><name>pTSRow</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nRow</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tbDataMovePosTo</name><argument_list>(<argument><expr><name>pTbData</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>SL_MOVE_BACKWARD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tbDataDoPut</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>, <argument><expr><name>pTbData</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>row</name><operator>.</operator><name>pTSRow</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>minKey</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>minKey</name></name></expr></argument>, <argument><expr><name><name>key</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pLastRow</name> <operator>=</operator> <name><name>row</name><operator>.</operator><name>pTSRow</name></name></expr>;</expr_stmt>

  <comment type="line">// forward put rest data</comment>
  <expr_stmt><expr><name><name>row</name><operator>.</operator><name>pTSRow</name></name> <operator>=</operator> <call><name>tGetSubmitBlkNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blkIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>row</name><operator>.</operator><name>pTSRow</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iLevel</name> <init>= <expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>-&gt;</operator><name>level</name></expr></init></decl>;</init> <condition><expr><name>iLevel</name> <operator>&lt;</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>maxLevel</name></name></expr>;</condition> <incr><expr><name>iLevel</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>pos</name><index>[<expr><name>iLevel</name></expr>]</index></name> <operator>=</operator> <call><name>SL_NODE_BACKWARD</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><name>iLevel</name></expr>]</index></name></expr></argument>, <argument><expr><name>iLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <do>do <block>{<block_content>
      <expr_stmt><expr><name><name>key</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <name><name>row</name><operator>.</operator><name>pTSRow</name><operator>-&gt;</operator><name>ts</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>nRow</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>SL_NODE_FORWARD</name><argument_list>(<argument><expr><name><name>pos</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>pTail</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tbDataMovePosTo</name><argument_list>(<argument><expr><name>pTbData</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><name>SL_MOVE_FROM_POS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tbDataDoPut</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>, <argument><expr><name>pTbData</name></expr></argument>, <argument><expr><name>pos</name></expr></argument>, <argument><expr><name>version</name></expr></argument>, <argument><expr><name><name>row</name><operator>.</operator><name>pTSRow</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>_err</name>;</goto>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>pLastRow</name> <operator>=</operator> <name><name>row</name><operator>.</operator><name>pTSRow</name></name></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>row</name><operator>.</operator><name>pTSRow</name></name> <operator>=</operator> <call><name>tGetSubmitBlkNext</name><argument_list>(<argument><expr><operator>&amp;</operator><name>blkIter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name><name>row</name><operator>.</operator><name>pTSRow</name></name></expr>)</condition>;</do>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>ts</name></name> <operator>&gt;=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>maxKey</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><operator>.</operator><name>ts</name></name> <operator>&gt;</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>maxKey</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pTbData</name><operator>-&gt;</operator><name>maxKey</name></name> <operator>=</operator> <name><name>key</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>TSDB_CACHE_LAST_ROW</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>pLastRow</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbCacheInsertLastrow</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>lruCache</name></name></expr></argument>, <argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>, <argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>pLastRow</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>TSDB_CACHE_LAST</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbCacheInsertLast</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>lruCache</name></name></expr></argument>, <argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name>pLastRow</name></expr></argument>, <argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// SMemTable</comment>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>minKey</name></name> <operator>=</operator> <call><name>TMIN</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>minKey</name></name></expr></argument>, <argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>minKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>maxKey</name></name> <operator>=</operator> <call><name>TMAX</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>maxKey</name></name></expr></argument>, <argument><expr><name><name>pTbData</name><operator>-&gt;</operator><name>maxKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nRow</name></name> <operator>+=</operator> <name>nRow</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name>nRow</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pRsp</name><operator>-&gt;</operator><name>affectedRows</name></name> <operator>=</operator> <name>nRow</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbGetNRowsInTbData</name><parameter_list>(<parameter><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><name><name>pTbData</name><operator>-&gt;</operator><name>sl</name><operator>.</operator><name>size</name></name></expr>;</return> </block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbRefMemTable</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRef</name> <init>= <expr><call><name>atomic_fetch_add_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMemTable</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>nRef</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tsdbUnrefMemTable</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>nRef</name> <init>= <expr><call><name>atomic_sub_fetch_32</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pMemTable</name><operator>-&gt;</operator><name>nRef</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>nRef</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbMemTableDestroy</name><argument_list>(<argument><expr><name>pMemTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>FORCE_INLINE</name> <name>int32_t</name></type> <name>tbDataPCmprFn</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p1</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>p2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData1</name> <init>= <expr><operator>*</operator><operator>(</operator><name>STbData</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p1</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData2</name> <init>= <expr><operator>*</operator><operator>(</operator><name>STbData</name> <operator>*</operator><operator>*</operator><operator>)</operator><name>p2</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTbData1</name><operator>-&gt;</operator><name>suid</name></name> <operator>&lt;</operator> <name><name>pTbData2</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTbData1</name><operator>-&gt;</operator><name>suid</name></name> <operator>&gt;</operator> <name><name>pTbData2</name><operator>-&gt;</operator><name>suid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pTbData1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&lt;</operator> <name><name>pTbData2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pTbData1</name><operator>-&gt;</operator><name>uid</name></name> <operator>&gt;</operator> <name><name>pTbData2</name><operator>-&gt;</operator><name>uid</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>SArray</name> <modifier>*</modifier></type><name>tsdbMemTableGetTbDataArray</name><parameter_list>(<parameter><decl><type><name>SMemTable</name> <modifier>*</modifier></type><name>pMemTable</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aTbDataP</name> <init>= <expr><call><name>taosArrayInit</name><argument_list>(<argument><expr><name><name>pMemTable</name><operator>-&gt;</operator><name>nTbData</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STbData</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>aTbDataP</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBucket</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBucket</name> <operator>&lt;</operator> <name><name>pMemTable</name><operator>-&gt;</operator><name>nBucket</name></name></expr>;</condition> <incr><expr><name>iBucket</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>STbData</name> <modifier>*</modifier></type><name>pTbData</name> <init>= <expr><name><name>pMemTable</name><operator>-&gt;</operator><name>aBucket</name><index>[<expr><name>iBucket</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pTbData</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aTbDataP</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pTbData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pTbData</name> <operator>=</operator> <name><name>pTbData</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosArraySort</name><argument_list>(<argument><expr><name>aTbDataP</name></expr></argument>, <argument><expr><name>tbDataPCmprFn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>aTbDataP</name></expr>;</return>
</block_content>}</block></function>
</unit>
