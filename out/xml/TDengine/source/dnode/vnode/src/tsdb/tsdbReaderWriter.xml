<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/source/dnode/vnode/src/tsdb/tsdbReaderWriter.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tsdb.h"</cpp:file></cpp:include>

<comment type="line">// =============== PAGE-WISE FILE ===============</comment>
<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbOpenFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>szPage</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>flag</name></decl></parameter>, <parameter><decl><type><name>STsdbFD</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFD</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbFD</name> <modifier>*</modifier></type><name>pFD</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppFD</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>pFD</name> <operator>=</operator> <operator>(</operator><name>STsdbFD</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pFD</name></expr></argument>)</argument_list></sizeof> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>path</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pFD</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>path</name></name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name> <operator>=</operator> <name>szPage</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>flag</name></name> <operator>=</operator> <name>flag</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>pFD</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFD</name><operator>-&gt;</operator><name>pFD</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name> <operator>=</operator> <name>szPage</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>szPage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pFD</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFD</name><operator>-&gt;</operator><name>pFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pFD</name><operator>-&gt;</operator><name>szFile</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFD</name><operator>-&gt;</operator><name>pFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szFile</name></name> <operator>%</operator> <name>szPage</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>szFile</name></name> <operator>=</operator> <name><name>pFD</name><operator>-&gt;</operator><name>szFile</name></name> <operator>/</operator> <name>szPage</name></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppFD</name> <operator>=</operator> <name>pFD</name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tsdbCloseFile</name><parameter_list>(<parameter><decl><type><name>STsdbFD</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppFD</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STsdbFD</name> <modifier>*</modifier></type><name>pFD</name> <init>= <expr><operator>*</operator><name>ppFD</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFD</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pFD</name><operator>-&gt;</operator><name>pFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppFD</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbWriteFilePage</name><parameter_list>(<parameter><decl><type><name>STsdbFD</name> <modifier>*</modifier></type><name>pFD</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pFD</name><operator>-&gt;</operator><name>pgno</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pFD</name></name></expr></argument>, <argument><expr><call><name>PAGE_OFFSET</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pgno</name></name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosCalcChecksumAppend</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>taosWriteFile</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pFD</name></name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_exit</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pFD</name><operator>-&gt;</operator><name>szFile</name></name> <operator>&lt;</operator> <name><name>pFD</name><operator>-&gt;</operator><name>pgno</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>szFile</name></name> <operator>=</operator> <name><name>pFD</name><operator>-&gt;</operator><name>pgno</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbReadFilePage</name><parameter_list>(<parameter><decl><type><name>STsdbFD</name> <modifier>*</modifier></type><name>pFD</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>pgno</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pgno</name> <operator>&lt;=</operator> <name><name>pFD</name><operator>-&gt;</operator><name>szFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// seek</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><call><name>PAGE_OFFSET</name><argument_list>(<argument><expr><name>pgno</name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><call><name>taosLSeekFile</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pFD</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// read</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>taosReadFile</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pFD</name></name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// check</comment>
  <if_stmt><if>if <condition>(<expr><name>pgno</name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>taosCheckChecksumWhole</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pBuf</name></name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_FILE_CORRUPTED</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbWriteFile</name><parameter_list>(<parameter><decl><type><name>STsdbFD</name> <modifier>*</modifier></type><name>pFD</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>fOffset</name> <init>= <expr><call><name>LOGIC_TO_FILE_OFFSET</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>pgno</name> <init>= <expr><call><name>OFFSET_PGNO</name><argument_list>(<argument><expr><name>fOffset</name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>bOffset</name> <init>= <expr><name>fOffset</name> <operator>%</operator> <name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <do>do <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pFD</name><operator>-&gt;</operator><name>pgno</name></name> <operator>!=</operator> <name>pgno</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFilePage</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name>pgno</name> <operator>&lt;=</operator> <name><name>pFD</name><operator>-&gt;</operator><name>szFile</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFilePage</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>pFD</name><operator>-&gt;</operator><name>pgno</name></name> <operator>=</operator> <name>pgno</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nWrite</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><call><name>PAGE_CONTENT_SIZE</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name>bOffset</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>+</operator> <name>bOffset</name></expr></argument>, <argument><expr><name>pBuf</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>nWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pgno</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>nWrite</name></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>size</name></expr>)</condition>;</do>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbReadFile</name><parameter_list>(<parameter><decl><type><name>STsdbFD</name> <modifier>*</modifier></type><name>pFD</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>pBuf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>fOffset</name> <init>= <expr><call><name>LOGIC_TO_FILE_OFFSET</name><argument_list>(<argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>pgno</name> <init>= <expr><call><name>OFFSET_PGNO</name><argument_list>(<argument><expr><name>fOffset</name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>szPgCont</name> <init>= <expr><call><name>PAGE_CONTENT_SIZE</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>bOffset</name> <init>= <expr><name>fOffset</name> <operator>%</operator> <name><name>pFD</name><operator>-&gt;</operator><name>szPage</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pgno</name> <operator>&amp;&amp;</operator> <name>pgno</name> <operator>&lt;=</operator> <name><name>pFD</name><operator>-&gt;</operator><name>szFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bOffset</name> <operator>&lt;</operator> <name>szPgCont</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pFD</name><operator>-&gt;</operator><name>pgno</name></name> <operator>!=</operator> <name>pgno</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFilePage</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>nRead</name> <init>= <expr><call><name>TMIN</name><argument_list>(<argument><expr><name>szPgCont</name> <operator>-</operator> <name>bOffset</name></expr></argument>, <argument><expr><name>size</name> <operator>-</operator> <name>n</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pBuf</name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pBuf</name></name> <operator>+</operator> <name>bOffset</name></expr></argument>, <argument><expr><name>nRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>+=</operator> <name>nRead</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pgno</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>bOffset</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbFsyncFile</name><parameter_list>(<parameter><decl><type><name>STsdbFD</name> <modifier>*</modifier></type><name>pFD</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFilePage</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>pFD</name><operator>-&gt;</operator><name>pFD</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SDataFWriter ====================================================</comment>
<function><type><name>int32_t</name></type> <name>tsdbDataFWriterOpen</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppWriter</name></decl></parameter>, <parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>flag</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>       <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>szPage</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbPageSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>hdr</name><index>[<expr><name>TSDB_FHDR_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pWriter</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pWriter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pWriter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name></name> <operator>=</operator> <operator>(</operator><name>SDFileSet</name><operator>)</operator><block>{<expr><operator>.</operator><name>diskId</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr>,
                              <expr><operator>.</operator><name>fid</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr>,
                              <expr><operator>.</operator><name>pHeadF</name> <operator>=</operator> <operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fHead</name></name></expr>,
                              <expr><operator>.</operator><name>pDataF</name> <operator>=</operator> <operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fData</name></name></expr>,
                              <expr><operator>.</operator><name>pSmaF</name> <operator>=</operator> <operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name></name></expr>,
                              <expr><operator>.</operator><name>nSttF</name> <operator>=</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>}</block></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fHead</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fData</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fStt</name><index>[<expr><name>iStt</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fStt</name><index>[<expr><name>iStt</name></expr>]</index></name> <operator>=</operator> <operator>*</operator><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// head</comment>
  <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbHeadFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fHead</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fHead</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name>TSDB_FHDR_SIZE</name></expr>;</expr_stmt>

  <comment type="line">// data</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>fData</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>tsdbDataFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fData</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pDataFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>fData</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDataFD</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fData</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name>TSDB_FHDR_SIZE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// sma</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>tsdbSmaFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pSmaFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name><operator>.</operator><name>size</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSmaFD</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name>TSDB_FHDR_SIZE</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// stt</comment>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fStt</name><index>[<expr><name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>flag</name> <operator>=</operator> <name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbSttFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fStt</name><index>[<expr><name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>, <argument><expr><name>flag</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pSttFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSttFD</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fStt</name><index>[<expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>+=</operator> <name>TSDB_FHDR_SIZE</name></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>pWriter</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb data file writer open failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbDataFWriterClose</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppWriter</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name>  <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppWriter</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>pTsdb</name> <operator>=</operator> <name><operator>(</operator><operator>*</operator><name>ppWriter</name><operator>)</operator><operator>-&gt;</operator><name>pTsdb</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>sync</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFsyncFile</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppWriter</name><operator>)</operator><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFsyncFile</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppWriter</name><operator>)</operator><operator>-&gt;</operator><name>pDataFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFsyncFile</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppWriter</name><operator>)</operator><operator>-&gt;</operator><name>pSmaFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFsyncFile</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppWriter</name><operator>)</operator><operator>-&gt;</operator><name>pSttFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppWriter</name><operator>)</operator><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppWriter</name><operator>)</operator><operator>-&gt;</operator><name>pDataFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppWriter</name><operator>)</operator><operator>-&gt;</operator><name>pSmaFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppWriter</name><operator>)</operator><operator>-&gt;</operator><name>pSttFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBuf</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppWriter</name><operator>)</operator><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>iBuf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppWriter</name><operator>)</operator><operator>-&gt;</operator><name>aBuf</name></name><index>[<expr><name>iBuf</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><name>ppWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>_exit</name>:</label>
  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, data file writer close failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbUpdateDFileSetHeader</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>hdr</name><index>[<expr><name>TSDB_FHDR_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="line">// head ==============</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tPutHeadFile</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fHead</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// data ==============</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tPutDataFile</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDataFD</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// sma ==============</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tPutSmaFile</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSmaFD</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// stt ==============</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tPutSttFile</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fStt</name><index>[<expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSttFD</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, update DFileSet header failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbWriteBlockIdx</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aBlockIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHeadFile</name> <modifier>*</modifier></type><name>pHeadFile</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fHead</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>n</name></decl>;</decl_stmt>

  <comment type="line">// check</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aBlockIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pHeadFile</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// prepare</comment>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBlockIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBlockIdx</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aBlockIdx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iBlockIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>tPutBlockIdx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aBlockIdx</name></expr></argument>, <argument><expr><name>iBlockIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// build</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBlockIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBlockIdx</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aBlockIdx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iBlockIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutBlockIdx</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aBlockIdx</name></expr></argument>, <argument><expr><name>iBlockIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// write</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>, <argument><expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// update</comment>
  <expr_stmt><expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pHeadFile</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <comment type="line">// tsdbTrace("vgId:%d, write block idx, offset:%" PRId64 " size:%" PRId64 " nBlockIdx:%d",</comment>
  <comment type="line">// TD_VID(pWriter-&gt;pTsdb-&gt;pVnode),</comment>
  <comment type="line">//           pHeadFile-&gt;offset, size, taosArrayGetSize(aBlockIdx));</comment>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, write block idx failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbWriteDataBlk</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>mDataBlk</name></decl></parameter>, <parameter><decl><type><name>SBlockIdx</name> <modifier>*</modifier></type><name>pBlockIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHeadFile</name> <modifier>*</modifier></type><name>pHeadFile</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fHead</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>n</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>mDataBlk</name><operator>-&gt;</operator><name>nItem</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>tPutMapData</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// build</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>tPutMapData</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mDataBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// write</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>, <argument><expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// update</comment>
  <expr_stmt><expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pHeadFile</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, write block, file ID:%d commit ID:%"</literal> <name>PRId64</name> <literal type="string">" suid:%"</literal> <name>PRId64</name> <literal type="string">" uid:%"</literal> <name>PRId64</name> <literal type="string">" offset:%"</literal> <name>PRId64</name>
            <literal type="string">" size:%"</literal> <name>PRId64</name> <literal type="string">" nItem:%d"</literal></expr></argument>,
            <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>commitID</name></name></expr></argument>, <argument><expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>,
            <argument><expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>mDataBlk</name><operator>-&gt;</operator><name>nItem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, write block failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbWriteSttBlk</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aSttBlk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttFile</name> <modifier>*</modifier></type><name>pSttFile</name> <init>= <expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fStt</name><index>[<expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>n</name></decl>;</decl_stmt>

  <comment type="line">// check</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aSttBlk</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSttFile</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pSttFile</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// size</comment>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBlockL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBlockL</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aSttBlk</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iBlockL</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>tPutSttBlk</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aSttBlk</name></expr></argument>, <argument><expr><name>iBlockL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// encode</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBlockL</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBlockL</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aSttBlk</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iBlockL</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutSttBlk</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aSttBlk</name></expr></argument>, <argument><expr><name>iBlockL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// write</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSttFD</name></name></expr></argument>, <argument><expr><name><name>pSttFile</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// update</comment>
  <expr_stmt><expr><name><name>pSttFile</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pSttFile</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSttFile</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>tsdbTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb write stt block, loffset:%"</literal> <name>PRId64</name> <literal type="string">" size:%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name><name>pSttFile</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb write blockl failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbWriteBlockSma</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SSmaInfo</name> <modifier>*</modifier></type><name>pSmaInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// encode</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iColData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iColData</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr>;</condition> <incr><expr><name>iColData</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name> <init>= <expr><call><name>tBlockDataGetColDataByIdx</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>iColData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>!</operator><name><name>pColData</name><operator>-&gt;</operator><name>smaOn</name></name><operator>)</operator> <operator>||</operator> <call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><name><name>pColData</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;</operator> <name>HAS_VALUE</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>SColumnDataAgg</name></type> <name>sma</name> <init>= <expr><block>{<expr><operator>.</operator><name>colId</name> <operator>=</operator> <name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tColDataCalcSMA</name><index>[<expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr>]</index></name><operator>(</operator><name>pColData</name><operator>,</operator> <operator>&amp;</operator><name><name>sma</name><operator>.</operator><name>sum</name></name><operator>,</operator> <operator>&amp;</operator><name><name>sma</name><operator>.</operator><name>max</name></name><operator>,</operator> <operator>&amp;</operator><name><name>sma</name><operator>.</operator><name>min</name></name><operator>,</operator> <operator>&amp;</operator><name><name>sma</name><operator>.</operator><name>numOfNull</name></name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <call><name>tPutColumnDataAgg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sma</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <call><name>tPutColumnDataAgg</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// write</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSmaFD</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb write block sma failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbWriteBlockData</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>, <parameter><decl><type><name>SBlockInfo</name> <modifier>*</modifier></type><name>pBlkInfo</name></decl></parameter>, <parameter><decl><type><name>SSmaInfo</name> <modifier>*</modifier></type><name>pSmaInfo</name></decl></parameter>,
                           <parameter><decl><type><name>int8_t</name></type> <name>cmprAlg</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>toLast</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>toLast</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>fStt</name><index>[<expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>fData</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name><name>aBufN</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tCmprBlockData</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>cmprAlg</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>, <argument><expr><name>aBufN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// write =================</comment>
  <decl_stmt><decl><type><name>STsdbFD</name> <modifier>*</modifier></type><name>pFD</name> <init>= <expr><ternary><condition><expr><name>toLast</name></expr> ?</condition><then> <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSttFD</name></name></expr> </then><else>: <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pDataFD</name></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name> <operator>=</operator> <name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name> <operator>=</operator> <name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <operator>+</operator> <name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>aBufN</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>aBufN</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name><name>aBufN</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>aBufN</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// update info</comment>
  <if_stmt><if>if <condition>(<expr><name>toLast</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fStt</name><index>[<expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>+=</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fData</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// ================= SMA ====================</comment>
  <if_stmt><if>if <condition>(<expr><name>pSmaInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteBlockSma</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>pSmaInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <expr_stmt><expr><call><name>tsdbTrace</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb write block data, suid:%"</literal> <name>PRId64</name> <literal type="string">" uid:%"</literal> <name>PRId64</name> <literal type="string">" nRow:%d, offset:%"</literal> <name>PRId64</name> <literal type="string">" size:%d"</literal></expr></argument>,
            <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name></expr></argument>, <argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name></expr></argument>, <argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>,
            <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb write block data failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbWriteDiskData</name><parameter_list>(<parameter><decl><type><name>SDataFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SDiskData</name> <modifier>*</modifier></type><name>pDiskData</name></decl></parameter>, <parameter><decl><type><name>SBlockInfo</name> <modifier>*</modifier></type><name>pBlkInfo</name></decl></parameter>, <parameter><decl><type><name>SSmaInfo</name> <modifier>*</modifier></type><name>pSmaInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STsdbFD</name> <modifier>*</modifier></type><name>pFD</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pSmaInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pFD</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>pDataFD</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>fData</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pFD</name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>pSttFD</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>fStt</name><index>[<expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <comment type="line">// hdr</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><call><name>tPutDiskDataHdr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tPutDiskDataHdr</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>

  <comment type="line">// uid + ver + key</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pDiskData</name><operator>-&gt;</operator><name>pUid</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr></argument>, <argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>pUid</name></name></expr></argument>, <argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name> <operator>+=</operator> <name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szUid</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name> <operator>+=</operator> <name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szUid</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr></argument>, <argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>pVer</name></name></expr></argument>, <argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szVer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name> <operator>+=</operator> <name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szVer</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name> <operator>+=</operator> <name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szVer</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr></argument>, <argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>pKey</name></name></expr></argument>, <argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name> <operator>+=</operator> <name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szKey</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name> <operator>+=</operator> <name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szKey</name></name></expr>;</expr_stmt>

  <comment type="line">// aBlockCol</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iDiskCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iDiskCol</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iDiskCol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SDiskCol</name> <modifier>*</modifier></type><name>pDiskCol</name> <init>= <expr><operator>(</operator><name>SDiskCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name></expr></argument>, <argument><expr><name>iDiskCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutBlockCol</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>pDiskCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name> <operator>+=</operator> <name><name>pDiskData</name><operator>-&gt;</operator><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// aDiskCol</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iDiskCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iDiskCol</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iDiskCol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDiskCol</name> <modifier>*</modifier></type><name>pDiskCol</name> <init>= <expr><operator>(</operator><name>SDiskCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name></expr></argument>, <argument><expr><name>iDiskCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>pBit</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr></argument>, <argument><expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>pBit</name></name></expr></argument>, <argument><expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>szBitmap</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name> <operator>+=</operator> <name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>szBitmap</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>pOff</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr></argument>, <argument><expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>pOff</name></name></expr></argument>, <argument><expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>szOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name> <operator>+=</operator> <name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>szOffset</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>pVal</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr></argument>, <argument><expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>pVal</name></name></expr></argument>, <argument><expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>szValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name> <operator>+=</operator> <name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>szValue</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>pSmaInfo</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fData</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fStt</name><index>[<expr><name><name>pWriter</name><operator>-&gt;</operator><name>wSet</name><operator>.</operator><name>nSttF</name></name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>+=</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iDiskCol</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iDiskCol</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iDiskCol</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SDiskCol</name> <modifier>*</modifier></type><name>pDiskCol</name> <init>= <expr><operator>(</operator><name>SDiskCol</name> <operator>*</operator><operator>)</operator><call><name>taosArrayGet</name><argument_list>(<argument><expr><name><name>pDiskData</name><operator>-&gt;</operator><name>aDiskCol</name></name></expr></argument>, <argument><expr><name>iDiskCol</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>IS_VAR_DATA_TYPE</name><argument_list>(<argument><expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NULL</name> <operator>||</operator> <name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>flag</name></name> <operator>==</operator> <operator>(</operator><name>HAS_NULL</name> <operator>|</operator> <name>HAS_NONE</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pDiskCol</name><operator>-&gt;</operator><name>bCol</name><operator>.</operator><name>smaOn</name></name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name> <operator>+</operator> <call><name>tPutColumnDataAgg</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskCol</name><operator>-&gt;</operator><name>agg</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name> <operator>+=</operator> <call><name>tPutColumnDataAgg</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDiskCol</name><operator>-&gt;</operator><name>agg</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pSmaFD</name></name></expr></argument>, <argument><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fSma</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbDFileSetCopy</name><parameter_list>(<parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSetFrom</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSetTo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pOutFD</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>PInFD</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>szPage</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>szPage</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>fNameFrom</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>fNameTo</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="line">// head</comment>
  <expr_stmt><expr><call><name>tsdbHeadFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>, <argument><expr><name>fNameFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbHeadFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>, <argument><expr><name>fNameTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pOutFD</name> <operator>=</operator> <call><name>taosCreateFile</name><argument_list>(<argument><expr><name>fNameTo</name></expr></argument>, <argument><expr><name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOutFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>PInFD</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fNameFrom</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>PInFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>taosFSendFile</name><argument_list>(<argument><expr><name>pOutFD</name></expr></argument>, <argument><expr><name>PInFD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>tsdbLogicToFileSize</name><argument_list>(<argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>pHeadF</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pOutFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PInFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// data</comment>
  <expr_stmt><expr><call><name>tsdbDataFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>, <argument><expr><name>fNameFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbDataFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>, <argument><expr><name>fNameTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pOutFD</name> <operator>=</operator> <call><name>taosCreateFile</name><argument_list>(<argument><expr><name>fNameTo</name></expr></argument>, <argument><expr><name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOutFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>PInFD</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fNameFrom</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>PInFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>taosFSendFile</name><argument_list>(<argument><expr><name>pOutFD</name></expr></argument>, <argument><expr><name>PInFD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>tsdbLogicToFileSize</name><argument_list>(<argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>pDataF</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pOutFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PInFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// sma</comment>
  <expr_stmt><expr><call><name>tsdbSmaFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>, <argument><expr><name>fNameFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tsdbSmaFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>, <argument><expr><name>fNameTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pOutFD</name> <operator>=</operator> <call><name>taosCreateFile</name><argument_list>(<argument><expr><name>fNameTo</name></expr></argument>, <argument><expr><name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOutFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>PInFD</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fNameFrom</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>PInFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>taosFSendFile</name><argument_list>(<argument><expr><name>pOutFD</name></expr></argument>, <argument><expr><name>PInFD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>tsdbLogicToFileSize</name><argument_list>(<argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>pSmaF</name><operator>-&gt;</operator><name>size</name></name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pOutFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PInFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// stt</comment>
  <for>for <control>(<init><decl><type><name>int8_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSetFrom</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbSttFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>, <argument><expr><name>fNameFrom</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbSttFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSetTo</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>, <argument><expr><name>fNameTo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pOutFD</name> <operator>=</operator> <call><name>taosCreateFile</name><argument_list>(<argument><expr><name>fNameTo</name></expr></argument>, <argument><expr><name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>pOutFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>PInFD</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fNameFrom</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>PInFD</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>taosFSendFile</name><argument_list>(<argument><expr><name>pOutFD</name></expr></argument>, <argument><expr><name>PInFD</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>tsdbLogicToFileSize</name><argument_list>(<argument><expr><name><name>pSetFrom</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name><operator>-&gt;</operator><name>size</name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>TAOS_SYSTEM_ERROR</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pOutFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>PInFD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb DFileSet copy failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SDataFReader ====================================================</comment>
<function><type><name>int32_t</name></type> <name>tsdbDataFReaderOpen</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppReader</name></decl></parameter>, <parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>, <parameter><decl><type><name>SDFileSet</name> <modifier>*</modifier></type><name>pSet</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>szPage</name> <init>= <expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbPageSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>          <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pReader</name> <operator>=</operator> <operator>(</operator><name>SDataFReader</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name></name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSet</name></name> <operator>=</operator> <name>pSet</name></expr>;</expr_stmt>

  <comment type="line">// head</comment>
  <expr_stmt><expr><call><name>tsdbHeadFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// data</comment>
  <expr_stmt><expr><call><name>tsdbDataFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pDataF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDataFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// sma</comment>
  <expr_stmt><expr><call><name>tsdbSmaFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>pSmaF</name></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pSmaFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// stt</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbSttFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>diskId</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>fid</name></name></expr></argument>, <argument><expr><name><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>szPage</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aSttFD</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>pReader</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name><name>pSet</name><operator>-&gt;</operator><name>nSttF</name></name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aSttFD</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
      <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pSmaFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pDataFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>pReader</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbDataFReaderClose</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>*</operator><name>ppReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// head</comment>
  <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// data</comment>
  <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>pDataFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// sma</comment>
  <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>pSmaFD</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// stt</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iStt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iStt</name> <operator>&lt;</operator> <name>TSDB_MAX_STT_TRIGGER</name></expr>;</condition> <incr><expr><name>iStt</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>aSttFD</name></name><index>[<expr><name>iStt</name></expr>]</index></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>aSttFD</name></name><index>[<expr><name>iStt</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBuf</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>iBuf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><operator>(</operator><operator>*</operator><name>ppReader</name><operator>)</operator><operator>-&gt;</operator><name>aBuf</name></name><index>[<expr><name>iBuf</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><operator>*</operator><name>ppReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbReadBlockIdx</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aBlockIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SHeadFile</name> <modifier>*</modifier></type><name>pHeadFile</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pSet</name><operator>-&gt;</operator><name>pHeadF</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>offset</name> <init>= <expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>    <name>size</name> <init>= <expr><name><name>pHeadFile</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>aBlockIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// read</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFile</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// decode</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SBlockIdx</name></type> <name>blockIdx</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetBlockIdx</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aBlockIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>blockIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, read block idx failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbReadSttBlk</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iStt</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aSttBlk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSttFile</name> <modifier>*</modifier></type><name>pSttFile</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>pSet</name><operator>-&gt;</operator><name>aSttF</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>offset</name> <init>= <expr><name><name>pSttFile</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>size</name> <init>= <expr><name><name>pSttFile</name><operator>-&gt;</operator><name>size</name></name> <operator>-</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>aSttBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>code</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// read</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFile</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aSttFD</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// decode</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SSttBlk</name></type> <name>sttBlk</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetSttBlk</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sttBlk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aSttBlk</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sttBlk</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, read stt blk failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbReadDataBlk</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>SBlockIdx</name> <modifier>*</modifier></type><name>pBlockIdx</name></decl></parameter>, <parameter><decl><type><name>SMapData</name> <modifier>*</modifier></type><name>mDataBlk</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><name><name>pBlockIdx</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// read</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFile</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pHeadFD</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// decode</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name> <init>= <expr><call><name>tGetMapData</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>mDataBlk</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_err</name>;</goto>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, read block failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbReadBlockSma</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pDataBlk</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aColumnDataAgg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SSmaInfo</name> <modifier>*</modifier></type><name>pSmaInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>smaInfo</name></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>aColumnDataAgg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// read</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFile</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pSmaFD</name></name></expr></argument>, <argument><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// decode</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SColumnDataAgg</name></type> <name>sma</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetColumnDataAgg</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sma</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aColumnDataAgg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sma</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name><name>pSmaInfo</name><operator>-&gt;</operator><name>size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb read block sma failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>tsdbReadBlockDataImpl</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>SBlockInfo</name> <modifier>*</modifier></type><name>pBlkInfo</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>,
                                     <parameter><decl><type><name>int32_t</name></type> <name>iStt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>tBlockDataClear</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>STsdbFD</name> <modifier>*</modifier></type><name>pFD</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name>iStt</name> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFD</name></name></expr> </then><else>: <expr><name><name>pReader</name><operator>-&gt;</operator><name>aSttFD</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <comment type="line">// uid + version + tskey</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>SDiskDataHdr</name></type> <name>hdr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name>     <modifier>*</modifier></type><name>p</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <call><name>tGetDiskDataHdr</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>hdr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>delimiter</name></name> <operator>==</operator> <name>TSDB_FILE_DLMT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>suid</name></name> <operator>==</operator> <name><name>hdr</name><operator>.</operator><name>suid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>uid</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>uid</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nRow</name></name> <operator>=</operator> <name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr>;</expr_stmt>

  <comment type="line">// uid</comment>
  <if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>uid</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>hdr</name><operator>.</operator><name>szUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDecmprData</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>szUid</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>cmprAlg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aUid</name></name></expr></argument>,
                          <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>hdr</name><operator>.</operator><name>szUid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>hdr</name><operator>.</operator><name>szUid</name></name></expr>;</expr_stmt>

  <comment type="line">// version</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDecmprData</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>szVer</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>cmprAlg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aVersion</name></name></expr></argument>,
                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>hdr</name><operator>.</operator><name>szVer</name></name></expr>;</expr_stmt>

  <comment type="line">// TSKEY</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDecmprData</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>szKey</name></name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>cmprAlg</name></name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>pBlockData</name><operator>-&gt;</operator><name>aTSKEY</name></name></expr></argument>,
                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TSKEY</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name><name>hdr</name><operator>.</operator><name>szKey</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>p</name> <operator>-</operator> <name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// read and decode columns</comment>
  <if_stmt><if>if <condition>(<expr><name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_exit</name>;</goto></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SBlockCol</name></type>  <name>blockCol</name> <init>= <expr><block>{<expr><operator>.</operator><name>cid</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockCol</name> <modifier>*</modifier></type><name>pBlockCol</name> <init>= <expr><operator>&amp;</operator><name>blockCol</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iColData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iColData</name> <operator>&lt;</operator> <name><name>pBlockData</name><operator>-&gt;</operator><name>nColData</name></name></expr>;</condition> <incr><expr><name>iColData</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SColData</name> <modifier>*</modifier></type><name>pColData</name> <init>= <expr><call><name>tBlockDataGetColDataByIdx</name><argument_list>(<argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>iColData</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>pBlockCol</name> <operator>&amp;&amp;</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>cid</name></name> <operator>&lt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&lt;</operator> <name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetBlockCol</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><name>pBlockCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pBlockCol</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>pBlockCol</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>cid</name></name> <operator>&gt;</operator> <name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr>)</condition> <block>{<block_content>
      <comment type="line">// add a lot of NONE</comment>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iRow</name> <operator>&lt;</operator> <name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NONE</name><argument_list>(<argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name><name>pColData</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>&amp;&amp;</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>!=</operator> <name>HAS_NONE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>flag</name></name> <operator>==</operator> <name>HAS_NULL</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// add a lot of NULL</comment>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iRow</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iRow</name> <operator>&lt;</operator> <name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr>;</condition> <incr><expr><name>iRow</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tColDataAppendValue</name><argument_list>(<argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><call><name>COL_VAL_NULL</name><argument_list>(<argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>cid</name></name></expr></argument>, <argument><expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></for>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// decode from binary</comment>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><name><name>pBlkInfo</name><operator>-&gt;</operator><name>offset</name></name> <operator>+</operator> <name><name>pBlkInfo</name><operator>-&gt;</operator><name>szKey</name></name> <operator>+</operator> <name><name>hdr</name><operator>.</operator><name>szBlkCol</name></name> <operator>+</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><name><name>pBlockCol</name><operator>-&gt;</operator><name>szBitmap</name></name> <operator>+</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>szOffset</name></name> <operator>+</operator> <name><name>pBlockCol</name><operator>-&gt;</operator><name>szValue</name></name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFile</name><argument_list>(<argument><expr><name>pFD</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbDecmprColData</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pBlockCol</name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>cmprAlg</name></name></expr></argument>, <argument><expr><name><name>hdr</name><operator>.</operator><name>nRow</name></name></expr></argument>, <argument><expr><name>pColData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

<label><name>_exit</name>:</label>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb read block data impl failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbReadDataBlockEx</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pDataBlk</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SBlockInfo</name> <modifier>*</modifier></type><name>pBlockInfo</name> <init>= <expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>aSubBlock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// read</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFile</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pDataFD</name></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// decmpr</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecmprBlockData</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pBlockInfo</name><operator>-&gt;</operator><name>szBlock</name></name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb read data block ex failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbReadDataBlock</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>SDataBlk</name> <modifier>*</modifier></type><name>pDataBlk</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadBlockDataImpl</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDataBlk</name><operator>-&gt;</operator><name>aSubBlock</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>pDataBlk</name><operator>-&gt;</operator><name>nSubBlock</name></name> <operator>==</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, tsdb read data block failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbReadSttBlock</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iStt</name></decl></parameter>, <parameter><decl><type><name>SSttBlk</name> <modifier>*</modifier></type><name>pSttBlk</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadBlockDataImpl</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pSttBlk</name><operator>-&gt;</operator><name>bInfo</name></name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><name>iStt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbReadSttBlockEx</name><parameter_list>(<parameter><decl><type><name>SDataFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>iStt</name></decl></parameter>, <parameter><decl><type><name>SSttBlk</name> <modifier>*</modifier></type><name>pSttBlk</name></decl></parameter>, <parameter><decl><type><name>SBlockData</name> <modifier>*</modifier></type><name>pBlockData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>szBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// read</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFile</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aSttFD</name><index>[<expr><name>iStt</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>szBlock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// decmpr</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tDecmprBlockData</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pSttBlk</name><operator>-&gt;</operator><name>bInfo</name><operator>.</operator><name>szBlock</name></name></expr></argument>, <argument><expr><name>pBlockData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// SDelFWriter ====================================================</comment>
<function><type><name>int32_t</name></type> <name>tsdbDelFWriterOpen</name><parameter_list>(<parameter><decl><type><name>SDelFWriter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppWriter</name></decl></parameter>, <parameter><decl><type><name>SDelFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>         <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>      <name><name>hdr</name><index>[<expr><name>TSDB_FHDR_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelFWriter</name> <modifier>*</modifier></type><name>pDelFWriter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>      <name>n</name></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pDelFWriter</name> <operator>=</operator> <operator>(</operator><name>SDelFWriter</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pDelFWriter</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDelFWriter</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pDelFWriter</name><operator>-&gt;</operator><name>pTsdb</name></name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDelFWriter</name><operator>-&gt;</operator><name>fDel</name></name> <operator>=</operator> <operator>*</operator><name>pFile</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbDelFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbPageSize</name></name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_CREATE</name></expr></argument>,
                      <argument><expr><operator>&amp;</operator><name><name>pDelFWriter</name><operator>-&gt;</operator><name>pWriteH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// update header</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pDelFWriter</name><operator>-&gt;</operator><name>pWriteH</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>TSDB_FHDR_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>TSDB_CHECK_CODE</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><name>_exit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pDelFWriter</name><operator>-&gt;</operator><name>fDel</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name>TSDB_FHDR_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDelFWriter</name><operator>-&gt;</operator><name>fDel</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>pDelFWriter</name></expr>;</expr_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pDelFWriter</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pDelFWriter</name><operator>-&gt;</operator><name>pWriteH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pDelFWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at line %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>pDelFWriter</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbDelFWriterClose</name><parameter_list>(<parameter><decl><type><name>SDelFWriter</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppWriter</name></decl></parameter>, <parameter><decl><type><name>int8_t</name></type> <name>sync</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelFWriter</name> <modifier>*</modifier></type><name>pWriter</name> <init>= <expr><operator>*</operator><name>ppWriter</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdb</name>       <modifier>*</modifier></type><name>pTsdb</name> <init>= <expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// sync</comment>
  <if_stmt><if>if <condition>(<expr><name>sync</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbFsyncFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pWriteH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// close</comment>
  <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>pWriteH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBuf</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>iBuf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><name>iBuf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pWriter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppWriter</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to close del file writer since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbWriteDelData</name><parameter_list>(<parameter><decl><type><name>SDelFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aDelData</name></decl></parameter>, <parameter><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>pDelIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name></decl>;</decl_stmt>

  <comment type="line">// prepare</comment>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iDelData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iDelData</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iDelData</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>tPutDelData</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>, <argument><expr><name>iDelData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// build</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iDelData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iDelData</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iDelData</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutDelData</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>, <argument><expr><name>iDelData</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// write</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pWriteH</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fDel</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// update</comment>
  <expr_stmt><expr><name><name>pDelIdx</name><operator>-&gt;</operator><name>offset</name></name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>fDel</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDelIdx</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fDel</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, failed to write del data since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbWriteDelIdx</name><parameter_list>(<parameter><decl><type><name>SDelFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aDelIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>size</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>  <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>pDelIdx</name></decl>;</decl_stmt>

  <comment type="line">// prepare</comment>
  <expr_stmt><expr><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iDelIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iDelIdx</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aDelIdx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iDelIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <call><name>tPutDelIdx</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aDelIdx</name></expr></argument>, <argument><expr><name>iDelIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// build</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iDelIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iDelIdx</name> <operator>&lt;</operator> <call><name>taosArrayGetSize</name><argument_list>(<argument><expr><name>aDelIdx</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>iDelIdx</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tPutDelIdx</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><call><name>taosArrayGet</name><argument_list>(<argument><expr><name>aDelIdx</name></expr></argument>, <argument><expr><name>iDelIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// write</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pWriteH</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fDel</name><operator>.</operator><name>size</name></name></expr></argument>, <argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// update</comment>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fDel</name><operator>.</operator><name>offset</name></name> <operator>=</operator> <name><name>pWriter</name><operator>-&gt;</operator><name>fDel</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pWriter</name><operator>-&gt;</operator><name>fDel</name><operator>.</operator><name>size</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, write del idx failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbUpdateDelFileHdr</name><parameter_list>(<parameter><decl><type><name>SDelFWriter</name> <modifier>*</modifier></type><name>pWriter</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>hdr</name><index>[<expr><name>TSDB_FHDR_SIZE</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><name>TSDB_FHDR_SIZE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name></decl>;</decl_stmt>

  <comment type="line">// build</comment>
  <expr_stmt><expr><call><name>tPutDelFile</name><argument_list>(<argument><expr><name>hdr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pWriter</name><operator>-&gt;</operator><name>fDel</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// write</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbWriteFile</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pWriteH</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>hdr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, update del file hdr failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pWriter</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
<comment type="line">// SDelFReader ====================================================</comment>
<struct>struct <name>SDelFReader</name> <block>{
  <decl_stmt><decl><type><name>STsdb</name>   <modifier>*</modifier></type><name>pTsdb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelFile</name></type> <name>fDel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STsdbFD</name> <modifier>*</modifier></type><name>pReadH</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name><name>aBuf</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int32_t</name></type> <name>tsdbDelFReaderOpen</name><parameter_list>(<parameter><decl><type><name>SDelFReader</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppReader</name></decl></parameter>, <parameter><decl><type><name>SDelFile</name> <modifier>*</modifier></type><name>pFile</name></decl></parameter>, <parameter><decl><type><name>STsdb</name> <modifier>*</modifier></type><name>pTsdb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>lino</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>         <name><name>fname</name><index>[<expr><name>TSDB_FILENAME_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelFReader</name> <modifier>*</modifier></type><name>pDelFReader</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>pDelFReader</name> <operator>=</operator> <operator>(</operator><name>SDelFReader</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pDelFReader</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pDelFReader</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// open impl</comment>
  <expr_stmt><expr><name><name>pDelFReader</name><operator>-&gt;</operator><name>pTsdb</name></name> <operator>=</operator> <name>pTsdb</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pDelFReader</name><operator>-&gt;</operator><name>fDel</name></name> <operator>=</operator> <operator>*</operator><name>pFile</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tsdbDelFileName</name><argument_list>(<argument><expr><name>pTsdb</name></expr></argument>, <argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbOpenFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name><operator>-&gt;</operator><name>config</name><operator>.</operator><name>tsdbPageSize</name></name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pDelFReader</name><operator>-&gt;</operator><name>pReadH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pDelFReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>_exit</name>;</goto>
  </block_content>}</block></if></if_stmt>

<label><name>_exit</name>:</label>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, %s failed at %d since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>lino</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>pDelFReader</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbDelFReaderClose</name><parameter_list>(<parameter><decl><type><name>SDelFReader</name> <modifier>*</modifier><modifier>*</modifier></type><name>ppReader</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SDelFReader</name> <modifier>*</modifier></type><name>pReader</name> <init>= <expr><operator>*</operator><name>ppReader</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>pReader</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tsdbCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>pReadH</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>iBuf</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>iBuf</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name></name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>iBuf</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>tFree</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><name>iBuf</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pReader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>ppReader</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbReadDelData</name><parameter_list>(<parameter><decl><type><name>SDelFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>SDelIdx</name> <modifier>*</modifier></type><name>pDelIdx</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aDelData</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><name><name>pDelIdx</name><operator>-&gt;</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><name><name>pDelIdx</name><operator>-&gt;</operator><name>size</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>n</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// read</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFile</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadH</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// // decode</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDelData</name></type> <name>delData</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetDelData</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aDelData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delData</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, read del data failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>tsdbReadDelIdx</name><parameter_list>(<parameter><decl><type><name>SDelFReader</name> <modifier>*</modifier></type><name>pReader</name></decl></parameter>, <parameter><decl><type><name>SArray</name> <modifier>*</modifier></type><name>aDelIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>offset</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>fDel</name><operator>.</operator><name>offset</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>size</name> <init>= <expr><name><name>pReader</name><operator>-&gt;</operator><name>fDel</name><operator>.</operator><name>size</name></name> <operator>-</operator> <name>offset</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosArrayClear</name><argument_list>(<argument><expr><name>aDelIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// alloc</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tRealloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// read</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tsdbReadFile</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pReadH</name></name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>_err</name>;</goto></block_content></block></if></if_stmt>

  <comment type="line">// decode</comment>
  <expr_stmt><expr><name>n</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <while>while <condition>(<expr><name>n</name> <operator>&lt;</operator> <name>size</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SDelIdx</name></type> <name>delIdx</name></decl>;</decl_stmt>

    <expr_stmt><expr><name>n</name> <operator>+=</operator> <call><name>tGetDelIdx</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>aBuf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>+</operator> <name>n</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>taosArrayPush</name><argument_list>(<argument><expr><name>aDelIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>delIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <name>TSDB_CODE_OUT_OF_MEMORY</name></expr>;</expr_stmt>
      <goto>goto <name>_err</name>;</goto>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>n</name> <operator>==</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>code</name></expr>;</return>

<label><name>_err</name>:</label>
  <expr_stmt><expr><call><name>tsdbError</name><argument_list>(<argument><expr><literal type="string">"vgId:%d, read del idx failed since %s"</literal></expr></argument>, <argument><expr><call><name>TD_VID</name><argument_list>(<argument><expr><name><name>pReader</name><operator>-&gt;</operator><name>pTsdb</name><operator>-&gt;</operator><name>pVnode</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>
</unit>
