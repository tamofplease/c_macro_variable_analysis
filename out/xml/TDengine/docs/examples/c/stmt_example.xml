<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/docs/examples/c/stmt_example.c"><comment type="line">// compile with</comment>
<comment type="line">// gcc -o stmt_example stmt_example.c -ltaos</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**
 * @brief execute sql only.
 * 
 * @param taos 
 * @param sql 
 */</comment>
<function><type><name>void</name></type> <name>executeSQL</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**
 * @brief check return status and exit program when error occur.
 * 
 * @param stmt 
 * @param code 
 * @param msg 
 */</comment>
<function><type><name>void</name></type> <name>checkErrorCode</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s. error: %s\n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type> <name>current</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>voltage</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type> <name>phase</name></decl>;</decl_stmt>
}</block></struct></type> <name>Row</name>;</typedef>

<comment type="block" format="doxygen">/**
 * @brief insert data using stmt API
 * 
 * @param taos 
 */</comment>
<function><type><name>void</name></type> <name>insertData</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// init</comment>
  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// prepare</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"INSERT INTO ? USING meters TAGS(?, ?) VALUES(?, ?, ?, ?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>checkErrorCode</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"failed to execute taos_stmt_prepare"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// bind table name and tags</comment>
  <decl_stmt><decl><type><name>TAOS_BIND</name></type> <name><name>tags</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>location</name> <init>= <expr><literal type="string">"California.SanFrancisco"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>groupId</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>location</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name>location</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  
  <expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>tags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name>groupId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tags</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname_tags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="string">"d1001"</literal></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkErrorCode</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname_tags"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// insert two rows</comment>
  <decl_stmt><decl><type><name>Row</name></type> <name><name>rows</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="number">1648432611249</literal></expr>, <expr><literal type="number">10.3</literal></expr>, <expr><literal type="number">219</literal></expr>, <expr><literal type="number">0.31</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">1648432611749</literal></expr>, <expr><literal type="number">12.6</literal></expr>, <expr><literal type="number">218</literal></expr>, <expr><literal type="number">0.33</literal></expr>}</block></expr>,
  }</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS_BIND</name></type> <name><name>values</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>ts</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>current</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>voltage</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>rows</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>phase</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// bind param</comment>
    <expr_stmt><expr><call><name>checkErrorCode</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"failed to execute taos_stmt_bind_param"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">// add batch</comment>
    <expr_stmt><expr><call><name>checkErrorCode</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"failed to execute taos_stmt_add_batch"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <comment type="line">// execute</comment>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkErrorCode</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><literal type="string">"failed to execute taos_stmt_execute"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>affectedRows</name> <init>= <expr><call><name>taos_stmt_affected_rows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"successfully inserted %d rows\n"</literal></expr></argument>, <argument><expr><name>affectedRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// close</comment>
  <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">6030</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to connect to server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>executeSQL</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"CREATE DATABASE power"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>executeSQL</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"USE power"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>executeSQL</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"CREATE STABLE meters (ts TIMESTAMP, current FLOAT, voltage INT, phase FLOAT) TAGS (location BINARY(64), groupId INT)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>insertData</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="line">// output:</comment>
<comment type="line">// successfully inserted 2 rows</comment></unit>
