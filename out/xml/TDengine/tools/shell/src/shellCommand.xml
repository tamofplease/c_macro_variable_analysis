<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/tools/shell/src/shellCommand.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_XOPEN</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shellInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shellAuto.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>LEFT</name></cpp:macro>  <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>RIGHT</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UP</name></cpp:macro>    <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DOWN</name></cpp:macro>  <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PSIZE</name></cpp:macro> <cpp:value>shell.info.promptSize</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_INPUT_MAX_COMMAND_SIZE</name></cpp:macro> <cpp:value>10000</cpp:value></cpp:define>


<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>shellCountPrefixOnes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellGetNextCharSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellBackspaceChar</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellClearLineBefore</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellClearLineAfter</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellDeleteChar</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellMoveCursorLeft</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellMoveCursorRight</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellPositionCursorHome</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellPositionCursorEnd</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellPrintChar</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>times</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellPositionCursor</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>direction</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellUpdateBuffer</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>shellIsReadyGo</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellGetMbSizeInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellResetCommand</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>s</name><index>[]</index></name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>           <name>shellClearScreen</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>ecmd_pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>cursor_pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>           <name>shellShowOnScreen</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>           <name>shellGetPrevCharSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>           <name>shellInsertChar</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type>           <name>shellInsertString</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int32_t</name></type> <name>shellCountPrefixOnes</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint8_t</name></type> <name>mask</name> <init>= <expr><literal type="number">127</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>mask</name> <operator>=</operator> <operator>~</operator><name>mask</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>c</name> <operator>&amp;</operator> <name>mask</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>c</name> <operator>&lt;&lt;=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellGetPrevCharSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pos</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdWchar</name></type> <name>wc</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <while>while <condition>(<expr><operator>--</operator><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>size</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>shellCountPrefixOnes</name><argument_list>(<argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator><name><name>str</name><index>[<expr><name>pos</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosMbToWchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>MB_CUR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// assert(rc == *size); // it will be core, if str is encode by utf8 and taos charset is gbk</comment>

  <expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <call><name>taosWcharWidth</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellGetNextCharSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pos</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdWchar</name></type> <name>wc</name></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>taosMbToWchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>MB_CUR_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <call><name>taosWcharWidth</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellInsertChar</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>c</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdWchar</name></type> <name>wc</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosMbToWchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* update the buffer */</comment>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>,
          <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>-</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* update the values */</comment>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+=</operator> <call><name>taosWcharWidth</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+=</operator> <call><name>taosWcharWidth</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// set string end</comment>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<comment type="line">// insert string . count is str char count</comment>
<function><type><name>void</name></type> <name>shellInsertStr</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* update the buffer */</comment>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>+</operator> <name>size</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>,
          <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>-</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/* update the values */</comment>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>

  <comment type="line">// set string end</comment>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellBackspaceChar</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>shellGetPrevCharSize</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>-</operator> <name>size</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>,
            <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>-</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>
    <comment type="line">// set string end</comment>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellClearLineBefore</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>-</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>-=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>;</expr_stmt>
  <comment type="line">// set string end</comment>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellClearLineAfter</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>-=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>-</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellDeleteChar</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>shellGetNextCharSize</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>+</operator> <name>size</name></expr></argument>,
            <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>-</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>-</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>
    <comment type="line">// set string end</comment>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name><index>[<expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellMoveCursorLeft</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>shellGetPrevCharSize</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellMoveCursorRight</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>shellGetNextCharSize</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>+=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+=</operator> <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellPositionCursorHome</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>positionCursorMiddle</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name><operator>/</operator><literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellPositionCursorEnd</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellPrintChar</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>times</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>times</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"%c"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellPositionCursor</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>step</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>direction</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINDOWS</name></cpp:ifndef>
  <if_stmt><if>if <condition>(<expr><name>step</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>direction</name> <operator>==</operator> <name>LEFT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\033[%dD"</literal></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>direction</name> <operator>==</operator> <name>RIGHT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\033[%dC"</literal></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>direction</name> <operator>==</operator> <name>UP</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\033[%dA"</literal></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>direction</name> <operator>==</operator> <name>DOWN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\033[%dB"</literal></expr></argument>, <argument><expr><name>step</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellUpdateBuffer</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">"(\\s+$)|(^$)"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>bufferSize</name></name> <operator>+=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellIsReadyGo</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>total</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name> <operator>-</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>total</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>reg_str</name> <init>=
      <expr><literal type="string">"(^.*;\\s*$)|(^\\s*$)|(^\\s*exit\\s*$)|(^\\s*q\\s*$)|(^\\s*quit\\s*$)|(^"</literal>
      <literal type="string">"\\s*clear\\s*$)"</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>total</name></expr></argument>, <argument><expr><name>reg_str</name></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellGetMbSizeInfo</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdWchar</name> <modifier>*</modifier></type><name>wc</name> <init>= <expr><operator>(</operator><name>TdWchar</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdWchar</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><operator>*</operator><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMbsToWchars</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>width</name> <operator>=</operator> <call><name>taosWcharsWidth</name><argument_list>(<argument><expr><name>wc</name></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellResetCommand</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>s</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&lt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>&gt;=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name>s</name></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>shellGetMbSizeInfo</name><argument_list>(<argument><expr><name>s</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>bufferSize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>=</operator> <name>width</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>shellGetScreenSize</name><parameter_list>(<parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ws_col</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>ws_row</name></decl></parameter>)</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><name>CONSOLE_SCREEN_BUFFER_INFO</name></type> <name>csbi</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>GetConsoleScreenBufferInfo</name><argument_list>(<argument><expr><call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_OUTPUT_HANDLE</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>csbi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ws_col</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ws_col</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Right</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Left</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>ws_row</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ws_row</name> <operator>=</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Bottom</name></name> <operator>-</operator> <name><name>csbi</name><operator>.</operator><name>srWindow</name><operator>.</operator><name>Top</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <decl_stmt><decl><type><name><name>struct</name> <name>winsize</name></name></type> <name>w</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ioctl</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TIOCGWINSZ</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>w</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>w</name><operator>.</operator><name>ws_col</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>w</name><operator>.</operator><name>ws_row</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// fprintf(stderr, "No stream device, and use default value(col 120, row 30)\r\n");</comment>
    <if_stmt><if>if <condition>(<expr><name>ws_col</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ws_col</name> <operator>=</operator> <literal type="number">120</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ws_row</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ws_row</name> <operator>=</operator> <literal type="number">30</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>ws_col</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ws_col</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>ws_col</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>ws_row</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><operator>*</operator><name>ws_row</name> <operator>=</operator> <name><name>w</name><operator>.</operator><name>ws_row</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellClearScreen</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>ecmd_pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>cursor_pos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ws_col</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>shellGetScreenSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ws_col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>cursor_x</name> <init>= <expr><name>cursor_pos</name> <operator>/</operator> <name>ws_col</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cursor_y</name> <init>= <expr><name>cursor_pos</name> <operator>%</operator> <name>ws_col</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>command_x</name> <init>= <expr><name>ecmd_pos</name> <operator>/</operator> <name>ws_col</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>shellPositionCursor</name><argument_list>(<argument><expr><name>cursor_y</name></expr></argument>, <argument><expr><name>LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellPositionCursor</name><argument_list>(<argument><expr><name>command_x</name> <operator>-</operator> <name>cursor_x</name></expr></argument>, <argument><expr><name>DOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINDOWS</name></cpp:ifndef>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\033[2K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>command_x</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>shellPositionCursor</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>UP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINDOWS</name></cpp:ifndef>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\033[2K"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellShowOnScreen</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ws_col</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>shellGetScreenSize</name><argument_list>(<argument><expr><operator>&amp;</operator><name>ws_col</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdWchar</name></type> <name>wc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// Print out the command.</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>total_string</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>total_string</name></expr></argument>, <argument><expr><literal type="char">'\0'</literal></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>total_string</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>promptHeader</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>total_string</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>promptContinue</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>remain_column</name> <init>= <expr><name>ws_col</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>str</name> <init>= <expr><name>total_string</name></expr></init></decl>;</init> <condition><expr><name>size</name> <operator>&lt;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>+</operator> <name>PSIZE</name></expr>;</condition><incr/>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>taosMbToWchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>MB_CUR_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>size</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
    <comment type="block">/* assert(size &gt;= 0); */</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><call><name>taosWcharWidth</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>remain_column</name> <operator>&gt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lc"</literal></expr></argument>, <argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>remain_column</name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>remain_column</name> <operator>==</operator> <name>width</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lc\n\r"</literal></expr></argument>, <argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>remain_column</name> <operator>=</operator> <name>ws_col</name></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\r%lc"</literal></expr></argument>, <argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>remain_column</name> <operator>=</operator> <name>ws_col</name> <operator>-</operator> <name>width</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name>str</name> <operator>=</operator> <name>total_string</name> <operator>+</operator> <name>size</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>total_string</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// Position the cursor</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cursor_pos</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ecmd_pos</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>PSIZE</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>cursor_x</name> <init>= <expr><name>cursor_pos</name> <operator>/</operator> <name>ws_col</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cursor_y</name> <init>= <expr><name>cursor_pos</name> <operator>%</operator> <name>ws_col</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// int32_t cursor_y = cursor % ws_col;</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>command_x</name> <init>= <expr><name>ecmd_pos</name> <operator>/</operator> <name>ws_col</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>command_y</name> <init>= <expr><name>ecmd_pos</name> <operator>%</operator> <name>ws_col</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// int32_t command_y = (command.size() + PSIZE) % ws_col;</comment>
  <expr_stmt><expr><call><name>shellPositionCursor</name><argument_list>(<argument><expr><name>command_y</name></expr></argument>, <argument><expr><name>LEFT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellPositionCursor</name><argument_list>(<argument><expr><name>command_x</name></expr></argument>, <argument><expr><name>UP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellPositionCursor</name><argument_list>(<argument><expr><name>cursor_x</name></expr></argument>, <argument><expr><name>DOWN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellPositionCursor</name><argument_list>(<argument><expr><name>cursor_y</name></expr></argument>, <argument><expr><name>RIGHT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name></type> <name>taosGetConsoleChar</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>console</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>console</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>console</name> <operator>=</operator> <call><name>GetStdHandle</name><argument_list>(<argument><expr><name>STD_INPUT_HANDLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>TdWchar</name></type> <name><name>buf</name><index>[<expr><name>SHELL_INPUT_MAX_COMMAND_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>mbStr</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>unsigned</name> <name>long</name></type> <name>bufLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>uint16_t</name></type> <name>bufIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mbStrIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>mbStrLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CONSOLE_READCONSOLE_CONTROL</name></type> <name>inputControl</name><init>=<expr><block>{ <expr><sizeof>sizeof<argument_list>(<argument><expr><name>CONSOLE_READCONSOLE_CONTROL</name></expr></argument>)</argument_list></sizeof></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal><operator>&lt;&lt;</operator><name>TAB_KEY</name></expr>, <expr><literal type="number">0</literal></expr> }</block></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>bufLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>ReadConsoleW</name><argument_list>(<argument><expr><name>console</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>SHELL_INPUT_MAX_COMMAND_SIZE</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>bufLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>inputControl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bufLen</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>bufLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>bufIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>mbStrLen</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>buf</name><index>[<expr><name>bufIndex</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>bufIndex</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>mbStrLen</name> <operator>=</operator> <call><name>WideCharToMultiByte</name><argument_list>(<argument><expr><name>CP_UTF8</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>buf</name><index>[<expr><name>bufIndex</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>mbStr</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mbStr</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>mbStrIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bufIndex</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>mbStrIndex</name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>mbStrIndex</name> <operator>==</operator> <name>mbStrLen</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>mbStrLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>bufIndex</name> <operator>==</operator> <name>bufLen</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>bufLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><name><name>mbStr</name><index>[<expr><name>mbStrIndex</name><operator>-</operator><literal type="number">1</literal></expr>]</index></name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <return>return <expr><operator>(</operator><name>char</name><operator>)</operator><call><name>getchar</name><argument_list>()</argument_list></call></expr>;</return>  <comment type="line">// getchar() return an 'int32_t' value</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellReadCommand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShellHistory</name> <modifier>*</modifier></type><name>pHistory</name> <init>= <expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>history</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SShellCmd</name></type>      <name>cmd</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type>       <name>hist_counter</name> <init>= <expr><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>           <name><name>utf8_array</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><literal type="string">"\0"</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>buffer</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>cmd</name><operator>.</operator><name>command</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// Read input.</comment>
  <decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>taosGetConsoleChar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>EOF</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>c</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// For UTF-8</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name> <init>= <expr><call><name>shellCountPrefixOnes</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>utf8_array</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>k</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>taosGetConsoleChar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>utf8_array</name><index>[<expr><name>k</name></expr>]</index></name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>shellInsertChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name>utf8_array</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>pressOtherKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINDOWS</name></cpp:ifndef>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <name>TAB_KEY</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// press TAB key</comment>
      <expr_stmt><expr><call><name>pressTabKey</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>&lt;</operator> <literal type="char">'\033'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pressOtherKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>      
      <comment type="line">// Ctrl keys.  TODO: Implement ctrl combinations</comment>
      <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="number">0</literal></expr>:</case>
          <break>break;</break>
        <case>case <expr><literal type="number">1</literal></expr>:</case>  <comment type="line">// ctrl A</comment>
          <expr_stmt><expr><call><name>shellPositionCursorHome</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">3</literal></expr>:</case>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>shellResetCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
            <expr_stmt><expr><call><name>raise</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><call><name>kill</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <break>break;</break>
        <case>case <expr><literal type="number">4</literal></expr>:</case>  <comment type="line">// EOF or Ctrl+D</comment>
          <expr_stmt><expr><call><name>taosResetTerminalMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        <case>case <expr><literal type="number">5</literal></expr>:</case>  <comment type="line">// ctrl E</comment>
          <expr_stmt><expr><call><name>shellPositionCursorEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">8</literal></expr>:</case>
          <expr_stmt><expr><call><name>shellBackspaceChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="char">'\n'</literal></expr>:</case>
        <case>case <expr><literal type="char">'\r'</literal></expr>:</case>
        <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef> 
        <cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
          <if_stmt><if>if <condition>(<expr><call><name>shellIsReadyGo</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>.</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>.</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>cmd</name><operator>.</operator><name>buffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>cmd</name><operator>.</operator><name>command</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><literal type="number">0</literal></expr>;</return>
          </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>shellUpdateBuffer</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></else></if_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">11</literal></expr>:</case>  <comment type="line">// Ctrl + K;</comment>
          <expr_stmt><expr><call><name>shellClearLineAfter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">12</literal></expr>:</case>  <comment type="line">// Ctrl + L;</comment>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wunused-result"</cpp:literal></cpp:pragma>
          <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><literal type="string">"clear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
          <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">21</literal></expr>:</case>  <comment type="line">// Ctrl + U;</comment>
          <expr_stmt><expr><call><name>shellClearLineBefore</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><literal type="number">23</literal></expr>:</case>  <comment type="line">// Ctrl + W;</comment>
          <expr_stmt><expr><call><name>positionCursorMiddle</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>          
      </block_content>}</block></switch>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\033'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pressOtherKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>taosGetConsoleChar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'['</literal></expr>:</case>
          <expr_stmt><expr><name>c</name> <operator>=</operator> <call><name>taosGetConsoleChar</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
          <switch>switch <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><literal type="char">'A'</literal></expr>:</case>  <comment type="line">// Up arrow</comment>
              <expr_stmt><expr><name>hist_counter</name> <operator>=</operator> <operator>(</operator><name>hist_counter</name> <operator>+</operator> <name>SHELL_MAX_HISTORY_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>hist_counter</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>hist_counter</name> <operator>=</operator> <operator>(</operator><name>hist_counter</name> <operator>+</operator> <name>SHELL_MAX_HISTORY_SIZE</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>shellResetCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>hist_counter</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="char">'B'</literal></expr>:</case>  <comment type="line">// Down arrow</comment>
              <if_stmt><if>if <condition>(<expr><name>hist_counter</name> <operator>!=</operator> <name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int32_t</name></type> <name>next_hist</name> <init>= <expr><operator>(</operator><name>hist_counter</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>next_hist</name> <operator>!=</operator> <name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name></expr>)</condition> <block>{<block_content>
                  <expr_stmt><expr><call><name>shellResetCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>next_hist</name></expr>]</index></name> <operator>==</operator> <name>NULL</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>next_hist</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                  <expr_stmt><expr><call><name>shellResetCommand</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>hist_counter</name> <operator>=</operator> <name>next_hist</name></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="char">'C'</literal></expr>:</case>  <comment type="line">// Right arrow</comment>
              <expr_stmt><expr><call><name>shellMoveCursorRight</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><literal type="char">'D'</literal></expr>:</case>  <comment type="line">// Left arrow</comment>
              <expr_stmt><expr><call><name>shellMoveCursorLeft</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><literal type="char">'1'</literal></expr>:</case>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>taosGetConsoleChar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// Home key</comment>
                <expr_stmt><expr><call><name>shellPositionCursorHome</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="char">'2'</literal></expr>:</case>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>taosGetConsoleChar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// Insert key</comment>
              </block_content>}</block></if></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="char">'3'</literal></expr>:</case>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>taosGetConsoleChar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// Delete key</comment>
                <expr_stmt><expr><call><name>shellDeleteChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="char">'4'</literal></expr>:</case>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>taosGetConsoleChar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// End key</comment>
                <expr_stmt><expr><call><name>shellPositionCursorEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="char">'5'</literal></expr>:</case>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>taosGetConsoleChar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// Page up key</comment>
              </block_content>}</block></if></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="char">'6'</literal></expr>:</case>
              <if_stmt><if>if <condition>(<expr><operator>(</operator><name>c</name> <operator>=</operator> <call><name>taosGetConsoleChar</name><argument_list>()</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="char">'~'</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// Page down key</comment>
              </block_content>}</block></if></if_stmt>
              <break>break;</break>
            <case>case <expr><literal type="number">72</literal></expr>:</case>
              <comment type="line">// Home key</comment>
              <expr_stmt><expr><call><name>shellPositionCursorHome</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><literal type="number">70</literal></expr>:</case>
              <comment type="line">// End key</comment>
              <expr_stmt><expr><call><name>shellPositionCursorEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
          </block_content>}</block></switch>
          <break>break;</break>
      </block_content>}</block></switch>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="number">0x7f</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pressOtherKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// press delete key</comment>
      <expr_stmt><expr><call><name>shellBackspaceChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>pressOtherKey</name><argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>shellInsertChar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
