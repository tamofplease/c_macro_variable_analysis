<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/tools/shell/src/shellTire.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_XOPEN</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shellTire.h"</cpp:file></cpp:include>

<comment type="line">// ----------- interface -------------</comment>

<comment type="line">// create prefix search tree</comment>
<function><type><name>STire</name><modifier>*</modifier></type> <name>createTire</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STire</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STire</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tire</name><operator>-&gt;</operator><name>ref</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="line">// init is 1</comment>
  <expr_stmt><expr><name><name>tire</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tire</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>d</name></name> <operator>=</operator> <operator>(</operator><name>STireNode</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>CHAR_CNT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STireNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tire</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// free tire node</comment>
<function><type><name>void</name></type> <name>freeTireNode</name><parameter_list>(<parameter><decl><type><name>STireNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>node</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// nest free sub node on array d</comment>
  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHAR_CNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>freeTireNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// free self</comment>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// destroy prefix search tree</comment>
<function><type><name>void</name></type> <name>freeTire</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// free nodes</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHAR_CNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>freeTireNode</name><argument_list>(<argument><expr><name><name>tire</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>tire</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>d</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// free from list</comment>
  <decl_stmt><decl><type><name>StrName</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>tire</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>StrName</name><modifier>*</modifier></type> <name>next</name> <init>= <expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr></init></decl>;</decl_stmt>
    <comment type="line">// free string</comment>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// free node</comment>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>item</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// move next</comment>
    <expr_stmt><expr><name>item</name> <operator>=</operator> <name>next</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>tire</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>tire</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// free tire</comment>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// insert a new word to list</comment>
<function><type><name>bool</name></type> <name>insertToList</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StrName</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>StrName</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StrName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>tire</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tire</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tire</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>tire</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tire</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// insert a new word to tree</comment>
<function><type><name>bool</name></type> <name>insertToTree</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>word</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>         <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STireNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>nodes</name> <init>= <expr><name><name>tire</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>word</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>FIRST_ASCII</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>m</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>m</name></expr></argument> &gt;</argument_list></name> <name>CHAR_CNT</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>m</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// no pointer</comment>
      <decl_stmt><decl><type><name>STireNode</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><operator>(</operator><name>STireNode</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STireNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STireNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>m</name></expr>]</index></name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// is end</comment>
        <expr_stmt><expr><name><name>p</name><operator>-&gt;</operator><name>end</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>m</name></expr>]</index></name><operator>-&gt;</operator><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// malloc d</comment>
      <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>m</name></expr>]</index></name><operator>-&gt;</operator><name>d</name> <operator>=</operator> <operator>(</operator><name>STireNode</name><operator>*</operator><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>CHAR_CNT</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STireNode</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// move to next node</comment>
    <expr_stmt><expr><name>nodes</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>m</name></expr>]</index></name><operator>-&gt;</operator><name>d</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// add count</comment>
  <expr_stmt><expr><name><name>tire</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// insert a new word</comment>
<function><type><name>bool</name></type> <name>insertWord</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>MAX_WORD_LEN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>tire</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TIRE_TREE</name></expr>:</case>
      <return>return <expr><call><name>insertToTree</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TIRE_LIST</name></expr>:</case>
      <return>return <expr><call><name>insertToList</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// delete one word from list</comment>
<function><type><name>bool</name></type> <name>deleteFromList</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StrName</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>tire</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// found, reset empty to delete</comment>
      <expr_stmt><expr><name><name>item</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// move next</comment>
    <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// delete one word from tree</comment>
<function><type><name>bool</name></type> <name>deleteFromTree</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>word</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>  <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>del</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>STireNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>nodes</name> <init>= <expr><name><name>tire</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>word</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>FIRST_ASCII</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>m</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>m</name> <operator>&gt;=</operator> <name>CHAR_CNT</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>m</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// no found</comment>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// not null</comment>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// this is last, only set end false , not free node</comment>
        <expr_stmt><expr><name><name>nodes</name><index>[<expr><name>m</name></expr>]</index></name><operator>-&gt;</operator><name>end</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>del</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>nodes</name><index>[<expr><name>m</name></expr>]</index></name><operator>-&gt;</operator><name>d</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <comment type="line">// move to next node</comment>
    <expr_stmt><expr><name>nodes</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>m</name></expr>]</index></name><operator>-&gt;</operator><name>d</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// reduce count</comment>
  <if_stmt><if>if <condition>(<expr><name>del</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>tire</name><operator>-&gt;</operator><name>count</name></name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>del</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// insert a new word</comment>
<function><type><name>bool</name></type> <name>deleteWord</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>MAX_WORD_LEN</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>tire</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TIRE_TREE</name></expr>:</case>
      <return>return <expr><call><name>deleteFromTree</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
    <case>case <expr><name>TIRE_LIST</name></expr>:</case>
      <return>return <expr><call><name>deleteFromList</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</return>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addWordToMatch</name><parameter_list>(<parameter><decl><type><name>SMatch</name><modifier>*</modifier></type> <name>match</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>word</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// malloc new</comment>
  <decl_stmt><decl><type><name>SMatchNode</name><modifier>*</modifier></type> <name>node</name> <init>= <expr><operator>(</operator><name>SMatchNode</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMatchNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>node</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMatchNode</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>node</name><operator>-&gt;</operator><name>word</name></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// append to match</comment>
  <if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name><name>match</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>tail</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>tail</name></name> <operator>=</operator> <name>node</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><name><name>match</name><operator>-&gt;</operator><name>count</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// enum all words from node</comment>
<function><type><name>void</name></type> <name>enumAllWords</name><parameter_list>(<parameter><decl><type><name>STireNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>nodes</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>SMatch</name><modifier>*</modifier></type> <name>match</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STireNode</name><modifier>*</modifier></type> <name>c</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>       <name><name>word</name><index>[<expr><name>MAX_WORD_LEN</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>        <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHAR_CNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// chain end node</comment>
      <continue>continue;</continue>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// combine word string</comment>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><call><name>tListLen</name><argument_list>(<argument><expr><name>word</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>word</name><index>[<expr><name>len</name></expr>]</index></name> <operator>=</operator> <name>FIRST_ASCII</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>  <comment type="line">// append current char</comment>

      <comment type="line">// chain middle node</comment>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// have end flag</comment>
        <expr_stmt><expr><call><name>addWordToMatch</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name>word</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// nested call next layer</comment>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>enumAllWords</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><name>word</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// match prefix from list</comment>
<function><type><name>void</name></type> <name>matchPrefixFromList</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>SMatch</name><modifier>*</modifier></type> <name>match</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StrName</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>tire</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// prefix matched</comment>
      <expr_stmt><expr><call><name>addWordToMatch</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// move next</comment>
    <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="line">// match prefix words, if match is not NULL , put all item to match and return match</comment>
<function><type><name>void</name></type> <name>matchPrefixFromTree</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>SMatch</name><modifier>*</modifier></type> <name>match</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>        <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STireNode</name><modifier>*</modifier></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>        <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <name>MAX_WORD_LEN</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>STireNode</name><modifier>*</modifier><modifier>*</modifier></type> <name>nodes</name> <init>= <expr><name><name>tire</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>d</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>m</name> <operator>=</operator> <name><name>prefix</name><index>[<expr><name>i</name></expr>]</index></name> <operator>-</operator> <name>FIRST_ASCII</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>m</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>m</name></expr></argument> &gt;</argument_list></name> <name>CHAR_CNT</name></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// match</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>nodes</name><index>[<expr><name>m</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// arrive end</comment>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// previous items already matched</comment>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// prefix is match to end char</comment>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>d</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>enumAllWords</name><argument_list>(<argument><expr><name><name>c</name><operator>-&gt;</operator><name>d</name></name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// move to next node continue match</comment>
      <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>d</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>nodes</name> <operator>=</operator> <name><name>c</name><operator>-&gt;</operator><name>d</name></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>matchPrefix</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><name>SMatch</name><modifier>*</modifier></type> <name>match</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <switch>switch <condition>(<expr><name><name>tire</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TIRE_TREE</name></expr>:</case>
      <expr_stmt><expr><call><name>matchPrefixFromTree</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TIRE_LIST</name></expr>:</case>
      <expr_stmt><expr><call><name>matchPrefixFromList</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">// get all items from tires tree</comment>
<function><type><name>void</name></type> <name>enumFromList</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>SMatch</name><modifier>*</modifier></type> <name>match</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>StrName</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>tire</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>name</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// not delete</comment>
      <expr_stmt><expr><call><name>addWordToMatch</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name><name>item</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// move next</comment>
    <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="line">// get all items from tires tree</comment>
<function><type><name>void</name></type> <name>enumFromTree</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>SMatch</name><modifier>*</modifier></type> <name>match</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>       <name><name>pre</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STireNode</name><modifier>*</modifier></type> <name>c</name></decl>;</decl_stmt>

  <comment type="line">// enum first layer</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>CHAR_CNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>FIRST_ASCII</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>

    <comment type="line">// each node</comment>
    <expr_stmt><expr><name>c</name> <operator>=</operator> <name><name>tire</name><operator>-&gt;</operator><name>root</name><operator>.</operator><name>d</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// this branch no data</comment>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// this branch have data</comment>
    <if_stmt><if>if <condition>(<expr><name><name>c</name><operator>-&gt;</operator><name>end</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>addWordToMatch</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>matchPrefix</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// get all items from tires tree</comment>
<function><type><name>SMatch</name><modifier>*</modifier></type> <name>enumAll</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMatch</name><modifier>*</modifier></type> <name>match</name> <init>= <expr><operator>(</operator><name>SMatch</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch <condition>(<expr><name><name>tire</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TIRE_TREE</name></expr>:</case>
      <expr_stmt><expr><call><name>enumFromTree</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TIRE_LIST</name></expr>:</case>
      <expr_stmt><expr><call><name>enumFromList</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>

  <comment type="line">// return if need</comment>
  <if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeMatch</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>match</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>match</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// free match result</comment>
<function><type><name>void</name></type> <name>freeMatchNode</name><parameter_list>(<parameter><decl><type><name>SMatchNode</name><modifier>*</modifier></type> <name>node</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// first free next</comment>
  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeMatchNode</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>next</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <comment type="line">// second free self</comment>
  <if_stmt><if>if <condition>(<expr><name><name>node</name><operator>-&gt;</operator><name>word</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>node</name><operator>-&gt;</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>node</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// free match result</comment>
<function><type><name>void</name></type> <name>freeMatch</name><parameter_list>(<parameter><decl><type><name>SMatch</name><modifier>*</modifier></type> <name>match</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// first free next</comment>
  <if_stmt><if>if <condition>(<expr><name><name>match</name><operator>-&gt;</operator><name>head</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeMatchNode</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>head</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// second free self</comment>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function></unit>
