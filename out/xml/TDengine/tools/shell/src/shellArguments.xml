<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/tools/shell/src/shellArguments.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>_TD_DARWIN_64</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pwd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shellInt.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_CONSOLE_PROMPT_HEADER</name></cpp:macro> <cpp:value>"taos&gt; "</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TAOS_CONSOLE_PROMPT_CONTINUE</name></cpp:macro> <cpp:value>"   -&gt; "</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_HOST</name></cpp:macro>     <cpp:value>"TDengine server FQDN to connect. The default host is localhost."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_PORT</name></cpp:macro>     <cpp:value>"The TCP/IP port number to use for the connection."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_USER</name></cpp:macro>     <cpp:value>"The user name to use when connecting to the server."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_PASSWORD</name></cpp:macro> <cpp:value>"The password to use when connecting to the server."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_AUTH</name></cpp:macro>     <cpp:value>"The auth string to use when connecting to the server."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_GEN_AUTH</name></cpp:macro> <cpp:value>"Generate auth string from password."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_CFG_DIR</name></cpp:macro>  <cpp:value>"Configuration directory."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_DMP_CFG</name></cpp:macro>  <cpp:value>"Dump configuration."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_CMD</name></cpp:macro>      <cpp:value>"Commands to run without enter the shell."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_RAW_TIME</name></cpp:macro> <cpp:value>"Output time as uint64_t."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_FILE</name></cpp:macro>     <cpp:value>"Script to run without enter the shell."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_DB</name></cpp:macro>       <cpp:value>"Database to use when connecting to the server."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_CHECK</name></cpp:macro>    <cpp:value>"Check the service status."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_STARTUP</name></cpp:macro>  <cpp:value>"Check the details of the service status."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_WIDTH</name></cpp:macro>    <cpp:value>"Set the default binary display width, default is 30."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_NET_ROLE</name></cpp:macro> <cpp:value>"Net role when network connectivity test, options: client|server."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_PKT_LEN</name></cpp:macro>  <cpp:value>"Packet length used for net test, default is 1024 bytes."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_PKT_NUM</name></cpp:macro>  <cpp:value>"Packet numbers used for net test, default is 100."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_VERSION</name></cpp:macro>  <cpp:value>"Print program version."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_EMAIL</name></cpp:macro>    <cpp:value>"&lt;support@taosdata.com&gt;"</cpp:value></cpp:define>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_DSN</name></cpp:macro>      <cpp:value>"The dsn to use when connecting to cloud server."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_REST</name></cpp:macro>     <cpp:value>"Use restful mode when connecting."</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_TIMEOUT</name></cpp:macro>  <cpp:value>"Set the timeout for websocket query in seconds, default is 10."</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>shellParseSingleOpt</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>void</name></type> <name>shellPrintHelp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>indent</name><index>[]</index></name> <init>= <expr><literal type="string">"  "</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Usage: taos [OPTION...] \r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-a,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_AUTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-A,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_GEN_AUTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-c,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_CFG_DIR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-C,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_DMP_CFG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-d,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_DB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-f,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-h,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_HOST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-k,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_CHECK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-l,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_PKT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-n,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_NET_ROLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-N,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_PKT_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-p,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_PASSWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-P,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_PORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-r,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_RAW_TIME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-s,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_CMD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-t,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_STARTUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-u,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_USER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-E,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_DSN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-R,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_REST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-T,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_TIMEOUT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-w,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_WIDTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\r\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-V,"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>SHELL_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n\r\nReport bugs to %s.\r\n"</literal></expr></argument>, <argument><expr><name>SHELL_EMAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LINUX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;argp.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;termio.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argp_program_version</name> <init>= <expr><name>version</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argp_program_bug_address</name> <init>= <expr><name>SHELL_EMAIL</name></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>argp_option</name></name></type> <name><name>shellOptions</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"host"</literal></expr>, <expr><literal type="char">'h'</literal></expr>, <expr><literal type="string">"HOST"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_HOST</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"port"</literal></expr>, <expr><literal type="char">'P'</literal></expr>, <expr><literal type="string">"PORT"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_PORT</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"user"</literal></expr>, <expr><literal type="char">'u'</literal></expr>, <expr><literal type="string">"USER"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_USER</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="char">'p'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_PASSWORD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"auth"</literal></expr>, <expr><literal type="char">'a'</literal></expr>, <expr><literal type="string">"AUTH"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_AUTH</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"generate-auth"</literal></expr>, <expr><literal type="char">'A'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_GEN_AUTH</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"config-dir"</literal></expr>, <expr><literal type="char">'c'</literal></expr>, <expr><literal type="string">"DIR"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_CFG_DIR</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"dump-config"</literal></expr>, <expr><literal type="char">'C'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_DMP_CFG</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"commands"</literal></expr>, <expr><literal type="char">'s'</literal></expr>, <expr><literal type="string">"COMMANDS"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_CMD</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"raw-time"</literal></expr>, <expr><literal type="char">'r'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_RAW_TIME</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"file"</literal></expr>, <expr><literal type="char">'f'</literal></expr>, <expr><literal type="string">"FILE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_FILE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"database"</literal></expr>, <expr><literal type="char">'d'</literal></expr>, <expr><literal type="string">"DATABASE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_DB</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"check"</literal></expr>, <expr><literal type="char">'k'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_CHECK</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"startup"</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_STARTUP</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"display-width"</literal></expr>, <expr><literal type="char">'w'</literal></expr>, <expr><literal type="string">"WIDTH"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_WIDTH</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"netrole"</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="string">"NETROLE"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_NET_ROLE</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"pktlen"</literal></expr>, <expr><literal type="char">'l'</literal></expr>, <expr><literal type="string">"PKTLEN"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_PKT_LEN</name></expr>}</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
    <expr><block>{<expr><literal type="string">"dsn"</literal></expr>, <expr><literal type="char">'E'</literal></expr>, <expr><literal type="string">"DSN"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_DSN</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"restful"</literal></expr>, <expr><literal type="char">'R'</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_REST</name></expr>}</block></expr>,
	  <expr><block>{<expr><literal type="string">"timeout"</literal></expr>, <expr><literal type="char">'T'</literal></expr>, <expr><literal type="string">"SECONDS"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_TIMEOUT</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr><block>{<expr><literal type="string">"pktnum"</literal></expr>, <expr><literal type="char">'N'</literal></expr>, <expr><literal type="string">"PKTNUM"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>SHELL_PKT_NUM</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>error_t</name></type> <name>shellParseOpt</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>argp_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content> <return>return <expr><call><name>shellParseSingleOpt</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</return> </block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>argp</name></name></type> <name>shellArgp</name> <init>= <expr><block>{<expr><name>shellOptions</name></expr>, <expr><name>shellParseOpt</name></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shellParseArgsUseArgp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>argp_program_version</name> <operator>=</operator> <name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>programVersion</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>argp_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>shellArgp</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>args</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>ARGP_ERR_UNKNOWN</name></cpp:ifndef>
  <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ARGP_ERR_UNKNOWN</name></cpp:macro> <cpp:value>E2BIG</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>shellParseSingleOpt</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShellArgs</name> <modifier>*</modifier></type><name>pArgs</name> <init>= <expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>args</name></name></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="char">'h'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>host</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>cloud</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <break>break;</break>
    <case>case <expr><literal type="char">'P'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>cloud</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>port</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'u'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'p'</literal></expr>:</case>
      <break>break;</break>
    <case>case <expr><literal type="char">'a'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>auth</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'A'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>is_gen_auth</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'c'</literal></expr>:</case>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>cloud</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>cfgdir</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'C'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>is_dump_config</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'s'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>commands</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'r'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>is_raw_time</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'f'</literal></expr>:</case>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>arg</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'d'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>database</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'k'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>is_check</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'t'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>is_startup</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'w'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>displayWidth</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'n'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>netrole</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'l'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>pktLen</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'N'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>pktNum</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
    <case>case <expr><literal type="char">'R'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>restful</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'E'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>dsn</name></name> <operator>=</operator> <name>arg</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>cloud</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
	<case>case <expr><literal type="char">'T'</literal></expr>:</case>
	  <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>timeout</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  <break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <case>case <expr><literal type="char">'V'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>is_version</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="char">'?'</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>is_help</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>abort</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <return>return <expr><name>ARGP_ERR_UNKNOWN</name></expr>;</return>
  </block_content>}</block></switch>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellParseArgsWithoutArgp</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShellArgs</name> <modifier>*</modifier></type><name>pArgs</name> <init>= <expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>args</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--usage"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"/?"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>shellParseSingleOpt</name><argument_list>(<argument><expr><literal type="char">'?'</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>key</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>keyLen</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>keyLen</name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid option %s\r\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid option %s\r\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'h'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'P'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'u'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'a'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'c'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'s'</literal> <operator>||</operator>
        <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'f'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'d'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'w'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'n'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'l'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'N'</literal> 
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
	   <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'E'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'T'</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal> <operator>&gt;=</operator> <name>argc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"option %s requires an argument\r\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>val</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>val</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"option %s requires an argument\r\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>shellParseSingleOpt</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'p'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'A'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'C'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'r'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'k'</literal> <operator>||</operator> 
               <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'t'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'V'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'?'</literal> <operator>||</operator> <name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="number">1</literal>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
			   <operator>||</operator><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'R'</literal></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			   )</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>shellParseSingleOpt</name><argument_list>(<argument><expr><name><name>key</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"invalid option %s\r\n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shellInitArgs</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// printf(shell.info.clientVersion, taos_get_client_info());</comment>
      <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Enter password: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosSetConsoleEcho</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>scanf</name><argument_list>(<argument><expr><literal type="string">"%20s"</literal></expr></argument>, <argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"password reading error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>taosSetConsoleEcho</name><argument_list>(<argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>EOF</name> <operator>==</operator> <call><name>getchar</name><argument_list>()</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"getchar() return EOF\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>password</name></name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_PASS</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>password</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SShellArgs</name> <modifier>*</modifier></type><name>pArgs</name> <init>= <expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>args</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>user</name></name> <operator>=</operator> <name>TSDB_DEFAULT_USER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>pktLen</name></name> <operator>=</operator> <name>SHELL_DEF_PKG_LEN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>pktNum</name></name> <operator>=</operator> <name>SHELL_DEF_PKG_NUM</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pArgs</name><operator>-&gt;</operator><name>displayWidth</name></name> <operator>=</operator> <name>SHELL_DEFAULT_MAX_BINARY_DISPLAY_WIDTH</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>shellCheckArgs</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShellArgs</name> <modifier>*</modifier></type><name>pArgs</name> <init>= <expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>args</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>host</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_FQDN_LEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid host:%s\r\n"</literal></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>user</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_USER_LEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid user:%s\r\n"</literal></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>auth</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>auth</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>auth</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_PASSWORD_LEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid auth:%s\r\n"</literal></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>auth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>database</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <name>TSDB_DB_NAME_LEN</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid database:%s\r\n"</literal></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>database</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>fullname</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosExpandDir</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>cfgdir</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>cfgdir</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>cfgdir</name></name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name>PATH_MAX</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid cfgdir:%s\r\n"</literal></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>cfgdir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taosExpandDir</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>cfgdir</name></name></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>configDir</name></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>cfgdir</name></name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>commands</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid commands:%s\r\n"</literal></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>netrole</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>strcmp</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>netrole</name></name></expr></argument>, <argument><expr><literal type="string">"client"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>netrole</name></name></expr></argument>, <argument><expr><literal type="string">"server"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid netrole:%s\r\n"</literal></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>netrole</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<comment type="block">/*pArgs-&gt;password != NULL &amp;&amp; */</comment> <expr><operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>password</name></name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid password\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>port</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pArgs</name><operator>-&gt;</operator><name>port</name></name> <operator>&gt;</operator> <literal type="number">65535</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid port\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>pktLen</name></name> <operator>&lt;</operator> <name>SHELL_MIN_PKG_LEN</name> <operator>||</operator> <name><name>pArgs</name><operator>-&gt;</operator><name>pktLen</name></name> <operator>&gt;</operator> <name>SHELL_MAX_PKG_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid pktLen:%d, range:[%d, %d]\r\n"</literal></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>pktLen</name></name></expr></argument>, <argument><expr><name>SHELL_MIN_PKG_LEN</name></expr></argument>, <argument><expr><name>SHELL_MAX_PKG_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>pktNum</name></name> <operator>&lt;</operator> <name>SHELL_MIN_PKG_NUM</name> <operator>||</operator> <name><name>pArgs</name><operator>-&gt;</operator><name>pktNum</name></name> <operator>&gt;</operator> <name>SHELL_MAX_PKG_NUM</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid pktNum:%d, range:[%d, %d]\r\n"</literal></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>pktNum</name></name></expr></argument>, <argument><expr><name>SHELL_MIN_PKG_NUM</name></expr></argument>, <argument><expr><name>SHELL_MAX_PKG_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>displayWidth</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pArgs</name><operator>-&gt;</operator><name>displayWidth</name></name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Invalid displayWidth:%d, range:[1, 10 * 1024]\r\n"</literal></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>displayWidth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellParseArgs</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>shellInitArgs</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>clientVersion</name></name> <operator>=</operator>
      <literal type="string">"Welcome to the TDengine Command Line Interface, Client Version:%s\r\n"</literal>
      <literal type="string">"Copyright (c) 2022 by TDengine, all rights reserved.\r\n\r\n"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>promptHeader</name></name> <operator>=</operator> <name>TAOS_CONSOLE_PROMPT_HEADER</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>promptContinue</name></name> <operator>=</operator> <name>TAOS_CONSOLE_PROMPT_CONTINUE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>promptSize</name></name> <operator>=</operator> <literal type="number">6</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>programVersion</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>programVersion</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"version: %s"</literal></expr></argument>, <argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_WINDOWS_64</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>defined</name><argument_list>(<argument><expr><name>_TD_WINDOWS_32</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>osname</name></name> <operator>=</operator> <literal type="string">"Windows"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>history</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"C:/TDengine/%s"</literal></expr></argument>, <argument><expr><name>SHELL_HISTORY_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>shellParseArgsWithoutArgp</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_TD_DARWIN_64</name></expr></argument>)</argument_list></call></expr></cpp:elif>
  <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>osname</name></name> <operator>=</operator> <literal type="string">"Darwin"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>history</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>getpwuid</name><argument_list>(<argument><expr><call><name>getuid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>pw_dir</name></expr></argument>, <argument><expr><name>SHELL_HISTORY_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>shellParseArgsWithoutArgp</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>osname</name></name> <operator>=</operator> <literal type="string">"Linux"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>history</name><operator>.</operator><name>file</name></name></expr></argument>, <argument><expr><name>TSDB_FILENAME_LEN</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>getenv</name><argument_list>(<argument><expr><literal type="string">"HOME"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SHELL_HISTORY_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellParseArgsUseArgp</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// if (shellParseArgsWithoutArgp(argc, argv) != 0) return -1;</comment>
  <if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>abort</name></name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><call><name>shellCheckArgs</name><argument_list>()</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
