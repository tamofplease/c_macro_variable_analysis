<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/tools/shell/src/shellWebsocket.c">
<comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taosws.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shellInt.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>shell_conn_ws_server</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>first</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>ws_conn</name></name> <operator>=</operator> <call><name>ws_connect_with_dsn</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>dsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>shell</name><operator>.</operator><name>ws_conn</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to connect %s, reason: %s\n"</literal></expr></argument>,
        <argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>dsn</name></name></expr></argument>, <argument><expr><call><name>ws_errstr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>first</name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>restful</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"successfully connect to %s\n\n"</literal></expr></argument>,
        <argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>dsn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>first</name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>cloud</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"successfully connect to cloud service\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>horizontalPrintWebsocket</name><parameter_list>(<parameter><decl><type><name>WS_RES</name><modifier>*</modifier></type> <name>wres</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>execute_time</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rows</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ws_fetch_block</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>execute_time</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><call><name>ws_take_timing</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1E6</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rows</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>num_fields</name> <init>= <expr><call><name>ws_field_count</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><operator>(</operator><name>TAOS_FIELD</name><operator>*</operator><operator>)</operator><call><name>ws_fetch_fields</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>precision</name> <init>= <expr><call><name>ws_result_precision</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name><name>width</name><index>[<expr><name>TSDB_MAX_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>width</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <call><name>shellCalcColWidth</name><argument_list>(<argument><expr><name>fields</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>shellPrintHeader</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>ty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>ws_get_value_in_block</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>shellPrintField</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>fields</name><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name><name>width</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>numOfRows</name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ws_fetch_block</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>rows</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>shell</name><operator>.</operator><name>stop_query</name></name></expr>)</condition>;</do>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>verticalPrintWebsocket</name><parameter_list>(<parameter><decl><type><name>WS_RES</name><modifier>*</modifier></type> <name>wres</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>pexecute_time</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ws_fetch_block</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pexecute_time</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><call><name>ws_take_timing</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1E6</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rows</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>num_fields</name> <init>= <expr><call><name>ws_field_count</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><operator>(</operator><name>TAOS_FIELD</name><operator>*</operator><operator>)</operator><call><name>ws_fetch_fields</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>precision</name> <init>= <expr><call><name>ws_result_precision</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>maxColNameLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>maxColNameLen</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>maxColNameLen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>int</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>ty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*************************** %d.row ***************************\n"</literal></expr></argument>,
        <argument><expr><name>numOfRows</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>field</name> <init>= <expr><name>fields</name> <operator>+</operator> <name>j</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>padding</name> <init>= <expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>maxColNameLen</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*.s%s: "</literal></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>ws_get_value_in_block</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>shellPrintField</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>ws_fetch_block</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>rows</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>shell</name><operator>.</operator><name>stop_query</name></name></expr>)</condition>;</do>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dumpWebsocketToFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>fname</name></decl></parameter>, <parameter><decl><type><name>WS_RES</name><modifier>*</modifier></type> <name>wres</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>pexecute_time</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullname</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosExpandDir</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>,
      <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to open file: %s\r\n"</literal></expr></argument>, <argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>ws_fetch_block</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><operator>*</operator><name>pexecute_time</name> <operator>+=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><call><name>ws_take_timing</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1E6</literal><operator>)</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><operator>(</operator><name>TAOS_FIELD</name><operator>*</operator><operator>)</operator><call><name>ws_fetch_fields</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>num_fields</name> <init>= <expr><call><name>ws_field_count</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>precision</name> <init>= <expr><call><name>ws_result_precision</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>ty</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>len</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>numOfRows</name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>j</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>ws_get_value_in_block</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ty</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>shellDumpFieldToFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>, <argument><expr><name>fields</name> <operator>+</operator> <name>j</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>ws_fetch_block</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>rows</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>shell</name><operator>.</operator><name>stop_query</name></name></expr>)</condition>;</do>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>shellDumpWebsocket</name><parameter_list>(<parameter><decl><type><name>WS_RES</name> <modifier>*</modifier></type><name>wres</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>error_no</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>vertical</name></decl></parameter>, <parameter><decl><type><name>double</name><modifier>*</modifier></type> <name>pexecute_time</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <call><name>dumpWebsocketToFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>wres</name></expr></argument>, <argument><expr><name>pexecute_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vertical</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <call><name>verticalPrintWebsocket</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><name>pexecute_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <call><name>horizontalPrintWebsocket</name><argument_list>(<argument><expr><name>wres</name></expr></argument>, <argument><expr><name>pexecute_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><operator>*</operator><name>error_no</name> <operator>=</operator> <call><name>ws_errno</name><argument_list>(<argument><expr><name>wres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellRunSingleCommandWebsocketImp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name></decl>, <decl><type ref="prev"/><name>et</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>sptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>cptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>printMode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>cptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>fname</name> <operator>=</operator> <name>sptr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>fname</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fname</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><operator>*</operator><name>sptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"\\G"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>cptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>sptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>printMode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>  <comment type="line">// When output to a file, the switch does not work.</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>stop_query</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>WS_RES</name><modifier>*</modifier></type> <name>res</name></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>reconnectNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>reconnectNum</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>reconnectNum</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>shell</name><operator>.</operator><name>ws_conn</name></name> <operator>&amp;&amp;</operator> <call><name>shell_conn_ws_server</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>ws_query_timeout</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>ws_conn</name></name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>timeout</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>ws_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>shell</name><operator>.</operator><name>stop_query</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>et</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\nDB: error: %s (%.6fs)\n"</literal></expr></argument>, <argument><expr><call><name>ws_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>et</name> <operator>-</operator> <name>st</name><operator>)</operator><operator>/</operator><literal type="number">1E6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_WS_SEND_TIMEOUT</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_WS_RECV_TIMEOUT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Hint: use -t to increase the timeout in seconds\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_WS_INTERNAL_ERRO</name> <operator>||</operator> <name>code</name> <operator>==</operator> <name>TSDB_CODE_WS_CLOSED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"TDengine server is disconnected, will try to reconnect\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>ws_conn</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>ws_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>reconnectNum</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <break>break;</break>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>double</name></type> <name>execute_time</name> <init>= <expr><call><name>ws_take_timing</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>/</operator><literal type="number">1E6</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"^\\s*use\\s+[a-zA-Z0-9_]+\\s*;\\s*$"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Database changed.\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ws_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>ws_is_update_query</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <call><name>ws_affected_rows</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>et</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>total_time</name> <init>= <expr><operator>(</operator><name>et</name> <operator>-</operator> <name>st</name><operator>)</operator><operator>/</operator><literal type="number">1E3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>net_time</name> <init>= <expr><name>total_time</name> <operator>-</operator> <operator>(</operator><name>double</name><operator>)</operator><name>execute_time</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Query Ok, %d of %d row(s) in database\n"</literal></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Execute: %.2f ms Network: %.2f ms Total: %.2f ms\n"</literal></expr></argument>, <argument><expr><name>execute_time</name></expr></argument>, <argument><expr><name>net_time</name></expr></argument>, <argument><expr><name>total_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>error_no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>numOfRows</name>  <operator>=</operator> <call><name>shellDumpWebsocket</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_no</name></expr></argument>, <argument><expr><name>printMode</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>execute_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>ws_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>et</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>total_time</name> <init>= <expr><operator>(</operator><name>et</name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1E3</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type> <name>net_time</name> <init>= <expr><name>total_time</name> <operator>-</operator> <name>execute_time</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>error_no</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>shell</name><operator>.</operator><name>stop_query</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Query OK, %d row(s) in set\n"</literal></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Execute: %.2f ms Network: %.2f ms Total: %.2f ms\n"</literal></expr></argument>, <argument><expr><name>execute_time</name></expr></argument>, <argument><expr><name>net_time</name></expr></argument>, <argument><expr><name>total_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Query interrupted, %d row(s) in set (%.6fs)\n"</literal></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>,
          <argument><expr><operator>(</operator><name>et</name> <operator>-</operator> <name>st</name><operator>)</operator><operator>/</operator><literal type="number">1E6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Execute: %.2f ms Network: %.2f ms Total: %.2f ms\n"</literal></expr></argument>, <argument><expr><name>execute_time</name></expr></argument>, <argument><expr><name>net_time</name></expr></argument>, <argument><expr><name>total_time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>ws_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
