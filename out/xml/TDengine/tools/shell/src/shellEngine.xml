<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/tools/shell/src/shellEngine.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ALLOW_FORBID_FUNC</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_BSD_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_GNU_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_XOPEN_SOURCE</name></cpp:macro></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shellInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shellAuto.h"</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>shellIsEmptyCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>shellRunSingleCommand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellRecordCommandToHistory</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>shellRunCommand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recordHistory</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellRunSingleCommandImp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>char</name>   <modifier>*</modifier></type><name>shellFormatTimestamp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>shellDumpResultToFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellPrintNChar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>shellVerticalPrintResult</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>shellHorizontalPrintResult</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>shellDumpResult</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>error_no</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>vertical</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellReadHistory</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellWriteHistory</name><parameter_list>()</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellPrintError</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>st</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>bool</name></type>    <name>shellIsCommentLine</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellSourceFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellGetGrantInfo</name><parameter_list>()</parameter_list>;</function_decl>

<function_decl><type><specifier>static</specifier> <name>void</name></type>    <name>shellCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name>   <modifier>*</modifier></type><name>shellCancelHandler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name>   <modifier>*</modifier></type><name>shellThreadLoop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>bool</name></type> <name>shellIsEmptyCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>cmd</name><operator>++</operator></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>cmd</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">'\t'</literal> <operator>&amp;&amp;</operator> <name>c</name> <operator>!=</operator> <literal type="char">';'</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellRunSingleCommand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>shellIsEmptyCommand</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"^[ \t]*(quit|q|exit)[ \t;]*$"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>shellWriteHistory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"^[\t ]*clear[ \t;]*$"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wunused-result"</cpp:literal></cpp:pragma>
          <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><literal type="string">"clear"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"^[\t ]*set[ \t]+max_binary_display_width[ \t]+(default|[1-9][0-9]*)[ \t;]*$"</literal></expr></argument>,
                      <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strtok</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" \t"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"default"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>displayWidth</name></name> <operator>=</operator> <name>SHELL_DEFAULT_MAX_BINARY_DISPLAY_WIDTH</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>displayWidth</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>displayWidth</name> <operator>=</operator> <call><name>TRANGE</name><argument_list>(<argument><expr><name>displayWidth</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">10</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>displayWidth</name></name> <operator>=</operator> <name>displayWidth</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"^[ \t]*source[\t ]+[^ ]+[ \t;]*$"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="block">/* If source file. */</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>c_ptr</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">" ;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>c_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>shellRunSingleCommandImp</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>c_ptr</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">" ;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>c_ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>shellRunSingleCommandImp</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>shellSourceFile</name><argument_list>(<argument><expr><name>c_ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>restful</name></name> <operator>||</operator> <name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>cloud</name></name></expr>)</condition> <block>{<block_content>
	<expr_stmt><expr><call><name>shellRunSingleCommandWebsocketImp</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<expr_stmt><expr><call><name>shellRunSingleCommandImp</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellRecordCommandToHistory</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"create user "</literal></expr></argument>, <argument><expr><literal type="number">12</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strncasecmp</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"alter user "</literal></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>taosStrCaseStr</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">" pass "</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <comment type="line">// have password command forbid record to history because security</comment>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SShellHistory</name> <modifier>*</modifier></type><name>pHistory</name> <init>= <expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>history</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hstart</name></name> <operator>==</operator> <name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name> <operator>||</operator>
      <name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><operator>(</operator><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name> <operator>+</operator> <name>SHELL_MAX_HISTORY_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator>
      <call><name>strcmp</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><operator>(</operator><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name> <operator>+</operator> <name>SHELL_MAX_HISTORY_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name> <operator>=</operator> <operator>(</operator><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name> <operator>==</operator> <name><name>pHistory</name><operator>-&gt;</operator><name>hstart</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hstart</name></name> <operator>=</operator> <operator>(</operator><name><name>pHistory</name><operator>-&gt;</operator><name>hstart</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellRunCommand</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recordHistory</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>shellIsEmptyCommand</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// add help or help; </comment>
  <if_stmt><if>if<condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"help;"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>showHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>recordHistory</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>shellRecordCommandToHistory</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name>quote</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>cmd</name> <init>= <expr><name>command</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>char</name></type> <name>c</name> <init>= <expr><operator>*</operator><name>command</name><operator>++</operator></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>!=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>command</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\\'</literal> <operator>&amp;&amp;</operator> <operator>(</operator><operator>*</operator><name>command</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <operator>*</operator><name>command</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <operator>*</operator><name>command</name> <operator>==</operator> <literal type="char">'`'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>command</name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>quote</name> <operator>==</operator> <name>c</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>quote</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>quote</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name>c</name> <operator>==</operator> <literal type="char">'\''</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'"'</literal> <operator>||</operator> <name>c</name> <operator>==</operator> <literal type="char">'`'</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>quote</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">';'</literal> <operator>&amp;&amp;</operator> <name>quote</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>c</name> <operator>=</operator> <operator>*</operator><name>command</name></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>command</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>shellRunSingleCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>*</operator><name>command</name> <operator>=</operator> <name>c</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>cmd</name> <operator>=</operator> <name>command</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><call><name>shellRunSingleCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellRunSingleCommandImp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>st</name></decl>, <decl><type ref="prev"/><name>et</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>sptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>cptr</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>fname</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>printMode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"&gt;&gt;"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>cptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>fname</name> <operator>=</operator> <name>sptr</name> <operator>+</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>*</operator><name>fname</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>fname</name><operator>++</operator></expr>;</expr_stmt></block_content></block></while>
    <expr_stmt><expr><operator>*</operator><name>sptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>sptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"\\G"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>cptr</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cptr</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>cptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>sptr</name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>printMode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>  <comment type="line">// When output to a file, the switch does not work.</comment>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>st</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>pSql</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>shellPrintError</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>, <argument><expr><name>st</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"^\\s*use\\s+[a-zA-Z0-9_]+\\s*;\\s*$"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Database changed.\r\n\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// call back auto tab module</comment>
    <expr_stmt><expr><call><name>callbackAutoTab</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>pSql</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// pre string</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type> <name>pre</name> <init>= <expr><literal type="string">"Query OK"</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"^\\s*delete\\s*from\\s*.*"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="string">"Delete OK"</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"^\\s*insert\\s*into\\s*.*"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="string">"Insert OK"</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"^\\s*create\\s*.*"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="string">"Create OK"</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if<condition>(<expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"^\\s*drop\\s*.*"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name> <operator>|</operator> <name>REG_ICASE</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pre</name> <operator>=</operator> <literal type="string">"Drop OK"</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>pFields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFields</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// select and show kinds of commands</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>error_no</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><call><name>shellDumpResult</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>error_no</name></expr></argument>, <argument><expr><name>printMode</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>et</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>error_no</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Query OK, %d row(s) in set (%.6fs)\r\n"</literal></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>et</name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1E6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Query interrupted (%s), %d row(s) in set (%.6fs)\r\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>, <argument><expr><operator>(</operator><name>et</name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1E6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>num_rows_affacted</name> <init>= <expr><call><name>taos_affected_rows64</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>et</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s, %"</literal> <name>PRId64</name> <literal type="string">" row(s) affected (%.6fs)\r\n"</literal></expr></argument>, <argument><expr><name>pre</name></expr></argument>, <argument><expr><name>num_rows_affacted</name></expr></argument>, <argument><expr><operator>(</operator><name>et</name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1E6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// call auto tab</comment>
    <expr_stmt><expr><call><name>callbackAutoTab</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>shellFormatTimestamp</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>is_raw_time</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>buf</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>time_t</name></type>  <name>tt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000000000</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ms</name> <operator>=</operator> <name>val</name> <operator>%</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ms</name> <operator>=</operator> <name>val</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ms</name> <operator>=</operator> <name>val</name> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tt</name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ms</name> <operator>+=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ms</name> <operator>+=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ms</name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>ptm</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>     <name>pos</name> <init>= <expr><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">".%09d"</literal></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">".%06d"</literal></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">".%03d"</literal></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellDumpFieldToFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>quotationStr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>quotationStr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>quotationStr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type>  <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr>]</index></name></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%.5f"</literal></expr></argument>, <argument><expr><call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr></argument>, <argument><expr><literal type="string">"%*.9f"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%*.15e"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
      <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>bufIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufIndex</name></expr>]</index></name> <operator>=</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>bufIndex</name><operator>++</operator></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufIndex</name></expr>]</index></name> <operator>=</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>bufIndex</name><operator>++</operator></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufIndex</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>quotationStr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>quotationStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><call><name>shellFormatTimestamp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>quotationStr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>quotationStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellDumpResultToFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>fullname</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosExpandDir</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_ROW</name></type> <name>row</name> <init>= <expr><call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to open file: %s\r\n"</literal></expr></argument>, <argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>precision</name> <init>= <expr><call><name>taos_result_precision</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>length</name> <init>= <expr><call><name>taos_fetch_lengths</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>shellDumpFieldToFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fields</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>row</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellPrintNChar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdWchar</name></type> <name><name>tail</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>pos</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>cols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>totalCols</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>, <decl><type ref="prev"/><name>tailLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>pos</name> <operator>&lt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TdWchar</name></type> <name>wc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>bytes</name> <init>= <expr><call><name>taosMbToWchar</name><argument_list>(<argument><expr><operator>&amp;</operator><name>wc</name></expr></argument>, <argument><expr><name>str</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><name>MB_CUR_MAX</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pos</name> <operator>+</operator> <name>bytes</name> <operator>&gt;</operator> <name>length</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>w</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>pos</name><operator>)</operator> <operator>==</operator> <literal type="char">'\t'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>pos</name><operator>)</operator> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <operator>*</operator><operator>(</operator><name>str</name> <operator>+</operator> <name>pos</name><operator>)</operator> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>w</name> <operator>=</operator> <name>bytes</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>taosWcharWidth</name><argument_list>(<argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name>pos</name> <operator>+=</operator> <name>bytes</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>w</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>width</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lc"</literal></expr></argument>, <argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>totalCols</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>totalCols</name> <operator>&gt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>totalCols</name> <operator>&lt;=</operator> <operator>(</operator><name>width</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lc"</literal></expr></argument>, <argument><expr><name>wc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cols</name> <operator>+=</operator> <name>w</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>tail</name><index>[<expr><name>tailLen</name></expr>]</index></name> <operator>=</operator> <name>wc</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>tailLen</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>totalCols</name> <operator>&gt;</operator> <name>width</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// width could be 1 or 2, so printf("...") cannot be used</comment>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>cols</name> <operator>&gt;=</operator> <name>width</name></expr>)</condition> <block>{<block_content>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><name>cols</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tailLen</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%lc"</literal></expr></argument>, <argument><expr><name><name>tail</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>cols</name> <operator>=</operator> <name>totalCols</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <for>for <control>(<init>;</init> <condition><expr><name>cols</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>cols</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellPrintField</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>w</name> <init>= <expr><name>width</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>&lt;</operator> <name>TSDB_DATA_TYPE_TINYINT</name> <operator>||</operator> <name><name>field</name><operator>-&gt;</operator><name>type</name></name> <operator>&gt;</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>w</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>w</name> <operator>=</operator> <call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><name>w</name></expr></argument>, <argument><expr><name>TSDB_DATA_NULL_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>w</name> <operator>&lt;</operator> <name>width</name></expr>;</condition> <incr><expr><name>w</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type>  <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr>]</index></name></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*s"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*d"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*u"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*d"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*u"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*d"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*u"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*.5f"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr></argument>, <argument><expr><literal type="string">"%*.9f"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*.15e"</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case>
      <expr_stmt><expr><call><name>shellPrintNChar</name><argument_list>(<argument><expr><name>val</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><call><name>shellFormatTimestamp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name>val</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<comment type="line">// show whole result for this query return true, like limit or describe</comment>
<function><type><name>bool</name></type> <name>shellIsShowWhole</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// limit</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosStrCaseStr</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">" limit "</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// describe</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosStrCaseStr</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"describe "</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// show</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosStrCaseStr</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"show "</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>shellIsShowQuery</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// todo refactor</comment>
  <if_stmt><if>if <condition>(<expr><call><name>taosStrCaseStr</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"show "</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellVerticalPrintResult</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_ROW</name></type> <name>row</name> <init>= <expr><call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>precision</name> <init>= <expr><call><name>taos_result_precision</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>maxColNameLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>fields</name><index>[<expr><name>col</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;</operator> <name>maxColNameLen</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>maxColNameLen</name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>resShowMaxNum</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>commands</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>shellIsShowWhole</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>resShowMaxNum</name> <operator>=</operator> <name>SHELL_DEFAULT_RES_SHOW_NUM</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>showMore</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>resShowMaxNum</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*************************** %d.row ***************************\r\n"</literal></expr></argument>, <argument><expr><name>numOfRows</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>length</name> <init>= <expr><call><name>taos_fetch_lengths</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name>fields</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>int32_t</name></type> <name>padding</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>maxColNameLen</name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%*.s%s: "</literal></expr></argument>, <argument><expr><name>padding</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>shellPrintField</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>field</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>showMore</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Notice: The result shows only the first %d rows.\r\n"</literal></expr></argument>, <argument><expr><name>SHELL_DEFAULT_RES_SHOW_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"         You can use the `LIMIT` clause to get fewer result to show.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"           Or use '&gt;&gt;' to redirect the whole set of the result to a specified file.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"         You can use Ctrl+C to stop the underway fetching.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>showMore</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>row</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellCalcColWidth</name><parameter_list>(<parameter><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>field</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>width</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <switch>switch <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
      <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">// null</comment>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">// 'false'</comment>

    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">// '-127'</comment>

    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">6</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">// '-32767'</comment>

    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">// '-2147483648'</comment>

    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">21</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">// '-9223372036854775807'</comment>

    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>

    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>

    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>bytes</name></name> <operator>&gt;</operator> <name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>displayWidth</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>displayWidth</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>bytes</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>

    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int16_t</name></type> <name>bytes</name> <init>= <expr><name><name>field</name><operator>-&gt;</operator><name>bytes</name></name> <operator>*</operator> <name>TSDB_NCHAR_SIZE</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>bytes</name> <operator>&gt;</operator> <name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>displayWidth</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>displayWidth</name></name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block>

    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>is_raw_time</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">29</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">26</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">// '2020-01-01 00:00:00.000000'</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <return>return <expr><call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">23</literal></expr></argument>, <argument><expr><name>width</name></expr></argument>)</argument_list></call></expr>;</return>  <comment type="line">// '2020-01-01 00:00:00.000'</comment>
      </block_content>}</block></else></if_stmt>

    <default>default:</default>
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellPrintHeader</name><parameter_list>(<parameter><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>width</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num_fields</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rowWidth</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>field</name> <init>= <expr><name>fields</name> <operator>+</operator> <name>col</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>padding</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name><name>width</name><index>[<expr><name>col</name></expr>]</index></name> <operator>-</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>left</name> <init>= <expr><name>padding</name> <operator>/</operator> <literal type="number">2</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" %*.s%s%*.s |"</literal></expr></argument>, <argument><expr><name>left</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>, <argument><expr><name><name>field</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>padding</name> <operator>-</operator> <name>left</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowWidth</name> <operator>+=</operator> <name><name>width</name><index>[<expr><name>col</name></expr>]</index></name> <operator>+</operator> <literal type="number">3</literal></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowWidth</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'='</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellHorizontalPrintResult</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_ROW</name></type> <name>row</name> <init>= <expr><call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type>     <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>precision</name> <init>= <expr><call><name>taos_result_precision</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name><name>width</name><index>[<expr><name>TSDB_MAX_COLUMNS</name></expr>]</index></name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>col</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>width</name><index>[<expr><name>col</name></expr>]</index></name> <operator>=</operator> <call><name>shellCalcColWidth</name><argument_list>(<argument><expr><name>fields</name> <operator>+</operator> <name>col</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>shellPrintHeader</name><argument_list>(<argument><expr><name>fields</name></expr></argument>, <argument><expr><name>width</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>uint64_t</name></type> <name>resShowMaxNum</name> <init>= <expr><name>UINT64_MAX</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>commands</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>shellIsShowWhole</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>resShowMaxNum</name> <operator>=</operator> <name>SHELL_DEFAULT_RES_SHOW_NUM</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>showMore</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>length</name> <init>= <expr><call><name>taos_fetch_lengths</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>resShowMaxNum</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>shellPrintField</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fields</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>width</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'|'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\r'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>putchar</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>showMore</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">" Notice: The result shows only the first %d rows.\r\n"</literal></expr></argument>, <argument><expr><name>SHELL_DEFAULT_RES_SHOW_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>shellIsShowQuery</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"         You can use '&gt;&gt;' to redirect the whole set of the result to a specified file.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"         You can use the `LIMIT` clause to get fewer result to show.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"           Or use '&gt;&gt;' to redirect the whole set of the result to a specified file.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"         You can use Ctrl+C to stop the underway fetching.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>showMore</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>row</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellDumpResult</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>fname</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>error_no</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>vertical</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fname</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <call><name>shellDumpResultToFile</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>vertical</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <call><name>shellVerticalPrintResult</name><argument_list>(<argument><expr><name>tres</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <call><name>shellHorizontalPrintResult</name><argument_list>(<argument><expr><name>tres</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><operator>*</operator><name>error_no</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellReadHistory</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShellHistory</name> <modifier>*</modifier></type><name>pHistory</name> <init>= <expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>history</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type>      <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name>    <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>TSDB_MAX_ALLOWED_SQL_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>read_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>read_size</name> <operator>=</operator> <call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>TSDB_MAX_ALLOWED_SQL_LEN</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>line</name><index>[<expr><name>read_size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name></expr>]</index></name> <operator>=</operator> <call><name>strdup</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name> <operator>=</operator> <operator>(</operator><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name> <operator>==</operator> <name><name>pHistory</name><operator>-&gt;</operator><name>hstart</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hstart</name></name> <operator>=</operator> <operator>(</operator><name><name>pHistory</name><operator>-&gt;</operator><name>hstart</name></name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>file_size</name></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>file_size</name> <operator>&gt;</operator> <name>SHELL_MAX_COMMAND_SIZE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TdFilePtr</name></type>      <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_STREAM</name> <operator>|</operator> <name>TD_FILE_TRUNC</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>endIndex</name> <init>= <expr><name><name>pHistory</name><operator>-&gt;</operator><name>hstart</name></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>endIndex</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>endIndex</name> <operator>=</operator> <name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name> <operator>+</operator> <name>SHELL_MAX_HISTORY_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name>endIndex</name></expr>;</condition><incr/>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <name>SHELL_MAX_HISTORY_SIZE</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>endIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hstart</name></name> <operator>=</operator> <name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellWriteHistory</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShellHistory</name> <modifier>*</modifier></type><name>pHistory</name> <init>= <expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>history</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name> <operator>==</operator> <name><name>pHistory</name><operator>-&gt;</operator><name>hstart</name></name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type>      <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_STREAM</name> <operator>|</operator> <name>TD_FILE_APPEND</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name><name>pHistory</name><operator>-&gt;</operator><name>hstart</name></name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>!=</operator> <name><name>pHistory</name><operator>-&gt;</operator><name>hend</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>i</name> <operator>=</operator> <operator>(</operator><name>i</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>%</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellCleanupHistory</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SShellHistory</name> <modifier>*</modifier></type><name>pHistory</name> <init>= <expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>history</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>SHELL_MAX_HISTORY_SIZE</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pHistory</name><operator>-&gt;</operator><name>hist</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellPrintError</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>st</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>et</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\r\nDB error: %s (%.6fs)\r\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>et</name> <operator>-</operator> <name>st</name><operator>)</operator> <operator>/</operator> <literal type="number">1E6</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>shellIsCommentLine</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>line</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>true</name></expr>;</return></block_content></block></if></if_stmt>
  <return>return <expr><call><name>shellRegexMatch</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"^\\s*#.*"</literal></expr></argument>, <argument><expr><name>REG_EXTENDED</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellSourceFile</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>read_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>TSDB_MAX_ALLOWED_SQL_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type>  <name>cmd_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>fullname</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>sourceFileCommand</name><index>[<expr><name>PATH_MAX</name> <operator>+</operator> <literal type="number">8</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosExpandDir</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sourceFileCommand</name></expr></argument>, <argument><expr><literal type="string">"source %s;"</literal></expr></argument>,<argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellRecordCommandToHistory</name><argument_list>(<argument><expr><name>sourceFileCommand</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>fullname</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"failed to open file %s\r\n"</literal></expr></argument>, <argument><expr><name>fullname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>line</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>TSDB_MAX_ALLOWED_SQL_LEN</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>read_len</name> <operator>=</operator> <call><name>taosGetsFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>TSDB_MAX_ALLOWED_SQL_LEN</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>read_len</name> <operator>&gt;=</operator> <name>TSDB_MAX_ALLOWED_SQL_LEN</name></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><name><name>line</name><index>[<expr><operator>--</operator><name>read_len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>read_len</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>shellIsCommentLine</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// line starts with #</comment>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>read_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>line</name><index>[<expr><name>read_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <name>cmd_len</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>read_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>cmd_len</name> <operator>+=</operator> <name>read_len</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>line</name><index>[<expr><name>read_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>line</name><index>[<expr><name>read_len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">' '</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>cmd</name> <operator>+</operator> <name>cmd_len</name></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>read_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\r\n"</literal></expr></argument>, <argument><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>promptHeader</name></name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shellRunCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>TSDB_MAX_ALLOWED_SQL_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cmd_len</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>shellGetGrantInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sinfo</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><call><name>taos_get_server_info</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sinfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strtok</name><argument_list>(<argument><expr><name>sinfo</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[]</index></name> <init>= <expr><literal type="string">"show grants"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>conn</name></name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <name>TSDB_CODE_OPS_NOT_SUPPORT</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_MND_NO_RIGHTS</name> <operator>&amp;&amp;</operator> <name>code</name> <operator>!=</operator> <name>TSDB_CODE_PAR_PERMISSION_DENIED</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to check Server Edition, Reason:0x%04x:%s\r\n\r\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>num_fields</name> <init>= <expr><call><name>taos_field_count</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num_fields</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\r\nInvalid grant information.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>tres</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\r\nGrant information is null.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAOS_ROW</name></type>    <name>row</name> <init>= <expr><call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"\r\nFailed to get grant information from server. Abort.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>serverVersion</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>expiretime</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>expired</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>serverVersion</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>expiretime</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>expired</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>serverVersion</name></expr></argument>, <argument><expr><literal type="string">"community"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Server is Community Edition.\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>expiretime</name></expr></argument>, <argument><expr><literal type="string">"unlimited"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Server is Enterprise %s Edition, %s and will never expire.\r\n"</literal></expr></argument>, <argument><expr><name>serverVersion</name></expr></argument>, <argument><expr><name>sinfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"Server is Enterprise %s Edition, %s and will expire at %s.\r\n"</literal></expr></argument>, <argument><expr><name>serverVersion</name></expr></argument>, <argument><expr><name>sinfo</name></expr></argument>, <argument><expr><name>expiretime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>, <argument><expr><literal type="string">"\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<function><type><name>BOOL</name></type> <name>shellQueryInterruptHandler</name><parameter_list>(<parameter><decl><type><name>DWORD</name></type> <name>fdwCtrlType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>cancelSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TRUE</name></expr>;</return>
</block_content>}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>void</name></type> <name>shellQueryInterruptHandler</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>sigInfo</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>context</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>cancelSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>void</name></type> <name>shellCleanup</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosResetTerminalMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>shellCancelHandler</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"shellCancelHandler"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>exit</name></name> <operator>==</operator> <name>true</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>tsem_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>cancelSem</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>restful</name></name> <operator>||</operator> <name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>cloud</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>shell</name><operator>.</operator><name>stop_query</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>conn</name></name></expr>)</condition> <block>{<block_content>
		  <expr_stmt><expr><call><name>taos_kill_query</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n%s"</literal></expr></argument>, <argument><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>promptHeader</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  </block_content>}</block></while>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>shellThreadLoop</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>setThreadName</name><argument_list>(<argument><expr><literal type="string">"shellThreadLoop"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetOldTerminalMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadCleanupPush</name><argument_list>(<argument><expr><name>shellCleanup</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>command</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to malloc command\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <do>do <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SHELL_MAX_COMMAND_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosSetTerminalMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>shellReadCommand</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taosResetTerminalMode</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><call><name>shellRunCommand</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>;</do>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellWriteHistory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellExit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosThreadCleanupPop</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>shellExecute</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>clientVersion</name></name></expr></argument>, <argument><expr><call><name>taos_get_client_info</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SShellArgs</name> <modifier>*</modifier></type><name>pArgs</name> <init>= <expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>args</name></name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>restful</name></name> <operator>||</operator> <name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>cloud</name></name></expr>)</condition> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><call><name>shell_conn_ws_server</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>auth</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><name><name>shell</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <call><name>taos_connect</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>password</name></name></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><name><name>shell</name><operator>.</operator><name>conn</name></name> <operator>=</operator> <call><name>taos_connect_auth</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>user</name></name></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>auth</name></name></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>database</name></name></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>conn</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
	</block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
  </block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>shellSetConn</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellReadHistory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>commands</name></name> <operator>!=</operator> <name>NULL</name> <operator>||</operator> <name><name>pArgs</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>commands</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\r\n"</literal></expr></argument>, <argument><expr><name><name>shell</name><operator>.</operator><name>info</name><operator>.</operator><name>promptHeader</name></name></expr></argument>, <argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>commands</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>shellRunCommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pArgs</name><operator>-&gt;</operator><name>file</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>shellSourceFile</name><argument_list>(<argument><expr><name><name>pArgs</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
	<if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>restful</name></name> <operator>||</operator> <name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>cloud</name></name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>ws_close</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>ws_conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>conn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
	</block_content>}</block></else></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>shellWriteHistory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shellCleanupHistory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>tsem_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>cancelSem</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create cancel semphore\r\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TdThread</name></type> <name>spid</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name>spid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>shellCancelHandler</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosSetSignal</name><argument_list>(<argument><expr><name>SIGTERM</name></expr></argument>, <argument><expr><name>shellQueryInterruptHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetSignal</name><argument_list>(<argument><expr><name>SIGHUP</name></expr></argument>, <argument><expr><name>shellQueryInterruptHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosSetSignal</name><argument_list>(<argument><expr><name>SIGABRT</name></expr></argument>, <argument><expr><name>shellQueryInterruptHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosSetSignal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>shellQueryInterruptHandler</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>restful</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>shell</name><operator>.</operator><name>args</name><operator>.</operator><name>cloud</name></name></expr>)</condition> <block>{<block_content>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINDOWS</name></cpp:ifndef>
  <expr_stmt><expr><call><name>printfIntroduction</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
	<expr_stmt><expr><call><name>shellGetGrantInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WEBSOCKET</name></cpp:ifdef>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>shellThreadLoop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>shell</name><operator>.</operator><name>pid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>pid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>shell</name><operator>.</operator><name>exit</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tsem_post</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>shell</name><operator>.</operator><name>cancelSem</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name>spid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>shellCleanupHistory</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
