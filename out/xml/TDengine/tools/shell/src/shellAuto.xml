<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/tools/shell/src/shellAuto.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>__USE_XOPEN</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shellInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shellAuto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"shellTire.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tthread.h"</cpp:file></cpp:include>

<comment type="line">//</comment>
<comment type="line">// ------------- define area  ---------------</comment>
<comment type="line">//</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>UNION_ALL</name></cpp:macro> <cpp:value>" union all "</cpp:value></cpp:define>

<comment type="line">// extern function</comment>
<function_decl><type><name>void</name></type> <name>shellClearScreen</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>ecmd_pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>cursor_pos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>shellGetPrevCharSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>pos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>size</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>width</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>shellShowOnScreen</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>shellInsertChar</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>c</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>shellInsertStr</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>bool</name></type> <name>appendAfterSelect</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><struct>struct <name>SAutoPtr</name> <block>{
  <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>    <name>ref</name></decl>;</decl_stmt>
}</block></struct></type> <name>SAutoPtr</name>;</typedef>

<typedef>typedef <type><struct>struct <name>SWord</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>           <name>type</name></decl>;</decl_stmt>  <comment type="line">// word type , see WT_ define</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>         <name>word</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>SWord</name></name><modifier>*</modifier></type> <name>next</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>          <name>free</name></decl>;</decl_stmt>  <comment type="line">// if true need free</comment>
}</block></struct></type> <name>SWord</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>source</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>source_len</name></decl>;</decl_stmt>  <comment type="line">// valid data length in source</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWord</name><modifier>*</modifier></type>  <name>head</name></decl>;</decl_stmt>
  <comment type="line">// matched information</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>matchIndex</name></decl>;</decl_stmt>  <comment type="line">// matched word index in words</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>matchLen</name></decl>;</decl_stmt>    <comment type="line">// matched length at matched word</comment>
}</block></struct></type> <name>SWords</name>;</typedef>

<decl_stmt><decl><type><name>SWords</name></type> <name><name>shellCommands</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"alter database &lt;db_name&gt; &lt;alter_db_options&gt; &lt;anyword&gt; &lt;alter_db_options&gt; &lt;anyword&gt; &lt;alter_db_options&gt; &lt;anyword&gt; "</literal>
     <literal type="string">"&lt;alter_db_options&gt; &lt;anyword&gt; &lt;alter_db_options&gt; &lt;anyword&gt; ;"</literal></expr>,
     <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter dnode &lt;dnode_id&gt; balance "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter dnode &lt;dnode_id&gt; resetlog;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter dnode &lt;dnode_id&gt; debugFlag 141;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter dnode &lt;dnode_id&gt; monitor 1;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter all dnodes monitor "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter alldnodes balance "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter alldnodes resetlog;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter alldnodes debugFlag 141;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter alldnodes monitor 1;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter table &lt;tb_name&gt; &lt;tb_actions&gt; &lt;anyword&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter table modify column"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter local resetlog;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter local DebugFlag 143;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter local cDebugFlag 143;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter local uDebugFlag 143;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter local rpcDebugFlag 143;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter local tmrDebugFlag 143;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter topic"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"alter user &lt;user_name&gt; &lt;user_actions&gt; &lt;anyword&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <comment type="line">// 20</comment>
    <expr><block>{<expr><literal type="string">"create table &lt;anyword&gt; using &lt;stb_name&gt; tags("</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create database &lt;anyword&gt; &lt;db_options&gt; &lt;anyword&gt; &lt;db_options&gt; &lt;anyword&gt; &lt;db_options&gt; &lt;anyword&gt; &lt;db_options&gt; "</literal>
     <literal type="string">"&lt;anyword&gt; &lt;db_options&gt; &lt;anyword&gt; &lt;db_options&gt; &lt;anyword&gt; &lt;db_options&gt; &lt;anyword&gt; &lt;db_options&gt; &lt;anyword&gt; "</literal>
     <literal type="string">"&lt;db_options&gt; &lt;anyword&gt; &lt;db_options&gt; &lt;anyword&gt; ;"</literal></expr>,
     <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create dnode "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create index "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create mnode on dnode &lt;dnode_id&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create qnode on dnode &lt;dnode_id&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create stream &lt;anyword&gt; into &lt;anyword&gt; as select"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,  <comment type="line">// 26 append sub sql</comment>
    <expr><block>{<expr><literal type="string">"create topic &lt;anyword&gt; as select"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,                  <comment type="line">// 27 append sub sql</comment>
    <expr><block>{<expr><literal type="string">"create function "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create user &lt;anyword&gt; pass &lt;anyword&gt; sysinfo 0;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"create user &lt;anyword&gt; pass &lt;anyword&gt; sysinfo 1;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"describe &lt;all_table&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"delete from &lt;all_table&gt; where "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"drop database &lt;db_name&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"drop table &lt;all_table&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"drop dnode &lt;dnode_id&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"drop mnode on dnode &lt;dnode_id&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"drop qnode on dnode &lt;dnode_id&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"drop user &lt;user_name&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <comment type="line">// 40</comment>
    <expr><block>{<expr><literal type="string">"drop function"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"drop consumer group &lt;anyword&gt; on "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"drop topic &lt;topic_name&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"drop stream &lt;stream_name&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"explain select"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,  <comment type="line">// 44 append sub sql</comment>
    <expr><block>{<expr><literal type="string">"help;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"grant all on &lt;anyword&gt; to &lt;user_name&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"grant read on &lt;anyword&gt; to &lt;user_name&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"grant write on &lt;anyword&gt; to &lt;user_name&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"kill connection &lt;anyword&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"kill query "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"kill transaction "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"merge vgroup "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"reset query cache;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"revoke all on &lt;anyword&gt; from &lt;user_name&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"revoke read on &lt;anyword&gt; from &lt;user_name&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"revoke write on &lt;anyword&gt; from &lt;user_name&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select * from &lt;all_table&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select _block_dist() from &lt;all_table&gt; \\G;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select client_version();"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <comment type="line">// 60</comment>
    <expr><block>{<expr><literal type="string">"select current_user();"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select database();"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select server_version();"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select server_status();"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select now();"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select today();"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"select timezone();"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"set max_binary_display_width "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show apps;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show create database &lt;db_name&gt; \\G;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show create stable &lt;stb_name&gt; \\G;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show create table &lt;tb_name&gt; \\G;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show connections;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show cluster;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show databases;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show dnodes;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show dnode &lt;dnode_id&gt; variables;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show functions;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show mnodes;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show queries;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <comment type="line">// 80</comment>
    <expr><block>{<expr><literal type="string">"show query &lt;anyword&gt; ;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show qnodes;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show stables;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show stables like "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show streams;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show scores;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show snodes;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show subscriptions;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show tables;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show tables like"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show table distributed &lt;all_table&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show tags from &lt;tb_name&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show tags from &lt;db_name&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show topics;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show transactions;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show users;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show variables;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show local variables;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show vnodes &lt;dnode_id&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show vgroups;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show consumers;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"show grants;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"split vgroup "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"insert into &lt;tb_name&gt; values("</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"insert into &lt;tb_name&gt; using &lt;stb_name&gt; tags("</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"insert into &lt;tb_name&gt; using &lt;stb_name&gt; &lt;anyword&gt; values("</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"insert into &lt;tb_name&gt; file "</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"trim database &lt;db_name&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"use &lt;db_name&gt;"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"quit"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>keywords</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"and "</literal></expr>,         <expr><literal type="string">"asc "</literal></expr>,      <expr><literal type="string">"desc "</literal></expr>,     <expr><literal type="string">"from "</literal></expr>,    <expr><literal type="string">"fill("</literal></expr>,         <expr><literal type="string">"limit "</literal></expr>,    <expr><literal type="string">"where "</literal></expr>,
    <expr><literal type="string">"interval("</literal></expr>,    <expr><literal type="string">"order by "</literal></expr>, <expr><literal type="string">"order by "</literal></expr>, <expr><literal type="string">"offset "</literal></expr>,  <expr><literal type="string">"or "</literal></expr>,           <expr><literal type="string">"group by "</literal></expr>, <expr><literal type="string">"now()"</literal></expr>,
    <expr><literal type="string">"session("</literal></expr>,     <expr><literal type="string">"sliding "</literal></expr>,  <expr><literal type="string">"slimit "</literal></expr>,   <expr><literal type="string">"soffset "</literal></expr>, <expr><literal type="string">"state_window("</literal></expr>, <expr><literal type="string">"today() "</literal></expr>,  <expr><literal type="string">"union all select "</literal></expr>,
    <expr><literal type="string">"partition by "</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>functions</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"count("</literal></expr>,         <expr><literal type="string">"sum("</literal></expr>,
    <expr><literal type="string">"avg("</literal></expr>,           <expr><literal type="string">"last("</literal></expr>,
    <expr><literal type="string">"last_row("</literal></expr>,      <expr><literal type="string">"top("</literal></expr>,
    <expr><literal type="string">"interp("</literal></expr>,        <expr><literal type="string">"max("</literal></expr>,
    <expr><literal type="string">"min("</literal></expr>,           <expr><literal type="string">"now()"</literal></expr>,
    <expr><literal type="string">"today()"</literal></expr>,        <expr><literal type="string">"percentile("</literal></expr>,
    <expr><literal type="string">"tail("</literal></expr>,          <expr><literal type="string">"pow("</literal></expr>,
    <expr><literal type="string">"abs("</literal></expr>,           <expr><literal type="string">"atan("</literal></expr>,
    <expr><literal type="string">"acos("</literal></expr>,          <expr><literal type="string">"asin("</literal></expr>,
    <expr><literal type="string">"apercentile("</literal></expr>,   <expr><literal type="string">"bottom("</literal></expr>,
    <expr><literal type="string">"cast("</literal></expr>,          <expr><literal type="string">"ceil("</literal></expr>,
    <expr><literal type="string">"char_length("</literal></expr>,   <expr><literal type="string">"cos("</literal></expr>,
    <expr><literal type="string">"concat("</literal></expr>,        <expr><literal type="string">"concat_ws("</literal></expr>,
    <expr><literal type="string">"csum("</literal></expr>,          <expr><literal type="string">"diff("</literal></expr>,
    <expr><literal type="string">"derivative("</literal></expr>,    <expr><literal type="string">"elapsed("</literal></expr>,
    <expr><literal type="string">"first("</literal></expr>,         <expr><literal type="string">"floor("</literal></expr>,
    <expr><literal type="string">"hyperloglog("</literal></expr>,   <expr><literal type="string">"histogram("</literal></expr>,
    <expr><literal type="string">"irate("</literal></expr>,         <expr><literal type="string">"leastsquares("</literal></expr>,
    <expr><literal type="string">"length("</literal></expr>,        <expr><literal type="string">"log("</literal></expr>,
    <expr><literal type="string">"lower("</literal></expr>,         <expr><literal type="string">"ltrim("</literal></expr>,
    <expr><literal type="string">"mavg("</literal></expr>,          <expr><literal type="string">"mode("</literal></expr>,
    <expr><literal type="string">"tan("</literal></expr>,           <expr><literal type="string">"round("</literal></expr>,
    <expr><literal type="string">"rtrim("</literal></expr>,         <expr><literal type="string">"sample("</literal></expr>,
    <expr><literal type="string">"sin("</literal></expr>,           <expr><literal type="string">"spread("</literal></expr>,
    <expr><literal type="string">"substr("</literal></expr>,        <expr><literal type="string">"statecount("</literal></expr>,
    <expr><literal type="string">"stateduration("</literal></expr>, <expr><literal type="string">"stddev("</literal></expr>,
    <expr><literal type="string">"sqrt("</literal></expr>,          <expr><literal type="string">"timediff("</literal></expr>,
    <expr><literal type="string">"timezone("</literal></expr>,      <expr><literal type="string">"timetruncate("</literal></expr>,
    <expr><literal type="string">"twa("</literal></expr>,           <expr><literal type="string">"to_unixtimestamp("</literal></expr>,
    <expr><literal type="string">"unique("</literal></expr>,        <expr><literal type="string">"upper("</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>tb_actions</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"add column "</literal></expr>, <expr><literal type="string">"modify column "</literal></expr>, <expr><literal type="string">"drop column "</literal></expr>, <expr><literal type="string">"rename column "</literal></expr>, <expr><literal type="string">"add tag "</literal></expr>,
    <expr><literal type="string">"modify tag "</literal></expr>, <expr><literal type="string">"drop tag "</literal></expr>,      <expr><literal type="string">"rename tag "</literal></expr>,  <expr><literal type="string">"set tag "</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>user_actions</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"pass "</literal></expr>, <expr><literal type="string">"enable "</literal></expr>, <expr><literal type="string">"sysinfo "</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>tb_options</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"comment "</literal></expr>, <expr><literal type="string">"watermark "</literal></expr>, <expr><literal type="string">"max_delay "</literal></expr>, <expr><literal type="string">"ttl "</literal></expr>, <expr><literal type="string">"rollup("</literal></expr>, <expr><literal type="string">"sma("</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>db_options</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"keep "</literal></expr>,
                      <expr><literal type="string">"replica "</literal></expr>,
                      <expr><literal type="string">"precision "</literal></expr>,
                      <expr><literal type="string">"strict "</literal></expr>,
                      <expr><literal type="string">"buffer "</literal></expr>,
                      <expr><literal type="string">"cachemodel "</literal></expr>,
                      <expr><literal type="string">"cachesize "</literal></expr>,
                      <expr><literal type="string">"comp "</literal></expr>,
                      <expr><literal type="string">"duration "</literal></expr>,
                      <expr><literal type="string">"wal_fsync_period"</literal></expr>,
                      <expr><literal type="string">"maxrows "</literal></expr>,
                      <expr><literal type="string">"minrows "</literal></expr>,
                      <expr><literal type="string">"pages "</literal></expr>,
                      <expr><literal type="string">"pagesize "</literal></expr>,
                      <expr><literal type="string">"retentions "</literal></expr>,
                      <expr><literal type="string">"wal_level "</literal></expr>,
                      <expr><literal type="string">"vgroups "</literal></expr>,
                      <expr><literal type="string">"single_stable "</literal></expr>,
                      <expr><literal type="string">"wal_retention_period "</literal></expr>,
                      <expr><literal type="string">"wal_roll_period "</literal></expr>,
                      <expr><literal type="string">"wal_retention_size "</literal></expr>,
                      <expr><literal type="string">"wal_segment_size "</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>alter_db_options</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"keep "</literal></expr>, <expr><literal type="string">"cachemodel "</literal></expr>, <expr><literal type="string">"cachesize "</literal></expr>, <expr><literal type="string">"wal_fsync_period "</literal></expr>, <expr><literal type="string">"wal_level "</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>data_types</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"timestamp"</literal></expr>,    <expr><literal type="string">"int"</literal></expr>,
                      <expr><literal type="string">"int unsigned"</literal></expr>, <expr><literal type="string">"varchar(16)"</literal></expr>,
                      <expr><literal type="string">"float"</literal></expr>,        <expr><literal type="string">"double"</literal></expr>,
                      <expr><literal type="string">"binary(16)"</literal></expr>,   <expr><literal type="string">"nchar(16)"</literal></expr>,
                      <expr><literal type="string">"bigint"</literal></expr>,       <expr><literal type="string">"bigint unsigned"</literal></expr>,
                      <expr><literal type="string">"smallint"</literal></expr>,     <expr><literal type="string">"smallint unsigned"</literal></expr>,
                      <expr><literal type="string">"tinyint"</literal></expr>,      <expr><literal type="string">"tinyint unsigned"</literal></expr>,
                      <expr><literal type="string">"bool"</literal></expr>,         <expr><literal type="string">"json"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>key_tags</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"tags("</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>key_select</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="string">"select "</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="line">//</comment>
<comment type="line">//  ------- gobal variant define ---------</comment>
<comment type="line">//</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>firstMatchIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// first match shellCommands index</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>lastMatchIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>   <comment type="line">// last match shellCommands index</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>curMatchIndex</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>    <comment type="line">// current match shellCommands index</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>lastWordBytes</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>    <comment type="line">// printShow last word length</comment>
<decl_stmt><decl><type><name>bool</name></type>    <name>waitAutoFill</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<comment type="line">//</comment>
<comment type="line">//   ----------- global var array define -----------</comment>
<comment type="line">//</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_DBNAME</name></cpp:macro>         <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_STABLE</name></cpp:macro>         <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_TABLE</name></cpp:macro>          <cpp:value>2</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_DNODEID</name></cpp:macro>        <cpp:value>3</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_USERNAME</name></cpp:macro>       <cpp:value>4</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_TOPIC</name></cpp:macro>          <cpp:value>5</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_STREAM</name></cpp:macro>         <cpp:value>6</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_ALLTABLE</name></cpp:macro>       <cpp:value>7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_FUNC</name></cpp:macro>           <cpp:value>8</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_KEYWORD</name></cpp:macro>        <cpp:value>9</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_TBACTION</name></cpp:macro>       <cpp:value>10</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_DBOPTION</name></cpp:macro>       <cpp:value>11</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_ALTER_DBOPTION</name></cpp:macro> <cpp:value>12</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_DATATYPE</name></cpp:macro>       <cpp:value>13</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_KEYTAGS</name></cpp:macro>        <cpp:value>14</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_ANYWORD</name></cpp:macro>        <cpp:value>15</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_TBOPTION</name></cpp:macro>       <cpp:value>16</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_USERACTION</name></cpp:macro>     <cpp:value>17</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_KEYSELECT</name></cpp:macro>      <cpp:value>18</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_VAR_CNT</name></cpp:macro> <cpp:value>19</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_FROM_DB_MAX</name></cpp:macro> <cpp:value>6</cpp:value></cpp:define>  <comment type="line">// max get content from db</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_FROM_DB_CNT</name></cpp:macro> <cpp:value>(WT_FROM_DB_MAX + 1)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>WT_TEXT</name></cpp:macro> <cpp:value>0xFF</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type> <name><name>dbName</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><literal type="string">""</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// save use database name;</comment>
<comment type="line">// tire array</comment>
<decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type>        <name><name>tires</name><index>[<expr><name>WT_VAR_CNT</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TdThreadMutex</name></type> <name>tiresMutex</name></decl>;</decl_stmt>
<comment type="line">// save thread handle obtain var name from db server</comment>
<decl_stmt><decl><type><name>TdThread</name><modifier>*</modifier></type> <name><name>threads</name><index>[<expr><name>WT_FROM_DB_CNT</name></expr>]</index></name></decl>;</decl_stmt>
<comment type="line">// obtain var name  with sql from server</comment>
<decl_stmt><decl><type><name>char</name></type> <name><name>varTypes</name><index>[<expr><name>WT_VAR_CNT</name></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"&lt;db_name&gt;"</literal></expr>,    <expr><literal type="string">"&lt;stb_name&gt;"</literal></expr>,    <expr><literal type="string">"&lt;tb_name&gt;"</literal></expr>,          <expr><literal type="string">"&lt;dnode_id&gt;"</literal></expr>,   <expr><literal type="string">"&lt;user_name&gt;"</literal></expr>,
                                 <expr><literal type="string">"&lt;topic_name&gt;"</literal></expr>, <expr><literal type="string">"&lt;stream_name&gt;"</literal></expr>, <expr><literal type="string">"&lt;all_table&gt;"</literal></expr>,        <expr><literal type="string">"&lt;function&gt;"</literal></expr>,   <expr><literal type="string">"&lt;keyword&gt;"</literal></expr>,
                                 <expr><literal type="string">"&lt;tb_actions&gt;"</literal></expr>, <expr><literal type="string">"&lt;db_options&gt;"</literal></expr>,  <expr><literal type="string">"&lt;alter_db_options&gt;"</literal></expr>, <expr><literal type="string">"&lt;data_types&gt;"</literal></expr>, <expr><literal type="string">"&lt;key_tags&gt;"</literal></expr>,
                                 <expr><literal type="string">"&lt;anyword&gt;"</literal></expr>,    <expr><literal type="string">"&lt;tb_options&gt;"</literal></expr>,  <expr><literal type="string">"&lt;user_actions&gt;"</literal></expr>,     <expr><literal type="string">"&lt;key_select&gt;"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name></type> <name><name>varSqls</name><index>[<expr><name>WT_FROM_DB_CNT</name></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="string">"show databases;"</literal></expr>, <expr><literal type="string">"show stables;"</literal></expr>, <expr><literal type="string">"show tables;"</literal></expr>, <expr><literal type="string">"show dnodes;"</literal></expr>,
                                    <expr><literal type="string">"show users;"</literal></expr>,     <expr><literal type="string">"show topics;"</literal></expr>,  <expr><literal type="string">"show streams;"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="line">// var words current cursor, if user press any one key except tab, cursorVar can be reset to -1</comment>
<decl_stmt><decl><type><name>int</name></type>  <name>cursorVar</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>bool</name></type> <name>varMode</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>  <comment type="line">// enter var names list mode</comment>

<decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type>      <name>varCon</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>varCmd</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SMatch</name><modifier>*</modifier></type>    <name>lastMatch</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>  <comment type="line">// save last match result</comment>
<decl_stmt><decl><type><name>int</name></type>        <name>cntDel</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>        <comment type="line">// delete byte count after next press tab</comment>

<comment type="line">// show auto tab introduction</comment>
<function><type><name>void</name></type> <name>printfIntroduction</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   ******************************  Tab Completion  **********************************\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   *   The TDengine CLI supports tab completion for a variety of items,             *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   *   including database names, table names, function names and keywords.          *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   *   The full list of shortcut keys is as follows:                                *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   *    [ TAB ]        ......  complete the current word                            *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   *                   ......  if used on a blank line, display all valid commands  *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   *    [ Ctrl + A ]   ......  move cursor to the st[A]rt of the line               *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   *    [ Ctrl + E ]   ......  move cursor to the [E]nd of the line                 *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   *    [ Ctrl + W ]   ......  move cursor to the middle of the line                *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   *    [ Ctrl + L ]   ......  clear the entire screen                              *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   *    [ Ctrl + K ]   ......  clear the screen after the cursor                    *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   *    [ Ctrl + U ]   ......  clear the screen before the cursor                   *\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"   **********************************************************************************\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>showHelp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nThe TDengine CLI supports the following commands:"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(
      <argument><expr><literal type="string">"\n\
  ----- A ----- \n\
    alter database &lt;db_name&gt; &lt;db_options&gt; \n\
    alter dnode &lt;dnode_id&gt; balance \n\
    alter dnode &lt;dnode_id&gt; resetlog;\n\
    alter all dnodes monitor \n\
    alter alldnodes balance \n\
    alter alldnodes resetlog;\n\
    alter alldnodes debugFlag \n\
    alter alldnodes monitor \n\
    alter table &lt;tb_name&gt; &lt;tb_actions&gt; ;\n\
    alter table modify column\n\
    alter local resetlog;\n\
    alter local DebugFlag 143;\n\
    alter topic\n\
    alter user &lt;user_name&gt; &lt;user_actions&gt; ...\n\
  ----- C ----- \n\
    create table &lt;tb_name&gt; using &lt;stb_name&gt; tags ...\n\
    create database &lt;db_name&gt; &lt;db_options&gt;  ...\n\
    create dnode ...\n\
    create index ...\n\
    create mnode on dnode &lt;dnode_id&gt; ;\n\
    create qnode on dnode &lt;dnode_id&gt; ;\n\
    create stream &lt;stream_name&gt; into &lt;stb_name&gt; as select ...\n\
    create topic &lt;topic_name&gt; as select ...\n\
    create function ...\n\
    create user &lt;user_name&gt; pass &lt;password&gt; ...\n\
  ----- D ----- \n\
    describe &lt;all_table&gt;\n\
    delete from &lt;all_table&gt; where ...\n\
    drop database &lt;db_name&gt;;\n\
    drop table &lt;all_table&gt;;\n\
    drop dnode &lt;dnode_id&gt;;\n\
    drop mnode on dnode &lt;dnode_id&gt; ;\n\
    drop qnode on dnode &lt;dnode_id&gt; ;\n\
    drop user &lt;user_name&gt; ;\n\
    drop function &lt;function_name&gt;;\n\
    drop consumer group ... \n\
    drop topic &lt;topic_name&gt; ;\n\
    drop stream &lt;stream_name&gt; ;\n\
  ----- E ----- \n\
    explain select clause ...\n\
  ----- H ----- \n\
    help;\n\
  ----- I ----- \n\
    insert into &lt;tb_name&gt; values(...) ;\n\
    insert into &lt;tb_name&gt; using &lt;stb_name&gt; tags(...) values(...) ;\n\
  ----- G ----- \n\
    grant all   on &lt;priv_level&gt; to &lt;user_name&gt; ;\n\
    grant read  on &lt;priv_level&gt; to &lt;user_name&gt; ;\n\
    grant write on &lt;priv_level&gt; to &lt;user_name&gt; ;\n\
  ----- K ----- \n\
    kill connection &lt;connection_id&gt;; \n\
    kill query &lt;query_id&gt;; \n\
    kill transaction &lt;transaction_id&gt;;\n\
  ----- M ----- \n\
    merge vgroup ...\n\
  ----- R ----- \n\
    reset query cache;\n\
    revoke all   on &lt;priv_level&gt; from &lt;user_name&gt; ;\n\
    revoke read  on &lt;priv_level&gt; from &lt;user_name&gt; ;\n\
    revoke write on &lt;priv_level&gt; from &lt;user_name&gt; ;\n\
  ----- S ----- \n\
    select * from &lt;all_table&gt; where ... \n\
    select _block_dist() from &lt;all_table&gt;;\n\
    select client_version();\n\
    select current_user();\n\
    select database();\n\
    select server_version();\n\
    select server_status();\n\
    select now();\n\
    select today();\n\
    select timezone();\n\
    set max_binary_display_width ...\n\
    show apps;\n\
    show create database &lt;db_name&gt;;\n\
    show create stable &lt;stb_name&gt;;\n\
    show create table &lt;tb_name&gt;;\n\
    show connections;\n\
    show cluster;\n\
    show databases;\n\
    show dnodes;\n\
    show dnode &lt;dnode_id&gt; variables;\n\
    show functions;\n\
    show mnodes;\n\
    show queries;\n\
    show query &lt;query_id&gt; ;\n\
    show qnodes;\n\
    show snodes;\n\
    show stables;\n\
    show stables like \n\
    show streams;\n\
    show scores;\n\
    show subscriptions;\n\
    show tables;\n\
    show tables like\n\
    show table distributed &lt;all_table&gt;;\n\
    show tags from &lt;tb_name&gt;\n\
    show tags from &lt;db_name&gt;\n\
    show topics;\n\
    show transactions;\n\
    show users;\n\
    show variables;\n\
    show local variables;\n\
    show vnodes &lt;dnode_id&gt;\n\
    show vgroups;\n\
    show consumers;\n\
    show grants;\n\
    split vgroup ...\n\
  ----- T ----- \n\
    trim database &lt;db_name&gt;;\n\
  ----- U ----- \n\
    use &lt;db_name&gt;;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// define in getDuration() function</comment>
  <expr_stmt><expr><call><name>printf</name><argument_list>(
      <argument><expr><literal type="string">"\
  Timestamp expression Format:\n\
    b - nanosecond \n\
    u - microsecond \n\
    a - millisecond \n\
    s - second \n\
    m - minute \n\
    h - hour \n\
    d - day \n\
    w - week \n\
    now - current time \n\
  Example : \n\
    select * from t1 where ts &gt; now - 2w + 3d and ts &lt;= now - 1w -2h ;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//</comment>
<comment type="line">//  -------------------  parse words --------------------------</comment>
<comment type="line">//</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SHELL_COMMAND_COUNT</name><parameter_list>()</parameter_list></cpp:macro> <cpp:value>(sizeof(shellCommands) / sizeof(SWords))</cpp:value></cpp:define>

<comment type="line">// get at</comment>
<function><type><name>SWord</name><modifier>*</modifier></type> <name>atWord</name><parameter_list>(<parameter><decl><type><name>SWords</name><modifier>*</modifier></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWord</name><modifier>*</modifier></type> <name>word</name> <init>= <expr><name><name>command</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>index</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>word</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>word</name> <operator>=</operator> <name><name>word</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>word</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MATCH_WORD</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>atWord(x, x-&gt;matchIndex)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>wordType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WT_VAR_CNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>varTypes</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>i</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></for>
  <return>return <expr><name>WT_TEXT</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// add word</comment>
<function><type><name>SWord</name><modifier>*</modifier></type> <name>addWord</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWord</name><modifier>*</modifier></type> <name>word</name> <init>= <expr><operator>(</operator><name>SWord</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>word</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWord</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>word</name><operator>-&gt;</operator><name>word</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>p</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>word</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <name>len</name></expr>;</expr_stmt>

  <comment type="line">// check format</comment>
  <if_stmt><if>if <condition>(<expr><name>pattern</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>word</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <call><name>wordType</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>word</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>WT_TEXT</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>word</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// parse one command</comment>
<function><type><name>void</name></type> <name>parseCommand</name><parameter_list>(<parameter><decl><type><name>SWords</name><modifier>*</modifier></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>pattern</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>p</name> <init>= <expr><name><name>command</name><operator>-&gt;</operator><name>source</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>start</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name><name>command</name><operator>-&gt;</operator><name>source_len</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><name><name>command</name><operator>-&gt;</operator><name>source_len</name></name></expr> </then><else>: <expr><call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>bool</name></type> <name>lastBlank</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;=</operator> <name>size</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name>i</name> <operator>==</operator> <name>size</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// check continue blank like '    '</comment>
      <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>lastBlank</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>  <comment type="line">// first blank</comment>
          <expr_stmt><expr><name>lastBlank</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>start</name><operator>++</operator></expr>;</expr_stmt>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>lastBlank</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// found split or string end , append word</comment>
      <if_stmt><if>if <condition>(<expr><name><name>command</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <call><name>addWord</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>start</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>SWord</name><modifier>*</modifier></type> <name>word</name> <init>= <expr><name><name>command</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><name><name>word</name><operator>-&gt;</operator><name>next</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>word</name> <operator>=</operator> <name><name>word</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
        </block_content>}</block></while>
        <expr_stmt><expr><name><name>word</name><operator>-&gt;</operator><name>next</name></name> <operator>=</operator> <call><name>addWord</name><argument_list>(<argument><expr><name>p</name> <operator>+</operator> <name>start</name></expr></argument>, <argument><expr><name>i</name> <operator>-</operator> <name>start</name></expr></argument>, <argument><expr><name>pattern</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><name>start</name> <operator>=</operator> <name>i</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>lastBlank</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// free SShellCmd</comment>
<function><type><name>void</name></type> <name>freeCommand</name><parameter_list>(<parameter><decl><type><name>SWords</name><modifier>*</modifier></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWord</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>command</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>command</name><operator>-&gt;</operator><name>head</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <comment type="line">// loop</comment>
  <while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>SWord</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><name>item</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <comment type="line">// if malloc need free</comment>
    <if_stmt><if>if <condition>(<expr><name><name>tmp</name><operator>-&gt;</operator><name>free</name></name> <operator>&amp;&amp;</operator> <name><name>tmp</name><operator>-&gt;</operator><name>word</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>tmp</name><operator>-&gt;</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>GenerateVarType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name> <init>= <expr><call><name>createTire</name><argument_list>(<argument><expr><name>TIRE_LIST</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>insertWord</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>tire</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">//</comment>
<comment type="line">//  -------------------- shell auto ----------------</comment>
<comment type="line">//</comment>

<comment type="line">// init shell auto funciton , shell start call once</comment>
<function><type><name>bool</name></type> <name>shellAutoInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// command</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name> <init>= <expr><call><name>SHELL_COMMAND_COUNT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>parseCommand</name><argument_list>(<argument><expr><name>shellCommands</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// tires</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tires</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>STire</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>WT_VAR_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// threads</comment>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>threads</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TdThread</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>WT_FROM_DB_CNT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// generate varType</comment>
  <expr_stmt><expr><call><name>GenerateVarType</name><argument_list>(<argument><expr><name>WT_VAR_FUNC</name></expr></argument>, <argument><expr><name>functions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>functions</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GenerateVarType</name><argument_list>(<argument><expr><name>WT_VAR_KEYWORD</name></expr></argument>, <argument><expr><name>keywords</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>keywords</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GenerateVarType</name><argument_list>(<argument><expr><name>WT_VAR_DBOPTION</name></expr></argument>, <argument><expr><name>db_options</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db_options</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GenerateVarType</name><argument_list>(<argument><expr><name>WT_VAR_ALTER_DBOPTION</name></expr></argument>, <argument><expr><name>alter_db_options</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>alter_db_options</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GenerateVarType</name><argument_list>(<argument><expr><name>WT_VAR_TBACTION</name></expr></argument>, <argument><expr><name>tb_actions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_actions</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GenerateVarType</name><argument_list>(<argument><expr><name>WT_VAR_DATATYPE</name></expr></argument>, <argument><expr><name>data_types</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data_types</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GenerateVarType</name><argument_list>(<argument><expr><name>WT_VAR_KEYTAGS</name></expr></argument>, <argument><expr><name>key_tags</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key_tags</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GenerateVarType</name><argument_list>(<argument><expr><name>WT_VAR_TBOPTION</name></expr></argument>, <argument><expr><name>tb_options</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tb_options</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GenerateVarType</name><argument_list>(<argument><expr><name>WT_VAR_USERACTION</name></expr></argument>, <argument><expr><name>user_actions</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>user_actions</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>GenerateVarType</name><argument_list>(<argument><expr><name>WT_VAR_KEYSELECT</name></expr></argument>, <argument><expr><name>key_select</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>key_select</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// set conn</comment>
<function><type><name>void</name></type> <name>shellSetConn</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>conn</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><name>varCon</name> <operator>=</operator> <name>conn</name></expr>;</expr_stmt> </block_content>}</block></function>

<comment type="line">// exit shell auto funciton, shell exit call once</comment>
<function><type><name>void</name></type> <name>shellAutoExit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// free command</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name> <init>= <expr><call><name>SHELL_COMMAND_COUNT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>freeCommand</name><argument_list>(<argument><expr><name>shellCommands</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// free tires</comment>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WT_VAR_CNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>tires</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>freeTire</name><argument_list>(<argument><expr><name><name>tires</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>tires</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// destory</comment>
  <expr_stmt><expr><call><name>taosThreadMutexDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// free threads</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>WT_FROM_DB_CNT</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosDestroyThread</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>threads</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// free lastMatch</comment>
  <if_stmt><if>if <condition>(<expr><name>lastMatch</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeMatch</name><argument_list>(<argument><expr><name>lastMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastMatch</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">//</comment>
<comment type="line">//  -------------------  auto ptr for tires --------------------------</comment>
<comment type="line">//</comment>
<function><type><name>bool</name></type> <name>setNewAuotPtr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>pNew</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>pNew</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>pOld</name> <init>= <expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pOld</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// previous have value, release self ref count</comment>
    <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>pOld</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>freeTire</name><argument_list>(<argument><expr><name>pOld</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// set new</comment>
  <expr_stmt><expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>pNew</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name><operator>-&gt;</operator><name>ref</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// get ptr</comment>
<function><type><name>STire</name><modifier>*</modifier></type> <name>getAutoPtr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name><operator>-&gt;</operator><name>ref</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// put back tire to tires[type], if tire not equal tires[type].p, need free tire</comment>
<function><type><name>void</name></type> <name>putBackAutoPtr</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tire</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name> <operator>!=</operator> <name>tire</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// update by out,  can't put back , so free</comment>
    <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>tire</name><operator>-&gt;</operator><name>ref</name></name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// support multi thread getAuotPtr</comment>
      <expr_stmt><expr><call><name>freeTire</name><argument_list>(<argument><expr><name>tire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name><operator>-&gt;</operator><name>ref</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name><operator>-&gt;</operator><name>ref</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return;</return>
</block_content>}</block></function>

<comment type="line">//</comment>
<comment type="line">//  -------------------  var Word --------------------------</comment>
<comment type="line">//</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CACHED_CNT</name></cpp:macro> <cpp:value>100000</cpp:value></cpp:define>  <comment type="line">// max cached rows 10w</comment>
<comment type="line">// write sql result to var name, return write rows cnt</comment>
<function><type><name>int</name></type> <name>writeVarNames</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>tres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// fetch row</comment>
  <decl_stmt><decl><type><name>TAOS_ROW</name></type> <name>row</name> <init>= <expr><call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// create new tires</comment>
  <decl_stmt><decl><type><name>char</name></type>   <name>tireType</name> <init>= <expr><ternary><condition><expr><name>type</name> <operator>==</operator> <name>WT_VAR_TABLE</name></expr> ?</condition><then> <expr><name>TIRE_TREE</name></expr> </then><else>: <expr><name>TIRE_LIST</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name> <init>= <expr><call><name>createTire</name><argument_list>(<argument><expr><name>tireType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// enum rows</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>name</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>lengths</name> <init>= <expr><call><name>taos_fetch_lengths</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name>bytes</name> <init>= <expr><name><name>lengths</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>fields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_INT</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>name</name><index>[<expr><name>bytes</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>  <comment type="line">// set string end</comment>
    <comment type="line">// insert to tire</comment>
    <expr_stmt><expr><call><name>insertWord</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>++</operator><name>numOfRows</name> <operator>&gt;</operator> <name>MAX_CACHED_CNT</name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>row</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

  <comment type="line">// replace old tire</comment>
  <expr_stmt><expr><call><name>setNewAuotPtr</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>tire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function_decl><type><name>bool</name></type> <name>firstMatchCommand</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">//</comment>
<comment type="line">//  thread obtain var thread from db server</comment>
<comment type="line">//</comment>
<function><type><name>void</name><modifier>*</modifier></type> <name>varObtainThread</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>varCon</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>type</name> <operator>&gt;</operator> <name>WT_FROM_DB_MAX</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pSql</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>varCon</name></expr></argument>, <argument><expr><name><name>varSqls</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// write var names from pSql</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> <init>= <expr><call><name>writeVarNames</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// free sql</comment>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// check need call auto tab</comment>
  <if_stmt><if>if <condition>(<expr><name>cnt</name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>waitAutoFill</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// press tab key by program</comment>
    <expr_stmt><expr><call><name>firstMatchCommand</name><argument_list>(<argument><expr><name>varCon</name></expr></argument>, <argument><expr><name>varCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// only match next one word from all match words, return valuue must free by caller</comment>
<function><type><name>char</name><modifier>*</modifier></type> <name>matchNextPrefix</name><parameter_list>(<parameter><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pre</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SMatch</name><modifier>*</modifier></type> <name>match</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// re-use last result</comment>
  <if_stmt><if>if <condition>(<expr><name>lastMatch</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>pre</name></expr></argument>, <argument><expr><name><name>lastMatch</name><operator>-&gt;</operator><name>pre</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// same pre</comment>
      <expr_stmt><expr><name>match</name> <operator>=</operator> <name>lastMatch</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// not same with last result</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pre</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// EMPTY PRE</comment>
      <expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>enumAll</name><argument_list>(<argument><expr><name>tire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// NOT EMPTY</comment>
      <expr_stmt><expr><name>match</name> <operator>=</operator> <operator>(</operator><name>SMatch</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SMatch</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>matchPrefix</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// save to lastMatch</comment>
    <if_stmt><if>if <condition>(<expr><name>match</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>lastMatch</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>freeMatch</name><argument_list>(<argument><expr><name>lastMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>lastMatch</name> <operator>=</operator> <name>match</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// check valid</comment>
  <if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>match</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// no one matched</comment>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>cursorVar</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// first</comment>
    <expr_stmt><expr><name>cursorVar</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>match</name><operator>-&gt;</operator><name>head</name><operator>-&gt;</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// according to cursorVar , calculate next one</comment>
  <decl_stmt><decl><type><name>int</name></type>         <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SMatchNode</name><modifier>*</modifier></type> <name>item</name> <init>= <expr><name><name>match</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>item</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name>cursorVar</name> <operator>+</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// found next position ok</comment>
      <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// match last item, reset cursorVar to head</comment>
        <expr_stmt><expr><name>cursorVar</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>cursorVar</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>

      <return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// check end item</comment>
    <if_stmt><if>if <condition>(<expr><name><name>item</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// if cursorVar &gt; var list count, return last and reset cursorVar</comment>
      <expr_stmt><expr><name>cursorVar</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

      <return>return <expr><call><name>strdup</name><argument_list>(<argument><expr><name><name>item</name><operator>-&gt;</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// move next</comment>
    <expr_stmt><expr><name>item</name> <operator>=</operator> <name><name>item</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// search pre word from tire tree, return value must free by caller</comment>
<function><type><name>char</name><modifier>*</modifier></type> <name>tireSearchWord</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pre</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>WT_TEXT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;</operator> <name>WT_FROM_DB_MAX</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// NOT FROM DB , tires[type] alwary not null</comment>
    <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name> <init>= <expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tire</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <return>return <expr><call><name>matchNextPrefix</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// TYPE CONTEXT GET FROM DB</comment>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// check need obtain from server</comment>
  <if_stmt><if>if <condition>(<expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>waitAutoFill</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <comment type="line">// need async obtain var names from db sever</comment>
    <if_stmt><if>if <condition>(<expr><name><name>threads</name><index>[<expr><name>type</name></expr>]</index></name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taosThreadRunning</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// thread running , need not obtain again, return</comment>
        <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// destroy previous thread handle for new create thread handle</comment>
      <expr_stmt><expr><call><name>taosDestroyThread</name><argument_list>(<argument><expr><name><name>threads</name><index>[<expr><name>type</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>threads</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// create new</comment>
    <decl_stmt><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int</name><operator>*</operator><operator>)</operator><name>param</name><operator>)</operator> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>threads</name><index>[<expr><name>type</name></expr>]</index></name> <operator>=</operator> <call><name>taosCreateThread</name><argument_list>(<argument><expr><name>varObtainThread</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// can obtain var names from local</comment>
  <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name> <init>= <expr><call><name>getAutoPtr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tire</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>matchNextPrefix</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// used finish, put back pointer to autoptr array</comment>
  <expr_stmt><expr><call><name>putBackAutoPtr</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><name>tire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>str</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// match var word, word1 is pattern , word2 is input from shell</comment>
<function><type><name>bool</name></type> <name>matchVarWord</name><parameter_list>(<parameter><decl><type><name>SWord</name><modifier>*</modifier></type> <name>word1</name></decl></parameter>, <parameter><decl><type><name>SWord</name><modifier>*</modifier></type> <name>word2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// search input word from tire tree</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>pre</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pre</name></expr></argument>, <argument><expr><name><name>word2</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>word2</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pre</name><index>[<expr><name><name>word2</name><operator>-&gt;</operator><name>len</name></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>word1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>WT_VAR_ALLTABLE</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// ALL_TABLE</comment>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tireSearchWord</name><argument_list>(<argument><expr><name>WT_VAR_STABLE</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tireSearchWord</name><argument_list>(<argument><expr><name>WT_VAR_TABLE</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// OTHER</comment>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tireSearchWord</name><argument_list>(<argument><expr><name><name>word1</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// not found or word1-&gt;type variable list not obtain from server, return not match</comment>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// free previous malloc</comment>
  <if_stmt><if>if <condition>(<expr><name><name>word1</name><operator>-&gt;</operator><name>free</name></name> <operator>&amp;&amp;</operator> <name><name>word1</name><operator>-&gt;</operator><name>word</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>word1</name><operator>-&gt;</operator><name>word</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// save</comment>
  <expr_stmt><expr><name><name>word1</name><operator>-&gt;</operator><name>word</name></name> <operator>=</operator> <name>str</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>word1</name><operator>-&gt;</operator><name>len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>word1</name><operator>-&gt;</operator><name>free</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>  <comment type="line">// need free</comment>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//</comment>
<comment type="line">//  -------------------  match words --------------------------</comment>
<comment type="line">//</comment>

<comment type="line">// compare command cmd1 come from shellCommands , cmd2 come from user input</comment>
<function><type><name>int32_t</name></type> <name>compareCommand</name><parameter_list>(<parameter><decl><type><name>SWords</name><modifier>*</modifier></type> <name>cmd1</name></decl></parameter>, <parameter><decl><type><name>SWords</name><modifier>*</modifier></type> <name>cmd2</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SWord</name><modifier>*</modifier></type> <name>word1</name> <init>= <expr><name><name>cmd1</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SWord</name><modifier>*</modifier></type> <name>word2</name> <init>= <expr><name><name>cmd2</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>word1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>word2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>cmd1</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>word1</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>WT_TEXT</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// WT_TEXT match</comment>
      <if_stmt><if>if <condition>(<expr><name><name>word1</name><operator>-&gt;</operator><name>len</name></name> <operator>==</operator> <name><name>word2</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>word1</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>word2</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>word1</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>word1</name><operator>-&gt;</operator><name>len</name></name> <operator>&lt;</operator> <name><name>word2</name><operator>-&gt;</operator><name>len</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// word1-&gt;len &gt; word2-&gt;len</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name><name>word1</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>word2</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>word2</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>cmd1</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cmd1</name><operator>-&gt;</operator><name>matchLen</name></name> <operator>=</operator> <name><name>word2</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
          <return>return <expr><name>i</name></expr>;</return>
        </block_content>}</block></if> <else>else <block>{<block_content>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></else></if_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// WT_VAR auto match any one word</comment>
      <if_stmt><if>if <condition>(<expr><name><name>word2</name><operator>-&gt;</operator><name>next</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>  <comment type="line">// input words last one</comment>
        <if_stmt><if>if <condition>(<expr><call><name>matchVarWord</name><argument_list>(<argument><expr><name>word1</name></expr></argument>, <argument><expr><name>word2</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>cmd1</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name><name>cmd1</name><operator>-&gt;</operator><name>matchLen</name></name> <operator>=</operator> <name><name>word2</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>varMode</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
          <return>return <expr><name>i</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// move next</comment>
    <expr_stmt><expr><name>word1</name> <operator>=</operator> <name><name>word1</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>word2</name> <operator>=</operator> <name><name>word2</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>word1</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>word2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// match command</comment>
<function><type><name>SWords</name><modifier>*</modifier></type> <name>matchCommand</name><parameter_list>(<parameter><decl><type><name>SWords</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>continueSearch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>count</name> <init>= <expr><call><name>SHELL_COMMAND_COUNT</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SWords</name><modifier>*</modifier></type> <name>shellCommand</name> <init>= <expr><name>shellCommands</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>continueSearch</name> <operator>&amp;&amp;</operator> <name>lastMatchIndex</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;=</operator> <name>lastMatchIndex</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// new match must greate than lastMatchIndex</comment>
      <if_stmt><if>if <condition>(<expr><name>varMode</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>==</operator> <name>lastMatchIndex</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// do nothing, var match on lastMatchIndex</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// command is large</comment>
    <if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;</operator> <name><name>shellCommand</name><operator>-&gt;</operator><name>count</name></name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// compare</comment>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>index</name> <init>= <expr><call><name>compareCommand</name><argument_list>(<argument><expr><name>shellCommand</name></expr></argument>, <argument><expr><name>input</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>index</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>firstMatchIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>firstMatchIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>curMatchIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <return>return <expr><operator>&amp;</operator><name><name>shellCommands</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <comment type="line">// not match</comment>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//</comment>
<comment type="line">//  -------------------  print screen --------------------------</comment>
<comment type="line">//</comment>

<comment type="line">// delete char count</comment>
<function><type><name>void</name></type> <name>deleteCount</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>count</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>width</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>prompt_size</name> <init>= <expr><literal type="number">6</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>shellClearScreen</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>+</operator> <name>prompt_size</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>+</operator> <name>prompt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// loop delete</comment>
  <while>while <condition>(<expr><operator>--</operator><name>count</name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>shellGetPrevCharSize</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>width</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>-</operator> <name>size</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name> <operator>+</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>,
            <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>-</operator> <name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>cursorOffset</name></name> <operator>-=</operator> <name>size</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>screenOffset</name></name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>cmd</name><operator>-&gt;</operator><name>endOffset</name></name> <operator>-=</operator> <name>width</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<comment type="line">// show screen</comment>
<function><type><name>void</name></type> <name>printScreen</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>SWords</name><modifier>*</modifier></type> <name>match</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// modify SShellCmd</comment>
  <if_stmt><if>if <condition>(<expr><name>firstMatchIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>curMatchIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// no match</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// first tab press</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>strLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>firstMatchIndex</name> <operator>==</operator> <name>curMatchIndex</name> <operator>&amp;&amp;</operator> <name>lastWordBytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// first press tab</comment>
    <decl_stmt><decl><type><name>SWord</name><modifier>*</modifier></type> <name>word</name> <init>= <expr><call><name>MATCH_WORD</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>word</name><operator>-&gt;</operator><name>word</name></name> <operator>+</operator> <name><name>match</name><operator>-&gt;</operator><name>matchLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>strLen</name> <operator>=</operator> <name><name>word</name><operator>-&gt;</operator><name>len</name></name> <operator>-</operator> <name><name>match</name><operator>-&gt;</operator><name>matchLen</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastMatchIndex</name> <operator>=</operator> <name>firstMatchIndex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastWordBytes</name> <operator>=</operator> <name><name>word</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lastWordBytes</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>deleteCount</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>lastWordBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>SWord</name><modifier>*</modifier></type> <name>word</name> <init>= <expr><call><name>MATCH_WORD</name><argument_list>(<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <name><name>word</name><operator>-&gt;</operator><name>word</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>strLen</name> <operator>=</operator> <name><name>word</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
    <comment type="line">// set current to last</comment>
    <expr_stmt><expr><name>lastMatchIndex</name> <operator>=</operator> <name>curMatchIndex</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastWordBytes</name> <operator>=</operator> <name><name>word</name><operator>-&gt;</operator><name>len</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// insert new</comment>
  <expr_stmt><expr><call><name>shellInsertStr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>str</name></expr></argument>, <argument><expr><name>strLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// main key press tab , matched return true else false</comment>
<function><type><name>bool</name></type> <name>firstMatchCommand</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// parse command</comment>
  <decl_stmt><decl><type><name>SWords</name><modifier>*</modifier></type> <name>input</name> <init>= <expr><operator>(</operator><name>SWords</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWords</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWords</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>source_len</name></name> <operator>=</operator> <name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>parseCommand</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// if have many , default match first, if press tab again , switch to next</comment>
  <expr_stmt><expr><name>curMatchIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>lastMatchIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SWords</name><modifier>*</modifier></type> <name>match</name> <init>= <expr><call><name>matchCommand</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// not match , nothing to do</comment>
    <expr_stmt><expr><call><name>freeCommand</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// print to screen</comment>
  <expr_stmt><expr><call><name>printScreen</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>freeCommand</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// create input source</comment>
<function><type><name>void</name></type> <name>createInputFromFirst</name><parameter_list>(<parameter><decl><type><name>SWords</name><modifier>*</modifier></type> <name>input</name></decl></parameter>, <parameter><decl><type><name>SWords</name><modifier>*</modifier></type> <name>firstMatch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">//</comment>
  <comment type="line">// if next pressTabKey , input context come from firstMatch, set matched length with source_len</comment>
  <comment type="line">//</comment>
  <expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name><name>input</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SWord</name><modifier>*</modifier></type> <name>word</name> <init>= <expr><name><name>firstMatch</name><operator>-&gt;</operator><name>head</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// source_len = full match word-&gt;len + half match with firstMatch-&gt;matchLen</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>firstMatch</name><operator>-&gt;</operator><name>matchIndex</name></name> <operator>&amp;&amp;</operator> <name>word</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <comment type="line">// combine source from each word</comment>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>source</name></name> <operator>+</operator> <name><name>input</name><operator>-&gt;</operator><name>source_len</name></name></expr></argument>, <argument><expr><name><name>word</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>word</name><operator>-&gt;</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>source</name></name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>          <comment type="line">// append blank splite</comment>
    <expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>source_len</name></name> <operator>+=</operator> <name><name>word</name><operator>-&gt;</operator><name>len</name></name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>  <comment type="line">// 1 is blank length</comment>
    <comment type="line">// move next</comment>
    <expr_stmt><expr><name>word</name> <operator>=</operator> <name><name>word</name><operator>-&gt;</operator><name>next</name></name></expr>;</expr_stmt>
  </block_content>}</block></for>
  <comment type="line">// appand half matched word for last</comment>
  <if_stmt><if>if <condition>(<expr><name>word</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>source</name></name> <operator>+</operator> <name><name>input</name><operator>-&gt;</operator><name>source_len</name></name></expr></argument>, <argument><expr><name><name>word</name><operator>-&gt;</operator><name>word</name></name></expr></argument>, <argument><expr><name><name>firstMatch</name><operator>-&gt;</operator><name>matchLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>source_len</name></name> <operator>+=</operator> <name><name>firstMatch</name><operator>-&gt;</operator><name>matchLen</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// user press Tabkey again is named next , matched return true else false</comment>
<function><type><name>bool</name></type> <name>nextMatchCommand</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>SWords</name><modifier>*</modifier></type> <name>firstMatch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>firstMatch</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>firstMatch</name><operator>-&gt;</operator><name>head</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>SWords</name><modifier>*</modifier></type> <name>input</name> <init>= <expr><operator>(</operator><name>SWords</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWords</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SWords</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// create input from firstMatch</comment>
  <expr_stmt><expr><call><name>createInputFromFirst</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>firstMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// parse input</comment>
  <expr_stmt><expr><call><name>parseCommand</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// if have many , default match first, if press tab again , switch to next</comment>
  <decl_stmt><decl><type><name>SWords</name><modifier>*</modifier></type> <name>match</name> <init>= <expr><call><name>matchCommand</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// if not match , reset all index</comment>
    <expr_stmt><expr><name>firstMatchIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>curMatchIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>match</name> <operator>=</operator> <call><name>matchCommand</name><argument_list>(<argument><expr><name>input</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>match</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>freeCommand</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>source</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// print to screen</comment>
  <expr_stmt><expr><call><name>printScreen</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>match</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// free</comment>
  <expr_stmt><expr><call><name>freeCommand</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>input</name><operator>-&gt;</operator><name>source</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>input</name><operator>-&gt;</operator><name>source</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>input</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>input</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// fill with type</comment>
<function><type><name>bool</name></type> <name>fillWithType</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pre</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// get type</comment>
  <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name> <init>= <expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>  <name>str</name> <init>= <expr><call><name>matchNextPrefix</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// need insert part string</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>part</name> <init>= <expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// show</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>shellInsertStr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cntDel</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>  <comment type="line">// next press tab delete current append count</comment>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// fill with type</comment>
<function><type><name>bool</name></type> <name>fillTableName</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>pre</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// search stable and table</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name> <init>= <expr><call><name>tireSearchWord</name><argument_list>(<argument><expr><name>WT_VAR_STABLE</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>str</name> <operator>=</operator> <call><name>tireSearchWord</name><argument_list>(<argument><expr><name>WT_VAR_TABLE</name></expr></argument>, <argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// need insert part string</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>part</name> <init>= <expr><name>str</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>pre</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// delete autofill count last append</comment>
  <if_stmt><if>if <condition>(<expr><name>cntDel</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>deleteCount</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cntDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cntDel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// show</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>part</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>shellInsertStr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>part</name></expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>cntDel</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>  <comment type="line">// next press tab delete current append count</comment>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">//</comment>
<comment type="line">// find last word from sql select clause</comment>
<comment type="line">//  example :</comment>
<comment type="line">//  1 select cou -&gt; press tab  select count(</comment>
<comment type="line">//  2 select count(*),su -&gt; select count(*), sum(</comment>
<comment type="line">//  3 select count(*), su -&gt; select count(*), sum(</comment>
<comment type="line">//</comment>
<function><type><name>char</name><modifier>*</modifier></type> <name>lastWord</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// get near from end revert find ' ' and ','</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p2</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>p1</name> <operator>&amp;&amp;</operator> <name>p2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><ternary><condition><expr><name>p1</name> <operator>&gt;</operator> <name>p2</name></expr> ?</condition><then> <expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr> </then><else>: <expr><name>p2</name> <operator>+</operator> <literal type="number">1</literal></expr></else></ternary></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p2</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>p2</name> <operator>+</operator> <literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><name>p</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>fieldsInputEnd</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// not in '()'</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p2</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p1</name> <operator>&amp;&amp;</operator> <name>p2</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// like select count( '  '</comment>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>p1</name> <operator>&amp;&amp;</operator> <name>p2</name> <operator>&amp;&amp;</operator> <name>p1</name> <operator>&gt;</operator> <name>p2</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// like select sum(age), count( ' '</comment>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// not in ','</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p3</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="char">','</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>p3</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// like select ts, age,'    '</comment>
  <if_stmt><if>if <condition>(<expr><name>p</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>bool</name></type>  <name>allBlank</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>  <comment type="line">// after last ','  all char is blank</comment>
    <decl_stmt><decl><type><name>int</name></type>   <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>          <comment type="line">// blank count , like '    ' as one blank</comment>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>plast</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>     <comment type="line">// last blank position</comment>
    <while>while <condition>(<expr><operator>*</operator><name>p</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>plast</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>allBlank</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
    </block_content>}</block></while>

    <comment type="line">// any one word is not blank</comment>
    <if_stmt><if>if <condition>(<expr><name>allBlank</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// like 'select count(*),sum(age) fr' need return true</comment>
    <if_stmt><if>if <condition>(<expr><name>plast</name> <operator>&amp;&amp;</operator> <name>plast</name> <operator>&gt;</operator> <name>p3</name> <operator>&amp;&amp;</operator> <name>p2</name> <operator>&gt;</operator> <name>p1</name> <operator>&amp;&amp;</operator> <name>plast</name> <operator>&gt;</operator> <name>p2</name> <operator>&amp;&amp;</operator> <name>p1</name> <operator>&gt;</operator> <name>p3</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// if last char not ' ', then not end field, like 'select count(*), su' can fill sum(</comment>
    <if_stmt><if>if <condition>(<expr><name><name>sql</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>cnt</name> <operator>&lt;=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p4</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>p4</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// only one word</comment>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// need insert from</comment>
<function><type><name>bool</name></type> <name>needInsertFrom</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// last is blank</comment>
  <if_stmt><if>if <condition>(<expr><name><name>sql</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>!=</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// insert from keyword</comment>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//  select fields input is end</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>fieldsInputEnd</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// can insert from keyword</comment>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// p is string following select keyword</comment>
<function><type><name>bool</name></type> <name>appendAfterSelect</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// union all</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>p1</name> <operator>=</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>UNION_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>p</name> <operator>=</operator> <name>p1</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>UNION_ALL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block> while <condition>(<expr><name>p1</name></expr>)</condition>;</do>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>from</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" from "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// last word , maybe empty string or some letters of a string</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>last</name> <init>= <expr><call><name>lastWord</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>  <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>from</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>fieldEnd</name> <init>= <expr><call><name>fieldsInputEnd</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// check fields input end then insert from keyword</comment>
    <if_stmt><if>if <condition>(<expr><name>fieldEnd</name> <operator>&amp;&amp;</operator> <name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>shellInsertStr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"from"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// fill funciton</comment>
    <if_stmt><if>if <condition>(<expr><name>fieldEnd</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// fields is end , need match keyword</comment>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fillWithType</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>WT_VAR_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fillWithType</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>WT_VAR_FUNC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// have from</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>blank</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>from</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>blank</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// no table name, need fill</comment>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fillTableName</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>last</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fillWithType</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>WT_VAR_KEYWORD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>searchAfterSelect</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// select * from st;</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"select "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// check nest query</comment>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><name>p</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p2</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="string">"select "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>p2</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
      <expr_stmt><expr><name>p1</name> <operator>=</operator> <name>p2</name> <operator>+</operator> <literal type="number">7</literal></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>p1</name> <operator>-</operator> <name>p</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// explain as select * from st;</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"explain select "</literal></expr></argument>, <argument><expr><literal type="number">15</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">15</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>as_pos_end</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">" as select "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>as_pos_end</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>as_pos_end</name> <operator>+=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

  <comment type="line">// create stream &lt;stream_name&gt; as select</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"create stream "</literal></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>as_pos_end</name> <operator>-</operator> <name>p</name></expr>;</return>
    <empty_stmt>;</empty_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// create topic &lt;topic_name&gt; as select</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"create topic "</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>as_pos_end</name> <operator>-</operator> <name>p</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>matchSelectQuery</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// if continue press Tab , delete bytes by previous autofill</comment>
  <if_stmt><if>if <condition>(<expr><name>cntDel</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>deleteCount</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cntDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cntDel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// match select ...</comment>
  <decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// remove prefix blank</comment>
  <while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// special range</comment>
  <if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">7</literal> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// search</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>sql_cp</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><call><name>searchAfterSelect</name><argument_list>(<argument><expr><name>sql_cp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sql_cp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>n</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>||</operator> <name>n</name> <operator>&gt;</operator> <name>len</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>n</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>-=</operator> <name>n</name></expr>;</expr_stmt>

  <comment type="line">// append</comment>
  <return>return <expr><call><name>appendAfterSelect</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// if is input create fields or tags area, return true</comment>
<function><type><name>bool</name></type> <name>isCreateFieldsArea</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// put to while, support like create table st(ts timestamp, bin1 binary(16), bin2 + blank + TAB </comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>strdup</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>left</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="char">'('</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>left</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// like 'create table st'</comment>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>right</name> <init>= <expr><call><name>strrchr</name><argument_list>(<argument><expr><name>p1</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>right</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// like 'create table st( '</comment>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>left</name> <operator>&gt;</operator> <name>right</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// like 'create table st( ts timestamp, age int) tags(area '</comment>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    
    <comment type="line">// set string end by small for next strrchr search</comment>
    <expr_stmt><expr><operator>*</operator><name>left</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>p1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>matchCreateTable</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// if continue press Tab , delete bytes by previous autofill</comment>
  <if_stmt><if>if <condition>(<expr><name>cntDel</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>deleteCount</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>cntDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>cntDel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// match select ...</comment>
  <decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// remove prefix blank</comment>
  <while>while <condition>(<expr><name><name>p</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>&amp;&amp;</operator> <name>len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name><operator>--</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// special range</comment>
  <if_stmt><if>if <condition>(<expr><name><name>len</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">7</literal> <operator>||</operator> <name>len</name></expr></argument> &gt;</argument_list></name> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// select and from</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="string">"create table "</literal></expr></argument>, <argument><expr><literal type="number">13</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// not select query clause</comment>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <literal type="number">13</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> <operator>-=</operator> <literal type="number">13</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ps</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>  <name>ret</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>last</name> <init>= <expr><call><name>lastWord</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// check in create fields or tags input area</comment>
  <if_stmt><if>if <condition>(<expr><call><name>isCreateFieldsArea</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fillWithType</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>WT_VAR_DATATYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// tags</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// find only one ')' , can insert tags</comment>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"tags"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// can insert tags keyword</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fillWithType</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>WT_VAR_KEYTAGS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// tb options</comment>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// find like create talbe st (...) tags(..)  &lt;here is fill tb option area&gt;</comment>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>ps</name></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  <comment type="line">// first ')' end</comment>
    <if_stmt><if>if <condition>(<expr><name>p1</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>p1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="char">')'</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// second ')' end</comment>
        <comment type="line">// here is tb options area, can insert option</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fillWithType</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>WT_VAR_TBOPTION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>ps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>matchOther</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>con</name></decl></parameter>, <parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name><name>cmd</name><operator>-&gt;</operator><name>command</name></name></expr></init></decl>;</decl_stmt>

  <comment type="line">// '\\'</comment>
  <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>len</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\\'</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// append '\G'</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>a</name><index>[]</index></name> <init>= <expr><literal type="string">"G;"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>shellInsertStr</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// too small</comment>
  <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&lt;</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>false</name></expr>;</return></block_content></block></if></if_stmt>

  <comment type="line">// like 'from ( '</comment>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name> <init>= <expr><call><name>strndup</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>last</name> <init>= <expr><call><name>lastWord</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><literal type="string">"from("</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fillWithType</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>WT_VAR_KEYSELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>last</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>last</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>from</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">" from"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// find last ' from'</comment>
  <while>while <condition>(<expr><name>from</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p1</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>from</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><literal type="string">" from"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>p1</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>from</name> <operator>=</operator> <name>p1</name></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><name>from</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// find next is '('</comment>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p2</name> <init>= <expr><name>from</name> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type>  <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>   <comment type="line">// found 'from ... ( ...'  ... is any count of blank</comment>
    <decl_stmt><decl><type><name>bool</name></type>  <name>found1</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>  <comment type="line">// found '('</comment>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>p2</name> <operator>==</operator> <name>last</name> <operator>||</operator> <operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// last word or string end</comment>
        <if_stmt><if>if <condition>(<expr><name>found1</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <break>break;</break>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>found1</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>*</operator><name>p2</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// do nothing</comment>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// have any other char</comment>
        <break>break;</break>
      </block_content>}</block></else></if_stmt>

      <comment type="line">// move next</comment>
      <expr_stmt><expr><name>p2</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>fillWithType</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>last</name></expr></argument>, <argument><expr><name>WT_VAR_KEYSELECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// INSERT</comment>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// main key press tab</comment>
<function><type><name>void</name></type> <name>pressTabKey</name><parameter_list>(<parameter><decl><type><name>SShellCmd</name><modifier>*</modifier></type> <name>cmd</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// check</comment>
  <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>commandSize</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// empty</comment>
    <expr_stmt><expr><call><name>showHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>shellShowOnScreen</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// save connection to global</comment>
  <expr_stmt><expr><name>varCmd</name> <operator>=</operator> <name>cmd</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>matched</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

  <comment type="line">// manual match like create table st( ...</comment>
  <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>matchCreateTable</name><argument_list>(<argument><expr><name>varCon</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// shellCommands match</comment>
  <if_stmt><if>if <condition>(<expr><name>firstMatchIndex</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>firstMatchCommand</name><argument_list>(<argument><expr><name>varCon</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>nextMatchCommand</name><argument_list>(<argument><expr><name>varCon</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>shellCommands</name><index>[<expr><name>firstMatchIndex</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// NOT MATCHED ANYONE</comment>
  <comment type="line">// match other like '\G' ...</comment>
  <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>matchOther</name><argument_list>(<argument><expr><name>varCon</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <comment type="line">// manual match like select * from ...</comment>
  <expr_stmt><expr><name>matched</name> <operator>=</operator> <call><name>matchSelectQuery</name><argument_list>(<argument><expr><name>varCon</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>matched</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <return>return;</return>
</block_content>}</block></function>

<comment type="line">// press othr key</comment>
<function><type><name>void</name></type> <name>pressOtherKey</name><parameter_list>(<parameter><decl><type><name>char</name></type> <name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// reset global variant</comment>
  <expr_stmt><expr><name>firstMatchIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>lastMatchIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>curMatchIndex</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>lastWordBytes</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

  <comment type="line">// var names</comment>
  <expr_stmt><expr><name>cursorVar</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>varMode</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>waitAutoFill</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>cntDel</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>lastMatch</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeMatch</name><argument_list>(<argument><expr><name>lastMatch</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>lastMatch</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// put name into name, return name length</comment>
<function><type><name>int</name></type> <name>getWordName</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>nameLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// remove prefix blank</comment>
  <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>p</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// get databases name;</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>i</name> <operator>&lt;</operator> <name>nameLen</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">' '</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">';'</literal> <operator>||</operator> <name><name>p</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// name end</comment>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <return>return <expr><name>i</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// deal use db, if have  'use' return true</comment>
<function><type><name>bool</name></type> <name>dealUseDB</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// check use keyword</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"use "</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>  <name><name>db</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>sql</name> <operator>+</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>getWordName</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// no name , return</comment>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//  dbName is previous use open db name</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// same , no need switch</comment>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// switch new db</comment>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// STABLE set null</comment>
  <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name> <init>= <expr><name><name>tires</name><index>[<expr><name>WT_VAR_STABLE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>tires</name><index>[<expr><name>WT_VAR_STABLE</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tire</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeTire</name><argument_list>(<argument><expr><name>tire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// TABLE set null</comment>
  <expr_stmt><expr><name>tire</name> <operator>=</operator> <name><name>tires</name><index>[<expr><name>WT_VAR_TABLE</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>tires</name><index>[<expr><name>WT_VAR_TABLE</name></expr>]</index></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tire</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>freeTire</name><argument_list>(<argument><expr><name>tire</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <comment type="line">// save</comment>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// deal create, if have 'create' return true</comment>
<function><type><name>bool</name></type> <name>dealCreateCommand</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// check keyword</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"create "</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>  <name><name>name</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>sql</name> <operator>+</operator> <literal type="number">7</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>getWordName</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// no name , return</comment>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">//  dbName is previous use open db name</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"database"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_DBNAME</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strstr</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">" tags"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">" using "</literal></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_STABLE</name></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
      <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_TABLE</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_USERNAME</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"topic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_TOPIC</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_STREAM</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// no match , return</comment>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// move next</comment>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// get next word , that is table name</comment>
  <if_stmt><if>if <condition>(<expr><call><name>getWordName</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// no name , return</comment>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// switch new db</comment>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// STABLE set null</comment>
  <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name> <init>= <expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>tire</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>insertWord</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// deal create, if have 'drop' return true</comment>
<function><type><name>bool</name></type> <name>dealDropCommand</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// check keyword</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strncasecmp</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"drop "</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type>  <name><name>name</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>sql</name> <operator>+</operator> <literal type="number">5</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>getWordName</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// no name , return</comment>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">//  dbName is previous use open db name</comment>
  <if_stmt><if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"database"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_DBNAME</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_ALLTABLE</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"dnode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_DNODEID</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"user"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_USERNAME</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"topic"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_TOPIC</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"stream"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>type</name> <operator>=</operator> <name>WT_VAR_STREAM</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// no match , return</comment>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></else></if_stmt>

  <comment type="line">// move next</comment>
  <expr_stmt><expr><name>p</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// get next word , that is table name</comment>
  <if_stmt><if>if <condition>(<expr><call><name>getWordName</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <comment type="line">// no name , return</comment>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// switch new db</comment>
  <expr_stmt><expr><call><name>taosThreadMutexLock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// STABLE set null</comment>
  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>WT_VAR_ALLTABLE</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>del</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
    <comment type="line">// del in stable</comment>
    <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name> <init>= <expr><name><name>tires</name><index>[<expr><name>WT_VAR_STABLE</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tire</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>del</name> <operator>=</operator> <call><name>deleteWord</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <comment type="line">// del in table</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>del</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>tire</name> <operator>=</operator> <name><name>tires</name><index>[<expr><name>WT_VAR_TABLE</name></expr>]</index></name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>tire</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>del</name> <operator>=</operator> <call><name>deleteWord</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <comment type="line">// OTHER TYPE</comment>
    <decl_stmt><decl><type><name>STire</name><modifier>*</modifier></type> <name>tire</name> <init>= <expr><name><name>tires</name><index>[<expr><name>type</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tire</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>deleteWord</name><argument_list>(<argument><expr><name>tire</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosThreadMutexUnlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tiresMutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// callback autotab module after shell sql execute</comment>
<function><type><name>void</name></type> <name>callbackAutoTab</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sqlstr</name></decl></parameter>, <parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>pSql</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>usedb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name> <init>= <expr><name>sqlstr</name></expr></init></decl>;</decl_stmt>
  <comment type="line">// remove prefix blank</comment>
  <while>while <condition>(<expr><operator>*</operator><name>sql</name> <operator>==</operator> <literal type="char">' '</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>sql</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><call><name>dealUseDB</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <comment type="line">// change to new db</comment>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// create command add name to autotab</comment>
  <if_stmt><if>if <condition>(<expr><call><name>dealCreateCommand</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// drop command remove name from autotab</comment>
  <if_stmt><if>if <condition>(<expr><call><name>dealDropCommand</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <return>return;</return>
</block_content>}</block></function>
</unit>
