<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/examples/c/demoapi.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;unistd.h&gt;</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINDOWS</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;argp.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osSleep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>debugPrint</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { if (g_args.debug_print || g_args.verbose_print) {\
      fprintf(stdout, "DEBG: "fmt, __VA_ARGS__); }} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>warnPrint</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { fprintf(stderr, "\033[33m"); \
        fprintf(stderr, "WARN: "fmt, __VA_ARGS__); \
        fprintf(stderr, "\033[0m"); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>errorPrint</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { fprintf(stderr, "\033[31m"); \
        fprintf(stderr, "ERROR: "fmt, __VA_ARGS__); \
        fprintf(stderr, "\033[0m"); } while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>okPrint</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> \
    <cpp:value>do { fprintf(stderr, "\033[32m"); \
        fprintf(stderr, "OK: "fmt, __VA_ARGS__); \
        fprintf(stderr, "\033[0m"); } while (0)</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int64_t</name></type> <name>g_num_of_tb</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>g_num_of_rec</name> <init>= <expr><literal type="number">3</literal></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINDOWS</name></cpp:ifndef>
<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>argp_option</name></name></type> <name><name>options</name><index>[]</index></name> <init>= <expr><block>{
    <expr><block>{<expr><literal type="string">"tables"</literal></expr>, <expr><literal type="char">'t'</literal></expr>, <expr><literal type="string">"NUMBER"</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="string">"Number of child tables, default is 10000."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="string">"records"</literal></expr>, <expr><literal type="char">'n'</literal></expr>, <expr><literal type="string">"NUMBER"</literal></expr>, <expr><literal type="number">0</literal></expr>,
     <expr><literal type="string">"Number of records for each table, default is 10000."</literal></expr>}</block></expr>,
    <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>error_t</name></type> <name>parse_opt</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>arg</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>argp_state</name></name> <modifier>*</modifier></type><name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <switch>switch <condition>(<expr><name>key</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><literal type="char">'t'</literal></expr>:</case>
            <expr_stmt><expr><name>g_num_of_tb</name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>g_num_of_tb</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>warnPrint</name><argument_list>(<argument><expr><literal type="string">"minimal g_num_of_tb is %d\n"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>g_num_of_tb</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'n'</literal></expr>:</case>
            <expr_stmt><expr><name>g_num_of_rec</name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>g_num_of_rec</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>warnPrint</name><argument_list>(<argument><expr><literal type="string">"minimal g_num_of_rec is %d\n"</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>g_num_of_rec</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
    </block_content>}</block></switch>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>argp</name></name></type> <name>argp</name> <init>= <expr><block>{<expr><name>options</name></expr>, <expr><name>parse_opt</name></expr>, <expr><literal type="string">""</literal></expr>, <expr><literal type="string">""</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_data</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>res</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists test;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database test;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taos_select_db</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>errorPrint</name><argument_list>(<argument><expr><literal type="string">"%s() LN%d: taos_select_db() failed\n"</literal></expr></argument>,
                <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>command</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"create table meters(ts timestamp, f float, n int, "</literal>
            <literal type="string">"bin1 binary(20), c nchar(20), bin2 binary(20)) tags(area int, "</literal>
            <literal type="string">"city binary(20), dist nchar(20), street binary(20));"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>okPrint</name><argument_list>(<argument><expr><literal type="string">"%s created\n"</literal></expr></argument>, <argument><expr><literal type="string">"meters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>errorPrint</name><argument_list>(<argument><expr><literal type="string">"%s() LN%d: %s\n"</literal></expr></argument>,
                <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>g_num_of_tb</name></expr>;</condition> <incr><expr><name>i</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <comment type="line">// sprintf(command, "create table t%"PRId64" using meters "</comment>
        <comment type="line">//         "tags(%"PRId64", '%s', '%s', '%s');",</comment>
        <comment type="line">//         i, i, (i%2)?"beijing":"shanghai",</comment>
        <comment type="line">//         (i%2)?"æé³åº":"é»æµ¦åº",</comment>
        <comment type="line">//         (i%2)?"é¿å®è¡":"ä¸­å±±è·¯");</comment>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"create table t%"</literal><name>PRId64</name><literal type="string">" using meters "</literal>
                <literal type="string">"tags(%"</literal><name>PRId64</name><literal type="string">", '%s', '%s', '%s');"</literal></expr></argument>,
                <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
                <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>%</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"beijing"</literal></expr></then><else>:<expr><literal type="string">"shanghai"</literal></expr></else></ternary></expr></argument>,
                <argument><expr><ternary><condition><expr><operator>(</operator><name>i</name><operator>%</operator><literal type="number">2</literal><operator>)</operator></expr>?</condition><then><expr><literal type="string">"chaoyang"</literal></expr></then><else>:<expr><literal type="string">"huangpu"</literal></expr></else></ternary></expr></argument>,
                <argument><expr><operator>(</operator><ternary><condition><expr><name>i</name><operator>%</operator><literal type="number">2</literal></expr>?</condition><then><expr><literal type="string">"changan street"</literal></expr></then><else>:<expr><literal type="string">"jianguo rd"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>,  <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>okPrint</name><argument_list>(<argument><expr><literal type="string">"t%"</literal> <name>PRId64</name> <literal type="string">" created\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>errorPrint</name><argument_list>(<argument><expr><literal type="string">"%s() LN%d: %s\n"</literal></expr></argument>,
                    <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>total</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>affected</name></decl>;</decl_stmt>
        <for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>g_num_of_rec</name> <operator>-</operator><literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name> <operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"insert into t%"</literal><name>PRId64</name><literal type="string">" "</literal>
                    <literal type="string">"values(%"</literal> <name>PRId64</name> <literal type="string">", %f, %"</literal><name>PRId64</name><literal type="string">", "</literal>
                    <literal type="string">"'%c%d', '%s%c%d', '%c%d')"</literal></expr></argument>,
                    <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1650000000000</literal><operator>+</operator><name>j</name></expr></argument>, <argument><expr><name>j</name> <operator>*</operator> <literal type="number">1.0</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>,
                    <argument><expr><literal type="char">'a'</literal><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name>j</name><operator>%</operator><literal type="number">25</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call></expr></argument>,
                    <comment type="line">// "æ¶æ", 'z' - (int)j%25, rand(),</comment>
                    <argument><expr><literal type="string">"TAOS"</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>j</name><operator>%</operator><literal type="number">25</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call></expr></argument>,
                    <argument><expr><literal type="char">'b'</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>j</name><operator>%</operator><literal type="number">25</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>,  <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>affected</name> <operator>=</operator> <call><name>taos_affected_rows</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>affected</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>errorPrint</name><argument_list>(<argument><expr><literal type="string">"%s() LN%d: %s\n"</literal></expr></argument>,
                        <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
            <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"insert into t%"</literal><name>PRId64</name><literal type="string">" values(%"</literal> <name>PRId64</name> <literal type="string">", "</literal>
                <literal type="string">"NULL, NULL, NULL, NULL, NULL)"</literal></expr></argument>,
                <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1650000000000</literal><operator>+</operator><name>j</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>,  <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>affected</name> <operator>=</operator> <call><name>taos_affected_rows</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>affected</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>errorPrint</name><argument_list>(<argument><expr><literal type="string">"%s() LN%d: %s\n"</literal></expr></argument>,
                    <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"insert into t%"</literal><name>PRId64</name><literal type="string">" "</literal>
                <literal type="string">"values(%"</literal> <name>PRId64</name> <literal type="string">", %f, %"</literal><name>PRId64</name><literal type="string">", "</literal>
                <literal type="string">"'%c%d', '%s%c%d', '%c%d')"</literal></expr></argument>,
                <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1650000000000</literal><operator>+</operator><name>j</name><operator>+</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>float</name><operator>)</operator><name>j</name></expr></argument>, <argument><expr><name>j</name></expr></argument>,
                <argument><expr><literal type="char">'a'</literal><operator>+</operator><operator>(</operator><name>int</name><operator>)</operator><name>j</name><operator>%</operator><literal type="number">25</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="string">"æ°æ®"</literal></expr></argument>, <argument><expr><literal type="char">'z'</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>j</name><operator>%</operator><literal type="number">25</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call></expr></argument>,
                <argument><expr><literal type="char">'b'</literal> <operator>-</operator> <operator>(</operator><name>int</name><operator>)</operator><name>j</name><operator>%</operator><literal type="number">25</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>,  <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>(</operator><name>res</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>==</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>affected</name> <operator>=</operator> <call><name>taos_affected_rows</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>total</name> <operator>+=</operator> <name>affected</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>errorPrint</name><argument_list>(<argument><expr><literal type="string">"%s() LN%d: %s\n"</literal></expr></argument>,
                    <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>okPrint</name><argument_list>(<argument><expr><literal type="string">"insert %"</literal><name>PRId64</name><literal type="string">" records into t%"</literal><name>PRId64</name><literal type="string">", "</literal>
                <literal type="string">"total affected rows: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>total</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>print_result</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tbname</name></decl></parameter>, <parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>block</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>num_rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAOS_ROW</name></type>    <name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fields[%d].name=%s, fields[%d].type=%d, fields[%d].bytes=%d\n"</literal></expr></argument>,
                <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><name>block</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>warnPrint</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"call taos_fetch_block(), "</literal>
                <literal type="string">"don't call taos_fetch_lengths()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>rows</name> <operator>=</operator> <call><name>taos_fetch_block</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lengths</name> <init>= <expr><call><name>taos_fetch_lengths</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <for>for <control>(<init><decl><type><name>int</name></type> <name>f</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>f</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>f</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>fields</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>TSDB_DATA_TYPE_VARCHAR</name><operator>)</operator>
                        <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>TSDB_DATA_TYPE_NCHAR</name><operator>)</operator>
                        <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>TSDB_DATA_TYPE_JSON</name><operator>)</operator></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"col%d type is %d, no need get offset\n"</literal></expr></argument>,
                            <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>fields</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                        <switch>switch <condition>(<expr><name><name>fields</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
                            <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
                                <if_stmt><if>if <condition>(<expr><call><name>taos_is_null</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"col%d, row: %"</literal><name>PRId64</name><literal type="string">" "</literal>
                                            <literal type="string">"value: NULL\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if> <else>else <block>{<block_content>
                                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"col%d, row: %"</literal><name>PRId64</name><literal type="string">", "</literal>
                                            <literal type="string">"value: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
                                            <argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                            <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>row</name><index>[<expr><name>f</name></expr>]</index></name><operator>)</operator>
                                                <operator>+</operator><name>c</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                                <break>break;</break>

                            <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
                                <if_stmt><if>if <condition>(<expr><call><name>taos_is_null</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"col%d, row: %"</literal><name>PRId64</name><literal type="string">" "</literal>
                                            <literal type="string">"value: NULL\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if> <else>else <block>{<block_content>
                                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"col%d, row: %"</literal><name>PRId64</name><literal type="string">", "</literal>
                                            <literal type="string">"value: %d\n"</literal></expr></argument>,
                                            <argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                            <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>row</name><index>[<expr><name>f</name></expr>]</index></name><operator>)</operator>
                                                <operator>+</operator><name>c</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                                <break>break;</break>

                            <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
                                <if_stmt><if>if <condition>(<expr><call><name>taos_is_null</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"col%d, row: %"</literal><name>PRId64</name><literal type="string">" "</literal>
                                            <literal type="string">"value: NULL\n"</literal></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></if> <else>else <block>{<block_content>
                                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"col%d, row: %"</literal><name>PRId64</name><literal type="string">", "</literal>
                                            <literal type="string">"value: %f\n"</literal></expr></argument>,
                                            <argument><expr><name>f</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                                            <argument><expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>row</name><index>[<expr><name>f</name></expr>]</index></name><operator>)</operator>
                                                <operator>+</operator><name>c</name><operator>*</operator><sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                </block_content>}</block></else></if_stmt>
                                <break>break;</break>

                            <default>default:</default>
                                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"type: %d is not processed\n"</literal></expr></argument>,
                                        <argument><expr><name><name>fields</name><index>[<expr><name>f</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <break>break;</break>
                        </block_content>}</block></switch>
                    </block_content>}</block></for>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>offsets</name> <init>= <expr><call><name>taos_get_column_data_offset</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <if_stmt><if>if <condition>(<expr><name>offsets</name></expr>)</condition> <block>{<block_content>
                        <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>rows</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                            <if_stmt><if>if <condition>(<expr><name><name>offsets</name><index>[<expr><name>c</name></expr>]</index></name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
                                <decl_stmt><decl><type><name>int</name></type> <name>length</name> <init>= <expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>row</name><index>[<expr><name>f</name></expr>]</index></name><operator>)</operator>
                                        <operator>+</operator> <name><name>offsets</name><index>[<expr><name>c</name></expr>]</index></name><operator>)</operator></expr></init></decl>;</decl_stmt>
                                <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                                <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>row</name><index>[<expr><name>f</name></expr>]</index></name><operator>)</operator>
                                            <operator>+</operator> <name><name>offsets</name><index>[<expr><name>c</name></expr>]</index></name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"row: %d, col: %d, offset: %d, "</literal>
                                        <literal type="string">"length: %d, content: %s\n"</literal></expr></argument>,
                                        <argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>, <argument><expr><name><name>offsets</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></if> <else>else <block>{<block_content>
                                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"row: %d, col: %d, offset: -1, "</literal>
                                        <literal type="string">"means content is NULL\n"</literal></expr></argument>,
                                        <argument><expr><name>c</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></else></if_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></if> <else>else <block>{<block_content>
                        <expr_stmt><expr><call><name>errorPrint</name><argument_list>(<argument><expr><literal type="string">"%s() LN%d: col%d's offsets is NULL\n"</literal></expr></argument>,
                                <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>f</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><name>num_rows</name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>warnPrint</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"call taos_fetch_rows()\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>taos_print_row</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>lengths</name> <init>= <expr><call><name>taos_fetch_lengths</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>lengths</name></expr>)</condition> <block>{<block_content>
                <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>c</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"row: %"</literal><name>PRId64</name><literal type="string">", col: %d, is_null: %s, "</literal>
                            <literal type="string">"length of column %d is %d\n"</literal></expr></argument>,
                            <argument><expr><name>num_rows</name></expr></argument>, <argument><expr><name>c</name></expr></argument>,
                            <argument><expr><ternary><condition><expr><call><name>taos_is_null</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>num_rows</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>?</condition><then><expr><literal type="string">"True"</literal></expr></then><else>:<expr><literal type="string">"False"</literal></expr></else></ternary></expr></argument>,
                            <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>errorPrint</name><argument_list>(<argument><expr><literal type="string">"%s() LN%d: %s's lengths is NULL\n"</literal></expr></argument>,
                        <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><name>num_rows</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><name>num_rows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>verify_query</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <comment type="line">// TODO: select count(tbname) from stable once stable query work</comment>
    <comment type="line">//</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbname</name><index>[<expr><literal type="number">193</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>command</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int64_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>g_num_of_tb</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>, <argument><expr><literal type="string">"t%"</literal><name>PRId64</name><literal type="string">""</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>command</name></expr></argument>, <argument><expr><literal type="string">"select * from %s"</literal></expr></argument>, <argument><expr><name>tbname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>res</name></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>int</name></type> <name>field_count</name> <init>= <expr><call><name>taos_field_count</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"field_count: %d\n"</literal></expr></argument>, <argument><expr><name>field_count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>int64_t</name></type> <name>rows</name> <init>= <expr><call><name>print_result</name><argument_list>(<argument><expr><name>tbname</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>okPrint</name><argument_list>(<argument><expr><literal type="string">"total query %s result rows is: %"</literal><name>PRId64</name><literal type="string">"\n"</literal></expr></argument>,
                        <argument><expr><name>tbname</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>errorPrint</name><argument_list>(<argument><expr><literal type="string">"%s() LN%d: %s\n"</literal></expr></argument>,
                        <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>errorPrint</name><argument_list>(<argument><expr><literal type="string">"%s() LN%d: %s\n"</literal></expr></argument>,
                    <argument><expr><name>__func__</name></expr></argument>, <argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>host</name> <init>= <expr><literal type="string">"127.0.0.1"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name> <init>= <expr><literal type="string">"root"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>passwd</name> <init>= <expr><literal type="string">"taosdata"</literal></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINDOWS</name></cpp:ifndef>
    <expr_stmt><expr><call><name>argp_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name>argp</name></expr></argument>, <argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31mfailed to connect to db, reason:%s\033[0m\n"</literal></expr></argument>,
                <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>info</name> <init>= <expr><call><name>taos_get_server_info</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"server info: %s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>info</name> <operator>=</operator> <call><name>taos_get_client_info</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"client info: %s\n"</literal></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>prepare_data</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>verify_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>okPrint</name><argument_list>(<argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
