<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/examples/c/prepare.c"><comment type="line">// TAOS standard API example. The same syntax as MySQL, but only a subet </comment>
<comment type="line">// to compile: gcc -o prepare prepare.c -ltaos</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../include/client/taos.h"</cpp:file></cpp:include>

<function_decl><type><name>void</name></type> <name>taosMsleep</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>mseconds</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>

  <comment type="line">// connect to server</comment>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"please input server ip \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>taos</name> <operator>=</operator> <call><name>taos_connect</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to connect to db, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>   

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database demo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database demo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create database, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use demo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// create table</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sql</name> <init>= <expr><literal type="string">"create table m1 (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, bin binary(40), blob nchar(10))"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// sleep for one second to make sure table is created on data node</comment>
  <comment type="line">// taosMsleep(1000);</comment>

  <comment type="line">// insert 10 records</comment>
  <struct>struct <block>{
      <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int8_t</name></type> <name>b</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int8_t</name></type> <name>v1</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int16_t</name></type> <name>v2</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>v4</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>v8</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>float</name></type> <name>f4</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>double</name></type> <name>f8</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>bin</name><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name></type> <name><name>blob</name><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name>v</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>

  <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TAOS_BIND</name></type> <name><name>params</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>ts</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v1</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v2</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v4</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v4</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v8</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>v8</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>f4</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>f4</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>f8</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>f8</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>bin</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>bin</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>blob</name></name></expr></argument>, <argument><expr><literal type="string">"ä¸äºä¸åäºå­ä¸å«ä¹å"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>blob</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>blob</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>is_null</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>sql</name> <operator>=</operator> <literal type="string">"insert into m1 values(?,?,?,?,?,?,?,?,?,?)"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>v</name><operator>.</operator><name>ts</name></name> <operator>=</operator> <literal type="number">1591060628000</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>ts</name></name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>params</name><index>[<expr><name>j</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><operator>(</operator><name>i</name> <operator>==</operator> <name>j</name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name>is_null</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>b</name></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>v1</name></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>v2</name></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>v4</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>v8</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>f4</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>f8</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">80</literal><operator>)</operator></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>bin</name></name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>v</name><operator>.</operator><name>bin</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute insert statement.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// query the records</comment>
  <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM m1 WHERE v1 &gt; ? AND v2 &lt; ?"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>.</operator><name>v1</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>.</operator><name>v2</name></name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute select statement.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_stmt_use_result</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TAOS_ROW</name></type>    <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// fetch the records row by row</comment>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_print_row</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"two rows are fetched as expectation\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"expect two rows, but %d rows are fetched\n"</literal></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
