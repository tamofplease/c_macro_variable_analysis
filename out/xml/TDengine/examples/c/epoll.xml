<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/examples/c/epoll.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<comment type="line">// how to use to do a pressure-test upon eok</comment>
<comment type="line">// tester:               cat /dev/urandom | nc -c &lt;ip&gt; &lt;port&gt;</comment>
<comment type="line">// testee:               ./debug/build/bin/epoll -l &lt;port&gt; &gt; /dev/null</comment>
<comment type="line">// compare against:      nc -l &lt;port&gt; &gt; /dev/null</comment>
<comment type="line">// monitor and compare : glances</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__APPLE__</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"osEok.h"</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> <comment type="line">// __APPLE__</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/epoll.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// __APPLE__</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/socket.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netinet/in.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;arpa/inet.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libgen.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;locale.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;netdb.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>D</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>fprintf(stderr, "%s[%d]%s(): " fmt "\n", basename(__FILE__), __LINE__, __func__, ##__VA_ARGS__)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>A</name><parameter_list>(<parameter><type><name>statement</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                     \
  if (statement) break;                                                 \
  fprintf(stderr, "%s[%d]%s(): assert [%s] failed: %d[%s]: " fmt "\n",  \
          basename(__FILE__), __LINE__, __func__,                       \
          #statement, errno, strerror(errno),                           \
          ##__VA_ARGS__);                                               \
  abort();                                                              \
} while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>E</name><parameter_list>(<parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro> <cpp:value>do {                                                \
  fprintf(stderr, "%s[%d]%s(): %d[%s]: " fmt "\n",                      \
          basename(__FILE__), __LINE__, __func__,                       \
          errno, strerror(errno),                                       \
          ##__VA_ARGS__);                                               \
} while (0)</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>

<typedef>typedef <type><name><name>struct</name> <name>ep_s</name></name></type>            <name>ep_t</name>;</typedef>
<struct>struct <name>ep_s</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>                    <name>ep</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>pthread_mutex_t</name></type>        <name>lock</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>                    <name><name>sv</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// 0 for read, 1 for write;</comment>
  <decl_stmt><decl><type><name>pthread_t</name></type>              <name>thread</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>int</name></type>  <name>stopping</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>int</name></type>  <name>waiting</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>volatile</specifier> <name>unsigned</name> <name>int</name></type>  <name>wakenup</name><range>:<expr><literal type="number">1</literal></expr></range></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>ep_dummy</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<function_decl><type><specifier>static</specifier> <name>ep_t</name><modifier>*</modifier></type> <name>ep_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>  <name>ep_destroy</name><parameter_list>(<parameter><decl><type><name>ep_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>routine</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>open_listen</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><name><name>struct</name> <name>fde_s</name></name></type>          <name>fde_t</name>;</typedef>
<struct>struct <name>fde_s</name> <block>{
  <decl_stmt><decl><type><name>int</name></type>                          <name>skt</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (<modifier>*</modifier><name>on_event</name>)<parameter_list>(<parameter><decl><type><name>ep_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>events</name></decl></parameter>, <parameter><decl><type><name>fde_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>;</function_decl>
}</block>;</struct>

<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>listen_event</name><parameter_list>(<parameter><decl><type><name>ep_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>fde_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>null_event</name><parameter_list>(<parameter><decl><type><name>ep_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>fde_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>usage</name><parameter_list>(<parameter><type><name>arg0</name></type></parameter>, <parameter><type><name>fmt</name></type></parameter>, <parameter><type><modifier>...</modifier></type></parameter>)</parameter_list></cpp:macro>       <cpp:value>do {                                               \
  if (fmt[0]) {                                                                        \
    fprintf(stderr, "" fmt "\n", ##__VA_ARGS__);                                       \
  }                                                                                    \
  fprintf(stderr, "usage:\n");                                                         \
  fprintf(stderr, "  %s -l &lt;port&gt;             : specify listenning port\n", arg0);     \
} while (0)</cpp:value></cpp:define>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>prg</name> <init>= <expr><call><name>basename</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>argc</name><operator>==</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prg</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>ep_t</name><modifier>*</modifier></type> <name>ep</name> <init>= <expr><call><name>ep_create</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>arg</name> <init>= <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name><operator>&gt;=</operator><name>argc</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prg</name></expr></argument>, <argument><expr><literal type="string">"expecting &lt;port&gt; after -l, but got nothing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><literal type="number">1</literal></expr>;</return> <comment type="line">// confirmed potential leakage</comment>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>arg</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>port</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>skt</name> <init>= <expr><call><name>open_listen</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>skt</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
      <decl_stmt><decl><type><name>fde_t</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>fde_t</name><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>client</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>client</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>skt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>skt</name></name> <operator>=</operator> <name>skt</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>on_event</name></name> <operator>=</operator> <name>listen_event</name></expr>;</expr_stmt>
      <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ev</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>events</name></name>   <operator>=</operator> <name>EPOLLIN</name> <operator>|</operator> <name>EPOLLERR</name> <operator>|</operator> <name>EPOLLHUP</name> <operator>|</operator> <name>EPOLLRDHUP</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>client</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_ADD</name></expr></argument>, <argument><expr><name>skt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name>prg</name></expr></argument>, <argument><expr><literal type="string">"unknown argument: [%s]"</literal></expr></argument>, <argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>linecap</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ssize_t</name></type> <name>linelen</name></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>linelen</name> <operator>=</operator> <call><name>getline</name><argument_list>(<argument><expr><operator>&amp;</operator><name>line</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>linecap</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>line</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"exit"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal><operator>==</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"quit"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>line</name><operator>==</operator><call><name>strstr</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type> <name>fd</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"close %d"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>fd</name><operator>&lt;=</operator><literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"fd [%d] invalid\n"</literal></expr></argument>, <argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_DEL</name></expr></argument>, <argument><expr><name>fd</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>==</operator><literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <continue>continue;</continue></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"unknown cmd:[%s]\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>ep_destroy</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>ep_t</name><modifier>*</modifier></type> <name>ep_create</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>ep_t</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>ep_t</name><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>ep</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"out of memory"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal><operator>!=</operator><operator>(</operator><name><name>ep</name><operator>-&gt;</operator><name>ep</name></name> <operator>=</operator> <call><name>epoll_create</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>sv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>sv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>socketpair</name><argument_list>(<argument><expr><name>AF_LOCAL</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>sv</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ev</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>events</name></name>   <operator>=</operator> <name>EPOLLIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ev</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <operator>&amp;</operator><name>ep_dummy</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_ADD</name></expr></argument>, <argument><expr><name><name>ep</name><operator>-&gt;</operator><name>sv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ev</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>routine</name></expr></argument>, <argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>ep</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>ep_destroy</name><parameter_list>(<parameter><decl><type><name>ep_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><literal type="string">"invalid argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>stopping</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>==</operator><call><name>send</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>sv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"1"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>close</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>sv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>close</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>sv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>close</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ep</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>routine</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>arg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>arg</name></expr></argument>, <argument><expr><literal type="string">"invalid argument"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>ep_t</name> <modifier>*</modifier></type><name>ep</name> <init>= <expr><operator>(</operator><name>ep_t</name><operator>*</operator><operator>)</operator><name>arg</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><operator>!</operator><name><name>ep</name><operator>-&gt;</operator><name>stopping</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name><name>evs</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>evs</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>evs</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>waiting</name></name><operator>==</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"internal logic error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>waiting</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>epoll_wait</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><name>evs</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>evs</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>evs</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>r</name><operator>&gt;</operator><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"indefinite epoll_wait shall not timeout:[%d]"</literal></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>waiting</name></name><operator>==</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"internal logic error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>waiting</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name><operator>&lt;</operator><name>r</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>ev</name> <init>= <expr><name>evs</name> <operator>+</operator> <name>i</name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>==</operator> <operator>&amp;</operator><name>ep_dummy</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name>c</name> <init>= <expr><literal type="char">'\0'</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">1</literal><operator>==</operator><call><name>recv</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>sv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"internal logic error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ep</name><operator>-&gt;</operator><name>wakenup</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr</name></name></expr></argument>, <argument><expr><literal type="string">"internal logic error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>fde_t</name> <modifier>*</modifier></type><name>client</name> <init>= <expr><operator>(</operator><name>fde_t</name><operator>*</operator><operator>)</operator><name><name>ev</name><operator>-&gt;</operator><name>data</name><operator>.</operator><name>ptr</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>client</name><operator>-&gt;</operator><name>on_event</name></name><argument_list>(<argument><expr><name>ep</name></expr></argument>, <argument><expr><name>ev</name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></for>
  </block_content>}</block></while>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>open_listen</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>skt</name> <init>= <expr><call><name>socket</name><argument_list>(<argument><expr><name>AF_INET</name></expr></argument>, <argument><expr><name>SOCK_STREAM</name></expr></argument>, <argument><expr><name>IPPROTO_TCP</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>skt</name><operator>==</operator><operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><literal type="string">"socket() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <do>do <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>si</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>si</name><operator>.</operator><name>sin_family</name></name> <operator>=</operator> <name>AF_INET</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>si</name><operator>.</operator><name>sin_addr</name><operator>.</operator><name>s_addr</name></name> <operator>=</operator> <call><name>inet_addr</name><argument_list>(<argument><expr><literal type="string">"0.0.0.0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>si</name><operator>.</operator><name>sin_port</name></name> <operator>=</operator> <call><name>htons</name><argument_list>(<argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>bind</name><argument_list>(<argument><expr><name>skt</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><literal type="string">"bind(%u) failed"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>listen</name><argument_list>(<argument><expr><name>skt</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><literal type="string">"listen() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>socklen_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>getsockname</name><argument_list>(<argument><expr><name>skt</name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>r</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>E</name><argument_list>(<argument><expr><literal type="string">"getsockname() failed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>len</name><operator>==</operator><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"internal logic error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>D</name><argument_list>(<argument><expr><literal type="string">"listenning at: %d"</literal></expr></argument>, <argument><expr><call><name>ntohs</name><argument_list>(<argument><expr><name><name>si</name><operator>.</operator><name>sin_port</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>skt</name></expr>;</return>
  </block_content>}</block> while <condition>(<expr><literal type="number">0</literal></expr>)</condition>;</do>
  <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>skt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>listen_event</name><parameter_list>(<parameter><decl><type><name>ep_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>fde_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name><name>ev</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLIN</name></expr></argument>, <argument><expr><literal type="string">"internal logic error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>sockaddr_in</name></name></type> <name>si</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>socklen_t</name></type> <name>silen</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>si</name></expr></argument>)</argument_list></sizeof></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>skt</name> <init>= <expr><call><name>accept</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>skt</name></name></expr></argument>, <argument><expr><operator>(</operator>struct <name>sockaddr</name><operator>*</operator><operator>)</operator><operator>&amp;</operator><name>si</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>silen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>skt</name><operator>!=</operator><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="string">"internal logic error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>fde_t</name> <modifier>*</modifier></type><name>server</name> <init>= <expr><operator>(</operator><name>fde_t</name><operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>server</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>server</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name>skt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>skt</name></name> <operator>=</operator> <name>skt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>server</name><operator>-&gt;</operator><name>on_event</name></name> <operator>=</operator> <name>null_event</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>epoll_event</name></name></type> <name>ee</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>ee</name><operator>.</operator><name>events</name></name>   <operator>=</operator> <name>EPOLLIN</name> <operator>|</operator> <name>EPOLLERR</name> <operator>|</operator> <name>EPOLLHUP</name> <operator>|</operator> <name>EPOLLRDHUP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>ee</name><operator>.</operator><name>data</name><operator>.</operator><name>ptr</name></name> <operator>=</operator> <name>server</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_ADD</name></expr></argument>, <argument><expr><name>skt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ee</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>null_event</name><parameter_list>(<parameter><decl><type><name>ep_t</name> <modifier>*</modifier></type><name>ep</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>epoll_event</name></name> <modifier>*</modifier></type><name>ev</name></decl></parameter>, <parameter><decl><type><name>fde_t</name> <modifier>*</modifier></type><name>client</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <name>EPOLLIN</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><call><name>recv</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>skt</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>n</name><operator>&gt;=</operator><literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>n</name><operator>&lt;=</operator><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"internal logic error:[%d]"</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><name>n</name><operator>==</operator><call><name>fwrite</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>n</name></expr></argument>, <argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"internal logic error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>ev</name><operator>-&gt;</operator><name>events</name></name> <operator>&amp;</operator> <operator>(</operator><name>EPOLLERR</name> <operator>|</operator> <name>EPOLLHUP</name> <operator>|</operator> <name>EPOLLRDHUP</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>epoll_ctl</name><argument_list>(<argument><expr><name><name>ep</name><operator>-&gt;</operator><name>ep</name></name></expr></argument>, <argument><expr><name>EPOLL_CTL_DEL</name></expr></argument>, <argument><expr><name><name>client</name><operator>-&gt;</operator><name>skt</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>A</name><argument_list>(<argument><expr><literal type="number">0</literal><operator>==</operator><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ep</name><operator>-&gt;</operator><name>lock</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>close</name><argument_list>(<argument><expr><name><name>client</name><operator>-&gt;</operator><name>skt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>skt</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>client</name><operator>-&gt;</operator><name>on_event</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

</unit>
