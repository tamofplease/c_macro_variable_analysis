<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/examples/c/api_with_reqid_test.c"><comment type="line">// sample code to verify all TDengine API</comment>
<comment type="line">// to compile: gcc -o apitest apitest.c -ltaos</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>
<decl_stmt><decl><type><specifier>static</specifier> <name>int64_t</name></type> <name>count</name> <init>= <expr><literal type="number">10000</literal></expr></init></decl>;</decl_stmt>

<function><type><name>int64_t</name></type> <name>genReqid</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>count</name> <operator>+=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
  <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>
<function><type><specifier>static</specifier> <name>void</name></type> <name>prepare_data</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists test;"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database test precision 'us';"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_select_db</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table meters(ts timestamp, a int) tags(area int);"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table t0 using meters tags(0);"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table t1 using meters tags(1);"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table t2 using meters tags(2);"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table t3 using meters tags(3);"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table t4 using meters tags(4);"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table t5 using meters tags(5);"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table t6 using meters tags(6);"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table t7 using meters tags(7);"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table t8 using meters tags(8);"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table t9 using meters tags(9);"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>,
                                 <argument><expr><literal type="string">"insert into t0 values('2020-01-01 00:00:00.000', 0)"</literal>
                                 <literal type="string">" ('2020-01-01 00:01:00.000', 0)"</literal>
                                 <literal type="string">" ('2020-01-01 00:02:00.000', 0)"</literal>
                                 <literal type="string">" t1 values('2020-01-01 00:00:00.000', 0)"</literal>
                                 <literal type="string">" ('2020-01-01 00:01:00.000', 0)"</literal>
                                 <literal type="string">" ('2020-01-01 00:02:00.000', 0)"</literal>
                                 <literal type="string">" ('2020-01-01 00:03:00.000', 0)"</literal>
                                 <literal type="string">" t2 values('2020-01-01 00:00:00.000', 0)"</literal>
                                 <literal type="string">" ('2020-01-01 00:01:00.000', 0)"</literal>
                                 <literal type="string">" ('2020-01-01 00:01:01.000', 0)"</literal>
                                 <literal type="string">" ('2020-01-01 00:01:02.000', 0)"</literal>
                                 <literal type="string">" t3 values('2020-01-01 00:01:02.000', 0)"</literal>
                                 <literal type="string">" t4 values('2020-01-01 00:01:02.000', 0)"</literal>
                                 <literal type="string">" t5 values('2020-01-01 00:01:02.000', 0)"</literal>
                                 <literal type="string">" t6 values('2020-01-01 00:01:02.000', 0)"</literal>
                                 <literal type="string">" t7 values('2020-01-01 00:01:02.000', 0)"</literal>
                                 <literal type="string">" t8 values('2020-01-01 00:01:02.000', 0)"</literal>
                                 <literal type="string">" t9 values('2020-01-01 00:01:02.000', 0)"</literal></expr></argument>,
                                 <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>affected</name> <init>= <expr><call><name>taos_affected_rows</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>affected</name> <operator>!=</operator> <literal type="number">18</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31m%d rows affected by last insert statement, but it should be 18\033[0m\n"</literal></expr></argument>, <argument><expr><name>affected</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// super tables subscription</comment>
  <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>print_result</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>blockFetch</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_ROW</name></type>    <name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>nRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>blockFetch</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>rows</name> <operator>=</operator> <call><name>taos_fetch_block</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <comment type="line">// for (int i = 0; i &lt; rows; i++) {</comment>
      <comment type="line">//   char temp[256];</comment>
      <comment type="line">//   taos_print_row(temp, row + i, fields, num_fields);</comment>
      <comment type="line">//   puts(temp);</comment>
      <comment type="line">// }</comment>
      <expr_stmt><expr><name>nRows</name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taos_print_row</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>nRows</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d rows consumed.\n"</literal></expr></argument>, <argument><expr><name>nRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>nRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>check_row_count</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>line</name></decl></parameter>, <parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type> <name>actual</name> <init>= <expr><call><name>print_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name>expected</name> <operator>%</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>actual</name> <operator>!=</operator> <name>expected</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31mline %d: row count mismatch, expected: %d, actual: %d\033[0m\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"line %d: %d rows consumed as expected\n"</literal></expr></argument>, <argument><expr><name>line</name></expr></argument>, <argument><expr><name>actual</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>verify_query</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>prepare_data</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_load_table_info</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"t0,t1,t2,t3,t4,t5,t6,t7,t8,t9"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31mfailed to load table info: 0x%08x\033[0m\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_validate_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"select * from nonexisttable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31mimpossible, the table does not exists\033[0m\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_validate_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"select * from meters"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31mimpossible, the table does exists: 0x%08x\033[0m\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"select * from meters"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>check_row_count</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">18</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"result precision is: %d\n"</literal></expr></argument>, <argument><expr><call><name>taos_result_precision</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>c</name> <init>= <expr><call><name>taos_field_count</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"field count is: %d\n"</literal></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name><modifier>*</modifier></type> <name>lengths</name> <init>= <expr><call><name>taos_fetch_lengths</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>c</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"length of column %d is %d\n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"select * from t0"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>check_row_count</name><argument_list>(<argument><expr><name>__LINE__</name></expr></argument>, <argument><expr><name>res</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"select * from nonexisttable"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"code=%d, error msg=%s\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"select * from meters"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_stop_query</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>retrieve_callback</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>tres</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d rows async retrieved\n"</literal></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_fetch_rows_a</name><argument_list>(<argument><expr><name>tres</name></expr></argument>, <argument><expr><name>retrieve_callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31masync retrieve failed, code: %d\033[0m\n"</literal></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"async retrieve completed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>select_callback</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>tres</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>code</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>tres</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taos_fetch_rows_a</name><argument_list>(<argument><expr><name>tres</name></expr></argument>, <argument><expr><name>retrieve_callback</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31masync select failed, code: %d\033[0m\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>verify_async</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>prepare_data</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_query_a_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"select * from meters"</literal></expr></argument>, <argument><expr><name>select_callback</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1000000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>verify_schema_less</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>result</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists test;"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database test precision 'us' update 1;"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taos_select_db</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create stable ste(ts timestamp, f int) tags(t1 bigint)"</literal></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name><name>lines</name><index>[]</index></name> <init>= <expr><block>{
      <expr><literal type="string">"st,t1=3i64,t2=4f64,t3=\"t3\" c1=3i64,c3=L\"passit\",c2=false,c4=4f64 1626006833639000000ns"</literal></expr>,
      <expr><literal type="string">"st,t1=4i64,t3=\"t4\",t2=5f64,t4=5f64 c1=3i64,c3=L\"passitagin\",c2=true,c4=5f64,c5=5f64 1626006833640000000ns"</literal></expr>,
      <expr><literal type="string">"ste,t2=5f64,t3=L\"ste\" c1=true,c2=4i64,c3=\"iam\" 1626056811823316532ns"</literal></expr>,
      <expr><literal type="string">"st,t1=4i64,t2=5f64,t3=\"t4\" c1=3i64,c3=L\"passitagain\",c2=true,c4=5f64 1626006833642000000ns"</literal></expr>,
      <expr><literal type="string">"ste,t2=5f64,t3=L\"ste2\" c3=\"iamszhou\",c4=false 1626056811843316532ns"</literal></expr>,
      <expr><literal type="string">"ste,t2=5f64,t3=L\"ste2\" c3=\"iamszhou\",c4=false,c5=32i8,c6=64i16,c7=32i32,c8=88.88f32 1626056812843316532ns"</literal></expr>,
      <expr><literal type="string">"st,t1=4i64,t3=\"t4\",t2=5f64,t4=5f64 c1=3i64,c3=L\"passitagin\",c2=true,c4=5f64,c5=5f64,c6=7u64 "</literal>
      <literal type="string">"1626006933640000000ns"</literal></expr>,
      <expr><literal type="string">"stf,t1=4i64,t3=\"t4\",t2=5f64,t4=5f64 c1=3i64,c3=L\"passitagin\",c2=true,c4=5f64,c5=5f64,c6=7u64 "</literal>
      <literal type="string">"1626006933640000000ns"</literal></expr>,
      <expr><literal type="string">"stf,t1=4i64,t3=\"t4\",t2=5f64,t4=5f64 c1=3i64,c3=L\"passitagin_stf\",c2=false,c5=5f64,c6=7u64 "</literal>
      <literal type="string">"1626006933641000000ns"</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taos_select_db</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>taos_schemaless_insert_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>lines</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></sizeof> <operator>/</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>TSDB_SML_LINE_PROTOCOL</name></expr></argument>,
                                                    <argument><expr><name>TSDB_SML_TIMESTAMP_NOT_CONFIGURED</name></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to insert schema-less data, reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>affectedRow</name> <init>= <expr><call><name>taos_affected_rows</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"successfully inserted %d rows\n"</literal></expr></argument>, <argument><expr><name>affectedRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><operator>(</operator><name>code</name><operator>)</operator></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>veriry_stmt</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists test;"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database test;"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31mfailed to create database, reason:%s\033[0m\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">100000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_select_db</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// create table</comment>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sql</name> <init>=
      <expr><literal type="string">"create table m1 (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, bin "</literal>
      <literal type="string">"binary(40), blob nchar(10))"</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31mfailed to create table, reason:%s\033[0m\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// insert 10 records</comment>
  <struct>struct <block>{
    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>ts</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type>  <name><name>b</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type>  <name><name>v1</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type> <name><name>v2</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name><name>v4</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>v8</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type>   <name><name>f4</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>  <name><name>f8</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>bin</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">40</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>blob</name><index>[<expr><literal type="number">10</literal></expr>]</index><index>[<expr><literal type="number">80</literal></expr>]</index></name></decl>;</decl_stmt>
  }</block> <decl><name>v</name></decl>;</struct>

  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>t8_len</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>t16_len</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>t32_len</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>t64_len</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>float_len</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>double_len</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>bin_len</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>blob_len</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">10</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type>      <name>stmt</name> <init>= <expr><call><name>taos_stmt_init_with_reqid</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><call><name>genReqid</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name></type> <name><name>params</name><index>[<expr><literal type="number">10</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>            <name><name>is_null</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>ts</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>ts</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>t64_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>b</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>t8_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>v1</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>t8_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>v2</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>t16_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>v4</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>t32_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>v8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>v8</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>t64_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>f4</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>f4</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>float_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>f8</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>f8</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>double_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>bin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>bin</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>bin_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>blob</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>.</operator><name>blob</name></name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>blob_len</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>sql</name> <operator>=</operator> <literal type="string">"insert into ? (ts, b, v1, v2, v4, v8, f4, f8, bin, blob) values(?,?,?,?,?,?,?,?,?,?)"</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31mfailed to execute taos_stmt_prepare. error:%s\033[0m\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31mfailed to execute taos_stmt_prepare. error:%s\033[0m\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>ts</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">8</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">40</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name> <operator>*</operator> <literal type="number">80</literal><operator>)</operator></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>bin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>v</name><operator>.</operator><name>bin</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>i</name> <operator>+</operator> <literal type="char">'0'</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>blob</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"ä¸äºä¸åäºå­ä¸å«ä¹å"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>t8_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t16_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t32_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t64_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>float_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>double_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>bin_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>bin</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>blob_len</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>blob</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taos_stmt_bind_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31mfailed to execute insert statement.error:%s\033[0m\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t8_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t16_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t32_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>t64_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>float_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>double_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>bin_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>blob_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>host</name> <init>= <expr><literal type="string">"127.0.0.1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>user</name> <init>= <expr><literal type="string">"root"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>passwd</name> <init>= <expr><literal type="string">"taosdata"</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taos_options</name><argument_list>(<argument><expr><name>TSDB_OPTION_TIMEZONE</name></expr></argument>, <argument><expr><literal type="string">"GMT-8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>passwd</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\033[31mfailed to connect to db, reason:%s\033[0m\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"************  verify schema-less  *************\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>verify_schema_less</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"************  verify query  *************\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>verify_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*********  verify async query  **********\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>verify_async</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*********  verify stmt query  **********\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>veriry_stmt</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"done\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
