<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/utils/tsim/src/simExe.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simInt.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>simLogSql</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>useSharp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>             <name><name>filename</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%s/sim.sql"</literal></expr></argument>, <argument><expr><name>simScriptDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>pFile</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>useSharp</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# %s;\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s;\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>simParseHostName</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>varName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name><name>hostName</name><index>[<expr><literal type="number">140</literal></expr>]</index></name></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><name><name>hostName</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosGetFqdn</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>hostName</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>strEndIndex</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>hostName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>hostName</name><index>[<expr><name>strEndIndex</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>hostName</name><index>[<expr><name>strEndIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>hostName</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><literal type="string">"localhost"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>hostName</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>simFindFirstNum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>beginLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>beginLen</name> <operator>&gt;</operator> <literal type="number">5</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>begin</name> <operator>+</operator> <literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>simFindSecondNum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>beginLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>number</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><literal type="string">"]["</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>number</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>number</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>simFindFirstKeyVal</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>beginLen</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>keyLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>key</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>beginLen</name> <operator>&amp;&amp;</operator> <name>i</name> <operator>-</operator> <literal type="number">5</literal> <operator>&lt;</operator> <name>keyLen</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>begin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>begin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">']'</literal> <operator>&amp;&amp;</operator> <name><name>begin</name><index>[<expr><name>i</name></expr>]</index></name> <operator>!=</operator> <literal type="char">')'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>key</name><index>[<expr><name>i</name> <operator>-</operator> <literal type="number">5</literal></expr>]</index></name> <operator>=</operator> <name><name>begin</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>simFindSecondKeyNum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>begin</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>beginLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>number</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><literal type="string">")["</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>number</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>num</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>number</name> <operator>+</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>simGetVariable</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>varName</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>varLen</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><literal type="string">"hostname"</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><call><name>simParseHostName</name><argument_list>(<argument><expr><name>varName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><literal type="string">"error"</literal></expr></argument>, <argument><expr><name>varLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>script</name><operator>-&gt;</operator><name>error</name></name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><literal type="string">"rows"</literal></expr></argument>, <argument><expr><name>varLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>script</name><operator>-&gt;</operator><name>rows</name></name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><literal type="string">"system_exit"</literal></expr></argument>, <argument><expr><name>varLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>script</name><operator>-&gt;</operator><name>system_exit_code</name></name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><literal type="string">"system_content"</literal></expr></argument>, <argument><expr><name>varLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name><name>script</name><operator>-&gt;</operator><name>system_ret_content</name></name></expr>;</return></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><literal type="string">"data"</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>varLen</name> <operator>&lt;</operator> <literal type="number">6</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><literal type="string">"null"</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type>    <name><name>keyVal</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>keyLen</name> <init>= <expr><literal type="number">1024</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>varName</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'['</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// $data[0][1]</comment>
      <expr_stmt><expr><call><name>simFindFirstNum</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><name>varLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>row</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>simFindSecondNum</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><name>varLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>row</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>row</name> <operator>&gt;=</operator> <name>MAX_QUERY_ROW_NUM</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"null"</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>col</name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name>col</name> <operator>&gt;=</operator> <name>MAX_QUERY_COL_NUM</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"null"</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, data[%d][%d]=%s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>varName</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'('</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// $data(db)[0]</comment>
      <expr_stmt><expr><call><name>simFindFirstKeyVal</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><name>varLen</name></expr></argument>, <argument><expr><name>keyVal</name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>simFindSecondKeyNum</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><name>varLen</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_QUERY_ROW_NUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>keyVal</name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, keyName:%s, keyValue:%s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>varName</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// data2_db</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><name><name>varName</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>col</name> <operator>=</operator> <name>col</name> <operator>%</operator> <name>MAX_QUERY_COL_NUM</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>keyName</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>keyLen</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>varName</name> <operator>+</operator> <literal type="number">6</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_QUERY_ROW_NUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>keyName</name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, keyName:%s, keyValue:%s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <return>return <expr><literal type="string">"null"</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>varName</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'_'</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// data21_db</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><operator>(</operator><name><name>varName</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator> <operator>*</operator> <literal type="number">10</literal> <operator>+</operator> <operator>(</operator><name><name>varName</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>col</name> <operator>=</operator> <name>col</name> <operator>%</operator> <name>MAX_QUERY_COL_NUM</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>keyName</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>keyLen</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>paGetToken</name><argument_list>(<argument><expr><name>varName</name> <operator>+</operator> <literal type="number">7</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyName</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>keyLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_QUERY_ROW_NUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>keyName</name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name>keyLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>simTrace</name><argument_list>(<argument><expr><literal type="string">"script:%s, keyName:%s, keyValue:%s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr>;</return>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <comment type="line">// $data00</comment>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>row</name> <init>= <expr><name><name>varName</name><index>[<expr><literal type="number">4</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><name><name>varName</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>-</operator> <literal type="char">'0'</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>row</name> <operator>=</operator> <name>row</name> <operator>%</operator> <name>MAX_QUERY_ROW_NUM</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>col</name> <operator>=</operator> <name>col</name> <operator>%</operator> <name>MAX_QUERY_COL_NUM</name></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, data[%d][%d]=%s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>col</name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><literal type="string">"null"</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>script</name><operator>-&gt;</operator><name>varLen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>SVariable</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>&amp;</operator><name><name>script</name><operator>-&gt;</operator><name>variables</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>var</name><operator>-&gt;</operator><name>varNameLen</name></name> <operator>!=</operator> <name>varLen</name></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>varName</name></expr></argument>, <argument><expr><name><name>var</name><operator>-&gt;</operator><name>varName</name></name></expr></argument>, <argument><expr><name>varLen</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <return>return <expr><name><name>var</name><operator>-&gt;</operator><name>varValue</name></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>script</name><operator>-&gt;</operator><name>varLen</name></name> <operator>&gt;=</operator> <name>MAX_VAR_LEN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>simError</name><argument_list>(<argument><expr><literal type="string">"script:%s, too many varialbes:%d"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>varLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SVariable</name> <modifier>*</modifier></type><name>var</name> <init>= <expr><operator>&amp;</operator><name><name>script</name><operator>-&gt;</operator><name>variables</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>varLen</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>varLen</name></name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>var</name><operator>-&gt;</operator><name>varName</name></name></expr></argument>, <argument><expr><name>varName</name></expr></argument>, <argument><expr><name>varLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>varNameLen</name></name> <operator>=</operator> <name>varLen</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>var</name><operator>-&gt;</operator><name>varValue</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <return>return <expr><name><name>var</name><operator>-&gt;</operator><name>varValue</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>simExecuteExpression</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>exp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>op1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>op2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>var1</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>var2</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>var3</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>rest</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>op1Len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>op2Len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>var1Len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>var2Len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>var3Len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>val0</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>val1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>t0</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>t1</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>t2</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>t3</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>paGetToken</name><argument_list>(<argument><expr><name>exp</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var1Len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>paGetToken</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op1</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op1Len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>paGetToken</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var2Len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>paGetToken</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op2</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>op2Len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>var1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><call><name>simGetVariable</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>var1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>var1Len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t0</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>var1</name></expr></argument>, <argument><expr><name>var1Len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t0</name><index>[<expr><name>var1Len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>var2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><call><name>simGetVariable</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>var2</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>var2Len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t1</name></expr></argument>, <argument><expr><name>var2</name></expr></argument>, <argument><expr><name>var2Len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>t1</name><index>[<expr><name>var2Len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>op2Len</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>paGetToken</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var3</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>var3Len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>var3</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'$'</literal></expr>)</condition><block type="pseudo"><block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><call><name>simGetVariable</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>var3</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>var3Len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>t2</name></expr></argument>, <argument><expr><name>var3</name></expr></argument>, <argument><expr><name>var3Len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>t2</name><index>[<expr><name>var3Len</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>t1l</name> <init>= <expr><call><name>atoll</name><argument_list>(<argument><expr><name>t1</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>t2l</name> <init>= <expr><call><name>atoll</name><argument_list>(<argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>op2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'+'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>t1l</name> <operator>+</operator> <name>t2l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>t1l</name> <operator>-</operator> <name>t2l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'*'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>t1l</name> <operator>*</operator> <name>t2l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'/'</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>t2l</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>INT64_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>t1l</name> <operator>/</operator> <name>t2l</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op2</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'.'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t3</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><name>t2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>t3</name></expr></argument>, <argument><expr><name>t1</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>t3</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>op1Len</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>op1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><call><name>simGetVariable</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>var1</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name>var1Len</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>val0</name> <operator>&gt;=</operator> <name>val1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>val0</name> <operator>&lt;=</operator> <name>val1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>op1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal> <operator>&amp;&amp;</operator> <name><name>op1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'!'</literal> <operator>&amp;&amp;</operator> <name><name>op1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>t0</name></expr></argument>, <argument><expr><name>t3</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&lt;'</literal> <operator>&amp;&amp;</operator> <name><name>op1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>val0</name> <operator>&gt;</operator> <name>val1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>op1</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'&gt;'</literal> <operator>&amp;&amp;</operator> <name><name>op1</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'='</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>val0</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>t0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>val1</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>t3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>val0</name> <operator>&lt;</operator> <name>val1</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>result</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteExpCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>simExecuteExpression</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteTestCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>result</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>simExecuteExpression</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name> <operator>=</operator> <name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name><operator>.</operator><name>jump</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteGotoCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name> <operator>=</operator> <name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name><operator>.</operator><name>jump</name></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteRunCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fileName</name> <init>= <expr><name>option</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fileName</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><literal type="string">"lineNum:%d. script file is null"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name><operator>.</operator><name>lineNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScript</name> <modifier>*</modifier></type><name>newScript</name> <init>= <expr><call><name>simParseScript</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>newScript</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><literal type="string">"lineNum:%d. parse file:%s error"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name><operator>.</operator><name>lineNum</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"script:%s, start to execute"</literal></expr></argument>, <argument><expr><name><name>newScript</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>newScript</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SIM_SCRIPT_TYPE_MAIN</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>simScriptPos</name><operator>++</operator></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>simScriptList</name><index>[<expr><name>simScriptPos</name></expr>]</index></name> <operator>=</operator> <name>newScript</name></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteRunBackCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>fileName</name> <init>= <expr><name>option</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>fileName</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><literal type="string">"lineNum:%d. script file is null"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name><operator>.</operator><name>lineNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>SScript</name> <modifier>*</modifier></type><name>newScript</name> <init>= <expr><call><name>simParseScript</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>newScript</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><literal type="string">"lineNum:%d. parse file:%s error"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name><operator>.</operator><name>lineNum</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>newScript</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>SIM_SCRIPT_TYPE_BACKGROUND</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>bgScripts</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>bgScriptLen</name></name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>newScript</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"script:%s, start to execute in background,"</literal></expr></argument>, <argument><expr><name><name>newScript</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>newScript</name><operator>-&gt;</operator><name>bgPid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>simExecuteScript</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><name>newScript</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><literal type="string">"lineNum:%d. create background thread failed"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name><operator>.</operator><name>lineNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, background thread:0x%08"</literal> <name>PRIx64</name> <literal type="string">" is created"</literal></expr></argument>, <argument><expr><name><name>newScript</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>,
             <argument><expr><call><name>taosGetPthreadId</name><argument_list>(<argument><expr><name><name>newScript</name><operator>-&gt;</operator><name>bgPid</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simReplaceStr</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type>  <name>replaced</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>begin</name> <init>= <expr><call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>begin</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>srcLen</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>dstLen</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>interval</name> <init>= <expr><operator>(</operator><name>dstLen</name> <operator>-</operator> <name>srcLen</name><operator>)</operator></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>remainLen</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>end</name> <init>= <expr><name>buf</name> <operator>+</operator> <name>remainLen</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><operator>*</operator><operator>(</operator><name>end</name> <operator>+</operator> <name>interval</name><operator>)</operator> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>end</name></expr></init></decl>;</init> <condition><expr><name>p</name> <operator>&gt;=</operator> <name>begin</name></expr>;</condition> <incr><expr><name>p</name><operator>--</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>+</operator> <name>interval</name><operator>)</operator> <operator>=</operator> <operator>*</operator><name>p</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>begin</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dstLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>replaced</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"system cmd is %s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>replaced</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteSystemCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>replaced</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WINDOWS</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cd %s; "</literal></expr></argument>, <argument><expr><name>simScriptDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>simVisuallizeOption</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>simScriptDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>simVisuallizeOption</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>simReplaceStr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">".sh"</literal></expr></argument>, <argument><expr><literal type="string">".bat"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if_stmt><if>if <condition>(<expr><name>useValgrind</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>replaced</name> <operator>=</operator> <call><name>simReplaceStr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"exec.sh"</literal></expr></argument>, <argument><expr><literal type="string">"exec.sh -v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>simLogSql</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><call><name>system</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>repeatTimes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>code</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>simError</name><argument_list>(<argument><expr><literal type="string">"script:%s, failed to execute %s , code %d, errno:%d %s, repeatTimes:%d"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>code</name></expr></argument>,
             <argument><expr><name>errno</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>repeatTimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosDflSignal</name><argument_list>(<argument><expr><name>SIGCHLD</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>repeatTimes</name><operator>++</operator> <operator>&gt;=</operator> <literal type="number">10</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>system_exit_code</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>replaced</name> <operator>&amp;&amp;</operator> <call><name>strstr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"start"</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"====&gt; startup is slow in valgrind mode, so sleep 5 seconds after exec.sh -s start"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">5000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>simStoreSystemContentResult</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>filename</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>system_ret_content</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_SYSTEM_RESULT_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl>;</decl_stmt>
  <comment type="line">// if ((fd = fopen(filename, "r")) != NULL) {</comment>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pFile</name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>TD_FILE_READ</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosReadFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>system_ret_content</name></name></expr></argument>, <argument><expr><name>MAX_SYSTEM_RESULT_LEN</name> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>system_ret_content</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>len</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>script</name><operator>-&gt;</operator><name>system_ret_content</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal> <operator>||</operator> <name><name>script</name><operator>-&gt;</operator><name>system_ret_content</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\r'</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>system_ret_content</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>rmCmd</name><index>[<expr><name>MAX_FILE_NAME_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>rmCmd</name></expr></argument>, <argument><expr><literal type="string">"rm -f %s"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>push</name></cpp:pragma>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>ignored</name> <cpp:literal>"-Wunused-result"</cpp:literal></cpp:pragma>
    <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>rmCmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:pragma>#<cpp:directive>pragma</cpp:directive> <name>GCC</name> <name>diagnostic</name> <name>pop</name></cpp:pragma>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteSystemContentCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf1</name><index>[<expr><literal type="number">4096</literal> <operator>+</operator> <literal type="number">512</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">400</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal> <name>TD_DIRSEP</name> <literal type="string">"%s.tmp"</literal></expr></argument>, <argument><expr><name>simScriptDir</name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cd %s &amp;&amp; "</literal></expr></argument>, <argument><expr><name>simScriptDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>simVisuallizeOption</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"%s &gt; %s 2&gt;nul"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"cd %s; "</literal></expr></argument>, <argument><expr><name>simScriptDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>simVisuallizeOption</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>buf</name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>, <argument><expr><literal type="string">"%s &gt; %s 2&gt;/dev/null"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>system_exit_code</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>system</name><argument_list>(<argument><expr><name>buf1</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>simStoreSystemContentResult</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecutePrintCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">65536</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>simVisuallizeOption</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rest</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"script:%s, %s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteSleepCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>delta</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>simVisuallizeOption</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>option</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>delta</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>delta</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"script:%s, sleep %dms begin"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"script:%s, sleep %dms finished"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>sleepStr</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sleepStr</name></expr></argument>, <argument><expr><literal type="string">"sleep %d"</literal></expr></argument>, <argument><expr><name>delta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>simLogSql</name><argument_list>(<argument><expr><name>sleepStr</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteReturnCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>option</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>simVisuallizeOption</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>option</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>option</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>option</name> <operator>&amp;&amp;</operator> <name><name>option</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><literal type="string">"lineNum:%d. error return %s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name><operator>.</operator><name>lineNum</name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"script:%s, return cmd execute with:%d"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name> <operator>=</operator> <name><name>script</name><operator>-&gt;</operator><name>numOfLines</name></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>simVisuallizeOption</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>var</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>token</name></decl>, <decl><type ref="prev"><modifier>*</modifier></type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dstLen</name></decl>, <decl><type ref="prev"/><name>srcLen</name></decl>, <decl><type ref="prev"/><name>tokenLen</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>dst</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr><operator>,</operator> <expr><name>dstLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>var</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><literal type="char">'$'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>var</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    if (var &amp;&amp; ((var - src - 1) &gt; 0) &amp;&amp; *(var - 1) == '\\') {
      srcLen = (int32_t)(var - src - 1);
      memcpy(dst + dstLen, src, srcLen);
      dstLen += srcLen;
      src = var;
      break;
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><name>srcLen</name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>var</name> <operator>-</operator> <name>src</name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dstLen</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>srcLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dstLen</name> <operator>+=</operator> <name>srcLen</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>src</name> <operator>=</operator> <call><name>paGetToken</name><argument_list>(<argument><expr><name>var</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>simGetVariable</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>tokenLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dstLen</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>dstLen</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>dst</name> <operator>+</operator> <name>dstLen</name></expr></argument>, <argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>simCloseNativeConnect</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, taos:%p closed"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>simCloseTaosdConnect</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>simCloseNativeConnect</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>bool</name></type> <name>simCreateNativeConnect</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>user</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pass</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>simCloseTaosdConnect</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>attempt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>attempt</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>attempt</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>abortExecution</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>killed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>taos</name> <operator>=</operator> <call><name>taos_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>pass</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, user:%s connect taosd failed:%s, attempt:%d"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>,
               <argument><expr><name>attempt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, user:%s connect taosd successed, attempt:%d"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>attempt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><literal type="string">"lineNum:%d. connect taosd failed:%s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name><operator>.</operator><name>lineNum</name></expr></argument>,
            <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <name>taos</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, connect taosd successed, taos:%p"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simCreateTaosdConnect</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>user</name> <init>= <expr><name>TSDB_DEFAULT_USER</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>   <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>tokenLen</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>paGetToken</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rest</name> <operator>=</operator> <call><name>paGetToken</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>token</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tokenLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>tokenLen</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>user</name> <operator>=</operator> <name>token</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>simCreateNativeConnect</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>user</name></expr></argument>, <argument><expr><name>TSDB_DEFAULT_PASS</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteNativeSqlCommand</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rest</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isSlow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>timeStr</name><index>[<expr><literal type="number">80</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>time_t</name></type>    <name>tt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCmdLine</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><operator>&amp;</operator><name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>ret</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>pSql</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>attempt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>attempt</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><operator>++</operator><name>attempt</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>abortExecution</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>killed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>simLogSql</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pSql</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>TSDB_CODE_MND_STB_ALREADY_EXIST</name> <operator>||</operator> <name>ret</name> <operator>==</operator> <name>TSDB_CODE_MND_DB_ALREADY_EXIST</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, taos:%p, %s success, ret:%d:%s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>ret</name> <operator>&amp;</operator> <literal type="number">0XFFFF</literal></expr></argument>,
               <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, taos:%p, %s failed, ret:%d:%s, error:%s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>ret</name> <operator>&amp;</operator> <literal type="number">0XFFFF</literal></expr></argument>,
               <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>errorJump</name></name> <operator>==</operator> <name>SQL_JUMP_TRUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>jump</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><literal type="string">"lineNum:%d. sql:%s failed, ret:%d:%s"</literal></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>lineNum</name></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>ret</name> <operator>&amp;</operator> <literal type="number">0XFFFF</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>false</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num_fields</name> <init>= <expr><call><name>taos_field_count</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>num_fields</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_ROW</name></type> <name>row</name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&lt;</operator> <name>MAX_QUERY_ROW_NUM</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name>    <modifier>*</modifier></type><name>length</name> <init>= <expr><call><name>taos_fetch_lengths</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
          <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&lt;</operator> <name>MAX_QUERY_COL_NUM</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>value</name> <operator>=</operator> <name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>numOfRows</name></expr>]</index><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>
          <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>TSDB_DATA_NULL_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <continue>continue;</continue>
          </block_content>}</block></if></if_stmt>

          <switch>switch <condition>(<expr><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
              <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"1"</literal></expr> </then><else>: <expr><literal type="string">"0"</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
              <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
              <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
              <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int16_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
              <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
              <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
              <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
              <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
              <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
              <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%.5f"</literal></expr></argument>, <argument><expr><call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
              <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%.9lf"</literal></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
            <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
              <if_stmt><if>if <condition>(<expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>length</name><index>[<expr><name>i</name></expr>]</index></name> <operator>&gt;</operator> <literal type="number">1</literal> <operator>&lt;&lt;</operator> <literal type="number">20</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Invalid length(%d) of BINARY or NCHAR\n"</literal></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if></if_stmt>

              <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_QUERY_VALUE_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><name><name>value</name><index>[<expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
              <comment type="line">// snprintf(value, fields[i].bytes, "%s", (char *)row[i]);</comment>
              <break>break;</break>
            <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case> <block>{<block_content>
              <decl_stmt><decl><type><name>int32_t</name></type> <name>precision</name> <init>= <expr><call><name>taos_result_precision</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
              <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
              </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><operator>*</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>/</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>

              <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>strftime</name><argument_list>(<argument><expr><name>timeStr</name></expr></argument>, <argument><expr><literal type="number">64</literal></expr></argument>, <argument><expr><literal type="string">"%y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>tp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MILLI</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%s.%03d"</literal></expr></argument>, <argument><expr><name>timeStr</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <literal type="number">1000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%s.%06d"</literal></expr></argument>, <argument><expr><name>timeStr</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <literal type="number">1000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><literal type="string">"%s.%09d"</literal></expr></argument>, <argument><expr><name>timeStr</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator> <operator>%</operator> <literal type="number">1000000000</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block></else></if_stmt>

              <break>break;</break>
            </block_content>}</block>
            <default>default:</default>
              <break>break;</break>
          </block_content>}</block></switch>  <comment type="line">// end of switch</comment>
        </block_content>}</block></for>    <comment type="line">// end of for</comment>
      </block_content>}</block></if></if_stmt>      <comment type="line">// end of if</comment>
      <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>isSlow</name> <operator>&amp;&amp;</operator> <name>numOfRows</name> <operator>%</operator> <literal type="number">100</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>numOfRows</name> <operator>&gt;</operator> <literal type="number">2000000000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>simError</name><argument_list>(<argument><expr><literal type="string">"script:%s, too many rows return from query"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>numOfRows</name> <operator>=</operator> <call><name>taos_affected_rows</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><name>numOfRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteSqlImpCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rest</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>isSlow</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>buf</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCmdLine</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><operator>&amp;</operator><name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>simVisuallizeOption</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rest</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, exec:%s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>MAX_QUERY_ROW_NUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>MAX_QUERY_COL_NUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><literal type="string">"connect"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>simCreateTaosdConnect</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>simCreateTaosdConnect</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><literal type="string">"connect root"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>line</name><operator>-&gt;</operator><name>errorJump</name></name> <operator>==</operator> <name>SQL_JUMP_TRUE</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name> <operator>=</operator> <name><name>line</name><operator>-&gt;</operator><name>jump</name></name></expr>;</expr_stmt>
        <return>return <expr><name>true</name></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>rest</name></expr></argument>, <argument><expr><literal type="string">"close"</literal></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>simCloseTaosdConnect</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><call><name>simExecuteNativeSqlCommand</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>isSlow</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteSqlCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>isSlow</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>simExecuteSqlImpCmd</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>isSlow</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simExecuteSqlSlowCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>bool</name></type> <name>isSlow</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>simExecuteSqlImpCmd</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>isSlow</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
bool simExecuteRestfulCmd(SScript *script, char *rest) {
  TdFilePtr pFile = NULL;
  char      filename[256];
  sprintf(filename, "%s/tmp.sql", simScriptDir);
  <comment type="line">// fp = fopen(filename, "w");</comment>
  pFile = taosOpenFile(filename, TD_FILE_CREATE | TD_FILE_WRITE | TD_FILE_TRUNC | TD_FILE_STREAM);
  if (pFile == NULL) {
    fprintf(stderr, "ERROR: failed to open file: %s\n", filename);
    return false;
  }

  char    db[64] = {0};
  char    tb[64] = {0};
  char    gzip[32] = {0};
  int32_t ts;
  int32_t times;
  sscanf(rest, "%s %s %d %d %s", db, tb, &amp;ts, &amp;times, gzip);

  taosFprintfFile(pFile, "insert into %s.%s values ", db, tb);
  for (int32_t i = 0; i &lt; times; ++i) {
    taosFprintfFile(pFile, "(%d000, %d)", ts + i, ts);
  }
  taosFprintfFile(pFile, "  \n");
  taosFsyncFile(pFile);
  taosCloseFile(&amp;pFile);

  char cmd[1024] = {0};
  if (strcmp(gzip, "gzip") == 0) {
    sprintf(cmd,
            "curl -H 'Authorization: Taosd /KfeAzX/f9na8qdtNZmtONryp201ma04bEl8LcvLUd7a8qdtNZmtONryp201ma04' --header "
            "--compressed --data-ascii @%s 127.0.0.1:7111/rest/sql",
            filename);
  } else {
    sprintf(cmd,
            "curl -H 'Authorization: Taosd /KfeAzX/f9na8qdtNZmtONryp201ma04bEl8LcvLUd7a8qdtNZmtONryp201ma04' --header "
            "'Transfer-Encoding: chunked' --data-ascii @%s 127.0.0.1:7111/rest/sql",
            filename);
  }

  return simExecuteSystemCmd(script, cmd);
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>bool</name></type> <name>simExecuteSqlErrorCmd</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>rest</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>buf</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SCmdLine</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><operator>&amp;</operator><name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>simVisuallizeOption</name><argument_list>(<argument><expr><name>script</name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rest</name> <operator>=</operator> <name>buf</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, exec:%s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>rows</name></name></expr></argument>, <argument><expr><literal type="string">"-1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>row</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>row</name> <operator>&lt;</operator> <name>MAX_QUERY_ROW_NUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>row</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>col</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>MAX_QUERY_COL_NUM</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>data</name><index>[<expr><name>row</name></expr>]</index><index>[<expr><name>col</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>pSql</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>ret</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, taos:%p, %s execute, expect failed, so success, ret:%d:%s"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>,
             <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>ret</name> <operator>&amp;</operator> <literal type="number">0XFFFF</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>true</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>error</name></name></expr></argument>, <argument><expr><literal type="string">"lineNum:%d. sql:%s expect failed, but success, ret:%d:%s"</literal></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>lineNum</name></name></expr></argument>, <argument><expr><name>rest</name></expr></argument>, <argument><expr><name>ret</name> <operator>&amp;</operator> <literal type="number">0XFFFF</literal></expr></argument>,
          <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>false</name></expr>;</return>
</block_content>}</block></function>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
bool simExecuteLineInsertCmd(SScript *script, char *rest) {
  char buf[TSDB_MAX_BINARY_LEN] = {0};

  simVisuallizeOption(script, rest, buf);
  rest = buf;

  SCmdLine *line = &amp;script-&gt;lines[script-&gt;linePos];

  simInfo("script:%s, %s", script-&gt;fileName, rest);
  simLogSql(buf, true);
  char *lines[] = {rest};
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  int32_t ret = taos_insert_lines(script-&gt;taos, lines, 1);
    if (ret == TSDB_CODE_SUCCESS) {
    simDebug("script:%s, taos:%p, %s executed. success.", script-&gt;fileName, script-&gt;taos, rest);
    script-&gt;linePos++;
    return true;
  } else {
    sprintf(script-&gt;error, "lineNum: %d. line: %s failed, ret:%d:%s", line-&gt;lineNum, rest, ret &amp; 0XFFFF,
            tstrerror(ret));
    return false;
  }
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  simDebug("script:%s, taos:%p, %s executed. success.", script-&gt;fileName, script-&gt;taos, rest);
  script-&gt;linePos++;
  return true;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

bool simExecuteLineInsertErrorCmd(SScript *script, char *rest) {
  char buf[TSDB_MAX_BINARY_LEN];

  simVisuallizeOption(script, rest, buf);
  rest = buf;

  SCmdLine *line = &amp;script-&gt;lines[script-&gt;linePos];

  simInfo("script:%s, %s", script-&gt;fileName, rest);
  simLogSql(buf, true);
  char *lines[] = {rest};
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  int32_t ret = taos_insert_lines(script-&gt;taos, lines, 1);
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  int32_t ret = 0;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  if (ret == TSDB_CODE_SUCCESS) {
    sprintf(script-&gt;error, "script:%s, taos:%p, %s executed. expect failed, but success.", script-&gt;fileName,
            script-&gt;taos, rest);
    script-&gt;linePos++;
    return false;
  } else {
    simDebug("lineNum: %d. line: %s failed, ret:%d:%s. Expect failed, so success", line-&gt;lineNum, rest, ret &amp; 0XFFFF,
             tstrerror(ret));
    return true;
  }
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
