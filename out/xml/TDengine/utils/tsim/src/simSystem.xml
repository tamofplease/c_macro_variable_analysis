<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/utils/tsim/src/simSystem.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"simInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tconfig.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>SScript</name> <modifier>*</modifier></type><name><name>simScriptList</name><index>[<expr><name>MAX_MAIN_SCRIPT_NUM</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>SCommand</name></type> <name><name>simCmdList</name><index>[<expr><name>SIM_CMD_END</name></expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type>  <name>simScriptPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type>  <name>simScriptSucced</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type>  <name>simDebugFlag</name> <init>= <expr><literal type="number">143</literal></expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type>     <name>simCloseTaosdConnect</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>char</name></type>     <name><name>simScriptDir</name><index>[<expr><name>PATH_MAX</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><specifier>extern</specifier> <name>bool</name></type> <name>simExecSuccess</name></decl>;</decl_stmt>

<function><type><name>int32_t</name></type> <name>simInitCfg</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosCreateLog</name><argument_list>(<argument><expr><literal type="string">"simlog"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosInitCfg</name><argument_list>(<argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SConfig</name> <modifier>*</modifier></type><name>pCfg</name> <init>= <expr><call><name>taosGetCfg</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>simDebugFlag</name> <operator>=</operator> <call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"simDebugFlag"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>i32</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>simScriptDir</name></expr></argument>, <argument><expr><call><name>cfgGetItem</name><argument_list>(<argument><expr><name>pCfg</name></expr></argument>, <argument><expr><literal type="string">"scriptDir"</literal></expr></argument>)</argument_list></call><operator>-&gt;</operator><name>str</name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>simSystemInit</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>simInitCfg</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>simInitsimCmdList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>simScriptList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SScript</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_MAIN_SCRIPT_NUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>true</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>simSystemCleanUp</name><parameter_list>()</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>void</name></type> <name>simFreeScript</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>script</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SIM_SCRIPT_TYPE_MAIN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"script:%s, background script num:%d, stop them"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>bgScriptLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>script</name><operator>-&gt;</operator><name>bgScriptLen</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>SScript</name> <modifier>*</modifier></type><name>bgScript</name> <init>= <expr><name><name>script</name><operator>-&gt;</operator><name>bgScripts</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, is background script, set stop flag"</literal></expr></argument>, <argument><expr><name><name>bgScript</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>bgScript</name><operator>-&gt;</operator><name>killed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><call><name>taosCheckPthreadValid</name><argument_list>(<argument><expr><name><name>bgScript</name><operator>-&gt;</operator><name>bgPid</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>bgScript</name><operator>-&gt;</operator><name>bgPid</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>bgScript</name><operator>-&gt;</operator><name>bgPid</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, background thread joined"</literal></expr></argument>, <argument><expr><name><name>bgScript</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name><name>bgScript</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>bgScript</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>bgScript</name><operator>-&gt;</operator><name>optionBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>bgScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, is cleaned"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>lines</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name><name>script</name><operator>-&gt;</operator><name>optionBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>SScript</name> <modifier>*</modifier></type><name>simProcessCallOver</name><parameter_list>(<parameter><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>script</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SIM_SCRIPT_TYPE_MAIN</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, is main script, set stop flag"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>script</name><operator>-&gt;</operator><name>killed</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>simExecSuccess</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"script:"</literal> <name>FAILED_PREFIX</name> <literal type="string">"%s"</literal> <name>FAILED_POSTFIX</name> <literal type="string">", "</literal> <name>FAILED_PREFIX</name> <literal type="string">"failed"</literal> <name>FAILED_POSTFIX</name> <literal type="string">", error:%s"</literal></expr></argument>,
              <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>error</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>simExecSuccess</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"script:"</literal> <name>SUCCESS_PREFIX</name> <literal type="string">"%s"</literal> <name>SUCCESS_POSTFIX</name> <literal type="string">", "</literal> <name>SUCCESS_PREFIX</name> <literal type="string">"success"</literal> <name>SUCCESS_POSTFIX</name></expr></argument>,
              <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>simCloseTaosdConnect</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>simScriptSucced</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>simScriptPos</name><operator>--</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>simFreeScript</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>simScriptPos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal> <operator>&amp;&amp;</operator> <name>simExecSuccess</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"----------------------------------------------------------------------"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"Simulation Test Done, "</literal> <name>SUCCESS_PREFIX</name> <literal type="string">"%d"</literal> <name>SUCCESS_POSTFIX</name> <literal type="string">" Passed:\n"</literal></expr></argument>, <argument><expr><name>simScriptSucced</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>simScriptPos</name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>simExecSuccess</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><name><name>simScriptList</name><index>[<expr><name>simScriptPos</name></expr>]</index></name></expr>;</return>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s,  is stopped"</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>simFreeScript</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>simExecuteScript</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>inputScript</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SScript</name> <modifier>*</modifier></type><name>script</name> <init>= <expr><operator>(</operator><name>SScript</name> <operator>*</operator><operator>)</operator><name>inputScript</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>script</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>SIM_SCRIPT_TYPE_MAIN</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>script</name> <operator>=</operator> <name><name>simScriptList</name><index>[<expr><name>simScriptPos</name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>abortExecution</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>killed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>script</name><operator>-&gt;</operator><name>killed</name></name> <operator>||</operator> <name><name>script</name><operator>-&gt;</operator><name>linePos</name></name> <operator>&gt;=</operator> <name><name>script</name><operator>-&gt;</operator><name>numOfLines</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>script</name> <operator>=</operator> <call><name>simProcessCallOver</name><argument_list>(<argument><expr><name>script</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>script</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"sim test abort now!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>SCmdLine</name> <modifier>*</modifier></type><name>line</name> <init>= <expr><operator>&amp;</operator><name><name>script</name><operator>-&gt;</operator><name>lines</name><index>[<expr><name><name>script</name><operator>-&gt;</operator><name>linePos</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>option</name> <init>= <expr><name><name>script</name><operator>-&gt;</operator><name>optionBuffer</name></name> <operator>+</operator> <name><name>line</name><operator>-&gt;</operator><name>optionOffset</name></name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>simDebug</name><argument_list>(<argument><expr><literal type="string">"script:%s, line:%d with option \"%s\""</literal></expr></argument>, <argument><expr><name><name>script</name><operator>-&gt;</operator><name>fileName</name></name></expr></argument>, <argument><expr><name><name>line</name><operator>-&gt;</operator><name>lineNum</name></name></expr></argument>, <argument><expr><name>option</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>SCommand</name> <modifier>*</modifier></type><name>cmd</name> <init>= <expr><operator>&amp;</operator><name><name>simCmdList</name><index>[<expr><name><name>line</name><operator>-&gt;</operator><name>cmdno</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int32_t</name></type>   <name>ret</name> <init>= <expr><operator>(</operator><operator>*</operator><operator>(</operator><name><name>cmd</name><operator>-&gt;</operator><name>executeCmd</name></name><operator>)</operator><operator>)</operator><operator>(</operator><name>script</name>, <name>option</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>script</name><operator>-&gt;</operator><name>killed</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>simInfo</name><argument_list>(<argument><expr><literal type="string">"thread is stopped"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>
</unit>
