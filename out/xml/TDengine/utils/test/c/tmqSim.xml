<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/utils/test/c/tmqSim.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;math.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taosdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREEN</name></cpp:macro>     <cpp:value>"\033[1;32m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NC</name></cpp:macro>        <cpp:value>"\033[0m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &lt; (b)) ? (a) : (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SQL_STR_LEN</name></cpp:macro>         <cpp:value>(1024 * 1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ROW_STR_LEN</name></cpp:macro>         <cpp:value>(16 * 1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_CONSUMER_THREAD_CNT</name></cpp:macro> <cpp:value>(16)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_VGROUP_CNT</name></cpp:macro>          <cpp:value>(32)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SEND_TIME_UNIT</name></cpp:macro>          <cpp:value>10</cpp:value></cpp:define>  <comment type="line">// ms</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SQL_LEN</name></cpp:macro>             <cpp:value>1048576</cpp:value></cpp:define>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>NOTIFY_CMD_START_CONSUM</name></decl>,
  <decl><name>NOTIFY_CMD_START_COMMIT</name></decl>,
  <decl><name>NOTIFY_CMD_ID_BUTT</name></decl>,
}</block></enum></type> <name>NOTIFY_CMD_ID</name>;</typedef>

<typedef>typedef <type><enum>enum <name>enumQUERY_TYPE</name> <block>{ <decl><name>NO_INSERT_TYPE</name></decl>, <decl><name>INSERT_TYPE</name></decl>, <decl><name>QUERY_TYPE_BUT</name></decl> }</block></enum></type> <name>QUERY_TYPE</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>TdThread</name></type> <name>thread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>consumerId</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>ifManualCommit</name></decl>;</decl_stmt>
  <comment type="line">// int32_t  autoCommitIntervalMs;  // 1000 ms</comment>
  <comment type="line">// char     autoCommit[8];         // true, false</comment>
  <comment type="line">// char     autoOffsetRest[16];    // none, earliest, latest</comment>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pConsumeRowsFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pConsumeMetaFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>ifCheckData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>expectMsgCnt</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>consumeMsgCnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>consumeRowCnt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>consumeLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>checkresult</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>topicString</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>keyString</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTopic</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>topics</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>key</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>value</name><index>[<expr><literal type="number">32</literal></expr>]</index><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type>      <name>tmq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>topicList</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfVgroups</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name><name>rowsOfPerVgroups</name><index>[<expr><name>MAX_VGROUP_CNT</name></expr>]</index><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>  <comment type="line">// [i][0]: vgroup id, [i][1]: rows of consume</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl>;</decl_stmt>

  <comment type="line">// below parameters is used by omb test</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>producerRate</name></decl>;</decl_stmt>  <comment type="line">// unit: msgs/s</comment>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalProduceMsgs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalMsgsLen</name></decl>;</decl_stmt>

}</block></struct></type> <name>SThreadInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <comment type="line">// input from argvs</comment>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>cdbName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>dbName</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>showMsgFlag</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>showRowFlag</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>saveRowFlag</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>consumeDelay</name></decl>;</decl_stmt>  <comment type="line">// unit s</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfThread</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>useSnapshot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>     <name>nowTime</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>SThreadInfo</name></type> <name><name>stThreads</name><index>[<expr><name>MAX_CONSUMER_THREAD_CNT</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>SThreadInfo</name></type> <name><name>stProdThreads</name><index>[<expr><name>MAX_CONSUMER_THREAD_CNT</name></expr>]</index></name></decl>;</decl_stmt>

  <comment type="line">// below parameters is used by omb test</comment>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>topic</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>producers</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>producerRate</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>runDurationMinutes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>batchSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>payloadLen</name></decl>;</decl_stmt>
}</block></struct></type> <name>SConfInfo</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>SConfInfo</name></type> <name>g_stConfInfo</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TdFilePtr</name></type>        <name>g_fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>       <name>running</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>            <name>g_payload</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="line">// char* g_pRowValue = NULL;</comment>
<comment type="line">// TdFilePtr g_fp = NULL;</comment>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printHelp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>indent</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><literal type="string">"        "</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Used to test the tmq feature with sim cases\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"Configuration directory, default is "</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"The name of the database for cosumer, no default "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-g"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"showMsgFlag, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showMsgFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"showRowFlag, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showRowFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"saveRowFlag, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>saveRowFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-y"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%ds\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"consume delay, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>consumeDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-e"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"snapshot, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>useSnapshot</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"topic name, default is null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-x"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"consume thread number, default is 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"run duration unit is minutes, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>runDurationMinutes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"producer thread number, default is 0"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"batch size, default is 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"produce rate unit is msgs /s, default is 100000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"payload len unit is byte, default is 1000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>char</name><modifier>*</modifier></type> <name>getCurrentTimeString</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>timeString</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>time_t</name></type>    <name>tTime</name> <init>= <expr><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>timeString</name></expr></argument>, <argument><expr><literal type="string">"%d-%02d-%02d %02d:%02d:%02d"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>,
          <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>timeString</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmqStop</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>signum</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>info</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>ctx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>running</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tmpString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"%s tmqStop() receive stop signal[%d]\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>signum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>tmqSetSignalHandle</name><parameter_list>()</parameter_list> <block>{<block_content> <expr_stmt><expr><call><name>taosSetSignal</name><argument_list>(<argument><expr><name>SIGINT</name></expr></argument>, <argument><expr><name>tmqStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> </block_content>}</block></function>

<function><type><name>void</name></type> <name>initLogFile</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>tmpString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>pid_t</name></type> <name>process_id</name> <init>= <expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>topic</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"/tmp/tmqlog-%d-%s.txt"</literal></expr></argument>, <argument><expr><name>process_id</name></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%s/../log/tmqlog-%d-%s.txt"</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>process_id</name></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>filename</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">':'</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>filename</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="char">'-'</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>filename</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>
  </block_content>}</block></for>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>TD_FILE_TEXT</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s for save result\n"</literal></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>g_fp</name> <operator>=</operator> <name>pFile</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>saveConfigToLogFile</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"###################################################################\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"# configDir:           %s\n"</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"# dbName:              %s\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"# cdbName:             %s\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>cdbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"# showMsgFlag:         %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showMsgFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"# showRowFlag:         %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showRowFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"# saveRowFlag:         %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>saveRowFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"# consumeDelay:        %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>consumeDelay</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"# numOfThread:         %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"# consumer %d info:\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>consumerId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// taosFprintfFile(g_fp, "  auto commit:              %s\n", g_stConfInfo.stThreads[i].autoCommit);</comment>
    <comment type="line">// taosFprintfFile(g_fp, "  auto commit interval ms:  %d\n", g_stConfInfo.stThreads[i].autoCommitIntervalMs);</comment>
    <comment type="line">// taosFprintfFile(g_fp, "  auto offset rest:         %s\n", g_stConfInfo.stThreads[i].autoOffsetRest);</comment>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"  Topics: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOfTopic</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"%s, "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>topics</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"  Key: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>k</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOfKey</name></expr>;</condition> <incr><expr><name>k</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"%s:%s, "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>key</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><index>[<expr><name>k</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"  expect rows: %"</literal> <name>PRIx64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>expectMsgCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>char</name></type> <name><name>tmpString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"# Test time:                %s\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"###################################################################\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parseArgument</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_stConfInfo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SConfInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showMsgFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showRowFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>saveRowFlag</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>consumeDelay</name></name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>batchSize</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>producers</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>nowTime</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-w"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>cdbName</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>cdbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>configDir</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-g"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showMsgFlag</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-r"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showRowFlag</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>saveRowFlag</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-y"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>consumeDelay</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-e"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>useSnapshot</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>tmpBuf</name><index>[<expr><literal type="number">56</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>tmpBuf</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>tmpBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>topic</name></name></expr></argument>, <argument><expr><literal type="string">"`%s`"</literal></expr></argument>, <argument><expr><name>tmpBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-x"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>runDurationMinutes</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-p"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>producers</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>batchSize</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-i"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>producerRate</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>payloadLen</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>g_stConfInfo</name><operator>.</operator><name>payloadLen</name></name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>payloadLen</name></name> <operator>&gt;</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"%s calloc size is too large: %s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"%s unknow para: %s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>g_payload</name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>payloadLen</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_payload</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s failed to malloc for payload %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>payloadLen</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_payload</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>initLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"====parseArgument() success\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s configDir:%s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s dbName:%s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s cdbName:%s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>cdbName</name></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s consumeDelay:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>consumeDelay</name></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s showMsgFlag:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showMsgFlag</name></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s showRowFlag:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showRowFlag</name></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s saveRowFlag:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>saveRowFlag</name></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s snapshot:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>useSnapshot</name></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s omb topic:%s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>topic</name></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s numOfThread:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>splitStr</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier><modifier>*</modifier></type> <name>arr</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>del</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><call><name>strtok</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>del</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>s</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>arr</name><operator>++</operator> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>del</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>ltrim</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>str</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>*</operator><name>str</name> <operator>==</operator> <literal type="char">'\0'</literal></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int</name></type>   <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>str</name></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>*</operator><name>p</name> <operator>!=</operator> <literal type="char">'\0'</literal> <operator>&amp;&amp;</operator> <call><name>isspace</name><argument_list>(<argument><expr><operator>*</operator><name>p</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>++</operator><name>p</name></expr>;</expr_stmt>
    <expr_stmt><expr><operator>++</operator><name>len</name></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>len</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// return str;</comment>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>queryDB</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int</name></type>       <name>retryCnt</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>retryCnt</name><operator>--</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosSsleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pRes</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"failed to reason:%s, sql: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>addRowsToVgroupId</name><parameter_list>(<parameter><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>vgroupId</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>vgroupId</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>rowsOfPerVgroups</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rowsOfPerVgroups</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rowsOfPerVgroups</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <name>vgroupId</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rowsOfPerVgroups</name><index>[<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>+=</operator> <name>rows</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfVgroups</name></name><operator>++</operator></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"consume id %d, add one new vogroup id: %d\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>vgroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfVgroups</name></name> <operator>&gt;</operator> <name>MAX_VGROUP_CNT</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"====consume id %d, vgroup num %d over than 32. new vgroupId: %d\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>,
                    <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr></argument>, <argument><expr><name>vgroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>TAOS</name><modifier>*</modifier></type> <name>createNewTaosConnect</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type>   <name>taos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>retryCnt</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>

  <while>while <condition>(<expr><name>retryCnt</name><operator>--</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>!=</operator> <name>taos</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>taos</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosSsleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"taos_connect() fail\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>saveConsumeContentToTbl</name><parameter_list>(<parameter><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sqlStr</name><index>[<expr><literal type="number">1100</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"The length of one row[%d] is overflow 1024\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"taos_connect() fail, can not save consume result to main script\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name></expr></argument>, <argument><expr><literal type="string">"insert into %s.content_%d values (%"</literal> <name>PRId64</name> <literal type="string">", \'%s\')"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>cdbName</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>,
          <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>ts</name></name><operator>++</operator></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>retCode</name> <init>= <expr><call><name>queryDB</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>retCode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"error in save consume content\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>char</name><modifier>*</modifier></type> <name>shellFormatTimestamp</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>buf</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// if (shell.args.is_raw_time) {</comment>
  <comment type="line">//   sprintf(buf, "%" PRId64, val);</comment>
  <comment type="line">//   return buf;</comment>
  <comment type="line">// }</comment>

  <decl_stmt><decl><type><name>time_t</name></type>  <name>tt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ms</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000000000</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ms</name> <operator>=</operator> <name>val</name> <operator>%</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000000</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ms</name> <operator>=</operator> <name>val</name> <operator>%</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>tt</name> <operator>=</operator> <operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><name>val</name> <operator>/</operator> <literal type="number">1000</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>ms</name> <operator>=</operator> <name>val</name> <operator>%</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tt</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ms</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>tt</name><operator>--</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ms</name> <operator>+=</operator> <literal type="number">1000000000</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>ms</name> <operator>+=</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>ms</name> <operator>+=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>ptm</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>size_t</name></type> <name>pos</name> <init>= <expr><call><name>strftime</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">35</literal></expr></argument>, <argument><expr><literal type="string">"%Y-%m-%d %H:%M:%S"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>ptm</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_NANO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">".%09d"</literal></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>precision</name> <operator>==</operator> <name>TSDB_TIME_PRECISION_MICRO</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">".%06d"</literal></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>pos</name></expr></argument>, <argument><expr><literal type="string">".%03d"</literal></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><name>buf</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>shellDumpFieldToFile</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>val</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>field</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>length</name></decl></parameter>,
                                 <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>val</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>quotationStr</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>quotationStr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\"'</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>quotationStr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type>  <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr>]</index></name></decl>;</decl_stmt>
  <switch>switch <condition>(<expr><name><name>field</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><operator>(</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>*</operator><operator>(</operator><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name>val</name><operator>)</operator><operator>)</operator><operator>)</operator> <operator>==</operator> <literal type="number">1</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>val</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%.5f"</literal></expr></argument>, <argument><expr><call><name>GET_FLOAT_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name>n</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>TSDB_MAX_BYTES_PER_ROW</name></expr></argument>, <argument><expr><literal type="string">"%*.9f"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>n</name> <operator>&gt;</operator> <call><name>TMAX</name><argument_list>(<argument><expr><literal type="number">25</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%*.15e"</literal></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><call><name>GET_DOUBLE_VAL</name><argument_list>(<argument><expr><name>val</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_JSON</name></expr>:</case> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>bufIndex</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>length</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufIndex</name></expr>]</index></name> <operator>=</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>bufIndex</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>val</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <literal type="char">'\"'</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufIndex</name></expr>]</index></name> <operator>=</operator> <name><name>val</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
          <expr_stmt><expr><name>bufIndex</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><name>bufIndex</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>quotationStr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>quotationStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block> <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><call><name>shellFormatTimestamp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>val</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><name>quotationStr</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>quotationStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>dumpToFileForCheck</name><parameter_list>(<parameter><decl><type><name>TdFilePtr</name></type> <name>pFile</name></decl></parameter>, <parameter><decl><type><name>TAOS_ROW</name></type> <name>row</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>fields</name></decl></parameter>, <parameter><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>length</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num_fields</name></decl></parameter>,
                               <parameter><decl><type><name>int32_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>shellDumpFieldToFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name><operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>fields</name> <operator>+</operator> <name>i</name></expr></argument>, <argument><expr><name><name>length</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>data_msg_process</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// printf("topic: %s\n", tmq_get_topic_name(msg));</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>vgroupId</name> <init>= <expr><call><name>tmq_get_vgroup_id</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbName</name> <init>= <expr><call><name>tmq_get_db_name</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"consumerId: %d, msg index:%d\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>msgIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"dbName: %s, topic: %s, vgroupId: %d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>dbName</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>dbName</name></expr> </then><else>: <expr><literal type="string">"invalid table"</literal></expr></else></ternary></expr></argument>,
                  <argument><expr><call><name>tmq_get_topic_name</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vgroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_ROW</name></type> <name>row</name> <init>= <expr><call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfFields</name> <init>= <expr><call><name>taos_field_count</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>    <name>length</name> <init>= <expr><call><name>taos_fetch_lengths</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>precision</name> <init>= <expr><call><name>taos_result_precision</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>tbName</name> <init>= <expr><call><name>tmq_get_table_name</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
	<comment type="line">// get schema</comment>
	<comment type="line">//============================== stub =================================================//</comment>
	for (int32_t i = 0; i &lt; numOfFields; i++) {
	  taosFprintfFile(g_fp, "%02d: name: %s, type: %d, len: %d\n", i, fields[i].name, fields[i].type, fields[i].bytes);
	}
	<comment type="line">//============================== stub =================================================//</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>dumpToFileForCheck</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pConsumeRowsFile</name></name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>numOfFields</name></expr></argument>, <argument><expr><name>precision</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taos_print_row</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>numOfFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>showRowFlag</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"tbname:%s, rows[%d]: %s\n"</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name>tbName</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>tbName</name></expr> </then><else>: <expr><literal type="string">"null table"</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// if (0 != g_stConfInfo.saveRowFlag) {</comment>
      <comment type="line">//   saveConsumeContentToTbl(pInfo, buf);</comment>
      <comment type="line">// }</comment>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>totalRows</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>addRowsToVgroupId</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>vgroupId</name></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>totalRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>meta_msg_process</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgIndex</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// printf("topic: %s\n", tmq_get_topic_name(msg));</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>     <name>vgroupId</name> <init>= <expr><call><name>tmq_get_vgroup_id</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>dbName</name> <init>= <expr><call><name>tmq_get_db_name</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"consumerId: %d, msg index:%d\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>msgIndex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"dbName: %s, topic: %s, vgroupId: %d\n"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>dbName</name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>dbName</name></expr> </then><else>: <expr><literal type="string">"invalid table"</literal></expr></else></ternary></expr></argument>,
                  <argument><expr><call><name>tmq_get_topic_name</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>vgroupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{<block_content>
    <decl_stmt><decl><type><name>tmq_raw_data</name></type> <name>raw</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><call><name>tmq_get_raw</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>==</operator> <name>TSDB_CODE_SUCCESS</name></expr>)</condition> <block>{<block_content>
      <comment type="line">//	  int retCode = queryDB(pInfo-&gt;taos, "use metadb");</comment>
      <comment type="line">//	  if (retCode != 0) {</comment>
      <comment type="line">//		taosFprintfFile(g_fp, "error when use metadb\n");</comment>
      <comment type="line">//		taosCloseFile(&amp;g_fp);</comment>
      <comment type="line">//		exit(-1);</comment>
      <comment type="line">//	  }</comment>
      <comment type="line">//	  taosFprintfFile(g_fp, "raw:%p\n", &amp;raw);</comment>
      <comment type="line">//</comment>
      <comment type="line">//      tmq_write_raw(pInfo-&gt;taos, raw);</comment>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>tmq_get_json_meta</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <comment type="line">// printf("meta result: %s\n", result);</comment>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pConsumeMetaFile</name></name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tmq_free_json_meta</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <expr_stmt><expr><name>totalRows</name><operator>++</operator></expr>;</expr_stmt>

  <return>return <expr><name>totalRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>appNothing</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>, <parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>numOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>int32_t</name></type> <name>notifyMainScript</name><parameter_list>(<parameter><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>cmdId</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sqlStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <comment type="line">// schema: ts timestamp, consumerid int, consummsgcnt bigint, checkresult int</comment>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name></expr></argument>, <argument><expr><literal type="string">"insert into %s.notifyinfo values (%"</literal> <name>PRId64</name> <literal type="string">", %d, %d)"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>cdbName</name></name></expr></argument>,
          <argument><expr><call><name>atomic_fetch_add_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_stConfInfo</name><operator>.</operator><name>nowTime</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmdId</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taos_query_a</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>, <argument><expr><name>appNothing</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"notifyMainScript success, sql: %s\n"</literal></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>g_once_commit_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <name>void</name></type>    <name>tmq_commit_cb_print</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
     <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"tmq_commit_cb_print() commit %d\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

     <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>g_once_commit_flag</name></expr>)</condition> <block>{<block_content>
       <expr_stmt><expr><name>g_once_commit_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
       <expr_stmt><expr><call><name>notifyMainScript</name><argument_list>(<argument><expr><operator>(</operator><name>SThreadInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></argument>, <argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>NOTIFY_CMD_START_COMMIT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

     <decl_stmt><decl><type><name>char</name></type> <name><name>tmpString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
     <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"%s tmq_commit_cb_print() be called\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>build_consumer</name><parameter_list>(<parameter><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_conf_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><call><name>tmq_conf_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// tmq_conf_set(conf, "td.connect.ip", "localhost");</comment>
  <comment type="line">// tmq_conf_set(conf, "td.connect.port", "6030");</comment>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"td.connect.user"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"td.connect.pass"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// tmq_conf_set(conf, "td.connect.db", g_stConfInfo.dbName);</comment>

  <expr_stmt><expr><call><name>tmq_conf_set_auto_commit_cb</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>tmq_commit_cb_print</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// tmq_conf_set(conf, "group.id", "cgrp1");</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfKey</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>key</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>value</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"msg.with.table.name"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// tmq_conf_set(conf, "client.id", "c-001");</comment>

  <comment type="line">// tmq_conf_set(conf, "enable.auto.commit", "true");</comment>
  <comment type="line">// tmq_conf_set(conf, "enable.auto.commit", "false");</comment>

  <comment type="line">// tmq_conf_set(conf, "auto.commit.interval.ms", "1000");</comment>

  <comment type="line">// tmq_conf_set(conf, "auto.offset.reset", "none");</comment>
  <comment type="line">// tmq_conf_set(conf, "auto.offset.reset", "earliest");</comment>
  <comment type="line">// tmq_conf_set(conf, "auto.offset.reset", "latest");</comment>
  <comment type="line">//</comment>
  <if_stmt><if>if <condition>(<expr><name><name>g_stConfInfo</name><operator>.</operator><name>useSnapshot</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"experimental.snapshot.enable"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name> <operator>=</operator> <call><name>tmq_consumer_new</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tmq_conf_destroy</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>build_topic_list</name><parameter_list>(<parameter><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name> <operator>=</operator> <call><name>tmq_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// tmq_list_append(topic_list, "test_stb_topic_1");</comment>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfTopic</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>tmq_list_append</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>topics</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>saveConsumeResult</name><parameter_list>(<parameter><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sqlStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <comment type="line">// schema: ts timestamp, consumerid int, consummsgcnt bigint, checkresult int</comment>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name></expr></argument>, <argument><expr><literal type="string">"insert into %s.consumeresult values (%"</literal> <name>PRId64</name> <literal type="string">", %d, %"</literal> <name>PRId64</name> <literal type="string">", %"</literal> <name>PRId64</name> <literal type="string">", %d)"</literal></expr></argument>,
          <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>cdbName</name></name></expr></argument>, <argument><expr><call><name>atomic_fetch_add_64</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_stConfInfo</name><operator>.</operator><name>nowTime</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumeMsgCnt</name></name></expr></argument>,
          <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumeRowCnt</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>checkresult</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>tmpString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"%s, consume id %d result: %s\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>retCode</name> <init>= <expr><call><name>queryDB</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>retCode</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"consume id %d error in save consume result\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>loop_consume</name><parameter_list>(<parameter><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>once_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>tmpString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"%s consumer id %d start to loop pull msg\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>ifCheckData</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>filename</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tmpString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">// sprintf(filename, "%s/../log/consumerid_%d_%s.txt", configDir, pInfo-&gt;consumerId,</comment>
    <comment type="line">// getCurrentTimeString(tmpString));</comment>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%s/../log/consumerid_%d.txt"</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pConsumeRowsFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><literal type="string">"%s/../log/meta_consumerid_%d.txt"</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pConsumeMetaFile</name></name> <operator>=</operator> <call><name>taosOpenFile</name><argument_list>(<argument><expr><name>filename</name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_TRUNC</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>pConsumeRowsFile</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>pConsumeMetaFile</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"%s create file fail for save rows or save meta\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>lastTotalMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>lastPrintTime</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>startTs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>consumeDelay</name> <init>= <expr><ternary><condition><expr><name><name>g_stConfInfo</name><operator>.</operator><name>consumeDelay</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>g_stConfInfo</name><operator>.</operator><name>consumeDelay</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>running</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>tmqMsg</name> <init>= <expr><call><name>tmq_consumer_poll</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name></expr></argument>, <argument><expr><name>consumeDelay</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmqMsg</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>showMsgFlag</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>tmq_res_t</name></type> <name>msgType</name> <init>= <expr><call><name>tmq_get_res_type</name><argument_list>(<argument><expr><name>tmqMsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TMQ_RES_TABLE_META</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>totalRows</name> <operator>+=</operator> <call><name>meta_msg_process</name><argument_list>(<argument><expr><name>tmqMsg</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TMQ_RES_DATA</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>totalRows</name> <operator>+=</operator> <call><name>data_msg_process</name><argument_list>(<argument><expr><name>tmqMsg</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>msgType</name> <operator>==</operator> <name>TMQ_RES_METADATA</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>meta_msg_process</name><argument_list>(<argument><expr><name>tmqMsg</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>totalRows</name> <operator>+=</operator> <call><name>data_msg_process</name><argument_list>(<argument><expr><name>tmqMsg</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>tmqMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>totalMsgs</name><operator>++</operator></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type> <name>currentPrintTime</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>currentPrintTime</name> <operator>-</operator> <name>lastPrintTime</name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(
            <argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"consumer id %d has currently poll total msgs: %"</literal> <name>PRId64</name> <literal type="string">", period rate: %.3f msgs/second\n"</literal></expr></argument>,
            <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><operator>(</operator><name>totalMsgs</name> <operator>-</operator> <name>lastTotalMsgs</name><operator>)</operator> <operator>*</operator> <literal type="number">1000.0</literal> <operator>/</operator> <operator>(</operator><name>currentPrintTime</name> <operator>-</operator> <name>lastPrintTime</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastPrintTime</name> <operator>=</operator> <name>currentPrintTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastTotalMsgs</name> <operator>=</operator> <name>totalMsgs</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>once_flag</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>once_flag</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>notifyMainScript</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>NOTIFY_CMD_START_CONSUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>totalRows</name> <operator>&gt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>expectMsgCnt</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>totalMsgs</name> <operator>&gt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>expectMsgCnt</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>tmpString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"%s over than expect rows, so break consume\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>tmpString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"%s no poll more msg when time over, break consume\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>running</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"receive stop signal and not continue consume\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumeMsgCnt</name></name> <operator>=</operator> <name>totalMsgs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumeRowCnt</name></name> <operator>=</operator> <name>totalRows</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"==== consumerId: %d, consumeMsgCnt: %"</literal> <name>PRId64</name> <literal type="string">", consumeRowCnt: %"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumeMsgCnt</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumeRowCnt</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosFsyncFile</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>pConsumeRowsFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><operator>-&gt;</operator><name>pConsumeRowsFile</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>consumeThreadFunc</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SThreadInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <call><name>createNewTaosConnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"taos_connect() fail, can not notify and save consume result to main scripte\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>build_consumer</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>build_topic_list</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"create consumer fail! tmq is null or topicList is null\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><call><name>tmq_subscribe</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"tmq_subscribe() fail, reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"tmq_subscribe() fail! reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tmq_list_destroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>loop_consume</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>ifManualCommit</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"tmq_commit() manual commit when consume end.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*tmq_commit(pInfo-&gt;tmq, NULL, 0);*/</comment>
    <expr_stmt><expr><call><name>tmq_commit_sync</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"tmq_commit() manual commit over.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"tmq_commit() manual commit over.\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tmq_unsubscribe</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"tmq_unsubscribe() fail, reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"tmq_unsubscribe()! reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tmq_consumer_close</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"tmq_consumer_close() fail, reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"tmq_consumer_close()! reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <comment type="line">// save consume result into consumeresult table</comment>
  <expr_stmt><expr><call><name>saveConsumeResult</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// save rows from per vgroup</comment>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"======== consumerId: %d, consume rows from per vgroups ========\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>numOfVgroups</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"vgroups: %04d, rows: %d\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rowsOfPerVgroups</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>rowsOfPerVgroups</name><index>[<expr><name>i</name></expr>]</index><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parseConsumeInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>      <name>token</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name><name>delim</name><index>[<expr><literal type="number">2</literal></expr>]</index></name> <init>= <expr><literal type="string">","</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>const</specifier> <name>char</name></type> <name>ch</name> <init>= <expr><literal type="char">':'</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>topicString</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>token</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// printf("%s\n", token );</comment>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>topics</name><index>[<expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOfTopic</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>,
               <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>topics</name><index>[<expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOfTopic</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ltrim</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>topics</name><index>[<expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOfTopic</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">// printf("%s\n", g_stConfInfo.topics[g_stConfInfo.numOfTopic]);</comment>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOfTopic</name><operator>++</operator></expr>;</expr_stmt>

      <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>keyString</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>token</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <comment type="line">// printf("%s\n", token );</comment>
      <block>{<block_content>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>pstr</name> <init>= <expr><name>token</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>ltrim</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>ret</name> <init>= <expr><call><name>strchr</name><argument_list>(<argument><expr><name>pstr</name></expr></argument>, <argument><expr><name>ch</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>key</name><index>[<expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOfKey</name></expr>]</index></name></expr></argument>, <argument><expr><name>pstr</name></expr></argument>, <argument><expr><name>ret</name> <operator>-</operator> <name>pstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><index>[<expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOfKey</name></expr>]</index></name></expr></argument>, <argument><expr><name>ret</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                 <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>value</name><index>[<expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOfKey</name></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// printf("key: %s, value: %s\n", g_stConfInfo.key[g_stConfInfo.numOfKey],</comment>
        <comment type="line">// g_stConfInfo.value[g_stConfInfo.numOfKey]);</comment>
        <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>numOfKey</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block>

      <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>delim</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>getConsumeInfo</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sqlStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><call><name>createNewTaosConnect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"taos_connect() fail, can not get consume info for start consumer\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name></expr></argument>, <argument><expr><literal type="string">"select * from %s.consumeinfo"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>cdbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"error in get consumeinfo for %s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_ROW</name></type>    <name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// schema: ts timestamp, consumerid int, topiclist binary(1024), keylist binary(1024), expectmsgcnt bigint,</comment>
  <comment type="line">// ifcheckdata int</comment>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfThread</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>lengths</name> <init>= <expr><call><name>taos_fetch_lengths</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// set default value</comment>
    <comment type="line">// g_stConfInfo.stThreads[numOfThread].autoCommitIntervalMs = 5000;</comment>
    <comment type="line">// memcpy(g_stConfInfo.stThreads[numOfThread].autoCommit, "true", strlen("true"));</comment>
    <comment type="line">// memcpy(g_stConfInfo.stThreads[numOfThread].autoOffsetRest, "earlieast", strlen("earlieast"));</comment>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_fields</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <literal type="number">0</literal> <operator>==</operator> <name>i</name></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">1</literal> <operator>==</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_INT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>numOfThread</name></expr>]</index></name><operator>.</operator><name>consumerId</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><literal type="number">2</literal> <operator>==</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>numOfThread</name></expr>]</index></name><operator>.</operator><name>topicString</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><literal type="number">3</literal> <operator>==</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>numOfThread</name></expr>]</index></name><operator>.</operator><name>keyString</name></expr></argument>, <argument><expr><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>lengths</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><literal type="number">4</literal> <operator>==</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BIGINT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>numOfThread</name></expr>]</index></name><operator>.</operator><name>expectMsgCnt</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><literal type="number">5</literal> <operator>==</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_INT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>numOfThread</name></expr>]</index></name><operator>.</operator><name>ifCheckData</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><literal type="number">6</literal> <operator>==</operator> <name>i</name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>fields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_INT</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>numOfThread</name></expr>]</index></name><operator>.</operator><name>ifManualCommit</name> <operator>=</operator> <operator>*</operator><operator>(</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name><name>row</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>numOfThread</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>
  <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name> <operator>=</operator> <name>numOfThread</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>parseConsumeInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int32_t</name></type> <name>omb_data_msg_process</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>, <parameter><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>msgIndex</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>lenOfRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>buf</name><index>[<expr><literal type="number">16</literal> <operator>*</operator> <literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <comment type="line">// printf("topic: %s\n", tmq_get_topic_name(msg));</comment>
  <comment type="line">// int32_t     vgroupId = tmq_get_vgroup_id(msg);</comment>
  <comment type="line">// const char* dbName = tmq_get_db_name(msg);</comment>

  <comment type="line">// taosFprintfFile(g_fp, "consumerId: %d, msg index:%" PRId64 "\n", pInfo-&gt;consumerId, msgIndex);</comment>
  <comment type="line">// taosFprintfFile(g_fp, "dbName: %s, topic: %s, vgroupId: %d\n", dbName != NULL ? dbName : "invalid table",</comment>
  <comment type="line">//                 tmq_get_topic_name(msg), vgroupId);</comment>

  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_ROW</name></type> <name>row</name> <init>= <expr><call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>     <name>numOfFields</name> <init>= <expr><call><name>taos_field_count</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// int32_t*    length = taos_fetch_lengths(msg);</comment>
    <comment type="line">// int32_t     precision = taos_result_precision(msg);</comment>
    <comment type="line">// const char* tbName = tmq_get_table_name(msg);</comment>

    <expr_stmt><expr><call><name>taos_print_row</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>numOfFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>totalLen</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>totalRows</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><operator>*</operator><name>lenOfRows</name> <operator>=</operator> <name>totalLen</name></expr>;</expr_stmt>
  <return>return <expr><name>totalRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>omb_loop_consume</name><parameter_list>(<parameter><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>once_flag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>tmpString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"%s consumer id %d start to loop pull msg\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>,
                  <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s consumer id %d start to loop pull msg\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type>  <name>lastTotalMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>lastPrintTime</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>startTs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalLenOfMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>lastTotalLenOfMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>consumeDelay</name> <init>= <expr><ternary><condition><expr><name><name>g_stConfInfo</name><operator>.</operator><name>consumeDelay</name></name> <operator>==</operator> <operator>-</operator><literal type="number">1</literal></expr> ?</condition><then> <expr><operator>-</operator><literal type="number">1</literal></expr> </then><else>: <expr><operator>(</operator><name><name>g_stConfInfo</name><operator>.</operator><name>consumeDelay</name></name> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator></expr></else></ternary></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>running</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>tmqMsg</name> <init>= <expr><call><name>tmq_consumer_poll</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name></expr></argument>, <argument><expr><name>consumeDelay</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmqMsg</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>lenOfMsg</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>totalRows</name> <operator>+=</operator> <call><name>omb_data_msg_process</name><argument_list>(<argument><expr><name>tmqMsg</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>lenOfMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalLenOfMsg</name> <operator>+=</operator> <name>lenOfMsg</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>tmqMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalMsgs</name><operator>++</operator></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>currentPrintTime</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>currentPrintTime</name> <operator>-</operator> <name>lastPrintTime</name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>currentLenOfMsg</name> <init>= <expr><name>totalLenOfMsg</name> <operator>-</operator> <name>lastTotalLenOfMsg</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>deltaTime</name> <init>= <expr><name>currentPrintTime</name> <operator>-</operator> <name>lastPrintTime</name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"consumer id %d has currently cons total rows: %"</literal> <name>PRId64</name> <literal type="string">", msgs: %"</literal> <name>PRId64</name>
               <literal type="string">", rate: %.3f msgs/s, %.1f MB/s\n"</literal></expr></argument>,
               <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><operator>(</operator><name>totalMsgs</name> <operator>-</operator> <name>lastTotalMsgs</name><operator>)</operator> <operator>*</operator> <literal type="number">1000.0</literal> <operator>/</operator> <name>deltaTime</name></expr></argument>,
               <argument><expr><name>currentLenOfMsg</name> <operator>*</operator> <literal type="number">1000.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>/</operator> <name>deltaTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>,
                        <argument><expr><literal type="string">"consumer id %d has currently poll total msgs: %"</literal> <name>PRId64</name>
                        <literal type="string">", period cons rate: %.3f msgs/s, %.1f MB/s\n"</literal></expr></argument>,
                        <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><operator>(</operator><name>totalMsgs</name> <operator>-</operator> <name>lastTotalMsgs</name><operator>)</operator> <operator>*</operator> <literal type="number">1000.0</literal> <operator>/</operator> <name>deltaTime</name></expr></argument>,
                        <argument><expr><name>currentLenOfMsg</name> <operator>*</operator> <literal type="number">1000.0</literal> <operator>/</operator> <name>deltaTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastPrintTime</name> <operator>=</operator> <name>currentPrintTime</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastTotalMsgs</name> <operator>=</operator> <name>totalMsgs</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>lastTotalLenOfMsg</name> <operator>=</operator> <name>totalLenOfMsg</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>tmpString</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"%s no poll more msg when time over, break consume\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s no poll more msg when time over, break consume\n"</literal></expr></argument>, <argument><expr><call><name>getCurrentTimeString</name><argument_list>(<argument><expr><name>tmpString</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>currentPrintTime</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>currentLenOfMsg</name> <init>= <expr><name>totalLenOfMsg</name> <operator>-</operator> <name>lastTotalLenOfMsg</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>deltaTime</name> <init>= <expr><name>currentPrintTime</name> <operator>-</operator> <name>lastPrintTime</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"consumer id %d has currently cons total rows: %"</literal> <name>PRId64</name> <literal type="string">", msgs: %"</literal> <name>PRId64</name>
             <literal type="string">", rate: %.3f msgs/s, %.1f MB/s\n"</literal></expr></argument>,
             <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><operator>(</operator><name>totalMsgs</name> <operator>-</operator> <name>lastTotalMsgs</name><operator>)</operator> <operator>*</operator> <literal type="number">1000.0</literal> <operator>/</operator> <name>deltaTime</name></expr></argument>,
             <argument><expr><name>currentLenOfMsg</name> <operator>*</operator> <literal type="number">1000.0</literal> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>/</operator> <name>deltaTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumeMsgCnt</name></name> <operator>=</operator> <name>totalMsgs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumeRowCnt</name></name> <operator>=</operator> <name>totalRows</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumeLen</name></name> <operator>=</operator> <name>totalLenOfMsg</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>ombConsumeThreadFunc</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SThreadInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <comment type="line">//################### set key ########################</comment>
  <decl_stmt><decl><type><name>tmq_conf_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><call><name>tmq_conf_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">// tmq_conf_set(conf, "td.connect.ip", "localhost");</comment>
  <comment type="line">// tmq_conf_set(conf, "td.connect.port", "6030");</comment>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"td.connect.user"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"td.connect.pass"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// tmq_conf_set(conf, "td.connect.db", g_stConfInfo.dbName);</comment>
  <expr_stmt><expr><call><name>tmq_conf_set_auto_commit_cb</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>tmq_commit_cb_print</name></expr></argument>, <argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"group.id"</literal></expr></argument>, <argument><expr><literal type="string">"ombCgrp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// tmq_conf_set(conf, "msg.with.table.name", "true");</comment>
  <comment type="line">// tmq_conf_set(conf, "client.id", "c-001");</comment>
  <comment type="line">// tmq_conf_set(conf, "enable.auto.commit", "true");</comment>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"enable.auto.commit"</literal></expr></argument>, <argument><expr><literal type="string">"false"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// tmq_conf_set(conf, "auto.commit.interval.ms", "1000");</comment>
  <comment type="line">// tmq_conf_set(conf, "auto.offset.reset", "none");</comment>
  <comment type="line">// tmq_conf_set(conf, "auto.offset.reset", "earliest");</comment>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"auto.offset.reset"</literal></expr></argument>, <argument><expr><literal type="string">"earliest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//</comment>
  <if_stmt><if>if <condition>(<expr><name><name>g_stConfInfo</name><operator>.</operator><name>useSnapshot</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"experimental.snapshot.enable"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name> <operator>=</operator> <call><name>tmq_consumer_new</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tmq_conf_destroy</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">//################### set topic ##########################</comment>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name> <operator>=</operator> <call><name>tmq_list_new</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_list_append</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>topic</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"create consumer fail! tmq is null or topicList is null\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name> <init>= <expr><call><name>tmq_subscribe</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"tmq_subscribe() fail, reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"tmq_subscribe() fail! reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tmq_list_destroy</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>topicList</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>omb_loop_consume</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tmq_unsubscribe</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"tmq_unsubscribe() fail, reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"tmq_unsubscribe()! reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tmq_consumer_close</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"tmq_consumer_close() fail, reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"tmq_consumer_close()! reason: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tmq</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>queryDbExec</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>command</name></decl></parameter>, <parameter><decl><type><name>QUERY_TYPE</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s Failed to execute &lt;%s&gt;, reason: %s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>INSERT_TYPE</name> <operator>==</operator> <name>type</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>affectedRows</name> <init>= <expr><call><name>taos_affected_rows</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>affectedRows</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>ombProduceThreadFunc</name><parameter_list>(<parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SThreadInfo</name><modifier>*</modifier></type> <name>pInfo</name> <init>= <expr><operator>(</operator><name>SThreadInfo</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <call><name>createNewTaosConnect</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"taos_connect() fail, can not start producers!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>affectedRowsTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>sendMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>uint32_t</name></type> <name>totalSendLoopTimes</name> <init>=
      <expr><name><name>g_stConfInfo</name><operator>.</operator><name>runDurationMinutes</name></name> <operator>*</operator> <literal type="number">60</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <name>SEND_TIME_UNIT</name></expr></init></decl>;</decl_stmt>  <comment type="line">// send some msgs per 10ms</comment>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>batchPerTblTimes</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>producerRate</name></name> <operator>/</operator> <literal type="number">100</literal> <operator>/</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>batchSize</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name></type> <name>remainder</name> <init>= <expr><operator>(</operator><name><name>pInfo</name><operator>-&gt;</operator><name>producerRate</name></name> <operator>/</operator> <literal type="number">100</literal><operator>)</operator> <operator>%</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>batchSize</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>remainder</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>batchPerTblTimes</name> <operator>+=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>sqlBuf</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_SQL_LEN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>sqlBuf</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"malloc fail for sqlBuf\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Produce Info: totalSendLoopTimes: %d, batchPerTblTimes: %d, producerRate: %d\n"</literal></expr></argument>, <argument><expr><name>totalSendLoopTimes</name></expr></argument>,
         <argument><expr><name>batchPerTblTimes</name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>producerRate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>ctbName</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>ctbName</name></expr></argument>, <argument><expr><literal type="string">"%s.ctb%d"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>lastPrintTime</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalMsgLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <comment type="line">// int64_t timeStamp = taosGetTimestampUs();</comment>
  <while>while <condition>(<expr><name>totalSendLoopTimes</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>startTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>batchPerTblTimes</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>uint32_t</name></type> <name>msgsOfSql</name> <init>= <expr><name><name>g_stConfInfo</name><operator>.</operator><name>batchSize</name></name></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><operator>(</operator><name>i</name> <operator>==</operator> <name>batchPerTblTimes</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><literal type="number">0</literal> <operator>!=</operator> <name>remainder</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>msgsOfSql</name> <operator>=</operator> <name>remainder</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sqlBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>MAX_SQL_LEN</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"insert into %s values "</literal></expr></argument>, <argument><expr><name>ctbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>msgsOfSql</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>timeStamp</name> <init>= <expr><call><name>taosGetTimestampNs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sqlBuf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>MAX_SQL_LEN</name> <operator>-</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"(%"</literal> <name>PRId64</name> <literal type="string">", \"%s\")"</literal></expr></argument>, <argument><expr><name>timeStamp</name></expr></argument>, <argument><expr><name>g_payload</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sendMsgs</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalProduceMsgs</name></name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><name>totalMsgLen</name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>totalMsgsLen</name></name> <operator>+=</operator> <name>len</name></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type> <name>affectedRows</name> <init>= <expr><call><name>queryDbExec</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>, <argument><expr><name>sqlBuf</name></expr></argument>, <argument><expr><name>INSERT_TYPE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>affectedRows</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sqlBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>affectedRowsTotal</name> <operator>+=</operator> <name>affectedRows</name></expr>;</expr_stmt>

      <comment type="line">// printf("Produce Info: affectedRows: %" PRId64 "\n", affectedRows);</comment>
    </block_content>}</block></for>
    <expr_stmt><expr><name>totalSendLoopTimes</name> <operator>-=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <comment type="line">// calc spent time</comment>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>currentTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>delta</name> <init>= <expr><name>currentTs</name> <operator>-</operator> <name>startTs</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&lt;</operator> <name>SEND_TIME_UNIT</name> <operator>*</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>sleepLen</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>SEND_TIME_UNIT</name> <operator>*</operator> <literal type="number">1000</literal> <operator>-</operator> <name>delta</name><operator>)</operator></expr></init></decl>;</decl_stmt>
      <comment type="line">// printf("sleep %" PRId64 " us, use time: %" PRId64 " us\n", sleepLen, delta);</comment>
      <expr_stmt><expr><call><name>taosUsleep</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>sleepLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>currentTs</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>delta</name> <operator>=</operator> <name>currentTs</name> <operator>-</operator> <name>lastPrintTime</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>delta</name> <operator>&gt;</operator> <literal type="number">10</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"producer[%d] info: %"</literal> <name>PRId64</name> <literal type="string">" msgs, %"</literal> <name>PRId64</name> <literal type="string">" Byte, %"</literal> <name>PRId64</name> <literal type="string">" us, totalSendLoopTimes: %d\n"</literal></expr></argument>,
             <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>sendMsgs</name></expr></argument>, <argument><expr><name>totalMsgLen</name></expr></argument>, <argument><expr><name>delta</name></expr></argument>, <argument><expr><name>totalSendLoopTimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"producer[%d] rate: %1.f msgs/s, %1.f KB/s\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>consumerId</name></name></expr></argument>, <argument><expr><name>sendMsgs</name> <operator>*</operator> <literal type="number">1000.0</literal> <operator>*</operator> <literal type="number">1000</literal> <operator>/</operator> <name>delta</name></expr></argument>,
             <argument><expr><operator>(</operator><name>totalMsgLen</name> <operator>/</operator> <literal type="number">1024.0</literal><operator>)</operator> <operator>/</operator> <operator>(</operator><name>delta</name> <operator>/</operator> <operator>(</operator><literal type="number">1000</literal> <operator>*</operator> <literal type="number">1000</literal><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>lastPrintTime</name> <operator>=</operator> <name>currentTs</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>sendMsgs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalMsgLen</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"affectedRowsTotal: %"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>affectedRowsTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>taos</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sqlBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>printProduceInfo</name><parameter_list>(<parameter><decl><type><name>int64_t</name></type> <name>start</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalLenOfMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>producers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>totalMsgs</name> <operator>+=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>stProdThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>totalProduceMsgs</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>totalLenOfMsgs</name> <operator>+=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>stProdThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>totalMsgsLen</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>tInMs</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>t</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Spent %.3f seconds to prod %"</literal> <name>PRIu64</name> <literal type="string">" msgs, %"</literal> <name>PRIu64</name> <literal type="string">" Byte\n\n"</literal></expr></argument>, <argument><expr><name>tInMs</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><name>totalLenOfMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Spent %.3f seconds to prod %"</literal> <name>PRIu64</name> <literal type="string">" msgs with %d producer(s), throughput: %.3f msgs/s, %.1f MB/s\n\n"</literal></expr></argument>,
         <argument><expr><name>tInMs</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>producers</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>totalMsgs</name> <operator>/</operator> <name>tInMs</name></expr></argument>,
         <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>totalLenOfMsgs</name> <operator>/</operator> <operator>(</operator><literal type="number">1024.0</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>/</operator> <name>tInMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>startOmbConsume</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thattr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>producers</name></name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name> <init>= <expr><call><name>createNewTaosConnect</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"taos_connect() fail, can not create db, stbl, ctbl, topic!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>stbName</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><literal type="string">"stb"</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>ctbPrefix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name> <init>= <expr><literal type="string">"ctb"</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists %s"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SQL: %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>queryDbExec</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>NO_INSERT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"create database if not exists %s precision 'ns' vgroups %d"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>,
            <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>producers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SQL: %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>queryDbExec</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>NO_INSERT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"create stable %s.%s (ts timestamp, payload binary(%d)) tags (t bigint) "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>,
            <argument><expr><name>stbName</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>payloadLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SQL: %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>queryDbExec</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>NO_INSERT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>producers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"create table %s.%s%d using %s.stb tags(%d) "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>ctbPrefix</name></expr></argument>, <argument><expr><name>i</name></expr></argument>,
              <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SQL: %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>queryDbExec</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>NO_INSERT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// create topic</comment>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"create topic %s as stable %s.%s"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>topic</name></name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"SQL: %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>queryDbExec</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>NO_INSERT_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>producerRate</name> <init>= <expr><call><name>ceil</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>producerRate</name></name> <operator>/</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>producers</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"==== create %d produce thread ====\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>producers</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>producers</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stProdThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>consumerId</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stProdThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>producerRate</name> <operator>=</operator> <name>producerRate</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>g_stConfInfo</name><operator>.</operator><name>stProdThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>, <argument><expr><name>ombProduceThreadFunc</name></expr></argument>,
                       <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>g_stConfInfo</name><operator>.</operator><name>stProdThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>start</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>producers</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stProdThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_stConfInfo</name><operator>.</operator><name>stProdThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>

      <expr_stmt><expr><call><name>printProduceInfo</name><argument_list>(<argument><expr><name>start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"==== close tmqlog ====\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// pthread_create one thread to consume</comment>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"==== create %d consume thread ====\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>consumerId</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>, <argument><expr><name>ombConsumeThreadFunc</name></expr></argument>,
                     <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>start</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalLenOfMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>totalMsgs</name> <operator>+=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>consumeMsgCnt</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>totalLenOfMsgs</name> <operator>+=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>consumeLen</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>totalRows</name> <operator>+=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>consumeRowCnt</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>tInMs</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>t</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(
      <argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"Spent %.3f seconds to poll msgs: %"</literal> <name>PRIu64</name> <literal type="string">" with %d thread(s), throughput: %.3f msgs/s, %.1f MB/s\n\n"</literal></expr></argument>,
      <argument><expr><name>tInMs</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>totalMsgs</name> <operator>/</operator> <name>tInMs</name><operator>)</operator></expr></argument>,
      <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>totalLenOfMsgs</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>/</operator> <name>tInMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Spent %.3f seconds to cons rows: %"</literal> <name>PRIu64</name> <literal type="string">" msgs: %"</literal> <name>PRIu64</name>
         <literal type="string">" with %d thread(s), throughput: %.3f msgs/s, %.1f MB/s\n\n"</literal></expr></argument>,
         <argument><expr><name>tInMs</name></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>totalMsgs</name> <operator>/</operator> <name>tInMs</name><operator>)</operator></expr></argument>,
         <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>totalLenOfMsgs</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal><operator>)</operator> <operator>/</operator> <name>tInMs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"==== close tmqlog ====\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>parseArgument</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>topic</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>startOmbConsume</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>retCode</name> <init>= <expr><call><name>getConsumeInfo</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>retCode</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>saveConfigToLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>tmqSetSignalHandle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thattr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// pthread_create one thread to consume</comment>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"==== create %d consume thread ====\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>, <argument><expr><name>consumeThreadFunc</name></expr></argument>,
                     <argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><operator>(</operator><operator>&amp;</operator><operator>(</operator><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>start</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>end</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>totalMsgs</name> <operator>+=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>stThreads</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>consumeMsgCnt</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name>end</name> <operator>-</operator> <name>start</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>t</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>t</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

  <decl_stmt><decl><type><name>double</name></type> <name>tInMs</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><name>t</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>,
                  <argument><expr><literal type="string">"Spent %.3f seconds to poll msgs: %"</literal> <name>PRIu64</name> <literal type="string">" with %d thread(s), throughput: %.3f msgs/second\n\n"</literal></expr></argument>,
                  <argument><expr><name>tInMs</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThread</name></name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>totalMsgs</name> <operator>/</operator> <name>tInMs</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"==== close tmqlog ====\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
