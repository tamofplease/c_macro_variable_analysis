<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/utils/test/c/createTable.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>_DEFAULT_SOURCE</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREEN</name></cpp:macro> <cpp:value>"\033[1;32m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NC</name></cpp:macro> <cpp:value>"\033[0m"</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name></type>    <name><name>dbName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"db"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name></type>    <name><name>stbName</name><index>[<expr><literal type="number">64</literal></expr>]</index></name> <init>= <expr><literal type="string">"st"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>numOfThreads</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>numOfTables</name> <init>= <expr><literal type="number">200000</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>startOffset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>createTable</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>insertData</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>batchNumOfTbl</name> <init>= <expr><literal type="number">100</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>batchNumOfRow</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>totalRowsOfPerTbl</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>numOfVgroups</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>showTablesFlag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>queryFlag</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int64_t</name></type> <name>startTimestamp</name> <init>= <expr><literal type="number">1640966400000</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// 2020-01-01 00:00:00.000</comment>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>tableBeginIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>tableEndIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>threadIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>dbName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>      <name><name>stbName</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type>     <name>createTableSpeed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type>     <name>insertDataSpeed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>startMs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>maxDelay</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>   <name>minDelay</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdThread</name></type> <name>thread</name></decl>;</decl_stmt>
}</block></struct></type> <name>SThreadInfo</name>;</typedef>

<comment type="line">// void  parseArgument(int32_t argc, char *argv[]);</comment>
<comment type="line">// void *threadFunc(void *param);</comment>
<comment type="line">// void  createDbAndStb();</comment>

<function><type><name>void</name></type> <name>createDbAndStb</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"start to create db and stable"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>qstr</name><index>[<expr><literal type="number">64000</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"failed to connect to DB, reason:%s"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>, <argument><expr><literal type="string">"create database if not exists %s vgroups %d"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>numOfVgroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"failed to create database:%s, sql:%s, code:%d reason:%s"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>qstr</name></expr></argument>, <argument><expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>,
           <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>, <argument><expr><literal type="string">"use %s"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"failed to use db, code:%d reason:%s"</literal></expr></argument>, <argument><expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>, <argument><expr><literal type="string">"create table if not exists %s (ts timestamp, i int) tags (j bigint)"</literal></expr></argument>, <argument><expr><name>stbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"failed to create stable, code:%d reason:%s"</literal></expr></argument>, <argument><expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>printCreateProgress</name><parameter_list>(<parameter><decl><type><name>SThreadInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>t</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>endMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalTables</name> <init>= <expr><name>t</name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>tableBeginIndex</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type>   <name>seconds</name> <init>= <expr><operator>(</operator><name>endMs</name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>startMs</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type>   <name>speed</name> <init>= <expr><name>totalTables</name> <operator>/</operator> <name>seconds</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>createTableSpeed</name></name> <operator>=</operator> <name>speed</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"thread:%d, %"</literal> <name>PRId64</name> <literal type="string">" tables created, time:%.2f sec, speed:%.1f tables/second, "</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>,
         <argument><expr><name>totalTables</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>printInsertProgress</name><parameter_list>(<parameter><decl><type><name>SThreadInfo</name> <modifier>*</modifier></type><name>pInfo</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>insertTotalRows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>endMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <comment type="line">//int64_t totalTables = t - pInfo-&gt;tableBeginIndex;</comment>
  <decl_stmt><decl><type><name>float</name></type>   <name>seconds</name> <init>= <expr><operator>(</operator><name>endMs</name> <operator>-</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>startMs</name></name><operator>)</operator> <operator>/</operator> <literal type="number">1000.0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name></type>   <name>speed</name> <init>= <expr><name>insertTotalRows</name> <operator>/</operator> <name>seconds</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>insertDataSpeed</name></name> <operator>=</operator> <name>speed</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"thread:%d, %"</literal> <name>PRId64</name> <literal type="string">" rows inserted, time:%.2f sec, speed:%.1f rows/second, "</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>,
         <argument><expr><name>insertTotalRows</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>speed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>getResult</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>tres</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_ROW</name></type> <name>row</name> <init>= <expr><call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>row</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type>         <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>precision</name> <init>= <expr><call><name>taos_result_precision</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>numOfRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <do>do <block>{<block_content>
    <expr_stmt><expr><name>numOfRows</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>tres</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block> while <condition>(<expr><name>row</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>

  <return>return <expr><name>numOfRows</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>showTables</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"start to show tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>qstr</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"failed to connect to DB, reason:%s"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"use %s"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"failed to use db, code:%d reason:%s"</literal></expr></argument>, <argument><expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>, <argument><expr><literal type="string">"show tables"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"failed to show tables, code:%d reason:%s"</literal></expr></argument>, <argument><expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>totalTableNum</name> <init>= <expr><call><name>getResult</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s database: %s, total %"</literal> <name>PRId64</name> <literal type="string">" tables %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>totalTableNum</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>threadFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SThreadInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>SThreadInfo</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name>        <modifier>*</modifier></type><name>qstr</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>batchNumOfTbl</name> <operator>*</operator> <name>batchNumOfRow</name> <operator>*</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>      <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>con</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>con</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"index:%d, failed to connect to DB, reason:%s"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//pPrint("====before thread:%d, table range: %" PRId64 " - %" PRId64 "\n", pInfo-&gt;threadIndex, pInfo-&gt;tableBeginIndex,</comment>
  <comment type="line">//       pInfo-&gt;tableEndIndex);</comment>

  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableBeginIndex</name></name> <operator>+=</operator> <name>startOffset</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableEndIndex</name></name> <operator>+=</operator> <name>startOffset</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"====thread:%d, table range: %"</literal> <name>PRId64</name> <literal type="string">" - %"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>threadIndex</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableBeginIndex</name></name></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableEndIndex</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>, <argument><expr><literal type="string">"use %s"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>createTable</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>curMs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>beginMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>startMs</name></name> <operator>=</operator> <name>beginMs</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableBeginIndex</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>tableEndIndex</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
      <comment type="line">// int64_t batch = (pInfo-&gt;tableEndIndex - t);</comment>
      <comment type="line">// batch = TMIN(batch, batchNum);</comment>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>, <argument><expr><literal type="string">"create table"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>batchNumOfTbl</name></expr>;</condition><incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>qstr</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" %s_t%"</literal> <name>PRId64</name> <literal type="string">" using %s tags(%"</literal> <name>PRId64</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><name>stbName</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>t</name> <operator>&gt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>tableEndIndex</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><name>int64_t</name></type>   <name>startTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"failed to create table reason:%s, sql: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>endTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>delay</name> <init>= <expr><name>endTs</name> <operator>-</operator> <name>startTs</name></expr></init></decl>;</decl_stmt>
      <comment type="line">// printf("==== %"PRId64" -  %"PRId64", %"PRId64"\n", startTs, endTs, delay);</comment>
      <if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&gt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>maxDelay</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>maxDelay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
      <if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>minDelay</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>minDelay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

      <expr_stmt><expr><name>curMs</name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>curMs</name> <operator>-</operator> <name>beginMs</name> <operator>&gt;</operator> <literal type="number">10000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>beginMs</name> <operator>=</operator> <name>curMs</name></expr>;</expr_stmt>
        <comment type="line">// printf("==== tableBeginIndex: %"PRId64", t: %"PRId64"\n", pInfo-&gt;tableBeginIndex, t);</comment>
        <expr_stmt><expr><call><name>printCreateProgress</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>printCreateProgress</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>insertData</name></expr>)</condition> <block>{<block_content>
  	<decl_stmt><decl><type><name>int64_t</name></type> <name>insertTotalRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>curMs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>beginMs</name> <init>= <expr><call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>startMs</name></name> <operator>=</operator> <name>beginMs</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>t</name> <init>= <expr><name><name>pInfo</name><operator>-&gt;</operator><name>tableBeginIndex</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>t</name> <operator>&lt;=</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>tableEndIndex</name></name></expr>;</condition> <incr><expr><name>t</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <comment type="line">//printf("table name: %"PRId64"\n", t);</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><name>startTimestamp</name></expr></init></decl>;</decl_stmt>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsOfPerTbl</name></expr>;</condition><incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>, <argument><expr><literal type="string">"insert into "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>qstr</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"%s_t%"</literal> <name>PRId64</name> <literal type="string">" values "</literal></expr></argument>, <argument><expr><name>stbName</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>batchNumOfRow</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>qstr</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"(%"</literal> <name>PRId64</name> <literal type="string">", 6666) "</literal></expr></argument>, <argument><expr><name>ts</name><operator>++</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>i</name><operator>++</operator></expr>;</expr_stmt>
		  <expr_stmt><expr><name>insertTotalRows</name><operator>++</operator></expr>;</expr_stmt>
		  <if_stmt><if>if <condition>(<expr><name>i</name> <operator>&gt;=</operator> <name>totalRowsOfPerTbl</name></expr>)</condition> <block>{<block_content>
		  	<break>break;</break>
		  </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
        <decl_stmt><decl><type><name>int64_t</name></type>	<name>startTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>con</name></expr></argument>, <argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"failed to insert %s_t%"</literal> <name>PRId64</name> <literal type="string">", reason:%s"</literal></expr></argument>, <argument><expr><name>stbName</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>endTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>delay</name> <init>= <expr><name>endTs</name> <operator>-</operator> <name>startTs</name></expr></init></decl>;</decl_stmt>
        <comment type="line">// printf("==== %"PRId64" -  %"PRId64", %"PRId64"\n", startTs, endTs, delay);</comment>
        <if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&gt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>maxDelay</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>maxDelay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>delay</name> <operator>&lt;</operator> <name><name>pInfo</name><operator>-&gt;</operator><name>minDelay</name></name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name><name>pInfo</name><operator>-&gt;</operator><name>minDelay</name></name> <operator>=</operator> <name>delay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        
        <expr_stmt><expr><name>curMs</name> <operator>=</operator> <call><name>taosGetTimestampMs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>curMs</name> <operator>-</operator> <name>beginMs</name> <operator>&gt;</operator> <literal type="number">10000</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>beginMs</name> <operator>=</operator> <name>curMs</name></expr>;</expr_stmt>
          <comment type="line">// printf("==== tableBeginIndex: %"PRId64", t: %"PRId64"\n", pInfo-&gt;tableBeginIndex, t);</comment>
          <expr_stmt><expr><call><name>printInsertProgress</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>insertTotalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>		
      </block_content>}</block></for>
    </block_content>}</block></for>	
    <expr_stmt><expr><call><name>printInsertProgress</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>, <argument><expr><name>insertTotalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>con</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>qstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>printHelp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>indent</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><literal type="string">"        "</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Used to test the performance while create table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"Configuration directory, default is "</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"The name of the database to be created, default is "</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"The name of the super table to be created, default is "</literal></expr></argument>, <argument><expr><name>stbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"numOfThreads, default is "</literal></expr></argument>, <argument><expr><name>numOfThreads</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"numOfTables, default is "</literal></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-g"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"startOffset, default is "</literal></expr></argument>, <argument><expr><name>startOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"numOfVgroups, default is "</literal></expr></argument>, <argument><expr><name>numOfVgroups</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"createTable, default is "</literal></expr></argument>, <argument><expr><name>createTable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-i"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"insertData, default is "</literal></expr></argument>, <argument><expr><name>insertData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"batchNumOfTbl, default is "</literal></expr></argument>, <argument><expr><name>batchNumOfTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"showTablesFlag, default is "</literal></expr></argument>, <argument><expr><name>showTablesFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"queryFlag, default is "</literal></expr></argument>, <argument><expr><name>queryFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"batchNumOfRow, default is "</literal></expr></argument>, <argument><expr><name>batchNumOfRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"totalRowsOfPerTbl, default is "</literal></expr></argument>, <argument><expr><name>totalRowsOfPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parseArgument</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>dbName</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dbName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>configDir</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>stbName</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>stbName</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numOfThreads</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numOfTables</name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-g"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>startOffset</name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>numOfVgroups</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-a"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>createTable</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-i"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>insertData</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>batchNumOfTbl</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>batchNumOfRow</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-r"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>totalRowsOfPerTbl</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-w"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>showTablesFlag</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>queryFlag</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s unknow para: %s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s dbName:%s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s stbName:%s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s configDir:%s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>configDir</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s numOfTables:%"</literal> <name>PRId64</name> <literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s startOffset:%"</literal> <name>PRId64</name> <literal type="string">" %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>startOffset</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s numOfThreads:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>numOfThreads</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s numOfVgroups:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>numOfVgroups</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s createTable:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>createTable</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s insertData:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>insertData</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s batchNumOfTbl:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>batchNumOfTbl</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s batchNumOfRow:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>batchNumOfRow</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s totalRowsOfPerTbl:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>totalRowsOfPerTbl</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s showTablesFlag:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>showTablesFlag</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s queryFlag:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>queryFlag</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s start create table performace test %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>parseArgument</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>showTablesFlag</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>showTables</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>queryFlag</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// selectRowsFromTable();</comment>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>createTable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>createDbAndStb</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%d threads are spawned to create %"</literal> <name>PRId64</name> <literal type="string">" tables, offset is %"</literal> <name>PRId64</name> <literal type="string">" "</literal></expr></argument>, <argument><expr><name>numOfThreads</name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>,
         <argument><expr><name>startOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdThreadAttr</name></type> <name>thattr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosThreadAttrSetDetachState</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>, <argument><expr><name>PTHREAD_CREATE_JOINABLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>SThreadInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><operator>(</operator><name>SThreadInfo</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name>numOfThreads</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>SThreadInfo</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <comment type="line">// int64_t numOfTablesPerThread = numOfTables / numOfThreads;</comment>
  <comment type="line">// numOfTables = numOfTablesPerThread * numOfThreads;</comment>

  <if_stmt><if>if <condition>(<expr><name>numOfThreads</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfThreads</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>a</name> <init>= <expr><name>numOfTables</name> <operator>/</operator> <name>numOfThreads</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>a</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>numOfThreads</name> <operator>=</operator> <name>numOfTables</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>a</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>b</name> <operator>=</operator> <name>numOfTables</name> <operator>%</operator> <name>numOfThreads</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tableFrom</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfThreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tableBeginIndex</name> <operator>=</operator> <name>tableFrom</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tableEndIndex</name> <operator>=</operator> <operator>(</operator><ternary><condition><expr><name>i</name> <operator>&lt;</operator> <name>b</name></expr> ?</condition><then> <expr><name>tableFrom</name> <operator>+</operator> <name>a</name></expr> </then><else>: <expr><name>tableFrom</name> <operator>+</operator> <name>a</name> <operator>-</operator> <literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>tableFrom</name> <operator>=</operator> <name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>tableEndIndex</name> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>threadIndex</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>minDelay</name> <operator>=</operator> <name>INT64_MAX</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>dbName</name></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>stbName</name></expr></argument>, <argument><expr><name>stbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadCreate</name><argument_list>(<argument><expr><operator>&amp;</operator><operator>(</operator><name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>, <argument><expr><name>threadFunc</name></expr></argument>, <argument><expr><operator>(</operator><name>void</name> <operator>*</operator><operator>)</operator><operator>(</operator><name>pInfo</name> <operator>+</operator> <name>i</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMsleep</name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfThreads</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosThreadJoin</name><argument_list>(<argument><expr><name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosThreadClear</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>thread</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>maxDelay</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>minDelay</name> <init>= <expr><name>INT64_MAX</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>float</name></type> <name>createTableSpeed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfThreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>createTableSpeed</name> <operator>+=</operator> <name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>createTableSpeed</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxDelay</name> <operator>&gt;</operator> <name>maxDelay</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>maxDelay</name> <operator>=</operator> <name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>maxDelay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>minDelay</name> <operator>&lt;</operator> <name>minDelay</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>minDelay</name> <operator>=</operator> <name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>minDelay</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>float</name></type> <name>insertDataSpeed</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>numOfThreads</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>insertDataSpeed</name> <operator>+=</operator> <name><name>pInfo</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>insertDataSpeed</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>createTable</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s total %"</literal> <name>PRId64</name> <literal type="string">" tables, %.1f tables/second, threads:%d, maxDelay: %"</literal> <name>PRId64</name> <literal type="string">"us, minDelay: %"</literal> <name>PRId64</name>
           <literal type="string">"us %s"</literal></expr></argument>,
           <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>, <argument><expr><name>createTableSpeed</name></expr></argument>, <argument><expr><name>numOfThreads</name></expr></argument>, <argument><expr><name>maxDelay</name></expr></argument>, <argument><expr><name>minDelay</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>insertData</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"%s total %"</literal> <name>PRId64</name> <literal type="string">" tables, %.1f rows/second, threads:%d %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>numOfTables</name></expr></argument>, <argument><expr><name>insertDataSpeed</name></expr></argument>,
           <argument><expr><name>numOfThreads</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>taosThreadAttrDestroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>thattr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
