<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/utils/test/c/tmq_taosx_ci.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"types.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type>  <name>running</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TdFilePtr</name></type>   <name>g_fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<typedef>typedef <type><struct>struct<block>{
  <decl_stmt><decl><type><name>bool</name></type> <name>snapShot</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>dropTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type> <name>subTable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>srcVgroups</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>  <name>dstVgroups</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>dir</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type><name>Config</name>;</typedef>

<decl_stmt><decl><type><name>Config</name></type> <name>g_conf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>TAOS</name><modifier>*</modifier></type> <name>use_db</name><parameter_list>()</parameter_list><block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"use db_taosx"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in use db_taosx, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>pConn</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>msg_process</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"-----------topic-------------: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_get_topic_name</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"db: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_get_db_name</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"vg: %d\n"</literal></expr></argument>, <argument><expr><call><name>tmq_get_vgroup_id</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>pConn</name> <init>= <expr><call><name>use_db</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>tmq_get_res_type</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TMQ_RES_TABLE_META</name> <operator>||</operator> <call><name>tmq_get_res_type</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>TMQ_RES_METADATA</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>tmq_get_json_meta</name><argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"meta result: %s\n"</literal></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if<condition>(<expr><name>g_fp</name> <operator>&amp;&amp;</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>tmq_free_json_meta</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>tmq_raw_data</name></type> <name>raw</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmq_get_raw</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"write raw data type: %d\n"</literal></expr></argument>, <argument><expr><name><name>raw</name><operator>.</operator><name>raw_type</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name> <init>= <expr><call><name>tmq_write_raw</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"write raw data: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_free_raw</name><argument_list>(<argument><expr><name>raw</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>buildDatabase</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list><block>{<block_content>

  <comment type="block">/* test for TD-20612  start*/</comment>
<comment type="line">//  pRes = taos_query(pConn,"create table tb1 (ts timestamp, c1 int, c2 int)");</comment>
<comment type="line">//  if (taos_errno(pRes) != 0) {</comment>
<comment type="line">//    printf("failed to create super table st1, reason:%s\n", taos_errstr(pRes));</comment>
<comment type="line">//    return -1;</comment>
<comment type="line">//  }</comment>
<comment type="line">//  taos_free_result(pRes);</comment>
<comment type="line">//</comment>
<comment type="line">//  pRes = taos_query(pConn,"insert into tb1 (ts, c1) values(1669092069069, 0)");</comment>
<comment type="line">//  if (taos_errno(pRes) != 0) {</comment>
<comment type="line">//    printf("failed to create super table st1, reason:%s\n", taos_errstr(pRes));</comment>
<comment type="line">//    return -1;</comment>
<comment type="line">//  }</comment>
<comment type="line">//  taos_free_result(pRes);</comment>
<comment type="line">//</comment>
<comment type="line">//  pRes = taos_query(pConn,"insert into tb1 (ts, c2) values(1669092069069, 1)");</comment>
<comment type="line">//  if (taos_errno(pRes) != 0) {</comment>
<comment type="line">//    printf("failed to create super table st1, reason:%s\n", taos_errstr(pRes));</comment>
<comment type="line">//    return -1;</comment>
<comment type="line">//  }</comment>
<comment type="line">//  taos_free_result(pRes);</comment>
<comment type="line">//</comment>
<comment type="line">//  return 0;</comment>
  <comment type="block">/* test for TD-20612  end*/</comment>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>,
                    <argument><expr><literal type="string">"create stable if not exists st1 (ts timestamp, c1 int, c2 float, c3 binary(16)) tags(t1 int, t3 "</literal>
                    <literal type="string">"nchar(8), t4 bool)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table st1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create table if not exists ct0 using st1 tags(1000, \"ttt\", true)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create child table tu1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"insert into ct0 values(1626006833400, 1, 2, 'a')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to insert into ct0, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create table if not exists ct1 using st1(t1) tags(2000)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create child table ct1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create table if not exists ct2 using st1(t1) tags(NULL)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create child table ct2, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"insert into ct1 values(1626006833600, 3, 4, 'b')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to insert into ct1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create table if not exists ct3 using st1(t1) tags(3000)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create child table ct3, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"insert into ct3 values(1626006833600, 5, 6, 'c') ct1 values(1626006833601, 2, 3, 'sds') (1626006833602, 4, 5, 'ddd') ct0 values(1626006833603, 4, 3, 'hwj') ct1 values(now+5s, 23, 32, 's21ds')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to insert into ct3, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"alter table st1 add column c4 bigint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to alter super table st1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"alter table st1 modify column c3 binary(64)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to alter super table st1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"insert into ct3 values(1626006833605, 53, 63, 'cffffffffffffffffffffffffffff', 8989898899999) (1626006833609, 51, 62, 'c333', 940)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to insert into ct3, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"insert into ct3 select * from ct1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to insert into ct3, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"alter table st1 add tag t2 binary(64)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to alter super table st1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"alter table ct3 set tag t1=5000"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to slter child table ct3, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"delete from abc1   .ct3 where ts &lt; 1626006833606"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to insert into ct3, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>g_conf</name><operator>.</operator><name>dropTable</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"drop table ct3 ct1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to drop child table ct3, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"drop table st1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to drop super table st1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create table if not exists n1(ts timestamp, c1 int, c2 nchar(4))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create normal table n1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"alter table n1 add column c3 bigint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to alter normal table n1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"alter table n1 modify column c2 nchar(8)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to alter normal table n1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"alter table n1 rename column c3 cc3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to alter normal table n1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"alter table n1 comment 'hello'"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to alter normal table n1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"alter table n1 drop column c1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to alter normal table n1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"insert into n1 values(now, 'eeee', 8989898899999) (now+9s, 'c333', 940)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to insert into n1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>g_conf</name><operator>.</operator><name>dropTable</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"drop table n1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to drop normal table n1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create table jt(ts timestamp, i int) tags(t json)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table jt, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create table jt1 using jt tags('{\"k1\":1, \"k2\":\"hello\"}')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table jt, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create table jt2 using jt tags('')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table jt2, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"insert into jt1 values(now, 1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table jt1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"insert into jt2 values(now, 11)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table jt2, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>g_conf</name><operator>.</operator><name>dropTable</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>,
                      <argument><expr><literal type="string">"create stable if not exists st1 (ts timestamp, c1 int, c2 float, c3 binary(16)) tags(t1 int, t3 "</literal>
                      <literal type="string">"nchar(8), t4 bool)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table st1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"drop table st1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to drop super table st1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>,
                    <argument><expr><literal type="string">"create stable if not exists stt (ts timestamp, c1 int, c2 float, c3 binary(16)) tags(t1 int, t3 "</literal>
                    <literal type="string">"nchar(8), t4 bool)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table stt, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>,
                    <argument><expr><literal type="string">"create stable if not exists sttb (ts timestamp, c1 int, c2 float, c3 binary(16)) tags(t1 int, t3 "</literal>
                    <literal type="string">"nchar(8), t4 bool)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table sttb, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create table if not exists stt1 using stt tags(2, \"stt1\", true) sttb1 using sttb tags(4, \"sttb1\", true) "</literal>
                    <literal type="string">"stt2 using stt tags(43, \"stt2\", false) sttb2 using sttb tags(54, \"sttb2\", true)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create child table stt1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"insert into stt3 using stt tags(23, \"stt3\", true) values(now + 1s, 1, 2, 'stt3') sttb3 using sttb tags(4, \"sttb3\", true) values(now + 2s, 13, 22, 'sttb3') "</literal>
                           <literal type="string">"stt4 using stt tags(433, \"stt4\", false) values(now + 3s, 21, 21, 'stt4') sttb4 using sttb tags(543, \"sttb4\", true) values(now + 4s, 16, 25, 'sttb4')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create child table stt1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>buildStable</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>pConn</name></decl></parameter>, <parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pRes</name></decl></parameter>)</parameter_list><block>{<block_content>
  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"CREATE STABLE `meters` (`ts` TIMESTAMP, `current` FLOAT, `voltage` INT, `phase` FLOAT) TAGS (`groupid` INT, `location` VARCHAR(16))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table meters, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create table d0 using meters tags(1, 'San Francisco')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create child table d0, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create table d1 using meters tags(2, 'Beijing')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create child table d1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create stream meters_summary_s into meters_summary as select _wstart, max(current) as current, groupid, location from meters partition by groupid, location interval(10m)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table meters_summary, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"insert into d0 (ts, current) values (now, 120)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to insert into table d0, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>init_env</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists db_taosx"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in drop db_taosx, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"create database if not exists db_taosx vgroups %d"</literal></expr></argument>, <argument><expr><name><name>g_conf</name><operator>.</operator><name>dstVgroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in create db_taosx, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"drop topic if exists topic_db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in drop topic, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"drop topic if exists meters_summary_t1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in drop topic, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists abc1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in drop db, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><literal type="string">"create database if not exists abc1 vgroups %d"</literal></expr></argument>, <argument><expr><name><name>g_conf</name><operator>.</operator><name>srcVgroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in create db, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"use abc1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in use db, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>g_conf</name><operator>.</operator><name>subTable</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>buildStable</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>buildDatabase</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>create_topic</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"create topic\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pRes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type>     <name>pConn</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"use abc1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in use db, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>g_conf</name><operator>.</operator><name>subTable</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create topic meters_summary_t1 with meta as stable meters_summary"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create topic meters_summary_t1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><literal type="string">"create topic topic_db with meta as database abc1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create topic topic_db, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>tmq_commit_cb_print</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>code</name></decl></parameter>, <parameter><decl><type><name>void</name><modifier>*</modifier></type> <name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"commit %d tmq %p param %p\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>tmq_t</name><modifier>*</modifier></type> <name>build_consumer</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_conf_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><call><name>tmq_conf_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"group.id"</literal></expr></argument>, <argument><expr><literal type="string">"tg2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"client.id"</literal></expr></argument>, <argument><expr><literal type="string">"my app 1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"td.connect.user"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"td.connect.pass"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"msg.with.table.name"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"enable.auto.commit"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"enable.heartbeat.background"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>g_conf</name><operator>.</operator><name>snapShot</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"experimental.snapshot.enable"</literal></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>tmq_conf_set_auto_commit_cb</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>tmq_commit_cb_print</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name> <init>= <expr><call><name>tmq_consumer_new</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_destroy</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tmq</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>build_topic_list</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>topic_list</name> <init>= <expr><call><name>tmq_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if<condition>(<expr><name><name>g_conf</name><operator>.</operator><name>subTable</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>tmq_list_append</name><argument_list>(<argument><expr><name>topic_list</name></expr></argument>, <argument><expr><literal type="string">"meters_summary_t1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>tmq_list_append</name><argument_list>(<argument><expr><name>topic_list</name></expr></argument>, <argument><expr><literal type="string">"topic_db"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <return>return <expr><name>topic_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>basic_consume_loop</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>topics</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>code</name> <operator>=</operator> <call><name>tmq_subscribe</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>topics</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%% Failed to start consuming topics: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"subscribe err\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>cnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>running</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>tmqmessage</name> <init>= <expr><call><name>tmq_consumer_poll</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmqmessage</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>cnt</name><operator>++</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>msg_process</name><argument_list>(<argument><expr><name>tmqmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>tmqmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><else>else<block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>tmq_consumer_close</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%% Failed to close consumer: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%% Consumer closed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>initLogFile</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>f1</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>f2</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>g_conf</name><operator>.</operator><name>snapShot</name></name></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><literal type="string">"%s/../log/tmq_taosx_tmp_snapshot.source"</literal></expr></argument>, <argument><expr><name><name>g_conf</name><operator>.</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><literal type="string">"%s/../log/tmq_taosx_tmp_snapshot.result"</literal></expr></argument>, <argument><expr><name><name>g_conf</name><operator>.</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><literal type="string">"%s/../log/tmq_taosx_tmp.source"</literal></expr></argument>, <argument><expr><name><name>g_conf</name><operator>.</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><literal type="string">"%s/../log/tmq_taosx_tmp.result"</literal></expr></argument>, <argument><expr><name><name>g_conf</name><operator>.</operator><name>dir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>f1</name></expr></argument>, <argument><expr><name>TD_FILE_TEXT</name> <operator>|</operator> <name>TD_FILE_TRUNC</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s for save result\n"</literal></expr></argument>, <argument><expr><name>f1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>g_fp</name> <operator>=</operator> <name>pFile</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile2</name> <init>= <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name>f2</name></expr></argument>, <argument><expr><name>TD_FILE_TEXT</name> <operator>|</operator> <name>TD_FILE_TRUNC</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFile2</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s for save result\n"</literal></expr></argument>, <argument><expr><name>f2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if<condition>(<expr><name><name>g_conf</name><operator>.</operator><name>snapShot</name></name></expr>)</condition><block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name><name>g_conf</name><operator>.</operator><name>subTable</name></name></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>result</name><index>[]</index></name> <init>= <expr><block>{
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"super\",\"tableName\":\"meters_summary\",\"columns\":[{\"name\":\"_wstart\",\"type\":9},{\"name\":\"current\",\"type\":6},{\"name\":\"groupid\",\"type\":4},{\"name\":\"location\",\"type\":8,\"length\":16}],\"tags\":[{\"name\":\"group_id\",\"type\":14}]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"t_d2a450ee819dcf7576f0282d9ac22dbc\",\"using\":\"meters_summary\",\"tagNum\":1,\"tags\":[{\"name\":\"group_id\",\"type\":14,\"value\":1.313555008277358e+19}],\"createList\":[]}"</literal></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile2</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile2</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>result</name><index>[]</index></name> <init>= <expr><block>{
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"super\",\"tableName\":\"st1\",\"columns\":[{\"name\":\"ts\",\"type\":9},{\"name\":\"c1\",\"type\":4},{\"name\":\"c2\",\"type\":6},{\"name\":\"c3\",\"type\":8,\"length\":64},{\"name\":\"c4\",\"type\":5}],\"tags\":[{\"name\":\"t1\",\"type\":4},{\"name\":\"t3\",\"type\":10,\"length\":8},{\"name\":\"t4\",\"type\":1},{\"name\":\"t2\",\"type\":8,\"length\":64}]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"ct0\",\"using\":\"st1\",\"tagNum\":4,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":1000},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"ttt\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"ct1\",\"using\":\"st1\",\"tagNum\":4,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":2000}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"ct2\",\"using\":\"st1\",\"tagNum\":4,\"tags\":[],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"ct3\",\"using\":\"st1\",\"tagNum\":4,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":5000}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"normal\",\"tableName\":\"n1\",\"columns\":[{\"name\":\"ts\",\"type\":9},{\"name\":\"c2\",\"type\":10,\"length\":8},{\"name\":\"cc3\",\"type\":5}],\"tags\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"super\",\"tableName\":\"jt\",\"columns\":[{\"name\":\"ts\",\"type\":9},{\"name\":\"i\",\"type\":4}],\"tags\":[{\"name\":\"t\",\"type\":15}]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"jt1\",\"using\":\"jt\",\"tagNum\":1,\"tags\":[{\"name\":\"t\",\"type\":15,\"value\":\"{\\\"k1\\\":1,\\\"k2\\\":\\\"hello\\\"}\"}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"jt2\",\"using\":\"jt\",\"tagNum\":1,\"tags\":[],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"super\",\"tableName\":\"stt\",\"columns\":[{\"name\":\"ts\",\"type\":9},{\"name\":\"c1\",\"type\":4},{\"name\":\"c2\",\"type\":6},{\"name\":\"c3\",\"type\":8,\"length\":16}],\"tags\":[{\"name\":\"t1\",\"type\":4},{\"name\":\"t3\",\"type\":10,\"length\":8},{\"name\":\"t4\",\"type\":1}]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"super\",\"tableName\":\"sttb\",\"columns\":[{\"name\":\"ts\",\"type\":9},{\"name\":\"c1\",\"type\":4},{\"name\":\"c2\",\"type\":6},{\"name\":\"c3\",\"type\":8,\"length\":16}],\"tags\":[{\"name\":\"t1\",\"type\":4},{\"name\":\"t3\",\"type\":10,\"length\":8},{\"name\":\"t4\",\"type\":1}]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"stt1\",\"using\":\"stt\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":2},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"stt1\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"sttb1\",\"using\":\"sttb\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":4},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"sttb1\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"stt2\",\"using\":\"stt\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":43},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"stt2\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":0}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"sttb2\",\"using\":\"sttb\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":54},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"sttb2\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"stt3\",\"using\":\"stt\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":23},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"stt3\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"sttb3\",\"using\":\"sttb\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":4},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"sttb3\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"stt4\",\"using\":\"stt\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":433},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"stt4\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":0}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"sttb4\",\"using\":\"sttb\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":543},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"sttb4\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}],\"createList\":[]}"</literal></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile2</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile2</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if><else>else<block>{<block_content>
    <if_stmt><if>if<condition>(<expr><name><name>g_conf</name><operator>.</operator><name>subTable</name></name></expr>)</condition><block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>result</name><index>[]</index></name> <init>= <expr><block>{
        <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"super\",\"tableName\":\"meters_summary\",\"columns\":[{\"name\":\"_wstart\",\"type\":9},{\"name\":\"current\",\"type\":6},{\"name\":\"groupid\",\"type\":4},{\"name\":\"location\",\"type\":8,\"length\":16}],\"tags\":[{\"name\":\"group_id\",\"type\":14}]}"</literal></expr>,
        <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"t_d2a450ee819dcf7576f0282d9ac22dbc\",\"using\":\"meters_summary\",\"tagNum\":1,\"tags\":[{\"name\":\"group_id\",\"type\":14,\"value\":1.313555008277358e+19}],\"createList\":[]}"</literal></expr>
      }</block></expr></init></decl>;</decl_stmt>

      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile2</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile2</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if><else>else<block>{<block_content>
      <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>result</name><index>[]</index></name> <init>= <expr><block>{
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"super\",\"tableName\":\"st1\",\"columns\":[{\"name\":\"ts\",\"type\":9},{\"name\":\"c1\",\"type\":4},{\"name\":\"c2\",\"type\":6},{\"name\":\"c3\",\"type\":8,\"length\":16}],\"tags\":[{\"name\":\"t1\",\"type\":4},{\"name\":\"t3\",\"type\":10,\"length\":8},{\"name\":\"t4\",\"type\":1}]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"ct0\",\"using\":\"st1\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":1000},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"ttt\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"ct1\",\"using\":\"st1\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":2000}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"ct2\",\"using\":\"st1\",\"tagNum\":3,\"tags\":[],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"ct3\",\"using\":\"st1\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":3000}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"alter\",\"tableType\":\"super\",\"tableName\":\"st1\",\"alterType\":5,\"colName\":\"c4\",\"colType\":5}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"alter\",\"tableType\":\"super\",\"tableName\":\"st1\",\"alterType\":7,\"colName\":\"c3\",\"colType\":8,\"colLength\":64}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"alter\",\"tableType\":\"super\",\"tableName\":\"st1\",\"alterType\":1,\"colName\":\"t2\",\"colType\":8,\"colLength\":64}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"alter\",\"tableType\":\"child\",\"tableName\":\"ct3\",\"alterType\":4,\"colName\":\"t1\",\"colValue\":\"5000\",\"colValueNull\":false}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"normal\",\"tableName\":\"n1\",\"columns\":[{\"name\":\"ts\",\"type\":9},{\"name\":\"c1\",\"type\":4},{\"name\":\"c2\",\"type\":10,\"length\":4}],\"tags\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"alter\",\"tableType\":\"normal\",\"tableName\":\"n1\",\"alterType\":5,\"colName\":\"c3\",\"colType\":5}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"alter\",\"tableType\":\"normal\",\"tableName\":\"n1\",\"alterType\":7,\"colName\":\"c2\",\"colType\":10,\"colLength\":8}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"alter\",\"tableType\":\"normal\",\"tableName\":\"n1\",\"alterType\":10,\"colName\":\"c3\",\"colNewName\":\"cc3\"}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"alter\",\"tableType\":\"normal\",\"tableName\":\"n1\",\"alterType\":9}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"alter\",\"tableType\":\"normal\",\"tableName\":\"n1\",\"alterType\":6,\"colName\":\"c1\"}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"super\",\"tableName\":\"jt\",\"columns\":[{\"name\":\"ts\",\"type\":9},{\"name\":\"i\",\"type\":4}],\"tags\":[{\"name\":\"t\",\"type\":15}]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"jt1\",\"using\":\"jt\",\"tagNum\":1,\"tags\":[{\"name\":\"t\",\"type\":15,\"value\":\"{\\\"k1\\\":1,\\\"k2\\\":\\\"hello\\\"}\"}],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"jt2\",\"using\":\"jt\",\"tagNum\":1,\"tags\":[],\"createList\":[]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"super\",\"tableName\":\"stt\",\"columns\":[{\"name\":\"ts\",\"type\":9},{\"name\":\"c1\",\"type\":4},{\"name\":\"c2\",\"type\":6},{\"name\":\"c3\",\"type\":8,\"length\":16}],\"tags\":[{\"name\":\"t1\",\"type\":4},{\"name\":\"t3\",\"type\":10,\"length\":8},{\"name\":\"t4\",\"type\":1}]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"super\",\"tableName\":\"sttb\",\"columns\":[{\"name\":\"ts\",\"type\":9},{\"name\":\"c1\",\"type\":4},{\"name\":\"c2\",\"type\":6},{\"name\":\"c3\",\"type\":8,\"length\":16}],\"tags\":[{\"name\":\"t1\",\"type\":4},{\"name\":\"t3\",\"type\":10,\"length\":8},{\"name\":\"t4\",\"type\":1}]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"stt1\",\"using\":\"stt\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":2},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"stt1\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}],\"createList\":[{\"tableName\":\"stt1\",\"using\":\"stt\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":2},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"stt1\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}]},{\"tableName\":\"sttb1\",\"using\":\"sttb\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":4},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"sttb1\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}]},{\"tableName\":\"stt2\",\"using\":\"stt\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":43},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"stt2\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":0}]},{\"tableName\":\"sttb2\",\"using\":\"sttb\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":54},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"sttb2\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}]}]}"</literal></expr>,
          <expr><literal type="string">"{\"type\":\"create\",\"tableType\":\"child\",\"tableName\":\"stt3\",\"using\":\"stt\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":23},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"stt3\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}],\"createList\":[{\"tableName\":\"stt3\",\"using\":\"stt\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":23},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"stt3\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}]},{\"tableName\":\"sttb3\",\"using\":\"sttb\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":4},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"sttb3\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}]},{\"tableName\":\"stt4\",\"using\":\"stt\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":433},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"stt4\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":0}]},{\"tableName\":\"sttb4\",\"using\":\"sttb\",\"tagNum\":3,\"tags\":[{\"name\":\"t1\",\"type\":4,\"value\":543},{\"name\":\"t3\",\"type\":10,\"value\":\"\\\"sttb4\\\"\"},{\"name\":\"t4\",\"type\":1,\"value\":1}]}]}"</literal></expr>
      }</block></expr></init></decl>;</decl_stmt>

      <for>for<control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>result</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block>{<block_content>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile2</name></expr></argument>, <argument><expr><name><name>result</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile2</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pFile2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>g_conf</name><operator>.</operator><name>dir</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g_conf</name><operator>.</operator><name>dir</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>g_conf</name><operator>.</operator><name>snapShot</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>g_conf</name><operator>.</operator><name>dropTable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-sv"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>g_conf</name><operator>.</operator><name>srcVgroups</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-dv"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>g_conf</name><operator>.</operator><name>dstVgroups</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if><if type="elseif">else if<condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><name><name>g_conf</name><operator>.</operator><name>subTable</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"env init\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if<condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>g_conf</name><operator>.</operator><name>dir</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>initLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><call><name>init_env</name><argument_list>()</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>create_topic</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type>      <name>tmq</name> <init>= <expr><call><name>build_consumer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>topic_list</name> <init>= <expr><call><name>build_topic_list</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>basic_consume_loop</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>topic_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_list_destroy</name><argument_list>(<argument><expr><name>topic_list</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
