<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/utils/test/c/tmqDemo.c"><comment type="block">/*
 * Copyright (c) 2019 TAOS Data, Inc. &lt;jhtao@taosdata.com&gt;
 *
 * This program is free software: you can use, redistribute, and/or modify
 * it under the terms of the GNU Affero General Public License, version 3
 * or later ("AGPL"), as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see &lt;http://www.gnu.org/licenses/&gt;.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<comment type="line">// #include &lt;unistd.h&gt;</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tlog.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GREEN</name></cpp:macro>     <cpp:value>"\033[1;32m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>NC</name></cpp:macro>        <cpp:value>"\033[0m"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>min</name><parameter_list>(<parameter><type><name>a</name></type></parameter>, <parameter><type><name>b</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((a) &lt; (b)) ? (a) : (b))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_SQL_STR_LEN</name></cpp:macro> <cpp:value>(1024 * 1024)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_ROW_STR_LEN</name></cpp:macro> <cpp:value>(16 * 1024)</cpp:value></cpp:define>

<enum>enum <name>_RUN_MODE</name> <block>{
  <decl><name>TMQ_RUN_INSERT_AND_CONSUME</name></decl>,
  <decl><name>TMQ_RUN_ONLY_INSERT</name></decl>,
  <decl><name>TMQ_RUN_ONLY_CONSUME</name></decl>,
  <decl><name>TMQ_RUN_MODE_BUTT</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>char</name></type>    <name><name>dbName</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>stbName</name><index>[<expr><literal type="number">64</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>resultFileName</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>    <name><name>vnodeWalPath</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfThreads</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfTables</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfVgroups</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>runMode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>numOfColumn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>ratio</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>batchNumOfRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalRowsOfPerTbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>startTimestamp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>showMsgFlag</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>simCase</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalRowsOfT2</name></decl>;</decl_stmt>
}</block></struct></type> <name>SConfInfo</name>;</typedef>

<decl_stmt><decl><type><specifier>static</specifier> <name>SConfInfo</name></type> <name>g_stConfInfo</name> <init>= <expr><block>{
    <expr><literal type="string">"tmqdb"</literal></expr>,
    <expr><literal type="string">"stb"</literal></expr>,
    <expr><literal type="string">"./tmqResult.txt"</literal></expr>,  <comment type="line">// output_file</comment>
    <expr><literal type="string">""</literal></expr>,                 <comment type="line">// /data2/dnode/data/vnode/vnode2/wal",</comment>
    <expr><literal type="number">1</literal></expr>,                  <comment type="line">// threads</comment>
    <expr><literal type="number">1</literal></expr>,                  <comment type="line">// tables</comment>
    <expr><literal type="number">1</literal></expr>,                  <comment type="line">// vgroups</comment>
    <expr><literal type="number">0</literal></expr>,                  <comment type="line">// run mode</comment>
    <expr><literal type="number">1</literal></expr>,                  <comment type="line">// columns</comment>
    <expr><literal type="number">1</literal></expr>,                  <comment type="line">// ratio</comment>
    <expr><literal type="number">1</literal></expr>,                  <comment type="line">// batch size</comment>
    <expr><literal type="number">10000</literal></expr>,              <comment type="line">// total rows for per table</comment>
    <expr><literal type="number">0</literal></expr>,                  <comment type="line">// 2020-01-01 00:00:00.000</comment>
    <expr><literal type="number">0</literal></expr>,                  <comment type="line">// show consume msg switch</comment>
    <expr><literal type="number">0</literal></expr>,                  <comment type="line">// if run in sim case</comment>
    <expr><literal type="number">10000</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>     <name>g_pRowValue</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>TdFilePtr</name></type> <name>g_fp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printHelp</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>indent</name><index>[<expr><literal type="number">10</literal></expr>]</index></name> <init>= <expr><literal type="string">"        "</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Used to test the performance while create table\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"Configuration directory, default is "</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"The name of the database to be created, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"The name of the super table to be created, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-f"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"The file of result, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>resultFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-w"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"The path of vnode of wal, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>vnodeWalPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"numOfThreads, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThreads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"numOfTables, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"numOfVgroups, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfVgroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-a"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"runMode, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>runMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"numOfColumn, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%f\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"ratio, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"batchNumOfRow, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>batchNumOfRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-r"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"totalRowsOfPerTbl, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%"</literal> <name>PRId64</name> <literal type="string">"\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"startTimestamp, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>startTimestamp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-g"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"showMsgFlag, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showMsgFlag</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"-sim"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s%s%s%d\n"</literal></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><name>indent</name></expr></argument>, <argument><expr><literal type="string">"simCase, default is "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>simCase</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_SUCCESS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parseArgument</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>startTimestamp</name></name> <operator>=</operator> <literal type="number">1640966400000</literal></expr>;</expr_stmt>  <comment type="line">// 2020-01-01 00:00:00.000</comment>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-h"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"--help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printHelp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-d"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-c"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name>configDir</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>PATH_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-s"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-w"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>vnodeWalPath</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>vnodeWalPath</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-f"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>tstrncpy</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>resultFileName</name></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>resultFileName</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-t"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThreads</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-n"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfTables</name></name> <operator>=</operator> <call><name>atoll</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-v"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfVgroups</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-a"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>runMode</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-b"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>batchNumOfRow</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-r"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-l"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfColumn</name></name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-q"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>ratio</name></name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-m"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>startTimestamp</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-g"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>showMsgFlag</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"-sim"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>simCase</name></name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s unknow para: %s %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><operator>++</operator><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfT2</name></name> <operator>=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name> <operator>*</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>ratio</name></name></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  pPrint("%s configDir:%s %s", GREEN, configDir, NC);
  pPrint("%s dbName:%s %s", GREEN, g_stConfInfo.dbName, NC);
  pPrint("%s stbName:%s %s", GREEN, g_stConfInfo.stbName, NC);
  pPrint("%s resultFileName:%s %s", GREEN, g_stConfInfo.resultFileName, NC);
  pPrint("%s vnodeWalPath:%s %s", GREEN, g_stConfInfo.vnodeWalPath, NC);
  pPrint("%s numOfTables:%d %s", GREEN, g_stConfInfo.numOfTables, NC);
  pPrint("%s numOfThreads:%d %s", GREEN, g_stConfInfo.numOfThreads, NC);
  pPrint("%s numOfVgroups:%d %s", GREEN, g_stConfInfo.numOfVgroups, NC);
  pPrint("%s runMode:%d %s", GREEN, g_stConfInfo.runMode, NC);
  pPrint("%s ratio:%f %s", GREEN, g_stConfInfo.ratio, NC);
  pPrint("%s numOfColumn:%d %s", GREEN, g_stConfInfo.numOfColumn, NC);
  pPrint("%s batchNumOfRow:%d %s", GREEN, g_stConfInfo.batchNumOfRow, NC);
  pPrint("%s totalRowsOfPerTbl:%d %s", GREEN, g_stConfInfo.totalRowsOfPerTbl, NC);
  pPrint("%s totalRowsOfT2:%d %s", GREEN, g_stConfInfo.totalRowsOfT2, NC);
  pPrint("%s startTimestamp:%" PRId64" %s", GREEN, g_stConfInfo.startTimestamp, NC);
  pPrint("%s showMsgFlag:%d %s", GREEN, g_stConfInfo.showMsgFlag, NC);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>running</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<comment type="block">/*static void msg_process(tmq_message_t* message) { tmqShowMsg(message); }*/</comment>

<comment type="line">// calc dir size (not include itself 4096Byte)</comment>
<function><type><name>int64_t</name></type> <name>getDirectorySize</name><parameter_list>(<parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dir</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TdDirPtr</name></type>      <name>pDir</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TdDirEntryPtr</name></type> <name>pDirEntry</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type>       <name>totalSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>pDir</name> <operator>=</operator> <call><name>taosOpenDir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Cannot open dir: %s\n"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// lstat(dir, &amp;statbuf);</comment>
  <comment type="line">// totalSize+=statbuf.st_size;</comment>

  <while>while <condition>(<expr><operator>(</operator><name>pDirEntry</name> <operator>=</operator> <call><name>taosReadDir</name><argument_list>(<argument><expr><name>pDir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type>  <name><name>subdir</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>fileName</name> <init>= <expr><call><name>taosGetDirEntryName</name><argument_list>(<argument><expr><name>pDirEntry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>subdir</name></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// printf("===d_name: %s\n", entry-&gt;d_name);</comment>
    <if_stmt><if>if <condition>(<expr><call><name>taosIsDir</name><argument_list>(<argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">"."</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <call><name>strcmp</name><argument_list>(<argument><expr><literal type="string">".."</literal></expr></argument>, <argument><expr><name>fileName</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <continue>continue;</continue>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type> <name>subDirSize</name> <init>= <expr><call><name>getDirectorySize</name><argument_list>(<argument><expr><name>subdir</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>totalSize</name> <operator>+=</operator> <name>subDirSize</name></expr>;</expr_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <call><name>strcmp</name><argument_list>(<argument><expr><call><name>strchr</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">".log"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>  <comment type="line">// only calc .log file size, and not include .idx file</comment>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>file_size</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>taosStatFile</name><argument_list>(<argument><expr><name>subdir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>file_size</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>totalSize</name> <operator>+=</operator> <name>file_size</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>taosCloseDir</name><argument_list>(<argument><expr><operator>&amp;</operator><name>pDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>totalSize</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>queryDB</name><parameter_list>(<parameter><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>command</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"failed to reason:%s, sql: %s"</literal></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>command</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>init_env</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sqlStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name></expr></argument>, <argument><expr><literal type="string">"create database if not exists %s vgroups %d"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfVgroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in create db, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name></expr></argument>, <argument><expr><literal type="string">"use %s"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in use db, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// create row value</comment>
  <expr_stmt><expr><name>g_pRowValue</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfColumn</name></name> <operator>*</operator> <literal type="number">16</literal> <operator>+</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>g_pRowValue</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sqlLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>sqlLen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name> <operator>+</operator> <name>sqlLen</name></expr></argument>, <argument><expr><literal type="string">"create stable if not exists %s (ts timestamp, "</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfColumn</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfColumn</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>sqlLen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name> <operator>+</operator> <name>sqlLen</name></expr></argument>, <argument><expr><literal type="string">"c%d int) "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>g_pRowValue</name> <operator>+</operator> <name>dataLen</name></expr></argument>, <argument><expr><literal type="string">"66778899"</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"66778899"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"66778899"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>sqlLen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name> <operator>+</operator> <name>sqlLen</name></expr></argument>, <argument><expr><literal type="string">"c%d int, "</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>g_pRowValue</name> <operator>+</operator> <name>dataLen</name></expr></argument>, <argument><expr><literal type="string">"66778899, "</literal></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"66778899, "</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>dataLen</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><literal type="string">"66778899, "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>sqlLen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name> <operator>+</operator> <name>sqlLen</name></expr></argument>, <argument><expr><literal type="string">"tags (t0 int)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create super table %s, reason:%s\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfTables</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name></expr></argument>, <argument><expr><literal type="string">"create table if not exists %s%d using %s tags(1)"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create child table %s%d, reason:%s\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">// const char* sql = "select * from tu1";</comment>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name></expr></argument>, <argument><expr><literal type="string">"create topic test_stb_topic_1 as select ts,c0 from %s"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="block">/*pRes = tmq_create_topic(pConn, "test_stb_topic_1", sqlStr, strlen(sqlStr));*/</comment>
  <expr_stmt><expr><name>pRes</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create topic test_stb_topic_1, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>tmq_t</name><modifier>*</modifier></type> <name>build_consumer</name><parameter_list>()</parameter_list> <block>{<block_content>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  char sqlStr[1024] = {0};
  
  TAOS* pConn = taos_connect(NULL, "root", "taosdata", NULL, 0);
  assert(pConn != NULL);

  sprintf(sqlStr, "use %s", g_stConfInfo.dbName);
  TAOS_RES* pRes = taos_query(pConn, sqlStr);
  if (taos_errno(pRes) != 0) {
    printf("error in use db, reason:%s\n", taos_errstr(pRes));
  }
  taos_free_result(pRes);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <decl_stmt><decl><type><name>tmq_conf_t</name><modifier>*</modifier></type> <name>conf</name> <init>= <expr><call><name>tmq_conf_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"group.id"</literal></expr></argument>, <argument><expr><literal type="string">"tg2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"td.connect.user"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"td.connect.pass"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_set</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><literal type="string">"td.connect.db"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name> <init>= <expr><call><name>tmq_consumer_new</name><argument_list>(<argument><expr><name>conf</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>tmq_conf_destroy</name><argument_list>(<argument><expr><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>tmq</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>build_topic_list</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>topic_list</name> <init>= <expr><call><name>tmq_list_new</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>tmq_list_append</name><argument_list>(<argument><expr><name>topic_list</name></expr></argument>, <argument><expr><literal type="string">"test_stb_topic_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>topic_list</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sync_consume_loop</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>topics</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>int</name></type> <name>MIN_COMMIT_COUNT</name> <init>= <expr><literal type="number">1000</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type>     <name>msg_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tmq_subscribe</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>topics</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%% Failed to start consuming topics: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <while>while <condition>(<expr><name>running</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>tmqmessage</name> <init>= <expr><call><name>tmq_consumer_poll</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmqmessage</name></expr>)</condition> <block>{<block_content>
      <comment type="block">/*msg_process(tmqmessage);*/</comment>
      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>tmqmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>++</operator><name>msg_count</name> <operator>%</operator> <name>MIN_COMMIT_COUNT</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>tmq_commit_sync</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tmq_consumer_close</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition><block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%% Failed to close consumer: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
  <else>else<block type="pseudo"><block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%% Consumer closed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>perf_loop</name><parameter_list>(<parameter><decl><type><name>tmq_t</name><modifier>*</modifier></type> <name>tmq</name></decl></parameter>, <parameter><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>topics</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>totalMsgs</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>walLogSize</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>err</name></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>err</name> <operator>=</operator> <call><name>tmq_subscribe</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>topics</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%% Failed to start consuming topics: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"subscribe err\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <comment type="block">/*taosSsleep(3);*/</comment>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>batchCnt</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>startTime</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>running</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>tmqmessage</name> <init>= <expr><call><name>tmq_consumer_poll</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><literal type="number">3000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>tmqmessage</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>batchCnt</name><operator>++</operator></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>showMsgFlag</name></name></expr>)</condition> <block>{<block_content>
        <comment type="block">/*msg_process(tmqmessage);*/</comment>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>tmqmessage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></while>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>endTime</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type>  <name>consumeTime</name> <init>= <expr><operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>endTime</name> <operator>-</operator> <name>startTime</name><operator>)</operator> <operator>/</operator> <literal type="number">1000000</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name>batchCnt</name> <operator>!=</operator> <name>totalMsgs</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s inserted msgs: %d and consume msgs: %d mismatch %s"</literal></expr></argument>, <argument><expr><name>GREEN</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><name>batchCnt</name></expr></argument>, <argument><expr><name>NC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="block">/*exit(-1);*/</comment>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>simCase</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"consume result: msgs: %d, time used:%.3f second\n"</literal></expr></argument>, <argument><expr><name>batchCnt</name></expr></argument>, <argument><expr><name>consumeTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"{consume success: %d}"</literal></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"|%10d    |   %10.3f    |  %8.2f  |  %10.2f|    %10.2f    |\n"</literal></expr></argument>, <argument><expr><name>batchCnt</name></expr></argument>, <argument><expr><name>consumeTime</name></expr></argument>,
                  <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>batchCnt</name> <operator>/</operator> <name>consumeTime</name></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>walLogSize</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024.0</literal><operator>)</operator> <operator>/</operator> <name>consumeTime</name></expr></argument>,
                  <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>walLogSize</name> <operator>/</operator> <literal type="number">1024.0</literal> <operator>/</operator> <name>batchCnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>tmq_consumer_close</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>err</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%% Failed to close consumer: %s\n"</literal></expr></argument>, <argument><expr><call><name>tmq_err2str</name><argument_list>(<argument><expr><name>err</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="line">// sync insertion</comment>
<function><type><name>int32_t</name></type> <name>syncWriteData</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>sqlStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name></expr></argument>, <argument><expr><literal type="string">"use %s"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in use db, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_SQL_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buffer</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>time_counter</name> <init>= <expr><name><name>g_stConfInfo</name><operator>.</operator><name>startTimestamp</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>tID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>tID</name> <operator>&lt;=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfTables</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>tID</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>int</name></type>     <name>inserted</name> <init>= <expr><name>i</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int64_t</name></type> <name>tmp_time</name> <init>= <expr><name>time_counter</name></expr></init></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>data_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>data_len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>data_len</name></expr></argument>, <argument><expr><literal type="string">"insert into %s%d values"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><name>tID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>batchNumOfRow</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><name>data_len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>data_len</name></expr></argument>, <argument><expr><literal type="string">"(%"</literal> <name>PRId64</name> <literal type="string">", %s) "</literal></expr></argument>, <argument><expr><name>tmp_time</name><operator>++</operator></expr></argument>, <argument><expr><name>g_pRowValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>inserted</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>inserted</name> <operator>&gt;=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>data_len</name> <operator>&gt;</operator> <name>MAX_SQL_STR_LEN</name> <operator>-</operator> <name>MAX_ROW_STR_LEN</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>queryDB</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"insert data error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>totalMsgs</name><operator>++</operator></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name>tID</name> <operator>==</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfTables</name></name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>i</name> <operator>=</operator> <name>inserted</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>time_counter</name> <operator>=</operator> <name>tmp_time</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>totalMsgs</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// sync insertion</comment>
<function><type><name>int32_t</name></type> <name>syncWriteDataByRatio</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>pConn</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>pConn</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>char</name></type> <name><name>sqlStr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlStr</name></expr></argument>, <argument><expr><literal type="string">"use %s"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>pRes</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>sqlStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"error in use db, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>pRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>buffer</name> <operator>=</operator> <operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_SQL_STR_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>buffer</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>insertedOfT1</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>insertedOfT2</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsOfT1</name> <init>= <expr><name><name>g_stConfInfo</name><operator>.</operator><name>startTimestamp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tsOfT2</name> <init>= <expr><name><name>g_stConfInfo</name><operator>.</operator><name>startTimestamp</name></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>tmp_time</name></decl>;</decl_stmt>

  <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>insertedOfT1</name> <operator>&gt;=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name>insertedOfT2</name> <operator>&gt;=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfT2</name></name><operator>)</operator></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>tID</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>tID</name> <operator>&lt;=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfTables</name></name> <operator>-</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><name>tID</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>tID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tmp_time</name> <operator>=</operator> <name>tsOfT1</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>insertedOfT1</name> <operator>&gt;=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>tID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tmp_time</name> <operator>=</operator> <name>tsOfT2</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>insertedOfT2</name> <operator>&gt;=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfT2</name></name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <decl_stmt><decl><type><name>int32_t</name></type> <name>data_len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>data_len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>data_len</name></expr></argument>, <argument><expr><literal type="string">"insert into %s%d values"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>, <argument><expr><name>tID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
      <for>for <control>(<init><expr><name>k</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>k</name> <operator>&lt;</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>batchNumOfRow</name></name></expr>;</condition><incr/>)</control> <block>{<block_content>
        <expr_stmt><expr><name>data_len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buffer</name> <operator>+</operator> <name>data_len</name></expr></argument>, <argument><expr><literal type="string">"(%"</literal> <name>PRId64</name> <literal type="string">", %s) "</literal></expr></argument>, <argument><expr><name>tmp_time</name><operator>++</operator></expr></argument>, <argument><expr><name>g_pRowValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>k</name><operator>++</operator></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>tID</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>insertedOfT1</name><operator>++</operator></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>insertedOfT1</name> <operator>&gt;=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>tID</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>insertedOfT2</name><operator>++</operator></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>insertedOfT2</name> <operator>&gt;=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfT2</name></name></expr>)</condition> <block>{<block_content>
            <break>break;</break>
          </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>data_len</name> <operator>&gt;</operator> <name>MAX_SQL_STR_LEN</name> <operator>-</operator> <name>MAX_ROW_STR_LEN</name></expr>)</condition> <block>{<block_content>
          <break>break;</break>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>queryDB</name><argument_list>(<argument><expr><name>pConn</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>!=</operator> <name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"insert data error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>tID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsOfT1</name> <operator>=</operator> <name>tmp_time</name></expr>;</expr_stmt>
      </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>tID</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>tsOfT2</name> <operator>=</operator> <name>tmp_time</name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><name>totalMsgs</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>
  <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"expect insert rows: T1[%d] T2[%d], actual insert rows: T1[%d] T2[%d]\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name></expr></argument>,
         <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfT2</name></name></expr></argument>, <argument><expr><name>insertedOfT1</name></expr></argument>, <argument><expr><name>insertedOfT2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>totalMsgs</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>printParaIntoFile</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// FILE *fp = fopen(g_stConfInfo.resultFileName, "a");</comment>
  <decl_stmt><decl><type><name>TdFilePtr</name></type> <name>pFile</name> <init>=
      <expr><call><name>taosOpenFile</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>resultFileName</name></name></expr></argument>, <argument><expr><name>TD_FILE_CREATE</name> <operator>|</operator> <name>TD_FILE_WRITE</name> <operator>|</operator> <name>TD_FILE_APPEND</name> <operator>|</operator> <name>TD_FILE_STREAM</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>pFile</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to open %s for save result\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>resultFileName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><name>g_fp</name> <operator>=</operator> <name>pFile</name></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>time_t</name></type>    <name>tTime</name> <init>= <expr><call><name>taosGetTimestampSec</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>tm</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosLocalTime</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"###################################################################\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# configDir:                %s\n"</literal></expr></argument>, <argument><expr><name>configDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# dbName:                   %s\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>dbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# stbName:                  %s\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>stbName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# vnodeWalPath:             %s\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>vnodeWalPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# numOfTables:              %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfTables</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# numOfThreads:             %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfThreads</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# numOfVgroups:             %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfVgroups</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# runMode:                  %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>runMode</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# ratio:                    %f\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>ratio</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# numOfColumn:              %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>numOfColumn</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# batchNumOfRow:            %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>batchNumOfRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# totalRowsOfPerTbl:        %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# totalRowsOfT2:            %d\n"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfT2</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"# Test time:                %d-%02d-%02d %02d:%02d:%02d\n"</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_year</name></name> <operator>+</operator> <literal type="number">1900</literal></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mon</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>,
                  <argument><expr><name><name>tm</name><operator>.</operator><name>tm_mday</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_hour</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_min</name></name></expr></argument>, <argument><expr><name><name>tm</name><operator>.</operator><name>tm_sec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><literal type="string">"###################################################################\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>,
                  <argument><expr><literal type="string">"|-------------------------------insert "</literal>
                  <literal type="string">"info-----------------------------|--------------------------------consume "</literal>
                  <literal type="string">"info---------------------------------|\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>,
                  <argument><expr><literal type="string">"|batch size| insert msgs | insert time(s) |   msgs/s   | walLogSize(MB) | consume msgs | consume "</literal>
                  <literal type="string">"time(s) |   msgs/s   |    MB/s    | avg msg size(KB) |\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"|%10d"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>batchNumOfRow</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>parseArgument</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printParaIntoFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>walLogSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>init_env</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%% init_env error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>totalMsgs</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>g_stConfInfo</name><operator>.</operator><name>runMode</name></name> <operator>!=</operator> <name>TMQ_RUN_ONLY_CONSUME</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>startTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>ratio</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>totalMsgs</name> <operator>=</operator> <call><name>syncWriteData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>totalMsgs</name> <operator>=</operator> <call><name>syncWriteDataByRatio</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>totalMsgs</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pError</name><argument_list>(<argument><expr><literal type="string">"inset data error!\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>endTs</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>delay</name> <init>= <expr><name>endTs</name> <operator>-</operator> <name>startTs</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>totalRows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>ratio</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>totalRows</name> <operator>=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name> <operator>*</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>numOfTables</name></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>totalRows</name> <operator>=</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>totalRowsOfPerTbl</name></name> <operator>*</operator> <operator>(</operator><literal type="number">1</literal> <operator>+</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>ratio</name></name><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <decl_stmt><decl><type><name>float</name></type> <name>seconds</name> <init>= <expr><name>delay</name> <operator>/</operator> <literal type="number">1000000.0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>rowsSpeed</name> <init>= <expr><name>totalRows</name> <operator>/</operator> <name>seconds</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type> <name>msgsSpeed</name> <init>= <expr><name>totalMsgs</name> <operator>/</operator> <name>seconds</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>(</operator><literal type="number">0</literal> <operator>==</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>simCase</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>vnodeWalPath</name></name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>walLogSize</name> <operator>=</operator> <call><name>getDirectorySize</name><argument_list>(<argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>vnodeWalPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>walLogSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s size incorrect!"</literal></expr></argument>, <argument><expr><name><name>g_stConfInfo</name><operator>.</operator><name>vnodeWalPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">".log file size in vnode2/wal: %.3f MBytes\n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>walLogSize</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>g_stConfInfo</name><operator>.</operator><name>simCase</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>pPrint</name><argument_list>(<argument><expr><literal type="string">"insert result: %d rows, %d msgs, time:%.3f sec, speed:%.1f rows/second, %.1f msgs/second\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>,
             <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>rowsSpeed</name></expr></argument>, <argument><expr><name>msgsSpeed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"|%10d   |   %10.3f   |  %8.2f  |   %10.3f   "</literal></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><name>seconds</name></expr></argument>, <argument><expr><name>msgsSpeed</name></expr></argument>,
                    <argument><expr><operator>(</operator><name>double</name><operator>)</operator><name>walLogSize</name> <operator>/</operator> <operator>(</operator><literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024.0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>g_stConfInfo</name><operator>.</operator><name>runMode</name></name> <operator>==</operator> <name>TMQ_RUN_ONLY_INSERT</name></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>tmq_t</name><modifier>*</modifier></type>      <name>tmq</name> <init>= <expr><call><name>build_consumer</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>tmq_list_t</name><modifier>*</modifier></type> <name>topic_list</name> <init>= <expr><call><name>build_topic_list</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name>NULL</name> <operator>==</operator> <name>tmq</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>NULL</name> <operator>==</operator> <name>topic_list</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>perf_loop</name><argument_list>(<argument><expr><name>tmq</name></expr></argument>, <argument><expr><name>topic_list</name></expr></argument>, <argument><expr><name>totalMsgs</name></expr></argument>, <argument><expr><name>walLogSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFreeClear</name><argument_list>(<argument><expr><name>g_pRowValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosFprintfFile</name><argument_list>(<argument><expr><name>g_fp</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosCloseFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>g_fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
