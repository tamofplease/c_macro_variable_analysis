<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/tests/script/api/stmt_function.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../include/client/taos.h"</cpp:file></cpp:include>

<function><type><name>void</name></type> <name>execute_simple_sql</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>( <expr><name>result</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>( <argument><expr><literal type="string">"failed to %s, Reason: %s\n"</literal></expr></argument> , <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>print_result</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>res</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>TAOS_ROW</name></type>    <name>row</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type>         <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAOS_FIELD</name><modifier>*</modifier></type> <name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>temp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taos_print_row</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"get result: %s\n"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_init_test</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_init test \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ASM ERROR</comment>
	<comment type="line">// assert(taos_stmt_close(stmt) != 0);</comment>
	<expr_stmt><expr><name>taos</name> <operator>=</operator> <call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>,<argument><expr><literal type="string">"root"</literal></expr></argument>,<argument><expr><literal type="string">"taosdata"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot connect to tdengine server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	<expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_init test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
</block_content>}</block></function>
<function><type><name>void</name></type> <name>taos_stmt_preprare_test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_prepare test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stmt_sql</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1048576</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>	
	<expr_stmt><expr><name>taos</name> <operator>=</operator> <call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>,<argument><expr><literal type="string">"root"</literal></expr></argument>,<argument><expr><literal type="string">"taosdata"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if<condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot connect to tdengine server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table super(ts timestamp, c1 int, c2 bigint, c3 float, c4 double, c5 binary(8), c6 smallint, c7 tinyint, c8 bool, c9 nchar(8), c10 timestamp) tags (t1 int, t2 bigint, t3 float, t4 double, t5 binary(8), t6 smallint, t7 tinyint, t8 bool, t9 nchar(8))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// below will make client dead lock</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// assert(taos_stmt_close(stmt) == 0);</comment>
    <comment type="line">// stmt = taos_stmt_init(taos);</comment>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="string">"select from ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="string">"insert into ? values (?,?,?,?,?,?,?,?,?,?,?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="string">"insert into super values (?,?,?,?,?,?,?,?,?,?,?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="string">"insert into ? values (?,?,?,?,?,?,?,?,1,?,?,?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_prepare test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_set_tbname_test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_set_tbname test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// ASM ERROR</comment>
    <comment type="line">// assert(taos_stmt_set_tbname(stmt, name) != 0);</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>,<argument><expr><literal type="string">"root"</literal></expr></argument>,<argument><expr><literal type="string">"taosdata"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot connect to tdengine server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table super(ts timestamp, c1 int)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>stmt_sql</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="string">"insert into ? values (?,?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"super"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_set_tbname test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_set_tbname_tags_test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_set_tbname_tags test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>,<argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAOS_BIND</name> <modifier>*</modifier></type><name>tags</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// ASM ERROR</comment>
    <comment type="line">// assert(taos_stmt_set_tbname_tags(stmt, name, tags) != 0);</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>,<argument><expr><literal type="string">"root"</literal></expr></argument>,<argument><expr><literal type="string">"taosdata"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot connect to tdengine server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create stable super(ts timestamp, c1 int) tags (id int)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table tb using super tags (1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>stmt_sql</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="string">"insert into ? using super tags (?) values (?,?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_set_tbname_tags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"tb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_set_tbname_tags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>tags</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name>t</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>tags</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><operator>-&gt;</operator><name>is_null</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_set_tbname_tags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_set_tbname_tags test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_set_sub_tbname_test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_set_sub_tbname test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">200</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <comment type="line">// ASM ERROR</comment>
    <comment type="line">// assert(taos_stmt_set_sub_tbname(stmt, name) != 0);</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>,<argument><expr><literal type="string">"root"</literal></expr></argument>,<argument><expr><literal type="string">"taosdata"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot connect to tdengine server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create stable super(ts timestamp, c1 int) tags (id int)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table tb using super tags (1)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>stmt_sql</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="string">"insert into ? values (?,?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_set_sub_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="string">"tb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_set_sub_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// assert(taos_load_table_info(taos, "super, tb") == 0);</comment>
    <comment type="line">// assert(taos_stmt_set_sub_tbname(stmt, name) == 0);</comment>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_set_sub_tbname test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_bind_param_test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_bind_param test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAOS_BIND</name> <modifier>*</modifier></type><name>binds</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>binds</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>,<argument><expr><literal type="string">"root"</literal></expr></argument>,<argument><expr><literal type="string">"taosdata"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot connect to tdengine server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table super(ts timestamp, c1 int)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>stmt_sql</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="string">"insert into ? values (?,?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>binds</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>binds</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name>ts</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><literal type="number">21474</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="string">"super"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_bind_param test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_bind_single_param_batch_test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_bind_single_param_batch test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>bind</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>bind</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_bind_single_param_batch test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_bind_param_batch_test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_bind_param_batch test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>bind</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_bind_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>bind</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_bind_param_batch test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_add_batch_test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_add_batch test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>,<argument><expr><literal type="string">"root"</literal></expr></argument>,<argument><expr><literal type="string">"taosdata"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot connect to tdengine server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table super(ts timestamp, c1 int)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>stmt_sql</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="string">"insert into ? values (?,?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name>ts</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><literal type="number">21474</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="string">"super"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_add_batch test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_execute_test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_execute test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>,<argument><expr><literal type="string">"root"</literal></expr></argument>,<argument><expr><literal type="string">"taosdata"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if<condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot connect to tdengine server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table super(ts timestamp, c1 int)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>stmt_sql</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="string">"insert into ? values (?,?)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>ts</name> <init>= <expr><operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name>ts</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><operator>(</operator><name>int32_t</name><operator>)</operator><literal type="number">21474</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="string">"super"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_execute test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_use_result_query</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>col</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>stmt</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stmt_sql</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <struct>struct <block>{
        <decl_stmt><decl><type><name>int64_t</name></type> <name>c1</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>c2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>c3</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>c4</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>c5</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>c6</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int16_t</name></type> <name>c7</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>c8</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>c9</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>c10</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    }</block> <decl><name>v</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c1</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1591060628000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c2</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c3</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c4</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c5</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c6</name></name></expr></argument>, <argument><expr><literal type="string">"abcdefgh"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c7</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c8</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c9</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c10</name></name></expr></argument>, <argument><expr><literal type="string">"ä¸äºä¸åäºå­ä¸å«"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uintptr_t</name></type> <name>c10len</name><init>=<expr><call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c10</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="string">"select * from stmt_test.t1 where %s = ?"</literal></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"stmt_sql: %s\n"</literal></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer_type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>is_null</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <switch>switch<condition>(<expr><name>type</name></expr>)</condition><block>{<block_content>
        <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c1</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c1</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c2</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c2</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt>
        <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c3</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c3</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c4</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c4</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt>
        <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c5</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c5</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c6</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c6</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c7</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c7</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c8</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c8</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt>
        <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c9</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c9</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer_length</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c10</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>buffer</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c10</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>params</name><operator>-&gt;</operator><name>length</name></name> <operator>=</operator> <operator>&amp;</operator><name>c10len</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannnot find type: %d\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>

    </block_content>}</block></switch>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>result</name> <init>= <expr><call><name>taos_stmt_use_result</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>result</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>print_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>stmt_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_use_result_test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_use_result test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>,<argument><expr><literal type="string">"root"</literal></expr></argument>,<argument><expr><literal type="string">"taosdata"</literal></expr></argument>,<argument><expr><name>NULL</name></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if<condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Cannot connect to tdengine server\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use stmt_test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table super(ts timestamp, c1 int, c2 bigint, c3 float, c4 double, c5 binary(8), c6 smallint, c7 tinyint, c8 bool, c9 nchar(8), c10 timestamp) tags (t1 int, t2 bigint, t3 float, t4 double, t5 binary(8), t6 smallint, t7 tinyint, t8 bool, t9 nchar(8))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table t1 using super tags (1, 1, 1, 1, 'abcdefgh',1,1,1,'ä¸äºä¸åäºå­ä¸å«')"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"insert into t1 values (1591060628000, 1, 1, 1, 1, 'abcdefgh',1,1,1,'ä¸äºä¸åäºå­ä¸å«', now)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"insert into t1 values (1591060628001, 1, 1, 1, 1, 'abcdefgh',1,1,1,'ä¸äºä¸åäºå­ä¸å«', now)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>taos_stmt_use_result_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"c1"</literal></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_use_result_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"c2"</literal></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BIGINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_use_result_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"c3"</literal></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_use_result_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"c4"</literal></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_use_result_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"c5"</literal></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BINARY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_use_result_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"c6"</literal></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_use_result_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"c7"</literal></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_TINYINT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_use_result_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"c8"</literal></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_BOOL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_use_result_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"c9"</literal></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_NCHAR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_use_result test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>taos_stmt_close_test</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"start taos_stmt_close test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// ASM ERROR</comment>
    <comment type="line">// TAOS_STMT *stmt = NULL;</comment>
    <comment type="line">// assert(taos_stmt_close(stmt) != 0);</comment>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"finish taos_stmt_close test\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_api_reliability</name><parameter_list>()</parameter_list> <block>{<block_content>
	<comment type="line">// ASM catch memory leak</comment>
    <expr_stmt><expr><call><name>taos_stmt_init_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>taos_stmt_preprare_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_set_tbname_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_set_tbname_tags_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_set_sub_tbname_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_bind_param_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_bind_single_param_batch_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_bind_param_batch_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_add_batch_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_execute_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>test_query</name><parameter_list>()</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>taos_stmt_use_result_test</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>test_api_reliability</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>test_query</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function></unit>
