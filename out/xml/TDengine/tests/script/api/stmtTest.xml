<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/tests/script/api/stmtTest.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../include/client/taos.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_ERROR</name></cpp:macro> <cpp:value>printf("\033[31m");</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PRINT_SUCCESS</name></cpp:macro> <cpp:value>printf("\033[32m");</cpp:value></cpp:define>

<function><type><name>void</name></type> <name>execute_simple_sql</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>( <expr><name>result</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PRINT_ERROR</name></type>
        <name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to %s, Reason: %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>PRINT_SUCCESS</name></type>
    <name>printf</name><argument_list>(<argument><expr><literal type="string">"Successfully %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></decl>;</decl_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>check_result</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>id</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"select * from t%d"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>( <expr><name>result</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PRINT_ERROR</name></type>
        <name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to %s, Reason: %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>PRINT_SUCCESS</name></type>
    <name>printf</name><argument_list>(<argument><expr><literal type="string">"Successfully execute %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>TAOS_ROW</name></type> <name>row</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rows</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <name>expected</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PRINT_SUCCESS</name></type>
        <name>printf</name><argument_list>(<argument><expr><literal type="string">"table t%d's %d rows are fetched as expected\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <decl_stmt><decl><type><name>PRINT_ERROR</name></type>
        <name>printf</name><argument_list>(<argument><expr><literal type="string">"table t%d's %d rows are fetched but %d expected\n"</literal></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>expected</name></expr></argument>)</argument_list></decl>;</decl_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>taos</name> <init>= <expr><call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PRINT_ERROR</name></type>
        <name>printf</name><argument_list>(<argument><expr><literal type="string">"TDengine error: failed to connect\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>PRINT_SUCCESS</name></type>
    <name>printf</name><argument_list>(<argument><expr><literal type="string">"Successfully connected to TDengine\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
    
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table super(ts timestamp, c1 int, c2 bigint, c3 float, c4 double, c5 binary(8), c6 smallint, c7 tinyint, c8 bool, c9 nchar(8), c10 timestamp) tags (t1 int, t2 bigint, t3 float, t4 double, t5 binary(8), t6 smallint, t7 tinyint, t8 bool, t9 nchar(8))"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal><operator>*</operator><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sqlLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>sqlLen</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"create table"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>sqlLen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>sql</name> <operator>+</operator> <name>sqlLen</name></expr></argument>, <argument><expr><literal type="string">" t%d using super tags (%d, 2147483648, 0.1, 0.000000001, 'abcdefgh', 32767, 127, 1, 'ä¸äºä¸åäºå­ä¸å«')"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><call><name>execute_simple_sql</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    

    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_load_table_info</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"t0,t1,t2,t3,t4,t5,t6,t7,t8,t9"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PRINT_ERROR</name></type>
        <name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to load table info: 0x%08x\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>PRINT_SUCCESS</name></type>
    <name>printf</name><argument_list>(<argument><expr><literal type="string">"Successfully load table info\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PRINT_ERROR</name></type>
        <name>printf</name><argument_list>(<argument><expr><literal type="string">"TDengine error: failed to init taos_stmt\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>PRINT_SUCCESS</name></type>
    <name>printf</name><argument_list>(<argument><expr><literal type="string">"Successfully init taos_stmt\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>uintptr_t</name></type> <name>c10len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <struct>struct <block>{
        <decl_stmt><decl><type><name>int64_t</name></type> <name>c1</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int32_t</name></type> <name>c2</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>c3</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>float</name></type> <name>c4</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>double</name></type> <name>c5</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>c6</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int16_t</name></type> <name>c7</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>c8</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int8_t</name></type> <name>c9</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name></type> <name><name>c10</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
    }</block> <decl><name>v</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</struct>
    <decl_stmt><decl><type><name>TAOS_BIND</name></type> <name><name>params</name><index>[<expr><literal type="number">11</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c1</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c2</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c3</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c3</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c4</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c5</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c5</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c6</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c6</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c7</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c7</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c8</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c9</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c9</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c10</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c10</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name>c10len</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c1</name></name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>.</operator><name>c1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>&amp;</operator><name><name>params</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>stmt_sql</name> <init>= <expr><literal type="string">"insert into ? values (?,?,?,?,?,?,?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>stmt_sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <decl_stmt><decl><type><name>PRINT_ERROR</name></type>
        <name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>PRINT_SUCCESS</name></type>
    <name>printf</name><argument_list>(<argument><expr><literal type="string">"Successfully execute taos_stmt_prepare\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>i</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>PRINT_ERROR</name></type>
                <name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>PRINT_SUCCESS</name></type>
            <name>printf</name><argument_list>(<argument><expr><literal type="string">"Successfully execute taos_stmt_set_tbname\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_sub_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>PRINT_ERROR</name></type>
                <name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_sub_tbname. code:0x%x\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>)</argument_list></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>PRINT_SUCCESS</name></type>
            <name>printf</name><argument_list>(<argument><expr><literal type="string">"Successfully execute taos_stmt_set_sub_tbname\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        </block_content>}</block></else></if_stmt>
        
        <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c1</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">1591060628000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c2</name></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><literal type="number">2147483647</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c3</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><literal type="number">2147483648</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c4</name></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><literal type="number">0.1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c5</name></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><literal type="number">0.000000001</literal></expr>;</expr_stmt>
        <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c6</name></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c6</name><index>[<expr><name>j</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><literal type="char">'a'</literal><operator>)</operator></expr>;</expr_stmt>
        </block_content>}</block></for>
        <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c7</name></name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c8</name></name> <operator>=</operator> <literal type="number">127</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>v</name><operator>.</operator><name>c9</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c10</name></name></expr></argument>, <argument><expr><literal type="string">"ä¸äºä¸åäºå­ä¸å«"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>c10len</name><operator>=</operator><call><name>strlen</name><argument_list>(<argument><expr><name><name>v</name><operator>.</operator><name>c10</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>PRINT_ERROR</name></type>
        <name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute insert statement.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>PRINT_SUCCESS</name></type>
    <name>printf</name><argument_list>(<argument><expr><literal type="string">"Successfully execute insert statement.\n"</literal></expr></argument>)</argument_list></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>check_result</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
