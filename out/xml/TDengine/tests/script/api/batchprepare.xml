<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/tests/script/api/batchprepare.c"><comment type="line">// TAOS standard API example. The same syntax as MySQL, but only a subet </comment>
<comment type="line">// to compile: gcc -o prepare prepare.c -ltaos</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../include/client/taos.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_TEST_IDX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_PRECISION_MILLI</name></cpp:macro>   <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_PRECISION_MICRO</name></cpp:macro>   <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>TIME_PRECISION_NANO</name></cpp:macro>    <cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>shortColList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>, <expr><name>TSDB_DATA_TYPE_INT</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>fullColList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>, <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>, <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>, <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>, <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>, <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>, <expr><name>TSDB_DATA_TYPE_INT</name></expr>, <expr><name>TSDB_DATA_TYPE_UINT</name></expr>, <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>, <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>, <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>, <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>, <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>, <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>bindColTypeList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>, <expr><name>TSDB_DATA_TYPE_INT</name></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>optrIdxList</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>oper</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>paramNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>    <name>enclose</name></decl>;</decl_stmt>
}</block></struct></type> <name>OperInfo</name>;</typedef>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>   <name>funcName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>paramNum</name></decl>;</decl_stmt>
}</block></struct></type> <name>FuncInfo</name>;</typedef>

<typedef>typedef <type><enum>enum <block>{
  <decl><name>BP_BIND_TAG</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>BP_BIND_COL</name></decl>,
}</block></enum></type> <name>BP_BIND_TYPE</name>;</typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BP_BIND_TYPE_STR</name><parameter_list>(<parameter><type><name>t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(((t) == BP_BIND_COL) ? "column" : "tag")</cpp:value></cpp:define>

<decl_stmt><decl><type><name>OperInfo</name></type> <name><name>operInfo</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="string">"&gt;"</literal></expr>,        <expr><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"&gt;="</literal></expr>,       <expr><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,  
  <expr><block>{<expr><literal type="string">"&lt;"</literal></expr>,        <expr><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"&lt;="</literal></expr>,       <expr><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,  
  <expr><block>{<expr><literal type="string">"="</literal></expr>,        <expr><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,  
  <expr><block>{<expr><literal type="string">"&lt;&gt;"</literal></expr>,       <expr><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,  
  <expr><block>{<expr><literal type="string">"in"</literal></expr>,       <expr><literal type="number">2</literal></expr>, <expr><name>true</name></expr>}</block></expr>,  
  <expr><block>{<expr><literal type="string">"not in"</literal></expr>,   <expr><literal type="number">2</literal></expr>, <expr><name>true</name></expr>}</block></expr>,  
  
  <expr><block>{<expr><literal type="string">"like"</literal></expr>,     <expr><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,  
  <expr><block>{<expr><literal type="string">"not like"</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,  
  <expr><block>{<expr><literal type="string">"match"</literal></expr>,    <expr><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,  
  <expr><block>{<expr><literal type="string">"nmatch"</literal></expr>,   <expr><literal type="number">2</literal></expr>, <expr><name>false</name></expr>}</block></expr>,  
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name><name>operatorList</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name><name>varoperatorList</name><index>[]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">5</literal></expr>, <expr><literal type="number">6</literal></expr>, <expr><literal type="number">7</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">9</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">11</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>FuncInfo</name></type> <name><name>funcInfo</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="string">"count"</literal></expr>, <expr><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"sum"</literal></expr>,   <expr><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"min"</literal></expr>,   <expr><literal type="number">1</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>BP_STARTUP_TS</name></cpp:macro> <cpp:value>1591060628000</cpp:value></cpp:define>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bpStbPrefix</name> <init>= <expr><literal type="string">"st"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>bpTbPrefix</name> <init>= <expr><literal type="string">"t"</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>bpDefaultStbId</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int64_t</name></type> <name>bpTs</name></decl>;</decl_stmt>

<comment type="line">//char *operatorList[] = {"&gt;", "&gt;=", "&lt;", "&lt;=", "=", "&lt;&gt;", "in", "not in"};</comment>
<comment type="line">//char *varoperatorList[] = {"&gt;", "&gt;=", "&lt;", "&lt;=", "=", "&lt;&gt;", "in", "not in", "like", "not like", "match", "nmatch"};</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>tListLen</name><parameter_list>(<parameter><type><name>x</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(sizeof(x) / sizeof((x)[0]))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_SIGNED_NUMERIC_TYPE</name><parameter_list>(<parameter><type><name>_t</name></type></parameter>)</parameter_list></cpp:macro>   <cpp:value>((_t) &gt;= TSDB_DATA_TYPE_TINYINT &amp;&amp; (_t) &lt;= TSDB_DATA_TYPE_BIGINT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_UNSIGNED_NUMERIC_TYPE</name><parameter_list>(<parameter><type><name>_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((_t) &gt;= TSDB_DATA_TYPE_UTINYINT &amp;&amp; (_t) &lt;= TSDB_DATA_TYPE_UBIGINT)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_FLOAT_TYPE</name><parameter_list>(<parameter><type><name>_t</name></type></parameter>)</parameter_list></cpp:macro>            <cpp:value>((_t) == TSDB_DATA_TYPE_FLOAT || (_t) == TSDB_DATA_TYPE_DOUBLE)</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>IS_NUMERIC_TYPE</name><parameter_list>(<parameter><type><name>_t</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>((IS_SIGNED_NUMERIC_TYPE(_t)) || (IS_UNSIGNED_NUMERIC_TYPE(_t)) || (IS_FLOAT_TYPE(_t)))</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>bool</name></type>       <name>singleTbInsert</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>    <name>singleTbIdx</name></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type>   <name>tsData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name><modifier>*</modifier></type>      <name>boolData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int8_t</name><modifier>*</modifier></type>    <name>tinyData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name><modifier>*</modifier></type>   <name>utinyData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int16_t</name><modifier>*</modifier></type>   <name>smallData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint16_t</name><modifier>*</modifier></type>  <name>usmallData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>   <name>intData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32_t</name><modifier>*</modifier></type>  <name>uintData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name><modifier>*</modifier></type>   <name>bigData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint64_t</name><modifier>*</modifier></type>  <name>ubigData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>float</name><modifier>*</modifier></type>     <name>floatData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name><modifier>*</modifier></type>    <name>doubleData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>      <name>binaryData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>      <name>isNull</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>   <name>binaryLen</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>pBind</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>pTags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type>         <name>sql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type>      <name>colTypes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>       <name>colNum</name></decl>;</decl_stmt>
}</block></struct></type> <name>BindData</name>;</typedef>

<decl_stmt><decl><type><name>int32_t</name></type> <name>gVarCharSize</name> <init>= <expr><literal type="number">10</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int32_t</name></type> <name>gVarCharLen</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>int32_t</name></type> <name>gExecLoopTimes</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt> <comment type="line">// no change</comment>
<decl_stmt><decl><type><name>int32_t</name></type> <name>gFullColNum</name> <init>= <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

<function_decl><type><name>int</name></type> <name>insertMBSETest1</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>insertMBSETest2</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>insertMBMETest1</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>insertMBMETest2</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>insertMBMETest3</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>insertMBMETest4</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>insertMPMETest1</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>insertAUTOTest1</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>insertAUTOTest2</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>insertAUTOTest3</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>queryColumnTest</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>queryMiscTest</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list>;</function_decl>

<enum>enum <block>{
  <decl><name>TTYPE_INSERT</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>,
  <decl><name>TTYPE_QUERY</name></decl>,
}</block>;</enum>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>char</name></type>     <name><name>caseDesc</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>colNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>colList</name></decl>;</decl_stmt>         <comment type="line">// full table column list</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>testType</name></decl>;</decl_stmt>     
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>autoCreateTbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>duplicateValue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>fullCol</name></decl>;</decl_stmt>
  <function_decl><type><name>int32_t</name></type>  (<modifier>*</modifier><name>runFn</name>)<parameter_list>(<parameter><decl><type><name>TAOS_STMT</name><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>TAOS</name><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>tblNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>rowNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>bindRowNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>bindColNum</name></decl>;</decl_stmt>      <comment type="line">// equal colNum in full column case</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>bindTagNum</name></decl>;</decl_stmt>      <comment type="line">// equal colNum in full column case</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>bindNullNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>runTimes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>preCaseIdx</name></decl>;</decl_stmt>
}</block></struct></type> <name>CaseCfg</name>;</typedef>

<decl_stmt><decl><type><name>CaseCfg</name></type> <name><name>gCase</name><index>[]</index></name> <init>= <expr><block>{
  <expr><block>{<expr><literal type="string">"insert:MBSE0-FULL"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>shortColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>shortColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>insertMBSETest1</name></expr>,  <expr><literal type="number">1</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBSE0-FULL"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>shortColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>shortColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>insertMBSETest1</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">100</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

  <expr><block>{<expr><literal type="string">"insert:MBSE1-FULL"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>insertMBSETest1</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBSE1-C012"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBSETest1</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBSE1-C002"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBSETest1</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

  <expr><block>{<expr><literal type="string">"insert:MBSE2-FULL"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>insertMBSETest2</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBSE2-C012"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBSETest2</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBSE2-C002"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBSETest2</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

  <expr><block>{<expr><literal type="string">"insert:MBME1-FULL"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>insertMBMETest1</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBME1-C012"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBMETest1</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBME1-C002"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBMETest1</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

  <comment type="line">// 11</comment>
  <expr><block>{<expr><literal type="string">"insert:MBME2-FULL"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>insertMBMETest2</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBME2-C012"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBMETest2</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBME2-C002"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBMETest2</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

  <expr><block>{<expr><literal type="string">"insert:MBME3-FULL"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>insertMBMETest3</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBME3-C012"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBMETest3</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBME3-C002"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBMETest3</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

  <expr><block>{<expr><literal type="string">"insert:MBME4-FULL"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>insertMBMETest4</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBME4-C012"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBMETest4</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MBME4-C002"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMBMETest4</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

  <expr><block>{<expr><literal type="string">"insert:MPME1-FULL"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>insertMPMETest1</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:MPME1-C012"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>insertMPMETest1</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">12</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,

  <comment type="line">// 22</comment>
  <expr><block>{<expr><literal type="string">"insert:AUTO1-FULL"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">1</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>insertAUTOTest1</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"insert:AUTO2-TBEXISTS"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_INSERT</name></expr>, <expr><literal type="number">3</literal></expr>, <expr><name>false</name></expr>, <expr><name>true</name></expr>, <expr><name>insertAUTOTest2</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><operator>-</operator><literal type="number">1</literal></expr>}</block></expr>,
<comment type="line">//  {"insert:AUTO3-NTB", tListLen(fullColList), fullColList, TTYPE_INSERT, 0, true, true, insertAUTOTest3, 10, 10, 2, 0, 0, 0, 1, -1},</comment>

  <expr><block>{<expr><literal type="string">"query:SUBT-COLUMN"</literal></expr>, <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_QUERY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>queryColumnTest</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,
  <expr><block>{<expr><literal type="string">"query:SUBT-MISC"</literal></expr>,   <expr><call><name>tListLen</name><argument_list>(<argument><expr><name>fullColList</name></expr></argument>)</argument_list></call></expr>, <expr><name>fullColList</name></expr>, <expr><name>TTYPE_QUERY</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>false</name></expr>, <expr><name>false</name></expr>, <expr><name>queryMiscTest</name></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">10</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>}</block></expr>,

<comment type="line">//  {"query:SUBT-COLUMN", tListLen(fullColList), fullColList, TTYPE_QUERY, 0, false, false, queryColumnTest, 1, 10, 1, 1, 0, 0, 1, 2},</comment>
<comment type="line">//  {"query:SUBT-MISC",   tListLen(fullColList), fullColList, TTYPE_QUERY, 0, false, false, queryMiscTest, 2, 10, 1, 1, 0, 0, 1, 2},</comment>

}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>CaseCfg</name> <modifier>*</modifier></type><name>gCurCase</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>char</name></type>     <name><name>caseCatalog</name><index>[<expr><literal type="number">255</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>bindNullNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>checkParamNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>printRes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>printCreateTblSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>printQuerySql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>printStmtSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>printVerbose</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>autoCreateTbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>bool</name></type>     <name>numericParam</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint8_t</name></type>  <name>precision</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>rowNum</name></decl>;</decl_stmt>               <comment type="line">//row num for one table</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>bindColNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>bindTagNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>bindRowNum</name></decl>;</decl_stmt>           <comment type="line">//row num for once bind</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>bindColTypeNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>bindColTypeList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>bindTagTypeNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>bindTagTypeList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>optrIdxListNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>optrIdxList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>funcIdxListNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name><modifier>*</modifier></type> <name>funcIdxList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>runTimes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>caseIdx</name></decl>;</decl_stmt>              <comment type="line">// static case idx</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>caseNum</name></decl>;</decl_stmt>              <comment type="line">// num in static case list</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>caseRunIdx</name></decl>;</decl_stmt>           <comment type="line">// runtime case idx</comment>
  <decl_stmt><decl><type><name>int32_t</name></type>  <name>caseRunNum</name></decl>;</decl_stmt>           <comment type="line">// total run case num</comment>
}</block></struct></type> <name>CaseCtrl</name>;</typedef>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
CaseCtrl gCaseCtrl = {
  .precision = TIME_PRECISION_MICRO,
  .bindNullNum = 0,
  .printCreateTblSql = true,
  .printQuerySql = true,
  .printStmtSql = true,
  .printVerbose = false,
  .printRes = false,
  .autoCreateTbl = false,
  .numericParam = false,
  .rowNum = 0,
  .bindColNum = 0,
  .bindTagNum = 0,
  .bindRowNum = 0,
  .bindColTypeNum = 0,
  .bindColTypeList = NULL,
  .bindTagTypeNum = 0,
  .bindTagTypeList = NULL,
  .optrIdxListNum = 0,
  .optrIdxList = NULL,
  .funcIdxListNum = 0,
  .funcIdxList = NULL,
  .checkParamNum = false,
  .runTimes = 0,
  .caseIdx = 24,
  .caseNum = 1,
  .caseRunIdx = -1,
  .caseRunNum = -1,
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<decl_stmt><decl><type><name>CaseCtrl</name></type> <name>gCaseCtrl</name> <init>= <expr><block>{  <comment type="line">// default</comment>
  <expr><operator>.</operator><name>precision</name> <operator>=</operator> <name>TIME_PRECISION_MILLI</name></expr>,
  <expr><operator>.</operator><name>bindNullNum</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  <expr><operator>.</operator><name>printCreateTblSql</name> <operator>=</operator> <name>false</name></expr>,
  <expr><operator>.</operator><name>printQuerySql</name> <operator>=</operator> <name>true</name></expr>,
  <expr><operator>.</operator><name>printStmtSql</name> <operator>=</operator> <name>true</name></expr>,
  <expr><operator>.</operator><name>printVerbose</name> <operator>=</operator> <name>false</name></expr>,
  <expr><operator>.</operator><name>printRes</name> <operator>=</operator> <name>true</name></expr>,
  <expr><operator>.</operator><name>autoCreateTbl</name> <operator>=</operator> <name>false</name></expr>,
  <expr><operator>.</operator><name>numericParam</name> <operator>=</operator> <name>false</name></expr>,
  <expr><operator>.</operator><name>rowNum</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  <expr><operator>.</operator><name>bindColNum</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  <expr><operator>.</operator><name>bindTagNum</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  <expr><operator>.</operator><name>bindRowNum</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  <expr><operator>.</operator><name>bindColTypeNum</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  <expr><operator>.</operator><name>bindColTypeList</name> <operator>=</operator> <name>NULL</name></expr>,
  <expr><operator>.</operator><name>bindTagTypeNum</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  <expr><operator>.</operator><name>bindTagTypeList</name> <operator>=</operator> <name>NULL</name></expr>,
  <expr><operator>.</operator><name>optrIdxListNum</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  <expr><operator>.</operator><name>optrIdxList</name> <operator>=</operator> <name>NULL</name></expr>,
  <expr><operator>.</operator><name>funcIdxListNum</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  <expr><operator>.</operator><name>funcIdxList</name> <operator>=</operator> <name>NULL</name></expr>,
  <expr><operator>.</operator><name>checkParamNum</name> <operator>=</operator> <name>false</name></expr>,
  <expr><operator>.</operator><name>runTimes</name> <operator>=</operator> <literal type="number">0</literal></expr>,
  <expr><operator>.</operator><name>caseIdx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>.</operator><name>caseNum</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>.</operator><name>caseRunIdx</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
  <expr><operator>.</operator><name>caseRunNum</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>,
}</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
CaseCtrl gCaseCtrl = {  <comment type="line">// query case with specified col&amp;oper</comment>
  .bindNullNum = 1,
  .printCreateTblSql = false,
  .printQuerySql = true,
  .printStmtSql = true,
  .rowNum = 0,
  .bindColNum = 0,
  .bindRowNum = 0,
  .optrIdxListNum = tListLen(optrIdxList),
  .optrIdxList = optrIdxList,
  .bindColTypeNum = tListLen(bindColTypeList),
  .bindColTypeList = bindColTypeList,
  .checkParamNum = false,
  .printRes = true,
  .runTimes = 0,
  .caseRunIdx = -1,
  .caseIdx = 5,
  .caseNum = 1,
  .caseRunNum = 1,
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
CaseCtrl gCaseCtrl = {  <comment type="line">// query case with specified col&amp;oper</comment>
  .bindNullNum = 1,
  .printCreateTblSql = true,
  .printQuerySql = true,
  .printStmtSql = true,
  .autoCreateTbl = true,
  .rowNum = 0,
  .bindColNum = 0,
  .bindTagNum = 0,
  .bindRowNum = 0,
  .bindColTypeNum = 0,
  .bindColTypeList = NULL,
  .optrIdxListNum = 0,
  .optrIdxList = NULL,
  .checkParamNum = false,
  .printRes = true,
  .runTimes = 0,
  .caseRunIdx = -1,
  <comment type="line">//.optrIdxListNum = tListLen(optrIdxList),</comment>
  <comment type="line">//.optrIdxList = optrIdxList,</comment>
  <comment type="line">//.bindColTypeNum = tListLen(bindColTypeList),</comment>
  <comment type="line">//.bindColTypeList = bindColTypeList,</comment>
  .caseIdx = 8,
  .caseNum = 1,
  .caseRunNum = 1,
};
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><name>int32_t</name></type> <name>taosGetTimeOfDay</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>timeval</name></name> <modifier>*</modifier></type><name>tv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>gettimeofday</name><argument_list>(<argument><expr><name>tv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name> <modifier>*</modifier></type><name>taosMemoryMalloc</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>taosMemoryCalloc</name><parameter_list>(<parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>size</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <return>return <expr><call><name>calloc</name><argument_list>(<argument><expr><name>num</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
<function><type><name>void</name></type> <name>taosMemoryFree</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>ptr</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content> <return>return;</return></block_content></block></if></if_stmt>

  <return>return <expr><call><name>free</name><argument_list>(<argument><expr><operator>(</operator><name>void</name><operator>*</operator><operator>)</operator><name>ptr</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>taosGetTimestampMs</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>systemTime</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosGetTimeOfDay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>systemTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>systemTime</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000LL</literal> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>systemTime</name><operator>.</operator><name>tv_usec</name></name><operator>/</operator><literal type="number">1000</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int64_t</name></type> <name>taosGetTimestampUs</name><parameter_list>()</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>systemTime</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>taosGetTimeOfDay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>systemTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><operator>(</operator><name>int64_t</name><operator>)</operator><name><name>systemTime</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000LL</literal> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name><name>systemTime</name><operator>.</operator><name>tv_usec</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>bool</name></type> <name>colExists</name><parameter_list>(<parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>pBind</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name><name>pBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>false</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>==</operator> <name>dataType</name></expr>)</condition> <block>{<block_content>
      <return>return <expr><name>true</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>++</operator><name>i</name></expr>;</expr_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>generateInsertSQL</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>singleTbInsert</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="string">"insert into %s%d "</literal></expr></argument>, <argument><expr><name>bpTbPrefix</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>singleTbIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="string">"insert into ? "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="string">"insert into %s0 "</literal></expr></argument>, <argument><expr><name>bpTbPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"using %s%d "</literal></expr></argument>, <argument><expr><name>bpStbPrefix</name></expr></argument>, <argument><expr><name>bpDefaultStbId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr>)</condition> <block>{<block_content>  
          <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tbooldata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"ttinydata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tsmalldata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tintdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tbigdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tfloatdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tdoubledata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tbinarydata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tnchardata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tutinydata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tusmalldata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tuintdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
            <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tubigdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
          <default>default:</default>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!invalid tag type:%d"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">") "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tags ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">") "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <switch>switch <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr>)</condition> <block>{<block_content>  
        <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"booldata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tinydata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"smalldata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"intdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"bigdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"floatdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"doubledata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"binarydata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"nchardata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"utinydata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"usmalldata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"uintdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
          <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"ubigdata"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!invalid col type:%d"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></switch>
    </block_content>}</block></for>
    
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">") "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"values ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>printStmtSql</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tSQL: %s\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>  
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpAppendOperatorParam</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>OperInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>optrIdxListNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pInfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>operInfo</name><index>[<expr><name><name>gCaseCtrl</name><operator>.</operator><name>optrIdxList</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>TSDB_DATA_TYPE_VARCHAR</name> <operator>==</operator> <name>dataType</name> <operator>||</operator> <name>TSDB_DATA_TYPE_NCHAR</name> <operator>==</operator> <name>dataType</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>pInfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>operInfo</name><index>[<expr><name><name>varoperatorList</name><index>[<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>varoperatorList</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name>pInfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>operInfo</name><index>[<expr><name><name>operatorList</name><index>[<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>operatorList</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>
  
  <switch>switch <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>paramNum</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <if_stmt><if>if <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>enclose</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">" %s (?)"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>oper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">" %s ?"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>oper</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></else></if_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!invalid operator paramNum:%d\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>paramNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpAppendFunctionParam</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>dataType</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>idx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>FuncInfo</name> <modifier>*</modifier></type><name>pInfo</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>funcIdxListNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pInfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>funcInfo</name><index>[<expr><name><name>gCaseCtrl</name><operator>.</operator><name>funcIdxList</name><index>[<expr><name>idx</name></expr>]</index></name></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pInfo</name> <operator>=</operator> <operator>&amp;</operator><name><name>funcInfo</name><index>[<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <call><name>tListLen</name><argument_list>(<argument><expr><name>funcInfo</name></expr></argument>)</argument_list></call></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <switch>switch <condition>(<expr><name><name>pInfo</name><operator>-&gt;</operator><name>paramNum</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">" %s(?)"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>funcName</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!invalid function  paramNum:%d\n"</literal></expr></argument>, <argument><expr><name><name>pInfo</name><operator>-&gt;</operator><name>paramNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>bpAppendColumnName</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>  
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"booldata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"tinydata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"smalldata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"intdata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"bigdata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"floatdata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"doubledata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"binarydata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"ts"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"nchardata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"utinydata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"usmalldata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"uintdata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <return>return <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"ubigdata"</literal></expr></argument>)</argument_list></call></expr>;</return>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!invalid col type:%d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>generateQueryCondSQL</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tblIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="string">"select * from %s%d where "</literal></expr></argument>, <argument><expr><name>bpTbPrefix</name></expr></argument>, <argument><expr><name>tblIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name></expr>)</condition> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" and "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>bpAppendColumnName</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>bpAppendOperatorParam</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>printStmtSql</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tSTMT SQL: %s\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>  
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpGenerateConstInOpSQL</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tblIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="string">"select "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>bpAppendColumnName</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>bpAppendOperatorParam</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" from %s%d"</literal></expr></argument>, <argument><expr><name>bpTbPrefix</name></expr></argument>, <argument><expr><name>tblIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>bpGenerateConstInFuncSQL</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tblIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="string">"select "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>c</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">", "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><call><name>bpAppendFunctionParam</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name><index>[<expr><name>c</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">" from %s%d"</literal></expr></argument>, <argument><expr><name>bpTbPrefix</name></expr></argument>, <argument><expr><name>tblIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>generateQueryMiscSQL</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tblIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>tblIdx</name> <operator>==</operator> <name>FUNCTION_TEST_IDX</name> <operator>&amp;&amp;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindNullNum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>bpGenerateConstInFuncSQL</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tblIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <switch>switch<condition>(<expr><name>tblIdx</name></expr>)</condition> <block>{<block_content>
      <case>case <expr><literal type="number">0</literal></expr>:</case>
        <comment type="line">//TODO FILL TEST</comment>
      <default>default:</default>
        <expr_stmt><expr><call><name>bpGenerateConstInOpSQL</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tblIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
    </block_content>}</block></switch>
  </block_content>}</block></else></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>printStmtSql</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tSTMT SQL: %s\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>  
</block_content>}</block></function>



<function><type><name>void</name></type> <name>generateErrorSQL</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tblIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <switch>switch<condition>(<expr><name>tblIdx</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><literal type="number">0</literal></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="string">"insert into %s%d values (?, 1)"</literal></expr></argument>, <argument><expr><name>bpTbPrefix</name></expr></argument>, <argument><expr><name>tblIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">1</literal></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="string">"select * from ?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><literal type="number">2</literal></expr>:</case>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="string">"select * from %s%d where ? = ?"</literal></expr></argument>, <argument><expr><name>bpTbPrefix</name></expr></argument>, <argument><expr><name>tblIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="string">"select count(*) from %s%d group by ?"</literal></expr></argument>, <argument><expr><name>bpTbPrefix</name></expr></argument>, <argument><expr><name>tblIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>    
  </block_content>}</block></switch>

  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>printStmtSql</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tSTMT SQL: %s\n"</literal></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>  
</block_content>}</block></function>

<function><type><name>void</name></type> <name>generateColDataType</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bindIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dataType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>bindIdx</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>bindColTypeNum</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>bindColTypeList</name><index>[<expr><name>colIdx</name></expr>]</index></name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>colList</name><index>[<expr><name>bindIdx</name></expr>]</index></name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>numericParam</name></name></expr>)</condition> <block>{<block_content>
      <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>TSDB_DATA_TYPE_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>IS_NUMERIC_TYPE</name><argument_list>(<argument><expr><operator>*</operator><name>dataType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <break>break;</break>
      </block_content>}</block></while>
      <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>colIdx</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>TSDB_DATA_TYPE_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dataType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>||</operator> <operator>*</operator><name>dataType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DECIMAL</name> 
         <operator>||</operator> <operator>*</operator><name>dataType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BLOB</name> <operator>||</operator> <operator>*</operator><name>dataType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_MEDIUMBLOB</name>
         <operator>||</operator> <operator>*</operator><name>dataType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARBINARY</name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>colExists</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name></name></expr></argument>, <argument><expr><operator>*</operator><name>dataType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        
        <break>break;</break>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pBind</name><index>[<expr><name>bindIdx</name><operator>%</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>generateTagDataType</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bindIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>dataType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name>bindIdx</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>bindTagTypeNum</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>bindTagTypeList</name><index>[<expr><name>colIdx</name></expr>]</index></name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>colList</name><index>[<expr><name>bindIdx</name></expr>]</index></name></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <while>while <condition>(<expr><name>true</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <operator>(</operator><name>TSDB_DATA_TYPE_MAX</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>*</operator><name>dataType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_JSON</name> <operator>||</operator> <operator>*</operator><name>dataType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_DECIMAL</name> 
         <operator>||</operator> <operator>*</operator><name>dataType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BLOB</name> <operator>||</operator> <operator>*</operator><name>dataType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_MEDIUMBLOB</name>
         <operator>||</operator> <operator>*</operator><name>dataType</name> <operator>==</operator> <name>TSDB_DATA_TYPE_VARBINARY</name></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>colExists</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>, <argument><expr><operator>*</operator><name>dataType</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <continue>continue;</continue>
        </block_content>}</block></if></if_stmt>
        
        <break>break;</break>
      </block_content>}</block></while>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><operator>*</operator><name>dataType</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pTags</name><index>[<expr><name>bindIdx</name><operator>%</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>prepareColData</name><parameter_list>(<parameter><decl><type><name>BP_BIND_TYPE</name></type> <name>bType</name></decl></parameter>, <parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>bindIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>rowIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>dataType</name> <init>= <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>pBase</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>bType</name> <operator>==</operator> <name>BP_BIND_TAG</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>pBase</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pTags</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>generateTagDataType</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bindIdx</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name>pBase</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>pBind</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>generateColDataType</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>bindIdx</name></expr></argument>, <argument><expr><name>colIdx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>dataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>


  <switch>switch <condition>(<expr><name>dataType</name></expr>)</condition> <block>{<block_content>  
    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>boolData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>tinyData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>smallData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>intData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>bigData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>floatData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>doubleData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <name>gVarCharSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>binaryData</name></name> <operator>+</operator> <name>rowIdx</name> <operator>*</operator> <name>gVarCharSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>binaryLen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>tsData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <name>gVarCharSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>binaryData</name></name> <operator>+</operator> <name>rowIdx</name> <operator>*</operator> <name>gVarCharSize</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>binaryLen</name></name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>utinyData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>usmallData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>uintData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>data</name><operator>-&gt;</operator><name>ubigData</name></name> <operator>+</operator> <name>rowIdx</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <ternary><condition><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>+</operator> <name>rowIdx</name><operator>)</operator></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!invalid col type:%d"</literal></expr></argument>, <argument><expr><name>dataType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>

  <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>dataType</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>bType</name> <operator>==</operator> <name>BP_BIND_TAG</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>pBase</name><index>[<expr><name>bindIdx</name></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>prepareInsertData</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>allRowNum</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>*</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>colNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>colTypes</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>allRowNum</name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name><operator>)</operator><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pTags</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tsData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>boolData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tinyData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>utinyData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>smallData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>usmallData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>intData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>uintData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bigData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ubigData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>floatData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>doubleData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>binaryData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <name>gVarCharSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>binaryLen</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>allRowNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindNullNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>allRowNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>allRowNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>duplicateValue</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tsData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>bpTs</name></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>i</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>bpTs</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tsData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>bpTs</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>boolData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tinyData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>utinyData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>smallData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>usmallData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>intData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>uintData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bigData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ubigData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>floatData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>doubleData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>binaryData</name></name> <operator>+</operator> <name>gVarCharSize</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><literal type="char">'a'</literal><operator>+</operator><name>i</name><operator>%</operator><literal type="number">26</literal></expr></argument>, <argument><expr><name>gVarCharLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindNullNum</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>binaryLen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>gVarCharLen</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <operator>(</operator><name>allRowNum</name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name><operator>)</operator></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>prepareColData</name><argument_list>(<argument><expr><name>BP_BIND_COL</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name><operator>+</operator><name>c</name></expr></argument>, <argument><expr><name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>prepareColData</name><argument_list>(<argument><expr><name>BP_BIND_TAG</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name><operator>+</operator><name>c</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>


  <expr_stmt><expr><call><name>generateInsertSQL</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>prepareQueryCondData</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tblIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>bindNum</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>/</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>colNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>colTypes</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>bindNum</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tsData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>boolData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tinyData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>utinyData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>smallData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>usmallData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>intData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>uintData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bigData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ubigData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>floatData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>doubleData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>binaryData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <name>gVarCharSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>binaryLen</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindNullNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>bindNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bindNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tsData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>bpTs</name> <operator>+</operator> <name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>boolData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tinyData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>utinyData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>smallData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>usmallData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>intData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>uintData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bigData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ubigData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>floatData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>doubleData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>binaryData</name></name> <operator>+</operator> <name>gVarCharSize</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><literal type="char">'a'</literal><operator>+</operator><name>i</name><operator>%</operator><literal type="number">26</literal></expr></argument>, <argument><expr><name>gVarCharLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindNullNum</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>binaryLen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>gVarCharLen</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>bindNum</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>prepareColData</name><argument_list>(<argument><expr><name>BP_BIND_COL</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name><operator>+</operator><name>c</name></expr></argument>, <argument><expr><name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>generateQueryCondSQL</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tblIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>prepareQueryMiscData</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tblIdx</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>bindNum</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>/</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>colNum</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>colTypes</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">30</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1024</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>bindNum</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tsData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>boolData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>bool</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tinyData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>utinyData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint8_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>smallData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>usmallData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint16_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>intData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>uintData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bigData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ubigData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>uint64_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>floatData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>doubleData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>binaryData</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <name>gVarCharSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>binaryLen</name></name> <operator>=</operator> <call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>bindNum</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindNullNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><operator>(</operator><name>int32_t</name><operator>)</operator><name>bindNum</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>bindNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tsData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>bpTs</name> <operator>+</operator> <name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call><operator>%</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>boolData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>bool</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>tinyData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>utinyData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>smallData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>usmallData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint16_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>intData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>uintData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>bigData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>ubigData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>floatData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>doubleData</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>tblIdx</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>+</operator> <call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>binaryData</name></name> <operator>+</operator> <name>gVarCharSize</name> <operator>*</operator> <name>i</name></expr></argument>, <argument><expr><literal type="char">'a'</literal><operator>+</operator><name>i</name><operator>%</operator><literal type="number">26</literal></expr></argument>, <argument><expr><name>gVarCharLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindNullNum</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>binaryLen</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>gVarCharLen</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>tblIdx</name> <operator>==</operator> <name>FUNCTION_TEST_IDX</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCaseCtrl</name><operator>.</operator><name>numericParam</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><name><name>gCaseCtrl</name><operator>.</operator><name>numericParam</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  
  <for>for <control>(<init><decl><type><name>int</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator> <name>bindNum</name></expr>;</condition> <incr><expr><name>b</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>prepareColData</name><argument_list>(<argument><expr><name>BP_BIND_COL</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name><operator>+</operator><name>c</name></expr></argument>, <argument><expr><name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></argument>, <argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><name><name>gCaseCtrl</name><operator>.</operator><name>numericParam</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>generateQueryMiscSQL</name><argument_list>(<argument><expr><name>data</name></expr></argument>, <argument><expr><name>tblIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<function><type><name>void</name></type> <name>destroyData</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>tsData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>boolData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>tinyData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>utinyData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>smallData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>usmallData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>intData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>uintData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>bigData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>ubigData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>floatData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>doubleData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>binaryData</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>binaryLen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>isNull</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pBind</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>pTags</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>colTypes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>sql</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpFetchRows</name><parameter_list>(<parameter><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>printr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_ROW</name></type>    <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>temp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

  <comment type="line">// fetch the records row by row</comment>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><operator>(</operator><operator>*</operator><name>rows</name><operator>)</operator><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>printr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_print_row</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\t[%s]\n"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpExecQuery</name><parameter_list>(<parameter><decl><type><name>TAOS</name>    <modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>sql</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>printr</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>rows</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to query table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>bpFetchRows</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>printr</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>int32_t</name></type> <name>bpAppendValueString</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>valueLen</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>len</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TSDB_DATA_TYPE_NULL</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"null"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><ternary><condition><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>bool</name><operator>*</operator><operator>)</operator><name>value</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr> </then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int8_t</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int16_t</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int32_t</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>int64_t</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%e"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>float</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%e"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>double</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_BINARY</name></expr>:</case>
    <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><operator>*</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>valueLen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <name>valueLen</name></expr>;</expr_stmt>
      <expr_stmt><expr><name><name>buf</name><index>[<expr><operator>*</operator><name>len</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\''</literal></expr>;</expr_stmt>
      <expr_stmt><expr><operator>++</operator><operator>(</operator><operator>*</operator><name>len</name><operator>)</operator></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint8_t</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint16_t</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint32_t</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
      <expr_stmt><expr><operator>*</operator><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <operator>*</operator><name>len</name></expr></argument>, <argument><expr><literal type="string">"%lu"</literal></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>uint64_t</name><operator>*</operator><operator>)</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>

    <default>default:</default>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!invalid data type:%d\n"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></switch>
</block_content>}</block></function>




<function><type><name>void</name></type> <name>bpCheckIsInsert</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>insert</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>isInsert</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_is_insert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>isInsert</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_is_insert error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>insert</name> <operator>!=</operator> <name>isInsert</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!is insert failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpCheckParamNum</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>num</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_num_params</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>num</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_num_params error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>!=</operator> <name>num</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!is insert failed\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpCheckAffectedRows</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>times</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><call><name>taos_stmt_affected_rows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>insertNum</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>*</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>*</operator> <name>times</name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>duplicateValue</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>insertNum</name> <operator>/=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name>insertNum</name> <operator>!=</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!affected rows %d mis-match with insert num %d\n"</literal></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>insertNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpCheckAffectedRowsOnce</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>expectedNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><call><name>taos_stmt_affected_rows_once</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>expectedNum</name> <operator>!=</operator> <name>rows</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!affected rows %d mis-match with expected num %d\n"</literal></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>expectedNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpCheckQueryResult</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>stmtSql</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>bind</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// query using sql</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>p</name> <init>= <expr><name>stmtSql</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>s</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>sqlResNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>true</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr><operator>,</operator> <expr><name>p</name><operator>=</operator><name>s</name><operator>+</operator><literal type="number">1</literal></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>s</name> <operator>=</operator> <call><name>strchr</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="char">'?'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>s</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sql</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>sql</name><index>[<expr><name>len</name></expr>]</index></name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><name>s</name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>len</name> <operator>+=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>int64_t</name><operator>)</operator><name>s</name> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><name>p</name><operator>)</operator></expr>;</expr_stmt>
    
    <if_stmt><if>if <condition>(<expr><name><name>bind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>&amp;&amp;</operator> <name><name>bind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>is_null</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>bpAppendValueString</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>TSDB_DATA_TYPE_NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>bpAppendValueString</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name><name>bind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr></argument>, <argument><expr><name><name>bind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer</name></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><name><name>bind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>length</name></expr> ?</condition><then> <expr><name><name>bind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>length</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><operator>&amp;</operator><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>printQuerySql</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tQuery SQL: %s\n"</literal></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>bpExecQuery</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name><name>gCaseCtrl</name><operator>.</operator><name>printRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>sqlResNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// query using stmt</comment>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>taos_stmt_use_result</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>stmtResNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>bpFetchRows</name><argument_list>(<argument><expr><name>res</name></expr></argument>, <argument><expr><name><name>gCaseCtrl</name><operator>.</operator><name>printRes</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmtResNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>sqlResNum</name> <operator>!=</operator> <name>stmtResNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!sql res num %d mis-match stmt res num %d\n"</literal></expr></argument>, <argument><expr><name>sqlResNum</name></expr></argument>, <argument><expr><name>stmtResNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"***sql res num match stmt res num %d\n"</literal></expr></argument>, <argument><expr><name>stmtResNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpCheckColTagFields</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>fieldNum</name></decl></parameter>, <parameter><decl><type><name>TAOS_FIELD_E</name><modifier>*</modifier></type> <name>pFields</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>expecteNum</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>pBind</name></decl></parameter>, <parameter><decl><type><name>BP_BIND_TYPE</name></type> <name>type</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>fieldNum</name> <operator>!=</operator> <name>expecteNum</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!%s field num %d mis-match expect num %d\n"</literal></expr></argument>, <argument><expr><call><name>BP_BIND_TYPE_STR</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><name>fieldNum</name></expr></argument>, <argument><expr><name>expecteNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BP_BIND_COL</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pFields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>precision</name> <operator>!=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>precision</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!db precision %d mis-match expect %d\n"</literal></expr></argument>, <argument><expr><name><name>pFields</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>precision</name></expr></argument>, <argument><expr><name><name>gCaseCtrl</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fieldNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name><name>pBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!%s %dth field type %d mis-match expect type %d\n"</literal></expr></argument>, <argument><expr><call><name>BP_BIND_TYPE_STR</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>, <argument><expr><name><name>pBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>!=</operator> <operator>(</operator><name><name>pBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!%s %dth field len %d mis-match expect len %d\n"</literal></expr></argument>, <argument><expr><call><name>BP_BIND_TYPE_STR</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>==</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>!=</operator> <operator>(</operator><name><name>pBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>*</operator> <literal type="number">4</literal> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!%s %dth field len %d mis-match expect len %d\n"</literal></expr></argument>, <argument><expr><call><name>BP_BIND_TYPE_STR</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><operator>(</operator><name><name>pBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>+</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>!=</operator> <name><name>pBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!%s %dth field len %d mis-match expect len %d\n"</literal></expr></argument>, <argument><expr><call><name>BP_BIND_TYPE_STR</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>, <argument><expr><name><name>pBind</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>buffer_length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>BP_BIND_COL</name></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>fieldType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>fieldBytes</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>fieldNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>    
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_get_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fieldType</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fieldBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_get_param error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name> <operator>!=</operator> <name>fieldType</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!%s %dth field type %d mis-match expect type %d\n"</literal></expr></argument>, <argument><expr><call><name>BP_BIND_TYPE_STR</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fieldType</name></expr></argument>, <argument><expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    
      <if_stmt><if>if <condition>(<expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name> <operator>!=</operator> <name>fieldBytes</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!%s %dth field len %d mis-match expect len %d\n"</literal></expr></argument>, <argument><expr><call><name>BP_BIND_TYPE_STR</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>fieldBytes</name></expr></argument>, <argument><expr><name><name>pFields</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>printVerbose</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s fields check passed\n"</literal></expr></argument>, <argument><expr><call><name>BP_BIND_TYPE_STR</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>bpCheckTagFields</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>pBind</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fieldNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD_E</name><modifier>*</modifier></type> <name>pFields</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_get_tag_fields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fieldNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_get_tag_fields error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>bpCheckColTagFields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>fieldNum</name></expr></argument>, <argument><expr><name>pFields</name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name></expr></argument>, <argument><expr><name>pBind</name></expr></argument>, <argument><expr><name>BP_BIND_TAG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpCheckColFields</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>pBind</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>testType</name></name> <operator>==</operator> <name>TTYPE_QUERY</name></expr>)</condition> <block>{<block_content>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>fieldNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD_E</name><modifier>*</modifier></type> <name>pFields</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_get_col_fields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fieldNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>pFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_get_col_fields error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><call><name>bpCheckColTagFields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>fieldNum</name></expr></argument>, <argument><expr><name>pFields</name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>, <argument><expr><name>pBind</name></expr></argument>, <argument><expr><name>BP_BIND_COL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>pFields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpShowBindParam</name><parameter_list>(<parameter><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>bind</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>num</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name><modifier>*</modifier></type> <name>b</name> <init>= <expr><operator>&amp;</operator><name><name>bind</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"Bind %d: type[%d],buf[%p],buflen[%d],len[%d],null[%d],num[%d]\n"</literal></expr></argument>, 
      <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>buffer_type</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>buffer</name></name></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>buffer_length</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr> ?</condition><then> <expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>length</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name><name>b</name><operator>-&gt;</operator><name>is_null</name></name></expr> ?</condition><then> <expr><operator>*</operator><name><name>b</name><operator>-&gt;</operator><name>is_null</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>, <argument><expr><name><name>b</name><operator>-&gt;</operator><name>num</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>bpBindParam</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>bind</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>bpCheckColFields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>bind</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>n</name><operator>++</operator><operator>%</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_bind_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>bind</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_bind_param_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bpShowBindParam</name><argument_list>(<argument><expr><name>bind</name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>bind</name><operator>+</operator><name>i</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_bind_single_param_batch %d error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>bpShowBindParam</name><argument_list>(<argument><expr><name>bind</name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <operator>(</operator><name>n</name><operator>++</operator><operator>%</operator><literal type="number">2</literal><operator>)</operator></expr>)</condition> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_bind_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>bind</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_bind_param_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bpShowBindParam</name><argument_list>(<argument><expr><name>bind</name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_bind_param</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>bind</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_bind_param error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bpShowBindParam</name><argument_list>(<argument><expr><name>bind</name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>        
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></else></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>bpSetTableNameTags</name><parameter_list>(<parameter><decl><type><name>BindData</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tblIdx</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tblName</name></decl></parameter>, <parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>code</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tblName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_set_tbname error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>bpCheckTagFields</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pTags</name></name> <operator>+</operator> <name>tblIdx</name> <operator>*</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <return>return <expr><call><name>taos_stmt_set_tags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pTags</name></name> <operator>+</operator> <name>tblIdx</name> <operator>*</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name></expr></argument>)</argument_list></call></expr>;</return>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><call><name>taos_stmt_set_tbname_tags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tblName</name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>pTags</name></name> <operator>+</operator> <name>tblIdx</name> <operator>*</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name></expr></argument>)</argument_list></call></expr>;</return>  
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <return>return <expr><call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tblName</name></expr></argument>)</argument_list></call></expr>;</return>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<comment type="block">/* prepare [settbname [bind add]] exec */</comment>
<function><type><name>int</name></type> <name>insertMBSETest1</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>prepareInsertData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bindTimes</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bpSetTableNameTags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_set_tbname error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>  
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator><name>bindTimes</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>t</name><operator>*</operator><name>bindTimes</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>+</operator> <name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bpCheckAffectedRows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* prepare [settbname bind add] exec  */</comment>
<function><type><name>int</name></type> <name>insertMBSETest2</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>prepareInsertData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bindTimes</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator><name>bindTimes</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bpSetTableNameTags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_set_tbname error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>  
      </block_content>}</block></if></if_stmt>
    
      <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>t</name><operator>*</operator><name>bindTimes</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>+</operator> <name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    
      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bpCheckAffectedRows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* prepare [settbname [bind add] exec] */</comment>
<function><type><name>int</name></type> <name>insertMBMETest1</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>prepareInsertData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bindTimes</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bpSetTableNameTags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_set_tbname error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>  
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator><name>bindTimes</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>t</name><operator>*</operator><name>bindTimes</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>+</operator> <name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bpCheckAffectedRows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* prepare [settbname [bind add exec]] */</comment>
<function><type><name>int</name></type> <name>insertMBMETest2</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>prepareInsertData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bindTimes</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bpSetTableNameTags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_set_tbname error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>  
    </block_content>}</block></if></if_stmt>
    
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator><name>bindTimes</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>t</name><operator>*</operator><name>bindTimes</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>+</operator> <name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    
      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bpCheckAffectedRows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* prepare [settbname [settbname bind add exec]] */</comment>
<function><type><name>int</name></type> <name>insertMBMETest3</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>prepareInsertData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bindTimes</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bpSetTableNameTags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_set_tbname error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>  
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator><name>bindTimes</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bpSetTableNameTags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_set_tbname error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>  
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>t</name><operator>*</operator><name>bindTimes</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>+</operator> <name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bpCheckAffectedRows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* prepare [settbname bind add exec]   */</comment>
<function><type><name>int</name></type> <name>insertMBMETest4</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>prepareInsertData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>int32_t</name></type> <name>bindTimes</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator><name>bindTimes</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bpSetTableNameTags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_set_tbname error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>  
      </block_content>}</block></if></if_stmt>
    
      <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>t</name><operator>*</operator><name>bindTimes</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>+</operator> <name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    
      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bpCheckAffectedRows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* [prepare [settbname [bind add] exec]]   */</comment>
<function><type><name>int</name></type> <name>insertMPMETest1</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>loop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <while>while <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>&gt;=</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>prepareInsertData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>bindTimes</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bpSetTableNameTags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_set_tbname error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>  
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator><name>bindTimes</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>t</name><operator>*</operator><name>bindTimes</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>+</operator> <name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>loop</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>bpCheckAffectedRows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>gExecLoopTimes</name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* [prepare [settbnametag [bind add] exec]]   */</comment>
<function><type><name>int</name></type> <name>insertAUTOTest1</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>loop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <while>while <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>prepareInsertData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>bindTimes</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bpSetTableNameTags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_set_tbname_tags error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>  
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator><name>bindTimes</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>t</name><operator>*</operator><name>bindTimes</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>+</operator> <name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>

      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>loop</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>bpCheckAffectedRows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>gExecLoopTimes</name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>



<comment type="block">/* [prepare [settbnametag [bind add exec]]]   */</comment>
<function><type><name>int</name></type> <name>insertAUTOTest2</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>loop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <while>while <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>prepareInsertData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>bindTimes</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator><name>bindTimes</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
          <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"t%d"</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>bpSetTableNameTags</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_set_tbname_tags error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block></if></if_stmt>  
        </block_content>}</block></if></if_stmt>
      
        <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>t</name><operator>*</operator><name>bindTimes</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>+</operator> <name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>loop</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>bpCheckAffectedRows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>gExecLoopTimes</name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* normal table [prepare [bind add exec]]   */</comment>
<function><type><name>int</name></type> <name>insertAUTOTest3</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>loop</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <while>while <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>data</name><operator>.</operator><name>singleTbInsert</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>prepareInsertData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int32_t</name></type> <name>bindTimes</name> <init>= <expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name><name>data</name><operator>.</operator><name>singleTbIdx</name></name> <operator>=</operator> <name>t</name></expr>;</expr_stmt>        
      <expr_stmt><expr><call><name>generateInsertSQL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>b</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>b</name> <operator>&lt;</operator><name>bindTimes</name></expr>;</condition> <incr><expr><operator>++</operator><name>b</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>t</name><operator>*</operator><name>bindTimes</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>+</operator> <name>b</name><operator>*</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        
        <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>-=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>loop</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></while>

  <expr_stmt><expr><call><name>bpCheckAffectedRows</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>loop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>gExecLoopTimes</name> <operator>=</operator> <name>loop</name></expr>;</expr_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="block">/* select * from table */</comment>
<function><type><name>int</name></type> <name>queryColumnTest</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>prepareQueryCondData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name><operator>&lt;</operator> <operator>(</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>bpCheckQueryResult</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></for>
    
    <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/* value in query sql */</comment>
<function><type><name>int</name></type> <name>queryMiscTest</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>prepareQueryMiscData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to execute taos_stmt_prepare. error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name><operator>&lt;</operator> <operator>(</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name><operator>)</operator></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>checkParamNum</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>bpCheckParamNum</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      
      <if_stmt><if>if <condition>(<expr><call><name>bpBindParam</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>      
        <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_add_batch error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
      </block_content>}</block></if></if_stmt>

      <if_stmt><if>if <condition>(<expr><call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_execute error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>

      <expr_stmt><expr><call><name>bpCheckQueryResult</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>pBind</name></name> <operator>+</operator> <name>n</name> <operator>*</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
    </block_content>}</block></for>
    
    <expr_stmt><expr><call><name>bpCheckIsInsert</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><name>int</name></type> <name>errorSQLTest1</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>BindData</name></type> <name>data</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>generateErrorSQL</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>sql</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"*taos_stmt_prepare error as expected, error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_prepare succeed, which should be error\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>destroyData</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>prepareCheckResultImpl</name><parameter_list>(<parameter><decl><type><name>TAOS</name>     <modifier>*</modifier></type> <name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>printr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expected</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>silent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">255</literal></expr>]</index></name> <init>= <expr><literal type="string">"SELECT * FROM "</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  
  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>bpExecQuery</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><name>printr</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <name>expected</name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"***%d rows are fetched as expected from %s\n"</literal></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!expect rows %d mis-match rows %d fetched from %s\n"</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>prepareCheckResult</name><parameter_list>(<parameter><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>silent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name><operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><name>bpTbPrefix</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"%s%d"</literal></expr></argument>, <argument><expr><name>bpTbPrefix</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><call><name>prepareCheckResultImpl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name><name>gCaseCtrl</name><operator>.</operator><name>printRes</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>duplicateValue</name></name></expr> ?</condition><then> <expr><operator>(</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>*</operator> <name>gExecLoopTimes</name> <operator>/</operator> <literal type="number">2</literal><operator>)</operator></expr> </then><else>: <expr><operator>(</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>*</operator> <name>gExecLoopTimes</name><operator>)</operator></expr></else></ternary></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><name>gExecLoopTimes</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>



<comment type="line">//120table 60 record each table</comment>
<function><type><name>int</name></type> <name>sql_perf1</name><parameter_list>(<parameter><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>sql</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>sql</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1048576</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tss</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">3000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>sql</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"insert into "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">120</literal></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>sql</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"m%d values "</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>sql</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"(%d, %d, %d, %d, %d, %d, %f, %f, \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") "</literal></expr></argument>, <argument><expr><name>tss</name><operator>++</operator></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name><operator>+</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>m</name><operator>+</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></for>


  <decl_stmt><decl><type><name>int64_t</name></type> <name>starttime</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>sql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d failed to query table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>endtime</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%.1f useconds\n"</literal></expr></argument>, <argument><expr><literal type="number">3000</literal><operator>*</operator><literal type="number">120</literal><operator>*</operator><literal type="number">60</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">3000</literal><operator>*</operator><literal type="number">120</literal><operator>*</operator><literal type="number">60</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>sql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>





<comment type="line">//one table 60 records one time</comment>
<function><type><name>int</name></type> <name>sql_perf_s1</name><parameter_list>(<parameter><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>sql</name> <init>= <expr><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name><operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">360000</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>sql</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">9000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tss</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">120</literal></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">3000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>sql</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"insert into m%d values "</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>sql</name><index>[<expr><name>id</name></expr>]</index></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"(%d, %d, %d, %d, %d, %d, %f, %f, \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\", \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") "</literal></expr></argument>, <argument><expr><name>tss</name><operator>++</operator></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name></expr></argument>, <argument><expr><name>m</name><operator>+</operator><literal type="number">1.0</literal></expr></argument>, <argument><expr><name>m</name><operator>+</operator><literal type="number">1.0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      <if_stmt><if>if <condition>(<expr><name>len</name> <operator>&gt;=</operator> <literal type="number">9000</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"sql:%s,len:%d\n"</literal></expr></argument>, <argument><expr><name><name>sql</name><index>[<expr><name>id</name></expr>]</index></name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><operator>++</operator><name>id</name></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>


  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>sql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to query table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%.1f useconds\n"</literal></expr></argument>, <argument><expr><literal type="number">3000</literal><operator>*</operator><literal type="number">120</literal><operator>*</operator><literal type="number">60</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">3000</literal><operator>*</operator><literal type="number">120</literal><operator>*</operator><literal type="number">60</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">360000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>sql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<comment type="line">//small record size</comment>
<function><type><name>int</name></type> <name>sql_s_perf1</name><parameter_list>(<parameter><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name><name>sql</name><index>[<expr><literal type="number">3000</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>sql</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><literal type="number">1048576</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tss</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <literal type="number">3000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>l</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name>len</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>sql</name><index>[<expr><name>l</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"insert into "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>t</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>t</name> <operator>&lt;</operator> <literal type="number">120</literal></expr>;</condition> <incr><expr><operator>++</operator><name>t</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>sql</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"m%d values "</literal></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>m</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>m</name> <operator>&lt;</operator> <literal type="number">60</literal></expr>;</condition> <incr><expr><operator>++</operator><name>m</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>len</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name><name>sql</name><index>[<expr><name>l</name></expr>]</index></name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><literal type="string">"(%d, %d) "</literal></expr></argument>, <argument><expr><name>tss</name><operator>++</operator></expr></argument>, <argument><expr><name>m</name><operator>%</operator><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></for>
  </block_content>}</block></for>


  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3000</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>sql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to query table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%.1f useconds\n"</literal></expr></argument>, <argument><expr><literal type="number">3000</literal><operator>*</operator><literal type="number">120</literal><operator>*</operator><literal type="number">60</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><operator>(</operator><literal type="number">3000</literal><operator>*</operator><literal type="number">120</literal><operator>*</operator><literal type="number">60</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">3000</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>sql</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>generateCreateTableSQL</name><parameter_list>(<parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tblIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colNum</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>colList</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>tableType</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>blen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>blen</name> <operator>=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"create table %s%d "</literal></expr></argument>, <argument><expr><operator>(</operator><ternary><condition><expr><literal type="number">1</literal> <operator>==</operator> <name>tableType</name></expr> ?</condition><then> <expr><name>bpStbPrefix</name></expr> </then><else>: <expr><name>bpTbPrefix</name></expr></else></ternary><operator>)</operator></expr></argument>, <argument><expr><name>tblIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><name>tableType</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"using %s%d"</literal></expr></argument>, <argument><expr><name>bpStbPrefix</name></expr></argument>, <argument><expr><name>bpDefaultStbId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>tableType</name> <operator>==</operator> <literal type="number">0</literal> <operator>||</operator> <name>tableType</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">" ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>colNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    
      <switch>switch <condition>(<expr><name><name>colList</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition> <block>{<block_content>  
        <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"booldata bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tinydata tinyint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"smalldata smallint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"intdata int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"bigdata bigint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"floatdata float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"doubledata double"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"binarydata binary(%d)"</literal></expr></argument>, <argument><expr><name>gVarCharSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"ts timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"nchardata nchar(%d)"</literal></expr></argument>, <argument><expr><name>gVarCharSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"utinydata tinyint unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"usmalldata smallint unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"uintdata int unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"ubigdata bigint unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"invalid col type:%d"</literal></expr></argument>, <argument><expr><name><name>colList</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></switch>      
    </block_content>}</block></for>

    <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>tableType</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">" tags ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>colNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <switch>switch <condition>(<expr><name><name>colList</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition> <block>{<block_content>  
        <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tbooldata bool"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"ttinydata tinyint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tsmalldata smallint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tintdata int"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tbigdata bigint"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tfloatdata float"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tdoubledata double"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tbinarydata binary(%d)"</literal></expr></argument>, <argument><expr><name>gVarCharSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tts timestamp"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tnchardata nchar(%d)"</literal></expr></argument>, <argument><expr><name>gVarCharSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tutinydata tinyint unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tusmalldata smallint unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tuintdata int unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"tubigdata bigint unsigned"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"invalid col type:%d"</literal></expr></argument>, <argument><expr><name><name>colList</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></switch>      
    </block_content>}</block></for>

    <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>    
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>==</operator> <name>tableType</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">" tags ("</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>c</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>c</name> <operator>&lt;</operator> <name>colNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>c</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><name>c</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <switch>switch <condition>(<expr><name><name>colList</name><index>[<expr><name>c</name></expr>]</index></name></expr>)</condition> <block>{<block_content>  
        <case>case <expr><name>TSDB_DATA_TYPE_BOOL</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">2</literal></expr> ?</condition><then> <expr><literal type="string">"true"</literal></expr></then><else>: <expr><literal type="string">"false"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_TINYINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_SMALLINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_INT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_BIGINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_FLOAT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_DOUBLE</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%f"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_VARCHAR</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"'var%d'"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%lld"</literal></expr></argument>, <argument><expr><name>bpTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_NCHAR</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"'nch%d'"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UTINYINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_USMALLINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <case>case <expr><name>TSDB_DATA_TYPE_UBIGINT</name></expr>:</case>
          <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">"%d"</literal></expr></argument>, <argument><expr><call><name>rand</name><argument_list>()</argument_list></call> <operator>%</operator> <literal type="number">128</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <break>break;</break>
        <default>default:</default>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"invalid col type:%d"</literal></expr></argument>, <argument><expr><name><name>colList</name><index>[<expr><name>c</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></switch>      
    </block_content>}</block></for>

    <expr_stmt><expr><name>blen</name> <operator>+=</operator> <call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>blen</name></expr></argument>, <argument><expr><literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>       
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>printCreateTblSql</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tCreate Table SQL:%s\n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>bpPrecisionStr</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>precision</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name>precision</name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TIME_PRECISION_MILLI</name></expr>:</case>
      <return>return <expr><literal type="string">"ms"</literal></expr>;</return>
    <case>case <expr><name>TIME_PRECISION_MICRO</name></expr>:</case>
      <return>return <expr><literal type="string">"us"</literal></expr>;</return>
    <case>case <expr><name>TIME_PRECISION_NANO</name></expr>:</case>
      <return>return <expr><literal type="string">"ns"</literal></expr>;</return>
    <default>default:</default>
      <return>return <expr><literal type="string">"unknwon"</literal></expr>;</return>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>bpSetStartupTs</name><parameter_list>()</parameter_list> <block>{<block_content>
  <switch>switch <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>precision</name></name></expr>)</condition> <block>{<block_content>
    <case>case <expr><name>TIME_PRECISION_MILLI</name></expr>:</case>
      <expr_stmt><expr><name>bpTs</name> <operator>=</operator> <name>BP_STARTUP_TS</name></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TIME_PRECISION_MICRO</name></expr>:</case>
      <expr_stmt><expr><name>bpTs</name> <operator>=</operator> <name>BP_STARTUP_TS</name> <operator>*</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <break>break;</break>
    <case>case <expr><name>TIME_PRECISION_NANO</name></expr>:</case>
      <expr_stmt><expr><name>bpTs</name> <operator>=</operator> <name>BP_STARTUP_TS</name> <operator>*</operator> <literal type="number">1000000</literal></expr>;</expr_stmt>
      <break>break;</break>
    <default>default:</default>
      <expr_stmt><expr><name>bpTs</name> <operator>=</operator> <name>BP_STARTUP_TS</name></expr>;</expr_stmt>
      <break>break;</break>
  </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>prepare</name><parameter_list>(<parameter><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>colNum</name></decl></parameter>, <parameter><decl><type><name>int32_t</name> <modifier>*</modifier></type><name>colList</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prepareStb</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>createDbSql</name><index>[<expr><literal type="number">128</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database demo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>createDbSql</name></expr></argument>, <argument><expr><literal type="string">"create database demo keep 36500 precision \"%s\""</literal></expr></argument>, <argument><expr><call><name>bpPrecisionStr</name><argument_list>(<argument><expr><name><name>gCaseCtrl</name><operator>.</operator><name>precision</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\tCreate Database SQL:%s\n"</literal></expr></argument>, <argument><expr><name>createDbSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>createDbSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to create database, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use demo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if_stmt><if>if <condition>(<expr><literal type="number">0</literal> <operator>==</operator> <name>prepareStb</name></expr>)</condition> <block>{<block_content>
    <comment type="line">// create table</comment>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>generateCreateTableSQL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>colNum</name></expr></argument>, <argument><expr><name>colList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to create table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><literal type="number">1</literal> <operator>==</operator> <name>prepareStb</name> <operator>||</operator> <literal type="number">3</literal> <operator>==</operator> <name>prepareStb</name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>generateCreateTableSQL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>bpDefaultStbId</name></expr></argument>, <argument><expr><name>colNum</name></expr></argument>, <argument><expr><name>colList</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to create table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    
    <if_stmt><if>if <condition>(<expr><literal type="number">3</literal> <operator>==</operator> <name>prepareStb</name></expr>)</condition> <block>{<block_content>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">10</literal></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>generateCreateTableSQL</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>colNum</name></expr></argument>, <argument><expr><name>colList</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!failed to create table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></else></if_stmt>

</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>runCase</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>caseIdx</name></decl></parameter>, <parameter><decl><type><name>int32_t</name></type> <name>caseRunIdx</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>silent</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int64_t</name></type> <name>beginUs</name></decl>, <decl><type ref="prev"/><name>endUs</name></decl>, <decl><type ref="prev"/><name>totalUs</name></decl>;</decl_stmt>  
  <decl_stmt><decl><type><name>CaseCfg</name></type> <name>cfg</name> <init>= <expr><name><name>gCase</name><index>[<expr><name>caseIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>CaseCfg</name></type> <name>cfgBk</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>gCurCase</name> <operator>=</operator> <operator>&amp;</operator><name>cfg</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>bpSetStartupTs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  
  <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>gCaseCtrl</name><operator>.</operator><name>bindColTypeNum</name></name> <operator>||</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>bindColNum</name></name><operator>)</operator> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>colNum</name></name> <operator>!=</operator> <name>gFullColNum</name><operator>)</operator></expr>)</condition> <block>{<block_content>
    <return>return <expr><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>preCaseIdx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>bool</name></type> <name>printRes</name> <init>= <expr><name><name>gCaseCtrl</name><operator>.</operator><name>printRes</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>printStmtSql</name> <init>= <expr><name><name>gCaseCtrl</name><operator>.</operator><name>printStmtSql</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>gCaseCtrl</name><operator>.</operator><name>printRes</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCaseCtrl</name><operator>.</operator><name>printStmtSql</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>runCase</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>preCaseIdx</name></name></expr></argument>, <argument><expr><name>caseRunIdx</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCaseCtrl</name><operator>.</operator><name>printRes</name></name> <operator>=</operator> <name>printRes</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCaseCtrl</name><operator>.</operator><name>printStmtSql</name></name> <operator>=</operator> <name>printStmtSql</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>gCurCase</name> <operator>=</operator> <operator>&amp;</operator><name>cfg</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>runTimes</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>runTimes</name></name> <operator>=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>runTimes</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>rowNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>rowNum</name></name> <operator>=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>rowNum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>autoCreateTbl</name></name></expr>)</condition> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>testType</name></name> <operator>==</operator> <name>TTYPE_INSERT</name> <operator>&amp;&amp;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>tblNum</name></name> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>autoCreateTbl</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name> <operator>=</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>colNum</name></name></expr>;</expr_stmt>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></else></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>=</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>colNum</name></name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>autoCreateTbl</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name> <operator>=</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>colNum</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindNullNum</name></name> <operator>=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>bindNullNum</name></name></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>bindColNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>bindColNum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>bindTagNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name> <operator>=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>bindTagNum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>bindRowNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindRowNum</name></name> <operator>=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>bindRowNum</name></name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>bindColTypeNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindColNum</name></name> <operator>=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>bindColTypeNum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>bindTagTypeNum</name></name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>bindTagNum</name></name> <operator>=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>bindTagTypeNum</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>fullCol</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"* Case %d - [%s]%s Begin *\n"</literal></expr></argument>, <argument><expr><name>caseRunIdx</name></expr></argument>, <argument><expr><name><name>gCaseCtrl</name><operator>.</operator><name>caseCatalog</name></name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>caseDesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <expr_stmt><expr><name>totalUs</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>cfgBk</name> <operator>=</operator> <name>cfg</name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>n</name> <operator>&lt;</operator> <name><name>gCurCase</name><operator>-&gt;</operator><name>runTimes</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>n</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gCurCase</name><operator>-&gt;</operator><name>preCaseIdx</name></name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>prepare</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>colNum</name></name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>colList</name></name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>autoCreateTbl</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    
    <expr_stmt><expr><name>beginUs</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>NULL</name> <operator>==</operator> <name>stmt</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!taos_stmt_init failed, error:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  
    <expr_stmt><expr><call>(<modifier>*</modifier><name><name>gCurCase</name><operator>-&gt;</operator><name>runFn</name></name>)<argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><name>endUs</name> <operator>=</operator> <call><name>taosGetTimestampUs</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>totalUs</name> <operator>+=</operator> <operator>(</operator><name>endUs</name> <operator>-</operator> <name>beginUs</name><operator>)</operator></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>prepareCheckResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>silent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>cfg</name> <operator>=</operator> <name>cfgBk</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <if_stmt><if>if <condition>(<expr><operator>!</operator><name>silent</name></expr>)</condition> <block>{<block_content>  
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"* Case %d - [%s]%s [AvgTime:%.3fms] End *\n"</literal></expr></argument>, <argument><expr><name>caseRunIdx</name></expr></argument>, <argument><expr><name><name>gCaseCtrl</name><operator>.</operator><name>caseCatalog</name></name></expr></argument>, <argument><expr><name><name>gCurCase</name><operator>-&gt;</operator><name>caseDesc</name></name></expr></argument>, <argument><expr><operator>(</operator><operator>(</operator><name>double</name><operator>)</operator><name>totalUs</name><operator>)</operator><operator>/</operator><literal type="number">1000</literal><operator>/</operator><name><name>gCurCase</name><operator>-&gt;</operator><name>runTimes</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
  
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name><modifier>*</modifier></type> <name>runCaseList</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>caseRunIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><specifier>static</specifier> <name>int32_t</name></type> <name>caseRunNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>caseNum</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type> <name>caseIdx</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>gCaseCtrl</name><operator>.</operator><name>caseIdx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>gCaseCtrl</name><operator>.</operator><name>caseIdx</name></name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><name>caseIdx</name></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>gCase</name></expr></argument>)</argument_list></sizeof><operator>/</operator><sizeof>sizeof<argument_list>(<argument><expr><name><name>gCase</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></sizeof></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>caseNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>caseNum</name> <operator>&gt;=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>caseNum</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>caseRunNum</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>caseRunNum</name> <operator>&gt;=</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>caseRunNum</name></name></expr>)</condition> <block>{<block_content>
      <break>break;</break>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>gCaseCtrl</name><operator>.</operator><name>caseRunIdx</name></name> <operator>&gt;=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>caseRunIdx</name> <operator>&lt;</operator> <name><name>gCaseCtrl</name><operator>.</operator><name>caseRunIdx</name></name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><name>caseRunIdx</name><operator>++</operator></expr>;</expr_stmt>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>runCase</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>caseRunIdx</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
      <continue>continue;</continue>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>caseRunIdx</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>caseNum</name><operator>++</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name>caseRunNum</name><operator>++</operator></expr>;</expr_stmt>
  </block_content>}</block></for>

  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>runAll</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name><name>gCaseCtrl</name><operator>.</operator><name>caseCatalog</name></name></expr></argument>, <argument><expr><literal type="string">"Default Test"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s Begin\n"</literal></expr></argument>, <argument><expr><name><name>gCaseCtrl</name><operator>.</operator><name>caseCatalog</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>runCaseList</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  strcpy(gCaseCtrl.caseCatalog, "Micro DB precision Test");
  printf("%s Begin\n", gCaseCtrl.caseCatalog);
  gCaseCtrl.precision = TIME_PRECISION_MICRO;
  runCaseList(taos);
  gCaseCtrl.precision = TIME_PRECISION_MILLI;

  strcpy(gCaseCtrl.caseCatalog, "Nano DB precision Test");
  printf("%s Begin\n", gCaseCtrl.caseCatalog);
  gCaseCtrl.precision = TIME_PRECISION_NANO;
  runCaseList(taos);
  gCaseCtrl.precision = TIME_PRECISION_MILLI;
  
  strcpy(gCaseCtrl.caseCatalog, "Auto Create Table Test");
  gCaseCtrl.autoCreateTbl = true;
  printf("%s Begin\n", gCaseCtrl.caseCatalog);
  runCaseList(taos);
  gCaseCtrl.autoCreateTbl = false;

  strcpy(gCaseCtrl.caseCatalog, "Null Test");
  printf("%s Begin\n", gCaseCtrl.caseCatalog);
  gCaseCtrl.bindNullNum = 1;
  runCaseList(taos);
  gCaseCtrl.bindNullNum = 0;

  strcpy(gCaseCtrl.caseCatalog, "Bind Row Test");
  printf("%s Begin\n", gCaseCtrl.caseCatalog);
  gCaseCtrl.bindRowNum = 1;
  runCaseList(taos);
  gCaseCtrl.bindRowNum = 0;

  strcpy(gCaseCtrl.caseCatalog, "Row Num Test");
  printf("%s Begin\n", gCaseCtrl.caseCatalog);
  gCaseCtrl.rowNum = 1000;
  gCaseCtrl.printRes = false;
  runCaseList(taos);
  gCaseCtrl.rowNum = 0;
  gCaseCtrl.printRes = true;

  strcpy(gCaseCtrl.caseCatalog, "Runtimes Test");
  printf("%s Begin\n", gCaseCtrl.caseCatalog);
  gCaseCtrl.runTimes = 2;
  runCaseList(taos);
  gCaseCtrl.runTimes = 0;

  strcpy(gCaseCtrl.caseCatalog, "Check Param Test");
  printf("%s Begin\n", gCaseCtrl.caseCatalog);
  gCaseCtrl.checkParamNum = true;
  runCaseList(taos);
  gCaseCtrl.checkParamNum = false;

  strcpy(gCaseCtrl.caseCatalog, "Bind Col Num Test");
  printf("%s Begin\n", gCaseCtrl.caseCatalog);
  gCaseCtrl.bindColNum = 6;
  runCaseList(taos);
  gCaseCtrl.bindColNum = 0;

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
  strcpy(gCaseCtrl.caseCatalog, "Bind Col Type Test");
  printf("%s Begin\n", gCaseCtrl.caseCatalog);
  gCaseCtrl.bindColTypeNum = tListLen(bindColTypeList);
  gCaseCtrl.bindColTypeList = bindColTypeList;  
  runCaseList(taos);
*/</comment>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"All Test End\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>srand</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// connect to server</comment>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"please input server ip \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>taos</name> <operator>=</operator> <call><name>taos_connect</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to connect to db, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>   

  <expr_stmt><expr><call><name>runAll</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
