<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/tests/script/api/stmtBatchTest.c"><comment type="line">// TAOS standard API example. The same syntax as MySQL, but only a subet </comment>
<comment type="line">// to compile: gcc -o prepare prepare.c -ltaos</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../../../include/client/taos.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taoserror.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>MAX_ROWS_OF_PER_COLUMN</name></cpp:macro>   <cpp:value>32770</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>    <cpp:macro><name>MAX_BINARY_DEF_LEN</name></cpp:macro>       <cpp:value>(1024*16)</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <block>{
    <decl_stmt><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>ts</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type>    <name><name>b</name><index>[<expr><name>MAX_ROWS_OF_PER_COLUMN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int8_t</name></type>   <name><name>v1</name><index>[<expr><name>MAX_ROWS_OF_PER_COLUMN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int16_t</name></type>  <name><name>v2</name><index>[<expr><name>MAX_ROWS_OF_PER_COLUMN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type>  <name><name>v4</name><index>[<expr><name>MAX_ROWS_OF_PER_COLUMN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type>  <name><name>v8</name><index>[<expr><name>MAX_ROWS_OF_PER_COLUMN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>float</name></type>    <name><name>f4</name><index>[<expr><name>MAX_ROWS_OF_PER_COLUMN</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>double</name></type>   <name><name>f8</name><index>[<expr><name>MAX_ROWS_OF_PER_COLUMN</name></expr>]</index></name></decl>;</decl_stmt>
    <comment type="line">//char     br[MAX_ROWS_OF_PER_COLUMN][MAX_BINARY_DEF_LEN];      </comment>
    <comment type="line">//char     nr[MAX_ROWS_OF_PER_COLUMN][MAX_BINARY_DEF_LEN];</comment>
    <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>br</name></decl>;</decl_stmt>      
    <decl_stmt><decl><type><name>char</name>     <modifier>*</modifier></type><name>nr</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name><name>ts2</name><index>[<expr><name>MAX_ROWS_OF_PER_COLUMN</name></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>sampleValue</name>;</typedef>


<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>TAOS</name>   <modifier>*</modifier></type><name>taos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>     <name>idx</name></decl>;</decl_stmt>
}</block></struct></type> <name>ThreadInfo</name>;</typedef>

<comment type="line">//void taosMsleep(int mseconds);</comment>

<decl_stmt><decl><type><name>int</name></type> <name>g_runTimes</name> <init>= <expr><literal type="number">5</literal></expr></init></decl>;</decl_stmt>


<function><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>getCurrentTime</name><parameter_list>()</parameter_list><block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>timeval</name></name></type> <name>tv</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>taosGetTimeOfDay</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tv</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>perror</name><argument_list>(<argument><expr><literal type="string">"Failed to get current time in ms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><name>EXIT_FAILURE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_sec</name></name> <operator>*</operator> <literal type="number">1000000ULL</literal> <operator>+</operator> <operator>(</operator><name>uint64_t</name><operator>)</operator><name><name>tv</name><operator>.</operator><name>tv_usec</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_bind_case_001</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>ts2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? values(?,?,?,?,?,?,?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_bind_case_002</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>ts2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? values(?,?,?,?,?,?,?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
  </block_content>}</block></for>

  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_bind_case_003</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? values(?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_bind_case_004</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>ts2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? values(?,?,?,?,?,?,?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
  
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>

      <comment type="line">// ===================================start==============================================//</comment>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
      <comment type="line">// ===================================end==============================================//</comment>

    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_bind_error_case_001</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>ts2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? values(?,?,?,?,?,?,?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
  
      <comment type="line">//------- add one batch ------//</comment>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      <comment type="line">//----------------------------//      </comment>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_bind_error_case_002</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>ts2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? values(?,?,?,?,?,?,?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
  
      <comment type="line">//code = taos_stmt_add_batch(stmt);</comment>
      <comment type="line">//if (code != 0) {</comment>
      <comment type="line">//  printf("failed to execute taos_stmt_add_batch. code:0x%x[%s]\n", code, tstrerror(code));</comment>
      <comment type="line">//  return -1;</comment>
      <comment type="line">//}</comment>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_bind_error_case_003</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <literal type="number">2</literal> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>ts2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name> <operator>*</operator> <literal type="number">2</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? values(?,?,?,?,?,?,?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <comment type="line">//==================add one=================//</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  
      <comment type="line">//==========================================//</comment>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>

        <comment type="line">//==================add one=================//</comment>
        <if_stmt><if>if <condition>(<expr><literal type="number">1</literal><operator>==</operator><name>col</name></expr>)</condition> <block>{<block_content>
          <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
          </block_content>}</block></if></if_stmt>  
        </block_content>}</block></if></if_stmt>
        <comment type="line">//==========================================//</comment>
      
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
  
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>checkResult</name><parameter_list>(<parameter><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>tname</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>printr</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>expected</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>sql</name><index>[<expr><literal type="number">255</literal></expr>]</index></name> <init>= <expr><literal type="string">"SELECT * FROM "</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>strcat</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to query table: %s, reason:%s\n"</literal></expr></argument>, <argument><expr><name>tname</name></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>TAOS_ROW</name></type>    <name>row</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>rows</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>         <name>num_fields</name> <init>= <expr><call><name>taos_num_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_FIELD</name> <modifier>*</modifier></type><name>fields</name> <init>= <expr><call><name>taos_fetch_fields</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>        <name><name>temp</name><index>[<expr><literal type="number">256</literal></expr>]</index></name></decl>;</decl_stmt>

  <comment type="line">// fetch the records row by row</comment>
  <while>while <condition>(<expr><operator>(</operator><name>row</name> <operator>=</operator> <call><name>taos_fetch_row</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>rows</name><operator>++</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>printr</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>temp</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_print_row</name><argument_list>(<argument><expr><name>temp</name></expr></argument>, <argument><expr><name>row</name></expr></argument>, <argument><expr><name>fields</name></expr></argument>, <argument><expr><name>num_fields</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"[%s]\n"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></while>
  
  <if_stmt><if>if <condition>(<expr><name>rows</name> <operator>==</operator> <name>expected</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%d rows are fetched as expectation from %s\n"</literal></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"!!!expect %d rows, but %d rows are fetched from %s\n"</literal></expr></argument>, <argument><expr><name>expected</name></expr></argument>, <argument><expr><name>rows</name></expr></argument>, <argument><expr><name>tname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></else></if_stmt>

  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>prepareV</name><parameter_list>(<parameter><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>schemaCase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>code</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists demo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database demo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create database, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use demo"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// create table</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>schemaCase</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"create table m%d (ts timestamp, b int)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>prepareV_long</name><parameter_list>(<parameter><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>schemaCase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>code</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists demol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database demol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create database, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"use demol"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// create table</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>schemaCase</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"create table m%d (ts timestamp, b int)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>prepareVcolumn_autoCreateTbl</name><parameter_list>(<parameter><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>schemaCase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>sqlstr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlstr</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists %s;"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sqlstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlstr</name></expr></argument>, <argument><expr><literal type="string">"create database %s;"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sqlstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create database, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlstr</name></expr></argument>, <argument><expr><literal type="string">"use %s;"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sqlstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// create table</comment>
  <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <comment type="line">//if (bigsize) {</comment>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"create stable stb1 (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)"</literal> 
                 <literal type="string">" tags(id1 int, id2 bool, id3 tinyint, id4 smallint, id5 bigint, id6 float, id7 double, id8 binary(%d), id9 nchar(%d))"</literal></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
  <comment type="line">//} else {</comment>
  <comment type="line">//  sprintf(buf, "create stable stb1 (ts timestamp, b int) tags(id1 int, id2 bool, id3 tinyint, id4 smallint, id5 bigint, id6 float, id7 double, id8 binary(40), id9 nchar(40))") ;</comment>
  <comment type="line">//}</comment>
    
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>void</name></type> <name>prepareVcolumn</name><parameter_list>(<parameter><decl><type><name>TAOS</name>     <modifier>*</modifier></type><name>taos</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>schemaCase</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>dbName</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_RES</name> <modifier>*</modifier></type><name>result</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>      <name>code</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>     <name><name>sqlstr</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlstr</name></expr></argument>, <argument><expr><literal type="string">"drop database if exists %s;"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sqlstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlstr</name></expr></argument>, <argument><expr><literal type="string">"create database %s;"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sqlstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create database, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  </block_content>}</block></if></if_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>sqlstr</name></expr></argument>, <argument><expr><literal type="string">"use %s;"</literal></expr></argument>, <argument><expr><name>dbName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>sqlstr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <comment type="line">// create table</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl> ;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>schemaCase</name></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"create table m%d (ts timestamp, b int)"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr> ;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    
    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_errno</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to create table, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>taos_free_result</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></for>

</block_content>}</block></function>

<comment type="line">//void runcase(TAOS     *taos, int idx) {</comment>
<function><type><specifier>static</specifier> <name>void</name></type> <name>runCase</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>int</name></type> <name>tableNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bingNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>columnNum</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name></decl>;</decl_stmt>

<comment type="line">//=======================================================================//</comment>
<comment type="line">//=============================== single table ==========================//</comment>
<comment type="line">//========== case 1: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<block>{<block_content>
  <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stmt_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 1 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <comment type="line">//========== case 2: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<block>{<block_content>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stmt_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 2 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

    <comment type="line">//========== case 3: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 3 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

      <comment type="line">//========== case 4: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 4 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

<comment type="line">//=======================================================================//</comment>
<comment type="line">//=============================== multi tables ==========================//</comment>
  <comment type="line">//========== case 5: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stmt_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 5 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
  
    <comment type="line">//========== case 6: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 6 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
  
      <comment type="line">//========== case 7: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 7 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
  
        <comment type="line">//========== case 8: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<block>{<block_content>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stmt_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 8 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <comment type="line">//=======================================================================//</comment>
  <comment type="line">//=============================== multi-rows to single table ==========================//</comment>
  <comment type="line">//========== case 9: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">23740</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stmt_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 9 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

    <comment type="line">//========== case 10: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 10 error test start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">23741</literal></expr>;</expr_stmt>  <comment type="line">// WAL size exceeds limit</comment>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 10 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  
    <comment type="line">//========== case 11: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_bind_case_003</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 11 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

      <comment type="line">//========== case 12: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
      <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 12 error test start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt> <comment type="line">// invalid parameter</comment>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_bind_case_003</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 12 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <comment type="line">//=======================================================================//</comment>
  <comment type="line">//=============================== multi tables, multi bind one same table ==========================//</comment>
    <comment type="line">//========== case 13: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_bind_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 13 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
    
      <comment type="line">//========== case 14: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_bind_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 14 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

    
  <comment type="line">//========== case 15: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m111"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m222"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m333"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m999"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 15 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

    <comment type="line">//========== case 16: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 16 error test start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_bind_error_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">//checkResult(taos, "m11", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m22", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m33", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m99", 0, totalRowsPerTbl);</comment>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 16 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

    <comment type="line">//========== case 17: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <comment type="line">//printf("case 17 test start\n");</comment>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_bind_case_004</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//checkResult(taos, "m11", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m22", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m33", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m99", 0, totalRowsPerTbl);</comment>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 17 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

      <comment type="line">//========== case 18: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 18 error test start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_bind_error_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//checkResult(taos, "m11", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m22", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m33", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m99", 0, totalRowsPerTbl);</comment>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 18 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

      <comment type="line">//========== case 19: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 19 error test start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareV</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_bind_error_case_003</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//checkResult(taos, "m11", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m22", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m33", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m99", 0, totalRowsPerTbl);</comment>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 19 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <return>return ;</return>

</block_content>}</block></function>


<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_bind_case_001_long</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>, <parameter><decl><type><name>int64_t</name><modifier>*</modifier></type> <name>startTs</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><operator>*</operator><name>startTs</name></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int16_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>double</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">9</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>ts2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">10</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <expr_stmt><expr><operator>*</operator><name>startTs</name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</expr_stmt> <comment type="line">// return to next</comment>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? values(?,?,?,?,?,?,?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>runCase_long</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>int</name></type> <name>tableNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bingNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>columnNum</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name></decl>;</decl_stmt>

<comment type="line">//=======================================================================//</comment>
    <comment type="line">//========== long case 14: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    {
        stmt = taos_stmt_init(taos);
        
        tableNum = 1000;
        rowsOfPerColum = 10;
        bingNum = 5000000;
        lenOfBinaryDef = 1000;
        lenOfBinaryAct = 33;
        columnNum = 11;
        
        prepareV(taos, 1, tableNum, lenOfBinaryDef);
        stmt_bind_case_002(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);
    
        totalRowsPerTbl = rowsOfPerColum * bingNum;
        checkResult(taos, "m0", 0, totalRowsPerTbl);
        checkResult(taos, "m1", 0, totalRowsPerTbl);
        checkResult(taos, "m2", 0, totalRowsPerTbl);  
        checkResult(taos, "m3", 0, totalRowsPerTbl);
        checkResult(taos, "m4", 0, totalRowsPerTbl);
        taos_stmt_close(stmt);
        printf("long case 14 check result end\n\n");
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

    
  <comment type="line">//========== case 15: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====long case 15 test start\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">110</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">11</literal></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>int64_t</name></type> <name>startTs</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>prepareV_long</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>g_runTimes</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_bind_case_001_long</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>startTs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>+=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m11"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m22"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m133"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m199"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====long case 15 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <return>return;</return>

</block_content>}</block></function>

<comment type="block">/*=======================*/</comment>
<comment type="block">/*
test scene:   insert into tb1 (ts,f1) values (?,?)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_specifyCol_bind_case_001</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into m0 (ts,b,v4,f4,br) values(?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <comment type="line">//char buf[32];</comment>
      <comment type="line">//sprintf(buf, "m%d", zz);</comment>
      <comment type="line">//code = taos_stmt_set_tbname(stmt, buf);</comment>
      <comment type="line">//if (code != 0){</comment>
      <comment type="line">//  printf("failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n", code, tstrerror(code));</comment>
      <comment type="line">//  return -1;</comment>
      <comment type="line">//}  </comment>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*=======================*/</comment>
<comment type="block">/*
test scene:   insert into ? (ts,f1) values (?,?)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_specifyCol_bind_case_002</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? (ts,b,v4,f4,br) values(?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="block">/*=======================*/</comment>
<comment type="block">/*
test scene:   insert into tb1 (ts,f1) values (?,?)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_specifyCol_bind_case_001_maxRows</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into m0 (ts,b,v4,f4,br) values(?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <comment type="line">//char buf[32];</comment>
      <comment type="line">//sprintf(buf, "m%d", zz);</comment>
      <comment type="line">//code = taos_stmt_set_tbname(stmt, buf);</comment>
      <comment type="line">//if (code != 0){</comment>
      <comment type="line">//  printf("failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n", code, tstrerror(code));</comment>
      <comment type="line">//  return -1;</comment>
      <comment type="line">//}  </comment>

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SpecifyColumnBatchCase</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>tableNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bingNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>columnNum</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name></decl>;</decl_stmt>

<comment type="line">//=======================================================================//</comment>
<comment type="line">//=============================== single table ==========================//</comment>
<comment type="line">//========== case 1: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<block>{<block_content>
  <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 1 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <comment type="line">//========== case 2: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<block>{<block_content>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 2 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

      <comment type="line">//========== case 2-1: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db2_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 2-1 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
          <comment type="line">//========== case 2-2: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 2-2 error test start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db2_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
            <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
            <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
            <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
            <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
            <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 2-2 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  


    <comment type="line">//========== case 3: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 3 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

      <comment type="line">//========== case 4: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 4 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

<comment type="line">//=======================================================================//</comment>
<comment type="line">//=============================== multi tables ==========================//</comment>
  <comment type="line">//========== case 5: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 5 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
  
    <comment type="line">//========== case 6: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 6 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
  
      <comment type="line">//========== case 7: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 7 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
  
        <comment type="line">//========== case 8: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<block>{<block_content>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 8 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <comment type="line">//=======================================================================//</comment>
  <comment type="line">//=============================== multi-rows to single table ==========================//</comment>
  <comment type="line">//========== case 9: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">23740</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 9 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

    <comment type="line">//========== case 10: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    {
      printf("====case 10 error test start\n");
      stmt = taos_stmt_init(taos);
    
      tableNum = 1;
      rowsOfPerColum = 23741;  <comment type="line">// WAL size exceeds limit</comment>
      bingNum = 1;
      lenOfBinaryDef = 40;
      lenOfBinaryAct = 8;
      columnNum = 5;
      
      prepareV(taos, 1, tableNum, lenOfBinaryDef);
      stmt_specifyCol_bind_case_001(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);
    
      totalRowsPerTbl = rowsOfPerColum * bingNum;
      checkResult(taos, "m0", 0, totalRowsPerTbl);
      taos_stmt_close(stmt);
      printf("====case 10 check result end\n\n");
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  


  <comment type="line">//=======================================================================//</comment>
  <comment type="line">//=============================== multi tables, multi bind one same table ==========================//</comment>
    <comment type="line">//========== case 13: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">28</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db13"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 13 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
    
      <comment type="line">//========== case 14: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db14"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m2"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m4"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 14 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

    
  <comment type="line">//========== case 15: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db15"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m111"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m222"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m333"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m500"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m999"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 15 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

    <comment type="line">//========== case 17: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <comment type="line">//printf("case 17 test start\n");</comment>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">100</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db17"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m5"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m8"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m9"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 17 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

  <return>return ;</return>

</block_content>}</block></function>


<comment type="block">/*=======================*/</comment>
<comment type="block">/*
test scene:   insert into tb1 (ts,f1) values (?,?)
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_specifyCol_bind_case_001_autoCreateTbl</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS_BIND</name>       <modifier>*</modifier></type><name>tags</name>   <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>one_not_null</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name> <operator>*</operator><operator>)</operator><name>lb</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name> <operator>*</operator><operator>)</operator><name>lb</name></expr>;</expr_stmt>
  </block_content>}</block></for>


  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)</comment>
  <comment type="line">//char *sql = "insert into ? (ts,b,v4,f4,br) using stb1 tags (?,?,?,?,?,?,?,?,?) values(?,?,?,?,?)";</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? using stb1 tags (?,?,?,?,?,?,?,?,?) (ts,b,v4,f4,br) values(?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname_tags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_specifyCol_bind_case_002_autoCreateTbl</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS_BIND</name>       <modifier>*</modifier></type><name>tags</name>   <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>one_not_null</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">//tags[i+0].buffer_type = TSDB_DATA_TYPE_INT;</comment>
    <comment type="line">//tags[i+0].buffer = v-&gt;v4;</comment>
    <comment type="line">//tags[i+0].is_null = &amp;one_not_null;</comment>
    <comment type="line">//tags[i+0].length = NULL;</comment>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="line">//tags[i+2].buffer_type = TSDB_DATA_TYPE_TINYINT;</comment>
    <comment type="line">//tags[i+2].buffer = v-&gt;v1;</comment>
    <comment type="line">//tags[i+2].is_null = &amp;one_not_null;</comment>
    <comment type="line">//tags[i+2].length = NULL;</comment>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name> <operator>*</operator><operator>)</operator><name>lb</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name> <operator>*</operator><operator>)</operator><name>lb</name></expr>;</expr_stmt>
  </block_content>}</block></for>


  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)</comment>
  <comment type="line">//char *sql = "insert into ? (ts,b,v4,f4,br) using stb1 tags (?,?,?,?,?,?,?,?,?) values(?,?,?,?,?)";</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? using stb1 tags (33,?,99,?,?,?,?,?,?) (ts,b,v4,f4,br) values(?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname_tags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">//  some tags are null</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_specifyCol_bind_case_003_autoCreateTbl</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS_BIND</name>       <modifier>*</modifier></type><name>tags</name>   <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>one_not_null</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>one_is_null</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TINYINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v1</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">7</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name> <operator>*</operator><operator>)</operator><name>lb</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">8</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name> <operator>*</operator><operator>)</operator><name>lb</name></expr>;</expr_stmt>
  </block_content>}</block></for>


  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)</comment>
  <comment type="line">//char *sql = "insert into ? (ts,b,v4,f4,br) using stb1 tags (?,?,?,?,?,?,?,?,?) values(?,?,?,?,?)";</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? using stb1 tags (?,?,?,?,?,?,?,?,?) (ts,b,v4,f4,br) values(?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname_tags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// specify tags field, and not support , then is error case</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_specifyCol_bind_case_004_autoCreateTbl</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>TAOS_BIND</name>       <modifier>*</modifier></type><name>tags</name>   <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <literal type="number">9</literal> <operator>*</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>one_not_null</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <comment type="line">//tags[i+0].buffer_type = TSDB_DATA_TYPE_INT;</comment>
    <comment type="line">//tags[i+0].buffer = v-&gt;v4;</comment>
    <comment type="line">//tags[i+0].is_null = &amp;one_not_null;</comment>
    <comment type="line">//tags[i+0].length = NULL;</comment>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <comment type="line">//tags[i+2].buffer_type = TSDB_DATA_TYPE_TINYINT;</comment>
    <comment type="line">//tags[i+2].buffer = v-&gt;v1;</comment>
    <comment type="line">//tags[i+2].is_null = &amp;one_not_null;</comment>
    <comment type="line">//tags[i+2].length = NULL;</comment>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_SMALLINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v2</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BIGINT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_DOUBLE</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f8</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">5</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name> <operator>*</operator><operator>)</operator><name>lb</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_NCHAR</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <operator>&amp;</operator><name>one_not_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tags</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">6</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name> <operator>*</operator><operator>)</operator><name>lb</name></expr>;</expr_stmt>
  </block_content>}</block></for>


  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)</comment>
  <comment type="line">//char *sql = "insert into ? (ts,b,v4,f4,br) using stb1 tags (?,?,?,?,?,?,?,?,?) values(?,?,?,?,?)";</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? using stb1 (id1, id2, id3, id4, id5, id6, id7, id8, id9) tags (33,?,99,?,?,?,?,?,?) (ts,b,v4,f4,br) values(?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname_tags</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>tags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SpecifyColumnBatchCase_autoCreateTbl</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>tableNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bingNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>columnNum</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name></decl>;</decl_stmt>

<comment type="line">//=======================================================================//</comment>
<comment type="line">//=============================== single table ==========================//</comment>
<comment type="line">//========== case 1: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<block>{<block_content>
  <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
  
  <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 1 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <comment type="line">//========== case 2: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<block>{<block_content>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 2 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

      <comment type="line">//========== case 2-1: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">32767</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db2_1"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 2-1 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
          <comment type="line">//========== case 2-2: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
        <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 2-2 error test start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
            <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">32768</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db2_2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
            <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
            <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
            <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
            <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
            <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 2-2 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  


    <comment type="line">//========== case 3: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">20</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 3 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

      <comment type="line">//========== case 4: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">33</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db4"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 4 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <comment type="line">//=======================================================================//</comment>
  <comment type="line">//=============================== multi-rows to single table ==========================//</comment>
  <comment type="line">//========== case 5: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
  <block>{<block_content>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">23740</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db5"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
    <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 5 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

<comment type="line">//  ==============  error test: 1.multi table, 2.specify some tags</comment>
    <comment type="line">//========== case 6: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db6"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 6 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

          <comment type="line">//========== case 7: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
          <block>{<block_content>
            <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
            <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
            
            <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db7"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_001_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          
            <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m99"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m139"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m199"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 7 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

      <comment type="line">//========== case 8: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
      <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db8"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_002_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 8 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

        <comment type="line">//========== case 9: ======================//</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
        <block>{<block_content>
          <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
          <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">10</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
          <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
          
          <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db9"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_002_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        
          <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m3"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m6"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m9"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 9 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

    <comment type="line">//========== case 10: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
    <block>{<block_content>
      <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">23740</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
      
      <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db10"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_003_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 10 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
  
      <comment type="line">//========== case 11: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
      <block>{<block_content>
        <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
        
        <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db11"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_003_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
        <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 11 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

            <comment type="line">//========== case 12: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
            <block>{<block_content>
              <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
              <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">200</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">60</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
              <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
              
              <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db12"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_003_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            
              <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m1"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m99"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m139"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m199"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 12 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  
              <comment type="line">//========== case 13: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
              <block>{<block_content>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 13 error test start\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              
                <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">40</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">8</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
                
                <expr_stmt><expr><call><name>prepareVcolumn_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db13"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>stmt_specifyCol_bind_case_004_autoCreateTbl</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              
                <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"====case 13 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
              </block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <return>return ;</return>

</block_content>}</block></function>


<comment type="block">/*=======================*/</comment>
<comment type="block">/*
char * taos_stmt_errstr(TAOS_STMT *stmt) ç¨äºå¨å¶ä»stmt API è¿åéè¯¯ï¼è¿åéè¯¯ç æç©ºæéï¼æ¶è·åéè¯¯ä¿¡æ¯ï¼è¿åçéè¯¯ä¿¡æ¯å¯è½æ¯ä»¥ä¸3ç§çä¸ä¸ªï¼
1. å½stmtæsqlobjä¸ºç©ºæ¶çterrnoå¯¹äºçéè¯¯æ¶æ¯;
2. ï¼å¯æçï¼è¯¦ç»éè¯¯æ¶æ¯ï¼
3. è¿åçéè¯¯ç å¯¹äºçéè¯¯æ¶æ¯ï¼
*/</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_specifyCol_bind_error_case_001</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d-0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into m0 (ts,b,v4,f4,br) values(?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>code</name></decl>;</decl_stmt>
  <comment type="line">//TAOS_STMT *stmtNull = NULL;</comment>
  <comment type="line">//int code = taos_stmt_prepare(stmtNull, sql, 0);</comment>
  <comment type="line">//if (code != 0){</comment>
  <comment type="line">//  printf("failed to execute taos_stmt_prepare. code:0x%x[%s][%s]\n", code, tstrerror(code),  taos_stmt_errstr(stmtNull));</comment>
  <comment type="line">//  return -1;</comment>
  <comment type="line">//}</comment>

  <comment type="line">//char* sqlNull = NULL;</comment>
  <comment type="line">//code = taos_stmt_prepare(stmt, sqlNull, 0);</comment>
  <comment type="line">//if (code != 0){</comment>
  <comment type="line">//  printf("failed to execute taos_stmt_prepare. code:0x%x[%s][%s]\n", code, tstrerror(code),  taos_stmt_errstr(stmt));</comment>
  <comment type="line">//}</comment>
  
  <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s][%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <comment type="line">//char buf[32];</comment>
      <comment type="line">//sprintf(buf, "m%d", zz);</comment>
      <comment type="line">//code = taos_stmt_set_tbname(stmt, buf);</comment>
      <comment type="line">//if (code != 0){</comment>
      <comment type="line">//  printf("failed to execute taos_stmt_set_tbname. code:0x%x[%s]\n", code, tstrerror(code));</comment>
      <comment type="line">//  return -1;</comment>
      <comment type="line">//}  </comment>

      <comment type="line">//for (int col=0; col &lt; columnNum + 1000; ++col) {</comment>
      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>col</name> <operator>&gt;=</operator> <name>columnNum</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><name>col</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <comment type="line">//code = taos_stmt_bind_single_param_batch(NULL, params + id, col);</comment>
        <comment type="line">//code = taos_stmt_bind_single_param_batch(stmt, NULL, col);</comment>
        <comment type="line">//code = taos_stmt_bind_single_param_batch(stmt, params + id, columnNum);</comment>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s][%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <comment type="line">//code = taos_stmt_add_batch(NULL);</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s][%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>      
      
      <comment type="line">//code = taos_stmt_add_batch(stmt);</comment>
      <comment type="line">//if (code != 0) {</comment>
      <comment type="line">//  printf("failed to execute taos_stmt_add_batch second. code:0x%x[%s][%s]\n", code, tstrerror(code),  taos_stmt_errstr(stmt));</comment>
      <comment type="line">//  return -1;</comment>
      <comment type="line">//}</comment>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>stmt_specifyCol_bind_error_case_002</name><parameter_list>(<parameter><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>tableNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>bingNum</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>columnNum</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>sampleValue</name><modifier>*</modifier></type> <name>v</name> <init>= <expr><operator>(</operator><name>sampleValue</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sampleValue</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name> <init>= <expr><name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name> <operator>=</operator> <operator>(</operator><name>int64_t</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>lenOfBinaryDef</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>lb</name> <init>= <expr><operator>(</operator><name>int</name> <operator>*</operator><operator>)</operator><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><name>MAX_ROWS_OF_PER_COLUMN</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  
  <decl_stmt><decl><type><name>TAOS_MULTI_BIND</name> <modifier>*</modifier></type><name>params</name> <init>= <expr><call><name>taosMemoryCalloc</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>TAOS_MULTI_BIND</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>size_t</name><operator>)</operator><operator>(</operator><name>bingNum</name> <operator>*</operator> <name>columnNum</name> <operator>*</operator> <operator>(</operator><name>tableNum</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name>rowsOfPerColum</name><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>is_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>no_null</name> <init>= <expr><call><name>taosMemoryMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>MAX_ROWS_OF_PER_COLUMN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int64_t</name></type> <name>tts</name> <init>= <expr><literal type="number">1591060628000</literal></expr></init></decl>;</decl_stmt>

  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>rowsOfPerColum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>lb</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>lenOfBinaryAct</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>no_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>is_null</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">10</literal> <operator>==</operator> <literal type="number">2</literal><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">1</literal></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>b</name><index>[<expr><name>i</name></expr>]</index></name>  <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><name>i</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v1</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int8_t</name><operator>)</operator><operator>(</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator> <operator>%</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int16_t</name><operator>)</operator><name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int32_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>v8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f4</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>float</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>f8</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator><operator>(</operator><name>i</name><operator>+</operator><literal type="number">4</literal><operator>)</operator></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>tbuf</name><index>[<expr><name>MAX_BINARY_DEF_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"binary-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>MAX_BINARY_DEF_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>tbuf</name></expr></argument>, <argument><expr><literal type="string">"nchar-%d"</literal></expr></argument>,  <argument><expr><name>i</name><operator>%</operator><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name> <operator>+</operator> <name>i</name><operator>*</operator><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>tbuf</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><name>lenOfBinaryAct</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts2</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name>bingNum</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>j</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_TIMESTAMP</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int64_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <operator>&amp;</operator><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>j</name><operator>*</operator><name>rowsOfPerColum</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>no_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>
    
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BOOL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int8_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>b</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>int32_t</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>v4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">2</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_FLOAT</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>f4</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">3</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_type</name> <operator>=</operator> <name>TSDB_DATA_TYPE_BINARY</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer_length</name> <operator>=</operator> <operator>(</operator><name>uintptr_t</name><operator>)</operator><name>lenOfBinaryDef</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>buffer</name> <operator>=</operator> <name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>length</name> <operator>=</operator> <name>lb</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>is_null</name> <operator>=</operator> <name>is_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>params</name><index>[<expr><name>i</name><operator>+</operator><literal type="number">4</literal></expr>]</index></name><operator>.</operator><name>num</name> <operator>=</operator> <name>rowsOfPerColum</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>i</name><operator>+=</operator><name>columnNum</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <comment type="line">//int64_t tts = 1591060628000;</comment>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <expr_stmt><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>tts</name> <operator>+</operator> <name>i</name></expr>;</expr_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>starttime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

<comment type="line">// create table m%d (ts timestamp, b bool, v1 tinyint, v2 smallint, v4 int, v8 bigint, f4 float, f8 double, br binary(%d), nr nchar(%d), ts2 timestamp)</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><literal type="string">"insert into ? (ts,b,v4,f4,br) values(?,?,?,?,?)"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>code</name> <init>= <expr><call><name>taos_stmt_prepare</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_prepare. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>id</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
  <for>for <control>(<init><decl><type><name>int</name></type> <name>l</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>l</name> <operator>&lt;</operator> <name>bingNum</name></expr>;</condition> <incr><expr><name>l</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
    <for>for <control>(<init><decl><type><name>int</name></type> <name>zz</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>zz</name> <operator>&lt;</operator> <name>tableNum</name></expr>;</condition> <incr><expr><name>zz</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
      <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">32</literal></expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"m%d"</literal></expr></argument>, <argument><expr><name>zz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
      <comment type="line">//stmt=NULL;</comment>
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_set_tbname</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_set_tbname. code:0x%x[%s][%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>,  <argument><expr><call><name>taos_stmt_errstr</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>  

      <for>for <control>(<init><decl><type><name>int</name></type> <name>col</name><init>=<expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>col</name> <operator>&lt;</operator> <name>columnNum</name></expr>;</condition> <incr><expr><operator>++</operator><name>col</name></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_bind_single_param_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>params</name> <operator>+</operator> <name>id</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block>{<block_content>
          <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_bind_single_param_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>id</name><operator>++</operator></expr>;</expr_stmt>
      </block_content>}</block></for>
      
      <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_add_batch</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_add_batch. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><name>code</name> <operator>=</operator> <call><name>taos_stmt_execute</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>code</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
      <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to execute taos_stmt_execute. code:0x%x[%s]\n"</literal></expr></argument>, <argument><expr><name>code</name></expr></argument>, <argument><expr><call><name>tstrerror</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>

  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>endtime</name> <init>= <expr><call><name>getCurrentTime</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>totalRows</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><operator>(</operator><name>totalRowsPerTbl</name> <operator>*</operator> <name>tableNum</name><operator>)</operator></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"insert total %d records, used %u seconds, avg:%u useconds per record\n"</literal></expr></argument>, <argument><expr><name>totalRows</name></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><literal type="number">1000000UL</literal></expr></argument>, <argument><expr><operator>(</operator><name>endtime</name><operator>-</operator><name>starttime</name><operator>)</operator><operator>/</operator><name>totalRows</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>ts</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>br</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name><name>v</name><operator>-&gt;</operator><name>nr</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>  
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>lb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>params</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>is_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taosMemoryFree</name><argument_list>(<argument><expr><name>no_null</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>SpecifyColumnBatchErrorCase</name><parameter_list>(<parameter><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>TAOS_STMT</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>tableNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lenOfBinaryDef</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rowsOfPerColum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bingNum</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>lenOfBinaryAct</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>columnNum</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>totalRowsPerTbl</name></decl>;</decl_stmt>

<comment type="line">//=======================================================================//</comment>
<comment type="line">//=============================== single table ==========================//</comment>
<comment type="line">//========== case 1: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
{
  stmt = taos_stmt_init(taos);

  tableNum = 1;
  rowsOfPerColum = 1;
  bingNum = 1;
  lenOfBinaryDef = 40;
  lenOfBinaryAct = 8;
  columnNum = 5;
  
  prepareVcolumn(taos, 1, tableNum, lenOfBinaryDef, "db1");
  stmt_specifyCol_bind_error_case_001(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);

  totalRowsPerTbl = rowsOfPerColum * bingNum;
  checkResult(taos, "m0", 0, totalRowsPerTbl);
  taos_stmt_close(stmt);
  printf("case 1 check result end\n\n");
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <comment type="line">//========== case 2: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">1</literal></expr></cpp:if>
<block>{<block_content>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <call><name>taos_stmt_init</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    
    <expr_stmt><expr><name>tableNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>rowsOfPerColum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>bingNum</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryDef</name> <operator>=</operator> <literal type="number">1000</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>lenOfBinaryAct</name> <operator>=</operator> <literal type="number">15</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>columnNum</name> <operator>=</operator> <literal type="number">5</literal></expr>;</expr_stmt>
    
    <expr_stmt><expr><call><name>prepareVcolumn</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><literal type="string">"db2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>stmt_specifyCol_bind_error_case_002</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>tableNum</name></expr></argument>, <argument><expr><name>rowsOfPerColum</name></expr></argument>, <argument><expr><name>bingNum</name></expr></argument>, <argument><expr><name>lenOfBinaryDef</name></expr></argument>, <argument><expr><name>lenOfBinaryAct</name></expr></argument>, <argument><expr><name>columnNum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>totalRowsPerTbl</name> <operator>=</operator> <name>rowsOfPerColum</name> <operator>*</operator> <name>bingNum</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>checkResult</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"m0"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>totalRowsPerTbl</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
    <expr_stmt><expr><call><name>taos_stmt_close</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"case 2 check result end\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

      <comment type="line">//========== case 2-1: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    {
        stmt = taos_stmt_init(taos);
        
        tableNum = 1;
        rowsOfPerColum = 32767;
        bingNum = 1;
        lenOfBinaryDef = 1000;
        lenOfBinaryAct = 15;
        columnNum = 5;
        
        prepareVcolumn(taos, 1, tableNum, lenOfBinaryDef, "db2_1");
        stmt_specifyCol_bind_case_001(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);
    
        totalRowsPerTbl = rowsOfPerColum * bingNum;
        checkResult(taos, "m0", 0, totalRowsPerTbl);
        <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
        <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
        <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
        taos_stmt_close(stmt);
        printf("case 2-1 check result end\n\n");
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
          <comment type="line">//========== case 2-2: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
        {
            printf("====case 2-2 error test start\n");
            stmt = taos_stmt_init(taos);
            
            tableNum = 1;
            rowsOfPerColum = 32768;
            bingNum = 1;
            lenOfBinaryDef = 1000;
            lenOfBinaryAct = 15;
            columnNum = 5;
            
            prepareVcolumn(taos, 1, tableNum, lenOfBinaryDef, "db2_2");
            stmt_specifyCol_bind_case_001(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);
        
            totalRowsPerTbl = rowsOfPerColum * bingNum;
            checkResult(taos, "m0", 0, totalRowsPerTbl);
            <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
            <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
            <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
            <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
            <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
            taos_stmt_close(stmt);
            printf("====case 2-2 check result end\n\n");
        }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  


    <comment type="line">//========== case 3: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  {
      stmt = taos_stmt_init(taos);
      
      tableNum = 1;
      rowsOfPerColum = 1;
      bingNum = 5;
      lenOfBinaryDef = 1000;
      lenOfBinaryAct = 20;
      columnNum = 5;
      
      prepareVcolumn(taos, 1, tableNum, lenOfBinaryDef, "db3");
      stmt_specifyCol_bind_case_001(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);
  
      totalRowsPerTbl = rowsOfPerColum * bingNum;
      checkResult(taos, "m0", 0, totalRowsPerTbl);
    <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
    <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
    <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
      taos_stmt_close(stmt);
      printf("case 3 check result end\n\n");
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

      <comment type="line">//========== case 4: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    {
        stmt = taos_stmt_init(taos);
        
        tableNum = 1;
        rowsOfPerColum = 5;
        bingNum = 5;
        lenOfBinaryDef = 1000;
        lenOfBinaryAct = 33;
        columnNum = 5;
        
        prepareVcolumn(taos, 1, tableNum, lenOfBinaryDef, "db4");
        stmt_specifyCol_bind_case_001(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);
    
        totalRowsPerTbl = rowsOfPerColum * bingNum;
        checkResult(taos, "m0", 0, totalRowsPerTbl);
      <comment type="line">//checkResult(taos, "m1", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m2", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m3", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m4", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m5", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m6", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m7", 0, totalRowsPerTbl);</comment>
      <comment type="line">//checkResult(taos, "m8", 0, totalRowsPerTbl);  </comment>
      <comment type="line">//checkResult(taos, "m9", 0, totalRowsPerTbl);</comment>
        taos_stmt_close(stmt);
        printf("case 4 check result end\n\n");
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

<comment type="line">//=======================================================================//</comment>
<comment type="line">//=============================== multi tables ==========================//</comment>
  <comment type="line">//========== case 5: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  {
    stmt = taos_stmt_init(taos);
  
    tableNum = 5;
    rowsOfPerColum = 1;
    bingNum = 1;
    lenOfBinaryDef = 40;
    lenOfBinaryAct = 16;
    columnNum = 5;
    
    prepareVcolumn(taos, 1, tableNum, lenOfBinaryDef, "db5");
    stmt_specifyCol_bind_case_002(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);
  
    totalRowsPerTbl = rowsOfPerColum * bingNum;
    checkResult(taos, "m0", 0, totalRowsPerTbl);
    checkResult(taos, "m1", 0, totalRowsPerTbl);
    checkResult(taos, "m2", 0, totalRowsPerTbl);  
    checkResult(taos, "m3", 0, totalRowsPerTbl);
    checkResult(taos, "m4", 0, totalRowsPerTbl);
    taos_stmt_close(stmt);
    printf("case 5 check result end\n\n");
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
  
    <comment type="line">//========== case 6: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  {
      stmt = taos_stmt_init(taos);
      
      tableNum = 5;
      rowsOfPerColum = 5;
      bingNum = 1;
      lenOfBinaryDef = 1000;
      lenOfBinaryAct = 20;
      columnNum = 5;
      
      prepareVcolumn(taos, 1, tableNum, lenOfBinaryDef, "db6");
      stmt_specifyCol_bind_case_002(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);
  
      totalRowsPerTbl = rowsOfPerColum * bingNum;
      checkResult(taos, "m0", 0, totalRowsPerTbl);
      checkResult(taos, "m1", 0, totalRowsPerTbl);
      checkResult(taos, "m2", 0, totalRowsPerTbl);  
      checkResult(taos, "m3", 0, totalRowsPerTbl);
      checkResult(taos, "m4", 0, totalRowsPerTbl);
      taos_stmt_close(stmt);
      printf("case 6 check result end\n\n");
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
  
      <comment type="line">//========== case 7: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
    {
        stmt = taos_stmt_init(taos);
        
        tableNum = 5;
        rowsOfPerColum = 1;
        bingNum = 5;
        lenOfBinaryDef = 1000;
        lenOfBinaryAct = 33;
        columnNum = 5;
        
        prepareVcolumn(taos, 1, tableNum, lenOfBinaryDef, "db7");
        stmt_specifyCol_bind_case_002(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);
    
        totalRowsPerTbl = rowsOfPerColum * bingNum;
        checkResult(taos, "m0", 0, totalRowsPerTbl);
        checkResult(taos, "m1", 0, totalRowsPerTbl);
        checkResult(taos, "m2", 0, totalRowsPerTbl);  
        checkResult(taos, "m3", 0, totalRowsPerTbl);
        checkResult(taos, "m4", 0, totalRowsPerTbl);
        taos_stmt_close(stmt);
        printf("case 7 check result end\n\n");
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  
  
        <comment type="line">//========== case 8: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
{
    stmt = taos_stmt_init(taos);
    
    tableNum = 5;
    rowsOfPerColum = 5;
    bingNum = 5;
    lenOfBinaryDef = 1000;
    lenOfBinaryAct = 40;
    columnNum = 5;
    
    prepareVcolumn(taos, 1, tableNum, lenOfBinaryDef, "db8");
    stmt_specifyCol_bind_case_002(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);

    totalRowsPerTbl = rowsOfPerColum * bingNum;
    checkResult(taos, "m0", 0, totalRowsPerTbl);
    checkResult(taos, "m1", 0, totalRowsPerTbl);
    checkResult(taos, "m2", 0, totalRowsPerTbl);  
    checkResult(taos, "m3", 0, totalRowsPerTbl);
    checkResult(taos, "m4", 0, totalRowsPerTbl);
    taos_stmt_close(stmt);
    printf("case 8 check result end\n\n");
}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <comment type="line">//=======================================================================//</comment>
  <comment type="line">//=============================== multi-rows to single table ==========================//</comment>
  <comment type="line">//========== case 9: ======================//</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  {
    stmt = taos_stmt_init(taos);
  
    tableNum = 1;
    rowsOfPerColum = 23740;
    bingNum = 1;
    lenOfBinaryDef = 40;
    lenOfBinaryAct = 8;
    columnNum = 5;
    
    prepareVcolumn(taos, 1, tableNum, lenOfBinaryDef, "db9");
    stmt_specifyCol_bind_case_001(stmt, tableNum, rowsOfPerColum, bingNum, lenOfBinaryDef, lenOfBinaryAct, columnNum);
  
    totalRowsPerTbl = rowsOfPerColum * bingNum;
    checkResult(taos, "m0", 0, totalRowsPerTbl);
    taos_stmt_close(stmt);
    printf("case 9 check result end\n\n");
  }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  

  <return>return ;</return>

</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
  <decl_stmt><decl><type><name>TAOS</name> <modifier>*</modifier></type><name>taos</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type>  <name><name>host</name><index>[<expr><literal type="number">32</literal></expr>]</index></name> <init>= <expr><literal type="string">"127.0.0.1"</literal></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>serverIp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <comment type="line">//int   threadNum = 1;</comment>
  
  <comment type="line">// connect to server</comment>
  <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>serverIp</name> <operator>=</operator> <name>host</name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>serverIp</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>serverIp</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <comment type="line">//threadNum = atoi(argv[2]);</comment>
  </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>argc</name> <operator>==</operator> <literal type="number">4</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>serverIp</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>;</expr_stmt>
    <comment type="line">//threadNum = atoi(argv[2]);</comment>
    <expr_stmt><expr><name>g_runTimes</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"server:%s, runTimes:%d\n\n"</literal></expr></argument>, <argument><expr><name>serverIp</name></expr></argument>, <argument><expr><name>g_runTimes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><literal type="number">0</literal></expr></cpp:if>
  printf("server:%s, threadNum:%d, rows:%d\n\n", serverIp, threadNum, g_rows);

  TdThread *pThreadList = (TdThread *) taosMemoryCalloc(sizeof(TdThread), (size_t)threadNum);
  ThreadInfo* threadInfo = (ThreadInfo *) taosMemoryCalloc(sizeof(ThreadInfo), (size_t)threadNum);

  ThreadInfo*  tInfo = threadInfo;
  for (int i = 0; i &lt; threadNum; i++) {
    taos = taos_connect(serverIp, "root", "taosdata", NULL, 0);
    if (taos == NULL) {
      printf("failed to connect to TDengine, reason:%s\n", taos_errstr(taos));
      return -1;
    }   

    tInfo-&gt;taos = taos;
    tInfo-&gt;idx = i;
    if (0 == i) {
      <comment type="line">//taosThreadCreate(&amp;(pThreadList[0]), NULL, runCase, (void *)tInfo);      </comment>
      taosThreadCreate(&amp;(pThreadList[0]), NULL, SpecifyColumnBatchCase, (void *)tInfo);
    } else if (1 == i){
      taosThreadCreate(&amp;(pThreadList[0]), NULL, runCase_long, (void *)tInfo);
    }
    tInfo++;
  }

  for (int i = 0; i &lt; threadNum; i++) {
    taosThreadJoin(pThreadList[i], NULL);
  }

  taosMemoryFree(pThreadList);
  taosMemoryFree(threadInfo);
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>taos</name> <operator>=</operator> <call><name>taos_connect</name><argument_list>(<argument><expr><name>serverIp</name></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>taos</name> <operator>==</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"failed to connect to TDengine, reason:%s\n"</literal></expr></argument>, <argument><expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <comment type="line">//runCase(taos);</comment>
  <comment type="line">//runCase_long(taos);</comment>
  <comment type="line">//SpecifyColumnBatchCase(taos);</comment>
  <expr_stmt><expr><call><name>SpecifyColumnBatchCase_autoCreateTbl</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">//SpecifyColumnBatchErrorCase(taos);</comment>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

</unit>
