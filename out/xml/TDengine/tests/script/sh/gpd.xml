<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/tests/script/sh/gpd.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LINUX</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"taosudf.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>TAOS</name><modifier>*</modifier></type> <name>taos</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<function><type><name>DLL_EXPORT</name> <name>int32_t</name></type> <name>gpd_init</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><name>taos</name> <operator>=</operator> <call><name>taos_connect</name><argument_list>(<argument><expr><literal type="string">"localhost"</literal></expr></argument>, <argument><expr><literal type="string">"root"</literal></expr></argument>, <argument><expr><literal type="string">"taosdata"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><literal type="number">7100</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>DLL_EXPORT</name> <name>int32_t</name></type> <name>gpd_destroy</name><parameter_list>()</parameter_list> <block>{<block_content>
  <expr_stmt><expr><call><name>taos_close</name><argument_list>(<argument><expr><name>taos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>taos_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>DLL_EXPORT</name> <name>int32_t</name></type> <name>gpd</name><parameter_list>(<parameter><decl><type><name>SUdfDataBlock</name><modifier>*</modifier></type> <name>block</name></decl></parameter>, <parameter><decl><type><name>SUdfColumn</name> <modifier>*</modifier></type><name>resultCol</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SUdfColumnMeta</name> <modifier>*</modifier></type><name>meta</name> <init>= <expr><operator>&amp;</operator><name><name>resultCol</name><operator>-&gt;</operator><name>colMeta</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>bytes</name></name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>TSDB_DATA_TYPE_INT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>scale</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>meta</name><operator>-&gt;</operator><name>precision</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>SUdfColumnData</name> <modifier>*</modifier></type><name>resultData</name> <init>= <expr><operator>&amp;</operator><name><name>resultCol</name><operator>-&gt;</operator><name>colData</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>resultData</name><operator>-&gt;</operator><name>numOfRows</name></name> <operator>=</operator> <name><name>block</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</expr_stmt>
  <for>for <control>(<init><decl><type><name>int32_t</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>resultData</name><operator>-&gt;</operator><name>numOfRows</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>j</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init>;</init> <condition><expr><name>j</name> <operator>&lt;</operator> <name><name>block</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>j</name></expr></incr>)</control> <block>{<block_content>
      <if_stmt><if>if <condition>(<expr><call><name>udfColDataIsNull</name><argument_list>(<argument><expr><name><name>block</name><operator>-&gt;</operator><name>udfCols</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>udfColDataSetNull</name><argument_list>(<argument><expr><name>resultCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <if_stmt><if>if <condition>( <expr><name>j</name> <operator>==</operator> <name><name>block</name><operator>-&gt;</operator><name>numOfCols</name></name></expr>)</condition> <block>{<block_content>
      <decl_stmt><decl><type><name>int32_t</name></type> <name>luckyNum</name> <init>= <expr><literal type="number">88</literal></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>udfColDataSet</name><argument_list>(<argument><expr><name>resultCol</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>luckyNum</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
  </block_content>}</block></for>
  <decl_stmt><decl><type><name>TAOS_RES</name><modifier>*</modifier></type> <name>res</name> <init>= <expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create database if not exists gpd"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>errstr</name> <init>= <expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  </block_content>}</block></if></if_stmt> 
  <expr_stmt><expr><name>res</name> <operator>=</operator> <call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"create table gpd.st (ts timestamp, f int) tags(t int)"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>errstr</name> <init>= <expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  </block_content>}</block></if></if_stmt> 

  <expr_stmt><expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"insert into gpd.t using gpd.st tags(1) values(now, 1) "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>errstr</name> <init>= <expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  </block_content>}</block></if></if_stmt> 

  <expr_stmt><expr><call><name>taos_query</name><argument_list>(<argument><expr><name>taos</name></expr></argument>, <argument><expr><literal type="string">"select * from gpd.t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><call><name>taos_errno</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>errstr</name> <init>= <expr><call><name>taos_errstr</name><argument_list>(<argument><expr><name>res</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  </block_content>}</block></if></if_stmt> 

  <comment type="line">//to simulate actual processing delay by udf</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>LINUX</name></cpp:ifdef>
  <expr_stmt><expr><call><name>usleep</name><argument_list>(<argument><expr><literal type="number">1</literal> <operator>*</operator> <literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="line">// usleep takes sleep time in us (1 millionth of a second)</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WINDOWS</name></cpp:ifdef>
  <expr_stmt><expr><call><name>Sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
