<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/contrib/test/bdb/bdbTest.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db.h"</cpp:file></cpp:include>

<comment type="line">// refer: https://docs.oracle.com/cd/E17076_05/html/gsg/C/BerkeleyDB-Core-C-GSG.pdf</comment>

<comment type="line">// Access Methods:</comment>
<comment type="line">// 1. BTree</comment>
<comment type="line">// 2. Hash</comment>
<comment type="line">// 3. Queue</comment>
<comment type="line">// 4. Recno</comment>

<comment type="line">// Use secondary database work as index.</comment>
<comment type="line">// Any attemp to write to a secondary database results in a non-zero status return.</comment>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>idx_callback</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier></type><name>dbp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DBT</name> <modifier>*</modifier></type><name>keyp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>DBT</name> <modifier>*</modifier></type><name>valuep</name></decl></parameter>, <parameter><decl><type><name>DBT</name> <modifier>*</modifier></type><name>resvp</name></decl></parameter>)</parameter_list>;</function_decl>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>USE_ENV</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DESCRIPTION_SIZE</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<decl_stmt><decl><type><name>float</name></type> <name>money</name> <init>= <expr><literal type="number">122.45</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>description</name> <init>= <expr><literal type="string">"Grocery bill."</literal></expr></init></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <block>{
  <decl_stmt><decl><type><name>int</name></type>   <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>family_name</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>surname</name></decl>;</decl_stmt>
}</block></struct></type> <name>SPersion</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>put_value</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier></type><name>dbp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>DBT</name></type> <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type> <name>value</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>money</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>money</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>description</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>description</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dbp</name><operator>-&gt;</operator><name>put</name></name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><name>DB_NOOVERWRITE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Failed to put DB record: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>get_value</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier></type><name>dbp</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>char</name></type> <name><name>desp</name><index>[<expr><name>DESCRIPTION_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type>  <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type>  <name>value</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>data</name></name> <operator>=</operator> <operator>&amp;</operator><name>money</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>key</name><operator>.</operator><name>size</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>money</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>

  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>desp</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>ulen</name></name> <operator>=</operator> <name>DESCRIPTION_SIZE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>value</name><operator>.</operator><name>flags</name></name> <operator>=</operator> <name>DB_DBT_USERMEM</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name><name>dbp</name><operator>-&gt;</operator><name>get</name></name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>key</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"The value is \"%s\"\n"</literal></expr></argument>, <argument><expr><name>desp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <specifier>const</specifier> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>DB</name> <modifier>*</modifier></type>      <name>dbp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DB</name> <modifier>*</modifier></type>      <name>sdbp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u_int32_t</name></type> <name>db_flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DB_ENV</name> <modifier>*</modifier></type>  <name>envp</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u_int32_t</name></type> <name>env_flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type>       <name>ret</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type>       <name>key</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>DBT</name></type>       <name>value</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>USE_ENV</name></expr></cpp:if>
  <comment type="line">// Initialize an env object and open it for</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>db_env_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>envp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error creating env handle: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>env_flags</name> <operator>=</operator> <name>DB_CREATE</name> <operator>|</operator> <name>DB_INIT_MPOOL</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>envp</name><operator>-&gt;</operator><name>open</name></name><argument_list>(<argument><expr><name>envp</name></expr></argument>, <argument><expr><literal type="string">"./meta"</literal></expr></argument>, <argument><expr><name>env_flags</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"Error opening env handle: %s\n"</literal></expr></argument>, <argument><expr><call><name>db_strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
  </block_content>}</block></if></if_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="line">// Initialize a DB handle and open the DB</comment>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>db_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>dbp</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>db_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>sdbp</name></expr></argument>, <argument><expr><name>envp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>sdbp</name><operator>-&gt;</operator><name>set_flags</name></name><argument_list>(<argument><expr><name>sdbp</name></expr></argument>, <argument><expr><name>DB_DUPSORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>db_flags</name> <operator>=</operator> <name>DB_CREATE</name> <operator>|</operator> <name>DB_TRUNCATE</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>dbp</name><operator>-&gt;</operator><name>open</name></name><argument_list>(<argument><expr><name>dbp</name></expr></argument>,       <comment type="block">/* DB structure pointer */</comment>
                  <argument><expr><name>NULL</name></expr></argument>,      <comment type="block">/* Transaction pointer */</comment>
                  <argument><expr><literal type="string">"meta.db"</literal></expr></argument>, <comment type="block">/* On-disk file that holds the database */</comment>
                  <argument><expr><name>NULL</name></expr></argument>,      <comment type="block">/* Optional logical database name */</comment>
                  <argument><expr><name>DB_BTREE</name></expr></argument>,  <comment type="block">/* Database access method */</comment>
                  <argument><expr><name>db_flags</name></expr></argument>,  <comment type="block">/* Open flags */</comment>
                  <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>        <comment type="block">/* File mode */</comment>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name><name>sdbp</name><operator>-&gt;</operator><name>open</name></name><argument_list>(<argument><expr><name>sdbp</name></expr></argument>,       <comment type="block">/* DB structure pointer */</comment>
                   <argument><expr><name>NULL</name></expr></argument>,       <comment type="block">/* Transaction pointer */</comment>
                   <argument><expr><literal type="string">"index.db"</literal></expr></argument>, <comment type="block">/* On-disk file that holds the database */</comment>
                   <argument><expr><name>NULL</name></expr></argument>,       <comment type="block">/* Optional logical database name */</comment>
                   <argument><expr><name>DB_BTREE</name></expr></argument>,   <comment type="block">/* Database access method */</comment>
                   <argument><expr><name>db_flags</name></expr></argument>,   <comment type="block">/* Open flags */</comment>
                   <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>         <comment type="block">/* File mode */</comment>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <comment type="line">// Associate the secondary database to the primary</comment>
  <expr_stmt><expr><call><name><name>dbp</name><operator>-&gt;</operator><name>associate</name></name><argument_list>(<argument><expr><name>dbp</name></expr></argument>,          <comment type="block">/* Primary database */</comment>
                 <argument><expr><name>NULL</name></expr></argument>,         <comment type="block">/* TXN id */</comment>
                 <argument><expr><name>sdbp</name></expr></argument>,         <comment type="block">/* Secondary database */</comment>
                 <argument><expr><name>idx_callback</name></expr></argument>, <comment type="block">/* Callback used for key creation */</comment>
                 <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>           <comment type="block">/* Flags */</comment>

  <block>{<block_content>
    <comment type="line">// Insert a key-value record</comment>
    <expr_stmt><expr><call><name>put_value</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Read the key-value record</comment>
    <expr_stmt><expr><call><name>get_value</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block>

  <comment type="line">// Close the database</comment>
  <if_stmt><if>if <condition>(<expr><name>sdbp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>sdbp</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>sdbp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>dbp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>dbp</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <if_stmt><if>if <condition>(<expr><name>envp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name><name>envp</name><operator>-&gt;</operator><name>close</name></name><argument_list>(<argument><expr><name>envp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>idx_callback</name><parameter_list>(<parameter><decl><type><name>DB</name> <modifier>*</modifier></type>       <name>sdbp</name></decl></parameter>,   <comment type="block">/* secondary db handle */</comment>
                        <parameter><decl><type><specifier>const</specifier> <name>DBT</name> <modifier>*</modifier></type><name>keyp</name></decl></parameter>,   <comment type="block">/* primary db record's key */</comment>
                        <parameter><decl><type><specifier>const</specifier> <name>DBT</name> <modifier>*</modifier></type><name>valuep</name></decl></parameter>, <comment type="block">/* primary db record's value */</comment>
                        <parameter><decl><type><name>DBT</name> <modifier>*</modifier></type>      <name>skeyp</name></decl></parameter>   <comment type="block">/* secondary db record's key*/</comment>
)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>DBT</name> <modifier>*</modifier></type><name>tmpdbt</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>tmpdbt</name> <operator>=</operator> <operator>(</operator><name>DBT</name> <operator>*</operator><operator>)</operator><call><name>calloc</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>DBT</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <block>{<block_content>  <comment type="line">// TODO</comment>
    <expr_stmt><expr><name><name>tmpdbt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmpdbt</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>tmpdbt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>tmpdbt</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
  </block_content>}</block>

  <comment type="block" format="doxygen">/**
   * DB_DBT_MULTIPLE means DBT references an array
   * DB_DBT_APPMALLOC means we dynamically allocated memory for the DBT's data field.
   */</comment>
  <expr_stmt><expr><name><name>skeyp</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>DB_DBT_MULTIPLE</name> <operator>|</operator> <name>DB_DBT_APPMALLOC</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>skeyp</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>skeyp</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>tmpdbt</name></expr>;</expr_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
