<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/contrib/test/craft/simulate_vnode.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raft.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raft/uv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>exe_name</name></decl>;</decl_stmt>

<comment type="line">// simulate ------------------------</comment>
<typedef>typedef <type><struct>struct <name>SVnode</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>vid</name></decl>;</decl_stmt>
}</block></struct></type> <name>SVnode</name>;</typedef>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>VNODE_COUNT</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<decl_stmt><decl><type><name>SVnode</name></type> <name><name>vnodes</name><index>[<expr><name>VNODE_COUNT</name></expr>]</index></name></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>vnodeApplyWMsg</name><parameter_list>(<parameter><decl><type><name>SVnode</name> <modifier>*</modifier></type><name>pVnode</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>pMsg</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>pRsp</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"put value to tsdb, vid:%d msg:%s \n"</literal></expr></argument>, <argument><expr><name><name>pVnode</name><operator>-&gt;</operator><name>vid</name></name></expr></argument>, <argument><expr><name>pMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>applyCB</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>,
            <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>,
            <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
	<comment type="line">//printf("%s \n", msg);</comment>

	<comment type="line">// parse msg</comment>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>token</name> <init>= <expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>vid</name> <init>= <expr><call><name>atoi</name><argument_list>(<argument><expr><name>token</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>token</name></expr></init></decl>;</decl_stmt>

	<decl_stmt><decl><type><name>SVnode</name><modifier>*</modifier></type> <name>tmp_vnodes</name> <init>= <expr><operator>(</operator><name>SVnode</name><operator>*</operator><operator>)</operator><operator>(</operator><name><name>fsm</name><operator>-&gt;</operator><name>data</name></name><operator>)</operator></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>vnodeApplyWMsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>tmp_vnodes</name><index>[<expr><name>vid</name></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Config ------------------------</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_LEN</name></cpp:macro> <cpp:value>32</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MAX_PEERS</name></cpp:macro> <cpp:value>10</cpp:value></cpp:define>
<typedef>typedef <type><struct>struct <name>Address</name> <block>{
	<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>HOST_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>uint32_t</name></type> <name>port</name></decl>;</decl_stmt>
}</block></struct></type> <name>Address</name>;</typedef>

<function><type><name>uint64_t</name></type> <name>raftId</name><parameter_list>(<parameter><decl><type><name>Address</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">// test in a single machine, port is unique</comment>
	<comment type="line">// if in multi machines, use host and port</comment>
	<return>return <expr><name><name>addr</name><operator>-&gt;</operator><name>port</name></name></expr>;</return>
</block_content>}</block></function>

<typedef>typedef <type><struct>struct <name>Config</name> <block>{
	<decl_stmt><decl><type><name>Address</name></type> <name>me</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Address</name></type> <name><name>peers</name><index>[<expr><name>MAX_PEERS</name></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>peer_count</name></decl>;</decl_stmt>
}</block></struct></type> <name>Config</name>;</typedef>

<decl_stmt><decl><type><name>Config</name></type> <name>gConf</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>printConf</name><parameter_list>(<parameter><decl><type><name>Config</name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"me: %s:%u \n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>peer_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"peer%d: %s:%u \n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>peers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>host</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>peers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<comment type="line">// RaftServer ------------------------</comment>
<typedef>typedef <type><struct>struct <name>RaftServer</name> <block>{
	<decl_stmt><decl><type><name><name>struct</name> <name>uv_loop_s</name></name></type> <name>loop</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_uv_transport</name></name></type> <name>transport</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_io</name></name></type> <name>io</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name></type> <name>fsm</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft</name></name></type> <name>raft</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_configuration</name></name></type> <name>conf</name></decl>;</decl_stmt>
}</block></struct></type> <name>RaftServer</name>;</typedef>

<decl_stmt><decl><type><name>RaftServer</name></type> <name>gRaftServer</name></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>startRaftServer</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<comment type="line">//RaftServer* rs = (RaftServer*)param;</comment>
	<decl_stmt><decl><type><name>RaftServer</name><modifier>*</modifier></type> <name>rs</name> <init>= <expr><operator>&amp;</operator><name>gRaftServer</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>raft_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>rs</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>state2String</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>RAFT_UNAVAILABLE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"RAFT_UNAVAILABLE"</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>RAFT_FOLLOWER</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"RAFT_FOLLOWER"</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>RAFT_CANDIDATE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"RAFT_CANDIDATE"</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>RAFT_LEADER</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"RAFT_LEADER"</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="string">"UNKNOWN_RAFT_STATE"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>printRaftState</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"my_id: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"address: %s \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"current_term: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>current_term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"voted_for: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>voted_for</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"role: %s \n"</literal></expr></argument>, <argument><expr><call><name>state2String</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"commit_index: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>commit_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"last_applied: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>last_applied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"last_stored: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>last_stored</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// console -----------------------------------------</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PROPOSE_VALUE_LEN</name></cpp:macro> <cpp:value>128</cpp:value></cpp:define>
<function><type><specifier>static</specifier> <name>void</name></type> <name>proposeValue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>buf</name></decl>;</decl_stmt>

    <comment type="line">// need free</comment>
    <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>PROPOSE_VALUE_LEN</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>base</name></name> <operator>=</operator> <call><name>raft_malloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// mock ts value</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>vid</name> <init>= <expr><call><name>taosRand</name><argument_list>()</argument_list></call> <operator>%</operator> <name>VNODE_COUNT</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="string">"%d:value_%ld"</literal></expr></argument>, <argument><expr><name>vid</name></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"propose value: %s \n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// need free</comment>
    <decl_stmt><decl><type><name><name>struct</name> <name>raft_apply</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>raft_apply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>raft_apply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name><modifier>*</modifier></type> <name>console</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <comment type="line">// notice! memory buffer overflow!</comment>
        <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>fgets</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="number">128</literal></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>	
		<expr_stmt><expr><name><name>buf</name><index>[<expr><call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call><operator>-</operator><literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

        <comment type="line">// do not use strcmp</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>printRaftState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><literal type="string">"put"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>proposeValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"unknown command: [%s], support command: state, put \n"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></while>
</block_content>}</block></function>

<comment type="line">// -----------------------------------------</comment>
<function><type><name>void</name></type> <name>usage</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s my_port peer1_port peer2_port ... \n"</literal></expr></argument>, <argument><expr><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>taosSeedRand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name>exe_name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

	<comment type="line">// read conf from argv</comment>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>gConf</name><operator>.</operator><name>me</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>HOST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gConf</name><operator>.</operator><name>me</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>gConf</name><operator>.</operator><name>peer_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">2</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>argc</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>gConf</name><operator>.</operator><name>peers</name><index>[<expr><name><name>gConf</name><operator>.</operator><name>peer_count</name></name></expr>]</index></name><operator>.</operator><name>host</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><name>HOST_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gConf</name><operator>.</operator><name>peers</name><index>[<expr><name><name>gConf</name><operator>.</operator><name>peer_count</name></name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>gConf</name><operator>.</operator><name>peer_count</name></name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printConf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>gConf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// mkdir</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>dir</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>dir</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"./%s_%u"</literal></expr></argument>, <argument><expr><name><name>gConf</name><operator>.</operator><name>me</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>gConf</name><operator>.</operator><name>me</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"rm -rf ./%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"mkdir -p ./%s"</literal></expr></argument>, <argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// init io</comment>
    <expr_stmt><expr><call><name>uv_loop_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>raft_uv_tcp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>transport</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>raft_uv_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>loop</name></name></expr></argument>, <argument><expr><name>dir</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>transport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<comment type="line">// init fsm</comment>
	<expr_stmt><expr><name><name>gRaftServer</name><operator>.</operator><name>fsm</name><operator>.</operator><name>apply</name></name> <operator>=</operator> <name>applyCB</name></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>gRaftServer</name><operator>.</operator><name>fsm</name><operator>.</operator><name>data</name></name> <operator>=</operator> <name>vnodes</name></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>VNODE_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><name><name>vnodes</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>vid</name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
	</block_content>}</block></for>

    <comment type="line">// init raft instance with io and fsm</comment>
	<decl_stmt><decl><type><name>char</name></type> <name><name>address_buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>address_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>address_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>gConf</name><operator>.</operator><name>me</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>gConf</name><operator>.</operator><name>me</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="line">// test in a single machine, port is unique</comment>
	<decl_stmt><decl><type><name>uint64_t</name></type> <name>raft_id</name> <init>= <expr><call><name>raftId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gConf</name><operator>.</operator><name>me</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>raft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>fsm</name></name></expr></argument>, <argument><expr><name>raft_id</name></expr></argument>, <argument><expr><name>address_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">//raft_init(&amp;gRaftServer.raft, &amp;gRaftServer.io, &amp;gRaftServer.fsm, 11, "127.0.0.1:9000");</comment>

    <comment type="line">// init cluster configuration</comment>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft_configuration</name></name></type> <name>conf</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>raft_configuration_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>raft_configuration_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><call><name>raftId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gConf</name><operator>.</operator><name>me</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>address_buf</name></expr></argument>, <argument><expr><name>RAFT_VOTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>gConf</name><operator>.</operator><name>peer_count</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>address_buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>address_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>address_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>gConf</name><operator>.</operator><name>peers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>host</name></expr></argument>, <argument><expr><name><name>gConf</name><operator>.</operator><name>peers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raft_configuration_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><call><name>raftId</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gConf</name><operator>.</operator><name>peers</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>address_buf</name></expr></argument>, <argument><expr><name>RAFT_VOTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
    <expr_stmt><expr><call><name>raft_bootstrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>gRaftServer</name><operator>.</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// start raft server and loop</comment>
    <decl_stmt><decl><type><name>pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>startRaftServer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>gRaftServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// simulate console</comment>
	<decl_stmt><decl><type><name>pthread_t</name></type> <name>tid2</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tid2</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>console</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
