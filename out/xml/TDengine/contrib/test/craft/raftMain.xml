<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/contrib/test/craft/raftMain.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raft.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;raft/uv.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raftServer.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>exe_name</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>parseAddr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>addr</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name> <modifier>*</modifier></type><name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>context</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>separator</name> <init>= <expr><literal type="string">":"</literal></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>token</name> <init>= <expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>token</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>token</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sscanf</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="line">// only parse 3 tokens</comment>
<function><type><name>int</name></type> <name>parseCommand</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>str</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>token1</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>token2</name></decl></parameter>, <parameter><decl><type><name>char</name><modifier>*</modifier></type> <name>token3</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>separator</name> <init>= <expr><literal type="string">" "</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>token</name> <init>= <expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition> <block>{<block_content>
 	   <goto>goto <name>ret</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>token1</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition> <block>{<block_content>
    	<goto>goto <name>ret</name>;</goto>
   	</block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>token2</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition> <block>{<block_content>
    	<goto>goto <name>ret</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>token</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>token3</name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

<label><name>ret</name>:</label>
    <return>return <expr><name>n</name></expr>;</return>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>startServerFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SRaftServer</name> <modifier>*</modifier></type><name>pServer</name> <init>= <expr><operator>(</operator><name>SRaftServer</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>r</name> <init>= <expr><call><name>raftServerStart</name><argument_list>(<argument><expr><name>pServer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Console ---------------------------------</comment>
<function><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>state2String</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>short</name></type> <name>state</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>state</name> <operator>==</operator> <name>RAFT_UNAVAILABLE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"RAFT_UNAVAILABLE"</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>RAFT_FOLLOWER</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"RAFT_FOLLOWER"</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>RAFT_CANDIDATE</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"RAFT_CANDIDATE"</literal></expr>;</return>

    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>state</name> <operator>==</operator> <name>RAFT_LEADER</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="string">"RAFT_LEADER"</literal></expr>;</return>

    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="string">"UNKNOWN_RAFT_STATE"</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>printRaftConfiguration</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_configuration</name></name> <modifier>*</modifier></type><name>c</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"configuration: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>c</name><operator>-&gt;</operator><name>n</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%llu -- %d -- %s\n"</literal></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>servers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>id</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>servers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>role</name></expr></argument>, <argument><expr><name><name>c</name><operator>-&gt;</operator><name>servers</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>address</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>printRaftState</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"----Raft State: -----------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"my_id: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"address: %s \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"current_term: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>current_term</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"voted_for: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>voted_for</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"role: %s \n"</literal></expr></argument>, <argument><expr><call><name>state2String</name><argument_list>(<argument><expr><name><name>r</name><operator>-&gt;</operator><name>state</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"commit_index: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>commit_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"last_applied: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>last_applied</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"last_stored: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>last_stored</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"configuration_index: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>configuration_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"configuration_uncommitted_index: %llu \n"</literal></expr></argument>, <argument><expr><name><name>r</name><operator>-&gt;</operator><name>configuration_uncommitted_index</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printRaftConfiguration</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>r</name><operator>-&gt;</operator><name>configuration</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"----------------------------\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>putValueCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_apply</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <expr_stmt><expr><call><name>raft_free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name><name>struct</name> <name>raft</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"putValueCb: %s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"putValueCb: %s \n"</literal></expr></argument>, <argument><expr><literal type="string">"ok"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>putValue</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft</name></name> <modifier>*</modifier></type><name>r</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>buf</name></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <name>TOKEN_LEN</name></expr>;</expr_stmt><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>base</name></name> <operator>=</operator> <call><name>raft_malloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>raft_apply</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr>struct <name>raft_apply</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>r</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>raft_apply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putValueCb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"put %s \n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"put error: %s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>getValue</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>getKV</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><name>ptr</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"get value: [%s] \n"</literal></expr></argument>, <argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if> <else>else <block>{<block_content>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"value not found for key: [%s] \n"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raft_change_cb_add</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_change</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raft_change_cb_add status:%d ... \n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raft_change_cb_assign</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_change</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raft_change_cb_assign status:%d ... \n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>raft_change_cb_remove</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_change</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raft_change_cb_remove status:%d ... \n"</literal></expr></argument>, <argument><expr><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>console</name><parameter_list>(<parameter><decl><type><name>SRaftServer</name> <modifier>*</modifier></type><name>pRaftServer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<decl_stmt><decl><type><name>char</name></type> <name><name>cmd_buf</name><index>[<expr><name>COMMAND_LEN</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>fgets</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>, <argument><expr><name>COMMAND_LEN</name></expr></argument>, <argument><expr><name>stdin</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>pos</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>                  
		<if_stmt><if>if<condition>(<expr><name><name>cmd_buf</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><name><name>cmd_buf</name><index>[<expr><name>pos</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
		</block_content>}</block></if></if_stmt>

		<if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>, <argument><expr><name>COMMAND_LEN</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<continue>continue;</continue>
		</block_content>}</block></if></if_stmt>

		<decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr><name>TOKEN_LEN</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>char</name></type> <name><name>param1</name><index>[<expr><name>TOKEN_LEN</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>param1</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>param1</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>char</name></type> <name><name>param2</name><index>[<expr><name>TOKEN_LEN</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>param2</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>param2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>parseCommand</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><name>param2</name></expr></argument>, <argument><expr><name>TOKEN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"addnode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<comment type="line">//printf("not support \n");</comment>

			<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>HOST_LEN</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>port</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>parseAddr</name><argument_list>(<argument><expr><name>param1</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>HOST_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint64_t</name></type> <name>rid</name> <init>= <expr><call><name>raftId</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<decl_stmt><decl><type><name><name>struct</name> <name>raft_change</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>raft_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><name>raft_change_cb_add</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raft_add error: %s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"add node: %lu %s \n"</literal></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name>param1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<decl_stmt><decl><type><name><name>struct</name> <name>raft_change</name></name> <modifier>*</modifier></type><name>req2</name> <init>= <expr><call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>req2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>raft_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>req2</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name>RAFT_VOTER</name></expr></argument>, <argument><expr><name>raft_change_cb_assign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raft_assign error: %s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raft_assign: %s %d \n"</literal></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><name>RAFT_VOTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"activate"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>HOST_LEN</name></expr>]</index></name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>port</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>parseAddr</name><argument_list>(<argument><expr><name>param1</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>HOST_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint64_t</name></type> <name>rid</name> <init>= <expr><call><name>raftId</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>


			<decl_stmt><decl><type><name><name>struct</name> <name>raft_change</name></name> <modifier>*</modifier></type><name>req2</name> <init>= <expr><call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>req2</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>raft_assign</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>req2</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name>RAFT_VOTER</name></expr></argument>, <argument><expr><name>raft_change_cb_assign</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raft_assign error: %s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raft_assign: %s %d \n"</literal></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><name>RAFT_VOTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>





		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"dropnode"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name><name>host</name><index>[<expr><name>HOST_LEN</name></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>uint32_t</name></type> <name>port</name></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>parseAddr</name><argument_list>(<argument><expr><name>param1</name></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>HOST_LEN</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>uint64_t</name></type> <name>rid</name> <init>= <expr><call><name>raftId</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			
			<decl_stmt><decl><type><name><name>struct</name> <name>raft_change</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>raft_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>raft_remove</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name>raft_change_cb_remove</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<if_stmt><if>if <condition>(<expr><name>r</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
				<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"raft_remove: %s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"drop node: %lu %s \n"</literal></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name>param1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			


		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"put"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">256</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
			<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s--%s"</literal></expr></argument>, <argument><expr><name>param1</name></expr></argument>, <argument><expr><name>param2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>putValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"get"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>getValue</name><argument_list>(<argument><expr><name>param1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"state"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printRaftState</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"snapshot"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"not support \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"addnode \"127.0.0.1:8888\" \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"activate \"127.0.0.1:8888\" \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dropnode \"127.0.0.1:8888\" \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"put key value \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"get key \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"state \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		</block_content>}</block></if> <else>else <block>{<block_content>
			<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"unknown command: [%s], type \"help\" to see help \n"</literal></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></else></if_stmt>

		<comment type="line">//printf("cmd_buf: [%s] \n", cmd_buf);</comment>
	</block_content>}</block></while>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>startConsoleFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>SRaftServer</name> <modifier>*</modifier></type><name>pServer</name> <init>= <expr><operator>(</operator><name>SRaftServer</name><operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>console</name><argument_list>(<argument><expr><name>pServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Config ---------------------------------</comment>
<function><type><name>void</name></type> <name>usage</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nusage: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s --me=127.0.0.1:10000 --dir=./data --voter \n"</literal></expr></argument>, <argument><expr><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s --me=127.0.0.1:10001 --dir=./data \n"</literal></expr></argument>, <argument><expr><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s --me=127.0.0.1:10002 --dir=./data \n"</literal></expr></argument>, <argument><expr><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s --me=127.0.0.1:10000 --peers=127.0.0.1:10001,127.0.0.1:10002 --dir=./data \n"</literal></expr></argument>, <argument><expr><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s --me=127.0.0.1:10001 --peers=127.0.0.1:10000,127.0.0.1:10002 --dir=./data \n"</literal></expr></argument>, <argument><expr><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"%s --me=127.0.0.1:10002 --peers=127.0.0.1:10000,127.0.0.1:10001 --dir=./data \n"</literal></expr></argument>, <argument><expr><name>exe_name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>parseConf</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>, <parameter><decl><type><name>SRaftServerConfig</name> <modifier>*</modifier></type><name>pConf</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pConf</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pConf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>option_index</name></decl>, <decl><type ref="prev"/><name>option_value</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>option_index</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>long_options</name><index>[]</index></name> <init>= <expr><block>{
        <expr><block>{<expr><literal type="string">"help"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"voter"</literal></expr>, <expr><name>no_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'v'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"peers"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'p'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"me"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'m'</literal></expr>}</block></expr>,
        <expr><block>{<expr><literal type="string">"dir"</literal></expr>, <expr><name>required_argument</name></expr>, <expr><name>NULL</name></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,
        <expr><block>{<expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>, <expr><name>NULL</name></expr>, <expr><literal type="number">0</literal></expr>}</block></expr>
    }</block></expr></init></decl>;</decl_stmt>

	<expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>voter</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>option_value</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hvp:m:d:"</literal></expr></argument>, <argument><expr><name>long_options</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>option_index</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <switch>switch <condition>(<expr><name>option_value</name></expr>)</condition> <block>{<block_content>
        	<case>case <expr><literal type="char">'m'</literal></expr>:</case> <block>{<block_content>
				<expr_stmt><expr><call><name>parseAddr</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pConf</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
        	</block_content>}</block>

			<case>case <expr><literal type="char">'p'</literal></expr>:</case> <block>{<block_content>
				<decl_stmt><decl><type><name>char</name></type> <name><name>tokens</name><index>[<expr><name>MAX_PEERS</name></expr>]</index><index>[<expr><name>MAX_TOKEN_LEN</name></expr>]</index></name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>int</name></type> <name>peerCount</name> <init>= <expr><call><name>splitString</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>, <argument><expr><name>tokens</name></expr></argument>, <argument><expr><name>MAX_PEERS</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>peersCount</name></name> <operator>=</operator> <name>peerCount</name></expr>;</expr_stmt>
				<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>peerCount</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
					<decl_stmt><decl><type><name>Addr</name> <modifier>*</modifier></type><name>pAddr</name> <init>= <expr><operator>&amp;</operator><name><name>pConf</name><operator>-&gt;</operator><name>peers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
					<expr_stmt><expr><call><name>parseAddr</name><argument_list>(<argument><expr><name><name>tokens</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name><name>pAddr</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pAddr</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pAddr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				</block_content>}</block></for>
				<break>break;</break>
			</block_content>}</block>

			<case>case <expr><literal type="char">'v'</literal></expr>:</case> <block>{<block_content>
				<expr_stmt><expr><name><name>pConf</name><operator>-&gt;</operator><name>voter</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

			<case>case <expr><literal type="char">'d'</literal></expr>:</case> <block>{<block_content>
				<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
			</block_content>}</block>

			<case>case <expr><literal type="char">'h'</literal></expr>:</case> <block>{<block_content>
				<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>

			<default>default:</default> <block>{<block_content>
				<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block>
		</block_content>}</block></switch>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>dataDir</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>dataDir</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s/%s:%u"</literal></expr></argument>, <argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>printConf</name><parameter_list>(<parameter><decl><type><name>SRaftServerConfig</name> <modifier>*</modifier></type><name>pConf</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"\nconf: \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"me: %s:%u \n"</literal></expr></argument>, <argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"peersCount: %d \n"</literal></expr></argument>, <argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>peersCount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pConf</name><operator>-&gt;</operator><name>peersCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><name>Addr</name> <modifier>*</modifier></type><name>pAddr</name> <init>= <expr><operator>&amp;</operator><name><name>pConf</name><operator>-&gt;</operator><name>peers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"peer%d: %s:%u \n"</literal></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>pAddr</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>pAddr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"dataDir: %s \n\n"</literal></expr></argument>, <argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>dataDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

</block_content>}</block></function>


<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content> 
	<expr_stmt><expr><call><name>taosSeedRand</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>int32_t</name></type> <name>ret</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>exe_name</name> <operator>=</operator> <name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">3</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>usage</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>signal</name><argument_list>(<argument><expr><name>SIGPIPE</name></expr></argument>, <argument><expr><name>SIG_IGN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SRaftServerConfig</name></type> <name>conf</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>parseConf</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>printConf</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	

	<decl_stmt><decl><type><name>char</name></type> <name><name>cmd_buf</name><index>[<expr><name>COMMAND_LEN</name></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"mkdir -p %s"</literal></expr></argument>, <argument><expr><name><name>conf</name><operator>.</operator><name>dataDir</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>system</name><argument_list>(<argument><expr><name>cmd_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name></type> <name>fsm</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>initFsm</name><argument_list>(<argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>SRaftServer</name></type> <name>raftServer</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>raftServerInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>raftServer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>fsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>pthread_t</name></type> <name>tidRaftServer</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tidRaftServer</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>startServerFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raftServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>pthread_t</name></type> <name>tidConsole</name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tidConsole</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>startConsoleFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raftServer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">10</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></while>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
