<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/contrib/test/craft/raftServer.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcommon.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raftServer.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>keys</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>

<function><type><name>void</name></type> <name>initStore</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><name>keys</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>MAX_RECORD_COUNT</name> <operator>*</operator> <name>MAX_KV_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>values</name> <operator>=</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>MAX_RECORD_COUNT</name> <operator>*</operator> <name>MAX_KV_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>writeIndex</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroyStore</name><parameter_list>()</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>keys</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>putKV</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<if_stmt><if>if <condition>(<expr><name>writeIndex</name> <operator>&lt;</operator> <name>MAX_RECORD_COUNT</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>keys</name><index>[<expr><name>writeIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>MAX_KV_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>values</name><index>[<expr><name>writeIndex</name></expr>]</index></name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>MAX_KV_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>writeIndex</name><operator>++</operator></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>char</name> <modifier>*</modifier></type><name>getKV</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>MAX_RECORD_COUNT</name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<if_stmt><if>if <condition>(<expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>keys</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
			<return>return <expr><operator>&amp;</operator><name><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></for>
	<return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>


<decl_stmt><decl><type><name>int</name></type> <name>splitString</name><argument_list>(<argument><expr><specifier>const</specifier> <name>char</name><operator>*</operator> <name>str</name></expr></argument>, <argument><expr><name>char</name><operator>*</operator> <name>separator</name></expr></argument>, <argument><expr><call><name>char</name> <argument_list>(<argument><expr><operator>*</operator><name>arr</name></expr></argument>)</argument_list></call><index>[<expr><name>MAX_TOKEN_LEN</name></expr>]</index></expr></argument>, <argument><expr><name>int</name> <name>n_arr</name></expr></argument>)</argument_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>n_arr</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    	<return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>tmp</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><call><name>malloc</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strcpy</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>context</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>n</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>char</name><modifier>*</modifier></type> <name>token</name> <init>= <expr><call><name>strtok_r</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name></expr>)</condition> <block>{<block_content>
    	<goto>goto <name>ret</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>MAX_TOKEN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>

    <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><name>token</name> <operator>=</operator> <call><name>strtok_r</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>separator</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>token</name> <operator>||</operator> <name>n</name> <operator>&gt;=</operator> <name>n_arr</name></expr>)</condition> <block>{<block_content>
    	    <goto>goto <name>ret</name>;</goto>
    	</block_content>}</block></if></if_stmt>
    	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr><name>token</name></expr></argument>, <argument><expr><name>MAX_TOKEN_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    	<expr_stmt><expr><name>n</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

<label><name>ret</name>:</label>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>n</name></expr>;</return>
</block_content>}</block></decl></decl_stmt>

<function><type><name>uint64_t</name></type> <name>raftId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>uint32_t</name></type> <name>port</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>host_uint32</name> <init>= <expr><operator>(</operator><name>uint32_t</name><operator>)</operator><call><name>inet_addr</name><argument_list>(<argument><expr><name>host</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>host_uint32</name> <operator>!=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>code</name> <init>= <expr><operator>(</operator><operator>(</operator><name>uint64_t</name><operator>)</operator><name>host_uint32</name><operator>)</operator> <operator>&lt;&lt;</operator> <literal type="number">32</literal> <operator>|</operator> <name>port</name></expr></init></decl>;</decl_stmt>
	<return>return <expr><name>code</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftServerInit</name><parameter_list>(<parameter><decl><type><name>SRaftServer</name> <modifier>*</modifier></type><name>pRaftServer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SRaftServerConfig</name> <modifier>*</modifier></type><name>pConf</name></decl></parameter>, <parameter><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s"</literal></expr></argument>, <argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>port</name></name> <operator>=</operator> <name><name>pConf</name><operator>-&gt;</operator><name>me</name><operator>.</operator><name>port</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><name><name>pConf</name><operator>-&gt;</operator><name>dataDir</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>raftId</name></name> <operator>=</operator> <call><name>raftId</name><argument_list>(<argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>fsm</name></name> <operator>=</operator> <name>pFsm</name></expr>;</expr_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>uv_loop_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>raft_uv_tcp_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>raft_uv_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>dir</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>transport</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>raft_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>io</name></name></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>fsm</name></name></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>raftId</name></name></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>raft_configuration</name></name></type> <name>conf</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>raft_configuration_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<if_stmt><if>if <condition>(<expr><name><name>pConf</name><operator>-&gt;</operator><name>voter</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    	<expr_stmt><expr><call><name>raft_configuration_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>raftId</name></name></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>RAFT_SPARE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></if> <else>else <block>{<block_content>
    	<expr_stmt><expr><call><name>raft_configuration_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>raftId</name></name></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>address</name></name></expr></argument>, <argument><expr><name>RAFT_VOTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	</block_content>}</block></else></if_stmt>

	

	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"add myself: %llu - %s \n"</literal></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>raftId</name></name></expr></argument>, <argument><expr><name><name>pRaftServer</name><operator>-&gt;</operator><name>address</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


	<for>for <control>(<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pConf</name><operator>-&gt;</operator><name>peersCount</name></name></expr>;</condition> <incr><expr><operator>++</operator><name>i</name></expr></incr>)</control> <block>{<block_content>
		<decl_stmt><decl><type><specifier>const</specifier> <name>Addr</name> <modifier>*</modifier></type><name>pAddr</name> <init>= <expr><operator>&amp;</operator><name><name>pConf</name><operator>-&gt;</operator><name>peers</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>raft_id</name></type> <name>rid</name> <init>= <expr><call><name>raftId</name><argument_list>(<argument><expr><name><name>pAddr</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>pAddr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name><name>addrBuf</name><index>[<expr><name>ADDRESS_LEN</name></expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>addrBuf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>addrBuf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%s:%u"</literal></expr></argument>, <argument><expr><name><name>pAddr</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name><name>pAddr</name><operator>-&gt;</operator><name>port</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>raft_configuration_add</name><argument_list>(<argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name>addrBuf</name></expr></argument>, <argument><expr><name>RAFT_VOTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"add peers: %llu - %s \n"</literal></expr></argument>, <argument><expr><name>rid</name></expr></argument>, <argument><expr><name>addrBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></for>

    <expr_stmt><expr><call><name>raft_bootstrap</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>conf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>raftServerStart</name><parameter_list>(<parameter><decl><type><name>SRaftServer</name> <modifier>*</modifier></type><name>pRaftServer</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>raft_start</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ret</name></expr>)</condition> <block>{<block_content>
		<expr_stmt><expr><call><name>fprintf</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr><literal type="string">"%s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>raft</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<expr_stmt><expr><call><name>uv_run</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pRaftServer</name><operator>-&gt;</operator><name>loop</name></name></expr></argument>, <argument><expr><name>UV_RUN_DEFAULT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>void</name></type> <name>raftServerClose</name><parameter_list>(<parameter><decl><type><name>SRaftServer</name> <modifier>*</modifier></type><name>pRaftServer</name></decl></parameter>)</parameter_list> <block>{<block_content>

</block_content>}</block></function>


<function><type><name>int</name></type> <name>fsmApplyCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>(</operator><name>char</name><operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fsm apply: %s \n"</literal></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<decl_stmt><decl><type><name>char</name></type> <name><name>arr</name><index>[<expr><literal type="number">2</literal></expr>]</index><index>[<expr><name>MAX_TOKEN_LEN</name></expr>]</index></name></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>splitString</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><literal type="string">"--"</literal></expr></argument>, <argument><expr><name>arr</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>putKV</name><argument_list>(<argument><expr><name><name>arr</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>arr</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int32_t</name></type> <name>initFsm</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>fsm</name></decl></parameter>)</parameter_list> <block>{<block_content>
	<expr_stmt><expr><call><name>initStore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name><name>fsm</name><operator>-&gt;</operator><name>apply</name></name> <operator>=</operator> <name>fsmApplyCb</name></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
