<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/TDengine/contrib/test/traft/cluster/node10000_restart.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;uv.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"raft.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>SRaftEnv</name></type> <name>raftEnv</name></decl>;</decl_stmt>

<typedef>typedef <type><struct>struct <name>Tsdb</name> <block>{
  <decl_stmt><decl><type><name>uint64_t</name></type> <name>lastApplyIndex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>mem</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>imm</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name>    <modifier>*</modifier></type><name>store</name></decl>;</decl_stmt>
}</block></struct></type> <name>Tsdb</name>;</typedef>

<function><type><name>void</name></type> <name>tsdbWrite</name><parameter_list>(<parameter><decl><type><name>Tsdb</name> <modifier>*</modifier></type><name>t</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list> <block>{<block_content/>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>startFunc</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>param</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>SRaftEnv</name> <modifier>*</modifier></type><name>pSRaftEnv</name> <init>= <expr><operator>(</operator><name>SRaftEnv</name> <operator>*</operator><operator>)</operator><name>param</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int32_t</name></type>   <name>r</name> <init>= <expr><call><name>raftEnvStart</name><argument_list>(<argument><expr><name>pSRaftEnv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>fsmApplyCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>pFsm</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name><name>struct</name> <name>raft_buffer</name></name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>result</name></decl></parameter>, <parameter><decl><type><name>raft_index</name></type> <name>index</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// get commit value</comment>
  <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>msg</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>-&gt;</operator><name>base</name></name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"fsm apply: index:%llu value:%s \n"</literal></expr></argument>, <argument><expr><name>index</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <decl_stmt><decl><type><name>Tsdb</name> <modifier>*</modifier></type><name>t</name> <init>= <expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>index</name> <operator>&gt;</operator> <name><name>t</name><operator>-&gt;</operator><name>lastApplyIndex</name></name></expr>)</condition> <block>{<block_content>
    <comment type="line">// apply value into tsdb</comment>
    <expr_stmt><expr><call><name>tsdbWrite</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// update lastApplyIndex</comment>
    <expr_stmt><expr><name><name>t</name><operator>-&gt;</operator><name>lastApplyIndex</name></name> <operator>=</operator> <name>index</name></expr>;</expr_stmt>
  </block_content>}</block></if></if_stmt>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>putValueCb</name><parameter_list>(<parameter><decl><type><name><name>struct</name> <name>raft_apply</name></name> <modifier>*</modifier></type><name>req</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>status</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>result</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>status</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"putValueCb error \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"putValueCb ok \n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>req</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>submitValue</name><parameter_list>()</parameter_list> <block>{<block_content>
  <comment type="line">// prepare value</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>raft_buffer</name></name></type> <name>buf</name></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>len</name></name> <operator>=</operator> <literal type="number">32</literal></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>buf</name><operator>.</operator><name>base</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>, <argument><expr><name><name>buf</name><operator>.</operator><name>len</name></name></expr></argument>, <argument><expr><literal type="string">"%ld"</literal></expr></argument>, <argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// get raft</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>raft</name></name> <modifier>*</modifier></type><name>r</name> <init>= <expr><call><name>getRaft</name><argument_list>(<argument><expr><operator>&amp;</operator><name>raftEnv</name></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <comment type="line">// printRaftState(r);</comment>

  <comment type="line">// submit value</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>raft_apply</name></name> <modifier>*</modifier></type><name>req</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>req</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>req</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>ptr</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>raft_apply</name><argument_list>(<argument><expr><name>r</name></expr></argument>, <argument><expr><name>req</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>buf</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>putValueCb</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"put %s \n"</literal></expr></argument>, <argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>buf</name><operator>.</operator><name>base</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></if> <else>else <block>{<block_content>
    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"put error: %s \n"</literal></expr></argument>, <argument><expr><call><name>raft_errmsg</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></else></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list> <block>{<block_content>
  <comment type="line">// init raft env</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>r</name> <init>= <expr><call><name>raftEnvInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name>raftEnv</name></expr></argument>, <argument><expr><literal type="string">"127.0.0.1"</literal></expr></argument>, <argument><expr><literal type="number">10000</literal></expr></argument>, <argument><expr><literal type="string">"./data"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// start raft env</comment>
  <decl_stmt><decl><type><name>pthread_t</name></type> <name>tid</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name>tid</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>startFunc</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>raftEnv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// wait for start, just for simple</comment>
  <while>while <condition>(<expr><name><name>raftEnv</name><operator>.</operator><name>isStart</name></name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <comment type="line">// init fsm</comment>
  <decl_stmt><decl><type><name><name>struct</name> <name>raft_fsm</name></name> <modifier>*</modifier></type><name>pFsm</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>pFsm</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>apply</name></name> <operator>=</operator> <name>fsmApplyCb</name></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>Tsdb</name> <modifier>*</modifier></type><name>tsdb</name> <init>= <expr><call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><operator>*</operator><name>tsdb</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name><name>pFsm</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>tsdb</name></expr>;</expr_stmt>

  <comment type="line">// add vgroup, id = 100, only has 3 replica.</comment>
  <comment type="line">// here only add self.</comment>
  <comment type="line">// peer replica information will restore from wal.</comment>
  <expr_stmt><expr><name>r</name> <operator>=</operator> <call><name>addRaftVoter</name><argument_list>(<argument><expr><operator>&amp;</operator><name>raftEnv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">100</literal></expr></argument>, <argument><expr><name>pFsm</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>r</name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="line">// for test: submit a value every second</comment>
  <while>while <condition>(<expr><literal type="number">1</literal></expr>)</condition> <block>{<block_content>
    <expr_stmt><expr><call><name>sleep</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>submitValue</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  </block_content>}</block></while>

  <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
