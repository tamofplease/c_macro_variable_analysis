<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/icucompat/icucompat.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__ANDROID__</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>defined</name><argument_list>(<argument><expr><name>WCDB_ICU_DIRECT_LINKING</name></expr></argument>)</argument_list></call></expr></cpp:if>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICUCOMPAT_IMPL</name></cpp:macro></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icucompat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dirent.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;dlfcn.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>s_libicuuc_so</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>s_libicui18n_so</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>icu_compat_t</name></type> <name>__g_icucompat_iface__</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type>
<name>load_function</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lib_handle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>func_name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">128</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>func_name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strlcpy</name><argument_list>(<argument><expr><name>buf</name> <operator>+</operator> <name>len</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>dlsym</name><argument_list>(<argument><expr><name>lib_handle</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>load_functions</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>suffix</name></decl></parameter>)</parameter_list>
<block>{<block_content>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICUCOMPAT_UC_FUNC</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func_name</name></type></parameter>, <parameter><type><name>arg_list</name></type></parameter>)</parameter_list></cpp:macro>                       \
    <cpp:value>(__g_icucompat_iface__.func_name##_) =                                     \
        (ret_type(*) arg_list) load_function(s_libicuuc_so, #func_name,        \
                                             suffix);</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ICUCOMPAT_I18N_FUNC</name><parameter_list>(<parameter><type><name>ret_type</name></type></parameter>, <parameter><type><name>func_name</name></type></parameter>, <parameter><type><name>arg_list</name></type></parameter>)</parameter_list></cpp:macro>                     \
    <cpp:value>(__g_icucompat_iface__.func_name##_) =                                     \
        (ret_type(*) arg_list) load_function(s_libicui18n_so, #func_name,      \
                                             suffix);</cpp:value></cpp:define>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"icuprototype.h"</cpp:file></cpp:include>

<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ICUCOMPAT_UC_FUNC</name></cpp:undef>
<cpp:undef>#<cpp:directive>undef</cpp:directive> <name>ICUCOMPAT_I18N_FUNC</name></cpp:undef>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>find_icu_suffix</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>lib_handle</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>buflen</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>DIR</name> <modifier>*</modifier></type><name>icudir</name> <init>= <expr><call><name>opendir</name><argument_list>(<argument><expr><literal type="string">"/system/usr/icu"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>icudir</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>dirent</name></name> <modifier>*</modifier></type><name>dp</name></decl>;</decl_stmt>
    <while>while <condition>(<expr><operator>(</operator><name>dp</name> <operator>=</operator> <call><name>readdir</name><argument_list>(<argument><expr><name>icudir</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>dp</name><operator>-&gt;</operator><name>d_type</name></name> <operator>==</operator> <name>DT_REG</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// Find /system/usr/icu/icudt??l.dat</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><name><name>dp</name><operator>-&gt;</operator><name>d_name</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">12</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"icudt"</literal></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&gt;=</operator> <literal type="char">'0'</literal> <operator>&amp;&amp;</operator>
                <name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><literal type="string">"l.dat"</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>name</name><index>[<expr><literal type="number">7</literal></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">6</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><name>buflen</name></expr></argument>, <argument><expr><literal type="string">"_%c%c"</literal></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">5</literal></expr>]</index></name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><literal type="number">6</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Try loading with suffix.</comment>
                <if_stmt><if>if <condition>(<expr><call><name>load_function</name><argument_list>(<argument><expr><name>lib_handle</name></expr></argument>, <argument><expr><literal type="string">"u_getVersion"</literal></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>icudir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <return>return <expr><name>buf</name></expr>;</return>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>closedir</name><argument_list>(<argument><expr><name>icudir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Failed, try plain names without suffix.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>load_function</name><argument_list>(<argument><expr><name>lib_handle</name></expr></argument>, <argument><expr><literal type="string">"u_getVersion"</literal></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <return>return <expr><name>buf</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>init_icucompat</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>suffix</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>s_libicuuc_so</name> <operator>||</operator> <name>s_libicui18n_so</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>s_libicuuc_so</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"libicuuc.so"</literal></expr></argument>, <argument><expr><name>RTLD_LAZY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>s_libicui18n_so</name> <operator>=</operator> <call><name>dlopen</name><argument_list>(<argument><expr><literal type="string">"libicui18n.so"</literal></expr></argument>, <argument><expr><name>RTLD_LAZY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>s_libicuuc_so</name> <operator>||</operator> <operator>!</operator><name>s_libicui18n_so</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>find_icu_suffix</name><argument_list>(<argument><expr><name>s_libicuuc_so</name></expr></argument>, <argument><expr><name>suffix</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>load_functions</name><argument_list>(<argument><expr><name>suffix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>bail</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>s_libicuuc_so</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>s_libicuuc_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>s_libicui18n_so</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>s_libicui18n_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>s_libicuuc_so</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s_libicui18n_so</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>destroy_icucompat</name><parameter_list>()</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>s_libicuuc_so</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>s_libicuuc_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>s_libicui18n_so</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>dlclose</name><argument_list>(<argument><expr><name>s_libicui18n_so</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>s_libicuuc_so</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>s_libicui18n_so</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
</block_content>}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">// defined(__ANDROID__) &amp;&amp; !defined(WCDB_ICU_DIRECT_LINKING)</comment>
</unit>
