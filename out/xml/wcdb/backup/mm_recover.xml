<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/backup/mm_recover.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM_BACKUP_INCLUDE_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm_backup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rc4.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<struct>struct <name>mm_recover_ctx</name> <block>{
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt> <comment type="line">// database connection, not initialized until actual running.</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>         <comment type="line">// section flags.</comment>
    <decl_stmt><decl><type><name>z_stream</name></type> <name>zstrm</name></decl>;</decl_stmt>         <comment type="line">// input compression stream.</comment>
    <decl_stmt><decl><type><name>RC4_KEY</name></type> <name>rc4_template</name></decl>;</decl_stmt>   <comment type="line">// key template.</comment>
    <decl_stmt><decl><type><name>RC4_KEY</name></type> <name>rc4_key</name></decl>;</decl_stmt>        <comment type="line">// input file decryption key.</comment>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>               <comment type="line">// input file handle.</comment>
    <decl_stmt><decl><type><name>mm_logfunc</name></type> <name>log</name></decl>;</decl_stmt>         <comment type="line">// log function.</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sec_size</name></decl>;</decl_stmt>      <comment type="line">// section size.</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>succ_count</name></decl>;</decl_stmt>    <comment type="line">// count of successfully executed statments.</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>fail_count</name></decl>;</decl_stmt>    <comment type="line">// count of failed statments.</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>section_count</name></decl>;</decl_stmt> <comment type="line">// count of processed sections.</comment>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>version</name></decl>;</decl_stmt>       <comment type="line">// dump file version.</comment>

    <decl_stmt><decl><type><specifier>volatile</specifier> <name>char</name></type> <name>canceled</name></decl>;</decl_stmt> <comment type="line">// task status.</comment>

    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>in_buf</name><index>[<expr><literal type="number">4096</literal></expr>]</index></name></decl>;</decl_stmt> <comment type="line">// gzip input buffer.</comment>

    <decl_stmt><decl><type><name>char</name></type> <name><name>errmsg</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>BIND_TAG_TEXT</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"BIND_NULL"</literal></expr>,         <comment type="line">// 0x00</comment>
    <expr><literal type="string">"BIND_VARINT"</literal></expr>,       <comment type="line">// 0x01</comment>
    <expr><literal type="string">"BIND_VARINT_MINUS"</literal></expr>, <comment type="line">// 0x02</comment>
    <expr><literal type="string">"BIND_FLOAT"</literal></expr>,        <comment type="line">// 0x03</comment>
    <expr><literal type="string">"BIND_TEXT"</literal></expr>,         <comment type="line">// 0x04</comment>
    <expr><literal type="string">"BIND_TEXT_SHORT"</literal></expr>,   <comment type="line">// 0x05</comment>
    <expr><literal type="string">"BIND_BLOB"</literal></expr>,         <comment type="line">// 0x06</comment>
    <expr><literal type="string">"BIND_BLOB_SHORT"</literal></expr>,   <comment type="line">// 0x07</comment>
}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>FUNC_TAG_TEXT</name><index>[]</index></name> <init>= <expr><block>{
    <expr><literal type="string">"LARGE_DATA"</literal></expr>,   <comment type="line">// 0x80</comment>
    <expr><literal type="string">"SQL_ONESHOT"</literal></expr>,  <comment type="line">// 0x81</comment>
    <expr><literal type="string">"SQL_REPEATED"</literal></expr>, <comment type="line">// 0x82</comment>
    <expr><literal type="string">"END_ROW"</literal></expr>,      <comment type="line">// 0x83</comment>
    <expr><literal type="string">"END_SQL"</literal></expr>,      <comment type="line">// 0x84</comment>
}</block></expr></init></decl>;</decl_stmt>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>tag2text</name><parameter_list>(<parameter><decl><type><name>uint8_t</name></type> <name>tag</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>tag</name> <operator>&amp;</operator> <literal type="number">0x80</literal><operator>)</operator></expr> ?</condition><then> <expr><name><name>FUNC_TAG_TEXT</name><index>[<expr><name>tag</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr>]</index></name></expr> </then><else>: <expr><name><name>BIND_TAG_TEXT</name><index>[<expr><name>tag</name></expr>]</index></name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>read_header</name><parameter_list>(<parameter><decl><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mm_backup_header</name></type> <name>header</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot read backup header."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name>MMBAK_MAGIC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MMBAK_MAGIC</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Invalid backup file format."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <literal type="number">1</literal> <operator>&amp;&amp;</operator> <name><name>header</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Invalid backup file version: %d"</literal></expr></argument>, <argument><expr><name><name>header</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>version</name></name> <operator>=</operator> <name><name>header</name><operator>.</operator><name>version</name></name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>bail</name>:</label>
    <return>return <expr><name>MMBAK_RET_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_read_stream</name><parameter_list>(<parameter><decl><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <operator>(</operator><name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <name>size</name></expr>;</expr_stmt>

    <do>do <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>avail_in</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument>)</argument_list></sizeof><operator>)</operator></expr> ?</condition><then> <expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument>)</argument_list></sizeof></expr>
                                                        </then><else>: <expr><name><name>ctx</name><operator>-&gt;</operator><name>sec_size</name></name></expr></else></ternary></expr>;</expr_stmt>

            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ferror</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Failed reading stream: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MMBAK_FLAG_NO_CIPHER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>RC4</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc4_key</name></name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_buf</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>in_buf</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name>ret</name></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>inflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name></name></expr></argument>, <argument><expr><name>Z_NO_FLUSH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Inflate error: %s"</literal></expr></argument>,
                         <argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>msg</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>msg</name></name></expr> </then><else>: <expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    </block_content>}</block> while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>avail_out</name></name> <operator>&gt;</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition>;</do>

    <return>return <expr><name>size</name> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>avail_out</name></name></expr>;</return>

<label><name>bail</name>:</label>
    <return>return <expr><name>MMBAK_RET_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_read_varint</name><parameter_list>(<parameter><decl><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name> <modifier>*</modifier></type><name>val</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>minus</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>v</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>shift</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <do>do <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>b</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>MMBAK_RET_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>v</name> <operator>|=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name>b</name> <operator>&amp;</operator> <literal type="number">0x7F</literal><operator>)</operator> <operator>&lt;&lt;</operator> <name>shift</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>shift</name> <operator>+=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>b</name> <operator>&amp;</operator> <literal type="number">0x80</literal></expr>)</condition>;</do>

    <if_stmt><if>if <condition>(<expr><name>minus</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>v</name> <operator>=</operator> <operator>~</operator><name>v</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>val</name> <operator>=</operator> <name>v</name></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>READ_STREAM_FAIL</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>, <parameter><type><name>len</name></type></parameter>, <parameter><type><name>ret</name></type></parameter>)</parameter_list></cpp:macro>                                        \
    <cpp:value>LOG_AND_FAIL("Read stream failed. [tag: %s, length: %d, ret: %d]",         \
                 tag2text((tag)), (len), (ret))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MEMORY_ALLOC_FAIL</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>, <parameter><type><name>len</name></type></parameter>)</parameter_list></cpp:macro>                                            \
    <cpp:value>LOG_AND_FAIL("Memory allocation failed. [tag: %s, length: %d]",            \
                 tag2text((tag)), (len))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_FAIL_ERRMSG</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>, <parameter><type><name>sql</name></type></parameter>, <parameter><type><name>errmsg</name></type></parameter>)</parameter_list></cpp:macro>                                   \
    <cpp:value>LOG_AND_FAIL("SQL execution failed. [tag: %s, err: %s, sql: %s]",          \
                 tag2text((tag)), (errmsg), (sql))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_FAIL_GETMSG</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>, <parameter><type><name>sql</name></type></parameter>, <parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                                       \
    <cpp:value>LOG_AND_FAIL("SQL execution failed. [tag: %s, err: %s, sql: %s]",          \
                 tag2text((tag)), sqlite3_errmsg((db)), (sql))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CUSTOM_FAIL</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>, <parameter><type><name>msg</name></type></parameter>)</parameter_list></cpp:macro>                                                  \
    <cpp:value>LOG_AND_FAIL("%s [tag: %s]", (msg), tag2text((tag)))</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_FAIL_ERRMSG_WARN</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>, <parameter><type><name>sql</name></type></parameter>, <parameter><type><name>errmsg</name></type></parameter>)</parameter_list></cpp:macro>                              \
    <cpp:value>LOGE("SQL execution failed. [tag: %s, err: %s, sql: %s]", tag2text((tag)), \
         (errmsg), (sql))</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>SQLITE_FAIL_GETMSG_WARN</name><parameter_list>(<parameter><type><name>tag</name></type></parameter>, <parameter><type><name>sql</name></type></parameter>, <parameter><type><name>db</name></type></parameter>)</parameter_list></cpp:macro>                                  \
    <cpp:value>LOGE("SQL execution failed. [tag: %s, err: %s, sql: %s]", tag2text((tag)), \
         sqlite3_errmsg((db)), (sql))</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_read_and_run_tag</name><parameter_list>(<parameter><decl><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fatal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>tag</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name>length_short</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint16_t</name></type> <name>length</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>bind_idx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>databuf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>

    <while>while <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>MMBAK_RET_OK</name></expr>;</return></block_content></block></if>
        <if type="elseif">else if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>MMBAK_RET_FAILED</name></expr>;</return></block_content></block></if></if_stmt>

        <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>MMBAK_TAG_LARGE_DATA</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>CUSTOM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Internal error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>MEMORY_ALLOC_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
                    <name>length</name> <operator>*</operator> <literal type="number">65536</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
                <comment type="line">//LOGD("[%s] len=%u * 65536", "LARGE_DATA", length);</comment>
                <break>break;</break>

            <case>case <expr><name>MMBAK_TAG_SQL_ONESHOT</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_data</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>databuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>data</name> <operator>=</operator> <name>databuf</name></expr>;</expr_stmt></block_content></block></if>
                    <else>else <block>{<block_content>
                        <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>MEMORY_ALLOC_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>p_data</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>SQLITE_FAIL_ERRMSG_WARN</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>fatal</name></expr>)</condition><block type="pseudo"><block_content>
                        <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fail_count</name></name><operator>++</operator></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>succ_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <comment type="line">//LOGD("[%s] sql=%s", "SQL_ONESHOT", data);</comment>
                <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>databuf</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>MMBAK_TAG_SQL_REPEATED</name></expr>:</case>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_data</name></expr>)</condition> <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>length</name> <operator>&lt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>databuf</name></expr></argument>)</argument_list></sizeof></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>data</name> <operator>=</operator> <name>databuf</name></expr>;</expr_stmt></block_content></block></if>
                    <else>else <block>{<block_content>
                        <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>MEMORY_ALLOC_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>length</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                    </block_content>}</block></else></if_stmt>
                    <expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
                <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>length</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>p_data</name><index>[<expr><name>length</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
                                         <argument><expr><operator>(</operator><name>p_data</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>length</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>SQLITE_FAIL_GETMSG_WARN</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>data</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if_stmt><if>if <condition>(<expr><name>fatal</name></expr>)</condition><block type="pseudo"><block_content>
                        <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

                    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">//LOGD("[%s] sql=%s", "SQL_REPEATED", data);</comment>
                <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>databuf</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

                <expr_stmt><expr><name>bind_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <do>do <block>{<block_content>
                    <comment type="line">// check exit status.</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name></expr>)</condition> <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>data</name> <operator>!=</operator> <name>databuf</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <if_stmt><if>if <condition>(<expr><name>stmt</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                        <return>return <expr><name>MMBAK_RET_CANCELED</name></expr>;</return>
                    </block_content>}</block></if></if_stmt>

                    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>tag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <switch>switch <condition>(<expr><name>tag</name></expr>)</condition> <block>{<block_content>
                        <union>union <block>{
                            <decl_stmt><decl><type><name>int64_t</name></type> <name>i</name></decl>;</decl_stmt>
                            <decl_stmt><decl><type><name>double</name></type> <name>f</name></decl>;</decl_stmt>
                        }</block> <decl><name>value</name></decl>;</union>

                        <case>case <expr><name>MMBAK_TAG_LARGE_DATA</name></expr>:</case>
                            <if_stmt><if>if <condition>(<expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>CUSTOM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Internal error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>MEMORY_ALLOC_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
                                                        <argument><expr><name>length</name> <operator>*</operator> <literal type="number">65536</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
                                <name>length</name> <operator>*</operator> <literal type="number">65536</literal></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>length</name> <operator>*</operator> <literal type="number">65536</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
                            <comment type="line">//LOGD(" &gt; [%s] len=%u * 65536", "LARGE_DATA", length);</comment>
                            <break>break;</break>

                        <case>case <expr><name>MMBAK_TAG_END_ROW</name></expr>:</case>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>stmt</name></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fail_count</name></name><operator>++</operator></expr>;</expr_stmt></block_content></block></if>
                            <else>else <block>{<block_content>
                                <while>while <condition>(<expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition> <block>{<block_content>
                                </block_content>}</block></while>
                                <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                                    <expr_stmt><expr><call><name>SQLITE_FAIL_GETMSG_WARN</name><argument_list>(
                                        <argument><expr><name>tag</name></expr></argument>, <argument><expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                    <if_stmt><if>if <condition>(<expr><name>fatal</name></expr>)</condition><block type="pseudo"><block_content>
                                        <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

                                    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fail_count</name></name><operator>++</operator></expr>;</expr_stmt>
                                </block_content>}</block></if> <else>else <block>{<block_content>
                                    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>succ_count</name></name><operator>++</operator></expr>;</expr_stmt>
                                    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>succ_count</name></name> <operator>%</operator> <literal type="number">256</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                                        <comment type="line">// We have run 256 insertions, do a transaction commit.</comment>
                                        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>,
                                                           <argument><expr><literal type="string">"COMMIT; BEGIN;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                                                           <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
                                            <expr_stmt><expr><call><name>SQLITE_FAIL_ERRMSG_WARN</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
                                                                    <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <if_stmt><if>if <condition>(<expr><name>fatal</name></expr>)</condition><block type="pseudo"><block_content>
                                                <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

                                            <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fail_count</name></name><operator>++</operator></expr>;</expr_stmt>
                                        </block_content>}</block></if></if_stmt>
                                    </block_content>}</block></if></if_stmt>
                                </block_content>}</block></else></if_stmt>
                            </block_content>}</block></else></if_stmt>

                            <expr_stmt><expr><name>bind_idx</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                            <comment type="line">//LOGD(" &gt; [%s]", "END_ROW");</comment>
                            <break>break;</break>

                        <case>case <expr><name>MMBAK_TAG_END_SQL</name></expr>:</case>
                            <comment type="line">//LOGD(" &gt; [%s]", "END_SQL");</comment>
                            <break>break;</break> <comment type="line">// end of loop</comment>

                        <case>case <expr><name>MMBAK_TAG_BIND_NULL</name></expr>:</case>
                            <if_stmt><if>if <condition>(<expr><name>stmt</name></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>++</operator><name>bind_idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <comment type="line">//LOGD(" &gt; [%s]", "BIND_NULL");</comment>
                            <break>break;</break>

                        <case>case <expr><name>MMBAK_TAG_BIND_VARINT</name></expr>:</case>
                        <case>case <expr><name>MMBAK_TAG_BIND_VARINT_MINUS</name></expr>:</case>
                            <if_stmt><if>if <condition>(<expr><call><name>dump_read_varint</name><argument_list>(
                                    <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>value</name><operator>.</operator><name>i</name></name></expr></argument>,
                                    <argument><expr><name>tag</name> <operator>==</operator> <name>MMBAK_TAG_BIND_VARINT_MINUS</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>CUSTOM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"Read varint failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>stmt</name></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>++</operator><name>bind_idx</name></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>i</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <comment type="line">//LOGD(" &gt; [%s] value=%lld", tag2text(tag), value.i);</comment>
                            <break>break;</break>

                        <case>case <expr><name>MMBAK_TAG_BIND_FLOAT</name></expr>:</case>
                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">8</literal></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><name>stmt</name></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>sqlite3_bind_double</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>++</operator><name>bind_idx</name></expr></argument>, <argument><expr><name><name>value</name><operator>.</operator><name>f</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <comment type="line">//LOGD(" &gt; [%s] value=%f", "BIND_FLOAT", value.f);</comment>
                            <break>break;</break>

                        <case>case <expr><name>MMBAK_TAG_BIND_TEXT</name></expr>:</case>
                        <case>case <expr><name>MMBAK_TAG_BIND_BLOB</name></expr>:</case>
                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_data</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
                                    <expr_stmt><expr><call><name>MEMORY_ALLOC_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                                <expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
                                <name>length</name></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <comment type="line">//LOGD(" &gt; [%s] value=%s", tag2text(tag), tag == MMBAK_TAG_BIND_TEXT ? data : "(BLOB)");</comment>
                            <if_stmt><if>if <condition>(<expr><name>stmt</name></expr>)</condition> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>MMBAK_TAG_BIND_TEXT</name></expr>)</condition><block type="pseudo"><block_content>
                                    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>++</operator><name>bind_idx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
                                                      <argument><expr><operator>(</operator><name>p_data</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>length</name></expr></argument>,
                                                      <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                                <else>else<block type="pseudo"><block_content>
                                    <expr_stmt><expr><call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>++</operator><name>bind_idx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
                                                      <argument><expr><operator>(</operator><name>p_data</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>length</name></expr></argument>,
                                                      <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                            <break>break;</break>

                        <case>case <expr><name>MMBAK_TAG_BIND_TEXT_SHORT</name></expr>:</case>
                        <case>case <expr><name>MMBAK_TAG_BIND_BLOB_SHORT</name></expr>:</case>
                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>length_short</name></expr></argument>,
                                                        <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                            <expr_stmt><expr><name>length</name> <operator>=</operator> <name>length_short</name></expr>;</expr_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>p_data</name></expr>)</condition> <block>{<block_content>
                                <expr_stmt><expr><name>data</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                                <if_stmt><if>if <condition>(<expr><operator>!</operator><name>data</name></expr>)</condition><block type="pseudo"><block_content>
                                    <expr_stmt><expr><call><name>MEMORY_ALLOC_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                                <expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>data</name></expr>;</expr_stmt>
                            </block_content>}</block></if></if_stmt>
                            <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>dump_read_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
                                <name>length</name></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>READ_STREAM_FAIL</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><name>length</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <comment type="line">//LOGD(" &gt; [%s] value=%s", tag2text(tag), tag == MMBAK_TAG_BIND_TEXT_SHORT ? data : "(BLOB)");</comment>
                            <if_stmt><if>if <condition>(<expr><name>stmt</name></expr>)</condition> <block>{<block_content>
                                <if_stmt><if>if <condition>(<expr><name>tag</name> <operator>==</operator> <name>MMBAK_TAG_BIND_TEXT_SHORT</name></expr>)</condition><block type="pseudo"><block_content>
                                    <expr_stmt><expr><call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>++</operator><name>bind_idx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
                                                      <argument><expr><operator>(</operator><name>p_data</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>length</name></expr></argument>,
                                                      <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                                <else>else<block type="pseudo"><block_content>
                                    <expr_stmt><expr><call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><operator>++</operator><name>bind_idx</name></expr></argument>, <argument><expr><name>data</name></expr></argument>,
                                                      <argument><expr><operator>(</operator><name>p_data</name> <operator>-</operator> <name>data</name><operator>)</operator> <operator>+</operator> <name>length</name></expr></argument>,
                                                      <argument><expr><name>free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                                <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                            <expr_stmt><expr><name>p_data</name> <operator>=</operator> <name>data</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                            <break>break;</break>

                        <default>default:</default>
                            <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Unrecognized tag: %d"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></switch>
                </block_content>}</block> while <condition>(<expr><name>tag</name> <operator>!=</operator> <name>MMBAK_TAG_END_SQL</name></expr>)</condition>;</do>

                <if_stmt><if>if <condition>(<expr><name>stmt</name> <operator>&amp;&amp;</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>SQLITE_FAIL_GETMSG</name><argument_list>(<argument><expr><name>tag</name></expr></argument>, <argument><expr><literal type="string">"(FINALIZE)"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                <break>break;</break>

            <default>default:</default>
                <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Unrecognized tag: %d"</literal></expr></argument>, <argument><expr><name>tag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>
    </block_content>}</block></while>
    <return>return <expr><name>MMBAK_RET_CANCELED</name></expr>;</return>

<label><name>bail</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>data</name> <operator>&amp;&amp;</operator> <name>data</name> <operator>!=</operator> <name>databuf</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>stmt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>LOGE</name><argument_list>(<argument><expr><literal type="string">"Fatal Offset [in: %lu, out: %lu]"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>total_in</name></name></expr></argument>,
         <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>total_out</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>MMBAK_RET_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>mm_recover_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>in_path</name></decl></parameter>,
                                <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                                <parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>,
                                <parameter><decl><type><name>mm_logfunc</name></type> <name>logfunc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>logfunc</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logfunc</name> <operator>=</operator> <name>dummy_log</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>mm_recover_ctx</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_recover_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>logfunc</name><argument_list>(<argument><expr><name>MMBAK_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Memory allocation failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_recover_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <name>logfunc</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&amp;&amp;</operator> <name>key_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>RC4_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc4_template</name></name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>|=</operator> <name>MMBAK_FLAG_NO_CIPHER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>in_path</name></expr></argument>, <argument><expr><literal type="string">"rb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot open file '%s' for reading: %s"</literal></expr></argument>, <argument><expr><name>in_path</name></expr></argument>,
                     <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// read header from dump file.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>read_header</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"Database recover context initialized. [input: %s]"</literal></expr></argument>, <argument><expr><name>in_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ctx</name></expr>;</return>

<label><name>bail</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mm_recover_run</name><parameter_list>(<parameter><decl><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>fatal</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mm_backup_section</name></type> <name>section</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MMBAK_RET_FAILED</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbfile</name> <init>= <expr><call><name>sqlite3_db_filename</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"Database recover started. [db: %s]"</literal></expr></argument>,
         <argument><expr><ternary><condition><expr><name>dbfile</name></expr> ?</condition><then> <expr><name>dbfile</name></expr> </then><else>: <expr><literal type="string">"(temp or memory)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// run startup SQLs.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA foreign_keys=OFF; BEGIN TRANSACTION;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot execute startup SQL: %s"</literal></expr></argument>,
                     <argument><expr><ternary><condition><expr><name>errmsg</name></expr> ?</condition><then> <expr><name>errmsg</name></expr> </then><else>: <expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>succ_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fail_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>section_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <while>while <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>section</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call><operator>)</operator> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name><name>section</name><operator>.</operator><name>flags</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>=</operator> <name><name>section</name><operator>.</operator><name>sec_size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>section_count</name></name><operator>++</operator></expr>;</expr_stmt>

        <comment type="line">// re-initialize inflate and key context.</comment>
        <if_stmt><if>if <condition>(<expr><name>Z_OK</name> <operator>!=</operator> <call><name>inflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Failed to initialize inflate context."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>in_buf</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MMBAK_FLAG_NO_CIPHER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc4_key</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc4_template</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>RC4_KEY</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// read and run dump tags.</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_read_and_run_tag</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>fatal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>MMBAK_RET_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></while>

    <comment type="line">// run endup SQLs.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"COMMIT;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot execute 'COMMIT': %s"</literal></expr></argument>,
                     <argument><expr><ternary><condition><expr><name>errmsg</name></expr> ?</condition><then> <expr><name>errmsg</name></expr> </then><else>: <expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"Database recover %s. [sections: %u, succeeded: %u, failed: %u]"</literal></expr></argument>,
         <argument><expr><ternary><condition><expr><name>ret</name> <operator>==</operator> <name>MMBAK_RET_OK</name></expr>
             ?</condition><then> <expr><literal type="string">"finished"</literal></expr>
             </then><else>: <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>MMBAK_RET_CANCELED</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="string">"canceled"</literal></expr> </then><else>: <expr><literal type="string">"failed"</literal></expr></else></ternary></expr></else></ternary></expr></argument>,
         <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>section_count</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>succ_count</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fail_count</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ret</name></expr>;</return>

<label><name>bail</name>:</label>
    <return>return <expr><name>MMBAK_RET_FAILED</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mm_recover_cancel</name><parameter_list>(<parameter><decl><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mm_recover_finish</name><parameter_list>(<parameter><decl><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>inflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mm_recover_statistics</name><parameter_list>(<parameter><decl><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                           <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>succeed</name></decl></parameter>,
                           <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>failed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>succeed</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>succeed</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>succ_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>failed</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>failed</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>fail_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mm_recover_last_error</name><parameter_list>(<parameter><decl><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>errmsg</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mm_print_log</name><parameter_list>(<parameter><decl><type><name>mm_logfunc</name></type> <name>logfunc</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>prio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>logfunc</name><argument_list>(<argument><expr><name>prio</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mm_print_err</name><parameter_list>(<parameter><decl><type><name>mm_logfunc</name></type> <name>logfunc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>fmt</name></decl></parameter>, <parameter><decl><type><modifier>...</modifier></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// errmsg should be 2048 bytes long.</comment>
    <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>fmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>vsnprintf</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>, <argument><expr><literal type="number">2048</literal></expr></argument>, <argument><expr><name>fmt</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>logfunc</name><argument_list>(<argument><expr><name>MMBAK_LOG_ERROR</name></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>dummy_log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// do nothing.</comment>
</block_content>}</block></function>
</unit>
