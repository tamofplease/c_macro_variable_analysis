<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/backup/mm_backup.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>MM_BACKUP_INCLUDE_INTERNAL</name></cpp:macro></cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm_backup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stddef.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rc4.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;zlib.h&gt;</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INPUT_BUFFER_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>OUTPUT_BUFFER_SIZE</name></cpp:macro> <cpp:value>8192</cpp:value></cpp:define>
<struct>struct <name>mm_backup_ctx</name> <block>{
    <decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt> <comment type="line">// database connection, not initialized until actual running.</comment>
    <decl_stmt><decl><type><name>z_stream</name></type> <name>zstrm</name></decl>;</decl_stmt>  <comment type="line">// output compression stream.</comment>
    <decl_stmt><decl><type><name>RC4_KEY</name></type> <name>rc4_key</name></decl>;</decl_stmt> <comment type="line">// output file encryption key.</comment>
    <decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name></decl>;</decl_stmt>        <comment type="line">// output file handle.</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>flags</name></decl>;</decl_stmt>  <comment type="line">// configuration flags.</comment>
    <decl_stmt><decl><type><name>mm_logfunc</name></type> <name>log</name></decl>;</decl_stmt>  <comment type="line">// log function.</comment>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>stmt_count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sec_size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint32_t</name></type> <name>sec_pos</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>mm_backup_tabdesc</name> <modifier>*</modifier></type><name>tabdesc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>num_tabdesc</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>volatile</specifier> <name>char</name></type> <name>canceled</name></decl>;</decl_stmt> <comment type="line">// task status.</comment>

    <decl_stmt><decl><type><name>char</name></type> <name>writable_schema</name></decl>;</decl_stmt> <comment type="line">// whether PRAGMA writable_schema has been set.</comment>
    <decl_stmt><decl><type><name>char</name></type> <name>corrupted</name></decl>;</decl_stmt>       <comment type="line">// whether database is corrupted.</comment>

    <decl_stmt><decl><type><name>pthread_t</name></type> <name>write_thread</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pthread_mutex_t</name></type> <name>buf_lock</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>pthread_cond_t</name></type> <name>buf_cond</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>in_finish</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>in_avail</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>in_full</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>write_error</name></decl>;</decl_stmt>

    <struct>struct <name>mm_backup_buffer</name> <block>{
        <decl_stmt><decl><type><name>uint_t</name></type> <name>avail</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>data</name><index>[<expr><name>INPUT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>
    }</block> <decl><modifier>*</modifier> <name>p_buf</name></decl>, <decl><type ref="prev"/><name><name>buffer</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></decl>;</struct>

    <decl_stmt><decl><type><name>char</name></type> <name><name>errmsg</name><index>[<expr><literal type="number">2048</literal></expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><specifier>static</specifier> <name>void</name> <modifier>*</modifier></type><name>write_thread_entry</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>mm_backup_ctx</name> <operator>*</operator><operator>)</operator> <name>ud</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init>;</init><condition>;</condition><incr/>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>finish</name></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <block>{<block_content>
            <while>while <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>in_avail</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>in_finish</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>next_in</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>p_buf</name><operator>-&gt;</operator><name>data</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>avail_in</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>p_buf</name><operator>-&gt;</operator><name>avail</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name>finish</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>in_finish</name></name></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>=</operator> <ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>==</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>)</operator></expr> ?</condition><then> <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr>
                                                         </then><else>: <expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></else></ternary></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_buf</name><operator>-&gt;</operator><name>avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_full</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>out_buf</name><index>[<expr><name>OUTPUT_BUFFER_SIZE</name></expr>]</index></name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>NULL</name></expr>;</return></block_content></block></if></if_stmt>
        <do>do <block>{<block_content>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>next_out</name></name> <operator>=</operator> <name>out_buf</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>avail_out</name></name> <operator>=</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>out_buf</name></expr></argument>)</argument_list></sizeof></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>deflate</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>finish</name></expr> ?</condition><then> <expr><name>Z_FINISH</name></expr> </then><else>: <expr><name>Z_NO_FLUSH</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>Z_BUF_ERROR</name></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>Z_OK</name> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>uint_t</name></type> <name>out_len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>out_buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>avail_out</name></name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MMBAK_FLAG_NO_CIPHER</name><operator>)</operator> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>RC4</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc4_key</name></name></expr></argument>, <argument><expr><name>out_len</name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>, <argument><expr><name>out_buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>out_buf</name></expr></init></decl>;</decl_stmt>
            <while>while <condition>(<expr><name>out_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>size_t</name></type> <name>ret</name> <init>= <expr><call><name>fwrite</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>out_len</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <call><name>ferror</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
                <expr_stmt><expr><name>out_len</name> <operator>-=</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>+=</operator> <name>ret</name></expr>;</expr_stmt>
            </block_content>}</block></while>
        </block_content>}</block> while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>avail_out</name></name> <operator>==</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <name>ret</name> <operator>!=</operator> <name>Z_STREAM_END</name></expr>)</condition>;</do>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>avail_in</name></name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>Z_STREAM_END</name></expr>)</condition><block type="pseudo"><block_content>
            <break>break;</break></block_content></block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>NULL</name></expr>;</return>

<label><name>bail</name>:</label>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_error</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_write_stream</name><parameter_list>(<parameter><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>uint_t</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name><name>struct</name> <name>mm_backup_buffer</name></name> <modifier>*</modifier></type><name>p_buf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>p_data</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>size</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <while>while <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>in_full</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>write_error</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pthread_cond_wait</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_cond</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></while>

        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>write_error</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>LOGE_</name><argument_list>(<argument><expr><literal type="string">"Writing thread reported error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name>p_buf</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>p_buf</name></name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>uint_t</name></type> <name>size_to_write</name> <init>= <expr><ternary><condition><expr><operator>(</operator><name><name>p_buf</name><operator>-&gt;</operator><name>avail</name></name> <operator>+</operator> <name>size</name> <operator>&gt;</operator> <name>INPUT_BUFFER_SIZE</name><operator>)</operator></expr>
                                   ?</condition><then> <expr><name>INPUT_BUFFER_SIZE</name> <operator>-</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>avail</name></name></expr>
                                   </then><else>: <expr><name>size</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>p_buf</name><operator>-&gt;</operator><name>data</name></name> <operator>+</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>avail</name></name></expr></argument>, <argument><expr><name>p_data</name></expr></argument>, <argument><expr><name>size_to_write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>size</name> <operator>-=</operator> <name>size_to_write</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>p_buf</name><operator>-&gt;</operator><name>avail</name></name> <operator>+=</operator> <name>size_to_write</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p_data</name> <operator>+=</operator> <name>size_to_write</name></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_avail</name></name> <operator>=</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>avail</name></name> <operator>&gt;</operator> <name>INPUT_BUFFER_SIZE</name> <operator>/</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_full</name></name> <operator>=</operator> <name><name>p_buf</name><operator>-&gt;</operator><name>avail</name></name> <operator>==</operator> <name>INPUT_BUFFER_SIZE</name></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>in_avail</name></name> <operator>||</operator> <name><name>ctx</name><operator>-&gt;</operator><name>in_full</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_write_end</name><parameter_list>(<parameter><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <comment type="line">// flush padding input.</comment>
    <expr_stmt><expr><call><name>pthread_mutex_lock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_finish</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>write_error</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LOGE_</name><argument_list>(<argument><expr><literal type="string">"Writing thread reported error."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>pthread_mutex_unlock</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_signal</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump_write_byte</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>                                                \
    <cpp:value>({                                                                         \
        int _ret;                                                              \
        uint8_t b1 = (uint8_t)(v);                                             \
        _ret = dump_write_stream((ctx), &amp;b1, 1);                               \
        _ret;                                                                  \
    })</cpp:value></cpp:define>

<comment type="line">// assume little-endian</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump_write_short</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>v</name></type></parameter>)</parameter_list></cpp:macro>                                               \
    <cpp:value>({                                                                         \
        int _ret;                                                              \
        uint16_t s1 = (uint16_t)(v);                                           \
        _ret = dump_write_stream((ctx), &amp;s1, 2);                               \
        _ret;                                                                  \
    })</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump_write_byte_byte</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>b1</name></type></parameter>, <parameter><type><name>b2</name></type></parameter>)</parameter_list></cpp:macro>                                      \
    <cpp:value>({                                                                         \
        int _ret;                                                              \
        uint8_t buf[2];                                                        \
        buf[0] = (uint8_t)(b1);                                                \
        buf[1] = (uint8_t)(b2);                                                \
        _ret = dump_write_stream((ctx), buf, 2);                               \
        _ret;                                                                  \
    })</cpp:value></cpp:define>

<comment type="line">// assume little-endian</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>dump_write_byte_short</name><parameter_list>(<parameter><type><name>ctx</name></type></parameter>, <parameter><type><name>b</name></type></parameter>, <parameter><type><name>s</name></type></parameter>)</parameter_list></cpp:macro>                                       \
    <cpp:value>({                                                                         \
        int _ret;                                                              \
        uint8_t buf[3];                                                        \
        uint16_t s1 = (uint16_t)(s);                                           \
        buf[0] = (uint8_t)(b);                                                 \
        buf[1] = (uint8_t)(s1 &amp; 0xFF);                                         \
        buf[2] = (uint8_t)((s1 &gt;&gt; 8) &amp; 0xFF);                                  \
        _ret = dump_write_stream((ctx), buf, 3);                               \
        _ret;                                                                  \
    })</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_write_varint</name><parameter_list>(<parameter><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>val</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>buf</name><index>[<expr><literal type="number">12</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>val</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MMBAK_TAG_BIND_VARINT_MINUS</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>val</name> <operator>=</operator> <operator>~</operator><name>val</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>MMBAK_TAG_BIND_VARINT</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <do>do <block>{<block_content>
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>b</name> <init>= <expr><name>val</name> <operator>&amp;</operator> <literal type="number">0x7F</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>val</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>val</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>b</name> <operator>|=</operator> <literal type="number">0x80</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><operator>*</operator><name>p</name><operator>++</operator> <operator>=</operator> <name>b</name></expr>;</expr_stmt>
    </block_content>}</block> while <condition>(<expr><name>val</name></expr>)</condition>;</do>

    <return>return <expr><call><name>dump_write_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>p</name> <operator>-</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>string_literal</name><parameter_list>(<parameter><type><name>str</name></type></parameter>)</parameter_list></cpp:macro> <cpp:value>(str), (sizeof(str) - 1)</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dump_write_blob</name><parameter_list>(<parameter><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>uint8_t</name></type> <name>tag</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>size</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>size</name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&gt;=</operator> <literal type="number">65536</literal></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>uint32_t</name></type> <name>ext_size</name> <init>= <expr><name>size</name> <operator>&amp;</operator> <literal type="number">0xFFFF0000</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint16_t</name></type> <name>blocks</name> <init>= <expr><name>ext_size</name> <operator>&gt;&gt;</operator> <literal type="number">16</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_write_byte</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_LARGE_DATA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>dump_write_short</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>blocks</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>dump_write_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>ext_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><name>size</name> <operator>-=</operator> <name>ext_size</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name> <operator>+=</operator> <name>ext_size</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>size</name> <operator>&lt;</operator> <literal type="number">256</literal> <operator>&amp;&amp;</operator>
        <operator>(</operator><name>tag</name> <operator>==</operator> <name>MMBAK_TAG_BIND_TEXT</name> <operator>||</operator> <name>tag</name> <operator>==</operator> <name>MMBAK_TAG_BIND_BLOB</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_write_byte_byte</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>++</operator><name>tag</name></expr></argument>, <argument><expr><operator>(</operator><name>uint8_t</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_write_byte_short</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>tag</name></expr></argument>, <argument><expr><operator>(</operator><name>uint16_t</name><operator>)</operator> <name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>dump_write_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>dump_rows</name><parameter_list>(<parameter><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name></decl></parameter>,
                     <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>condition</name></decl></parameter>,
                     <parameter><decl><type><name>int</name></type> <name>reverse</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// find out number of columns, which is used in INSERT statements.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>ret</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>num_columns</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>sql_buf</name><index>[<expr><literal type="number">8192</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>row_count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name><name>sql_buf</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>sql_len</name> <init>=
        <expr><call><name>snprintf</name><argument_list>(<argument><expr><name>sql_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"PRAGMA table_info(\"%s\")"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>sql_buf</name></expr></argument>, <argument><expr><name>sql_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bail_log_sql</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <while>while <condition>(<expr><name>ret</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>num_columns</name><operator>++</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bail_log_sql</name>;</goto></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>num_columns</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// dump rows in table.</comment>
    <if_stmt><if>if <condition>(<expr><name>condition</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>sql_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                           <argument><expr><literal type="string">"SELECT * FROM \"%s\" WHERE %s;"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>condition</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>sql_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"SELECT * FROM \"%s\"%s;"</literal></expr></argument>,
                           <argument><expr><name>table</name></expr></argument>, <argument><expr><ternary><condition><expr><name>reverse</name></expr> ?</condition><then> <expr><literal type="string">" ORDER BY rowid DESC"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>sql_buf</name></expr></argument>, <argument><expr><name>sql_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bail_log_sql</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>row_count</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// output INSERT statement with parameters.</comment>
        <expr_stmt><expr><name>sql_len</name> <operator>=</operator> <call><name>snprintf</name><argument_list>(<argument><expr><name>sql_buf</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql_buf</name></expr></argument>)</argument_list></sizeof></expr></argument>,
                           <argument><expr><literal type="string">"REPLACE INTO \"%s\" VALUES("</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_columns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><name>sql_len</name> <operator>+=</operator>
                <call><name>strlcpy</name><argument_list>(<argument><expr><name>sql_buf</name> <operator>+</operator> <name>sql_len</name></expr></argument>, <argument><expr><literal type="string">"?,"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql_buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>sql_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        <expr_stmt><expr><name>sql_len</name><operator>--</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>sql_len</name> <operator>+=</operator> <call><name>strlcpy</name><argument_list>(<argument><expr><name>sql_buf</name> <operator>+</operator> <name>sql_len</name></expr></argument>, <argument><expr><literal type="string">");"</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sql_buf</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <name>sql_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><call><name>dump_write_blob</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_SQL_REPEATED</name></expr></argument>, <argument><expr><name>sql_buf</name></expr></argument>, <argument><expr><name>sql_len</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
            <goto>goto <name>bail</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <while>while <condition>(<expr><name>ret</name> <operator>==</operator> <name>SQLITE_ROW</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// check cancel flag.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SQLITE_ABORT</name></expr>;</expr_stmt>
            <goto>goto <name>bail</name>;</goto>
        </block_content>}</block></if></if_stmt>

        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_columns</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>type</name> <init>= <expr><call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
                <case>case <expr><name>SQLITE_INTEGER</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>int64_t</name></type> <name>value</name> <init>= <expr><call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_write_varint</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <break>break;</break>

                <case>case <expr><name>SQLITE_FLOAT</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><name>double</name></type> <name>value</name> <init>= <expr><call><name>sqlite3_column_double</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_write_byte</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_BIND_FLOAT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>|=</operator> <call><name>dump_write_stream</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <break>break;</break>

                <case>case <expr><name>SQLITE_TEXT</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>value</name> <init>=
                        <expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_write_blob</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_BIND_TEXT</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <break>break;</break>

                <case>case <expr><name>SQLITE_BLOB</name></expr>:</case> <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>int</name></type> <name>len</name> <init>= <expr><call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_write_blob</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_BIND_BLOB</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block> <break>break;</break>

                <case>case <expr><name>SQLITE_NULL</name></expr>:</case>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_write_byte</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_BIND_NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <default>default:</default>
                    <expr_stmt><expr><call><name>LOGE</name><argument_list>(<argument><expr><literal type="string">"Unreconized SQLite type: %d"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SQLITE_INTERNAL</name></expr>;</expr_stmt>
                    <goto>goto <name>bail</name>;</goto>
            </block_content>}</block></switch>

            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>row_count</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><call><name>dump_write_byte</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_END_ROW</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
            <goto>goto <name>bail</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>stmt_count</name></name><operator>++</operator></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>row_count</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>dump_write_byte</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_END_SQL</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
            <goto>goto <name>bail</name>;</goto>
        </block_content>}</block></if></if_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>stmt</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SQLITE_CORRUPT</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>bail_log_corrupt</name>;</goto></block_content></block></if></if_stmt>
        <goto>goto <name>bail_log_sql</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>

<label><name>bail_log_corrupt</name>:</label>
    <expr_stmt><expr><call><name>LOGE</name><argument_list>(<argument><expr><literal type="string">"Database corruption detected. [table: %s, condition: %s, row: %d, "</literal>
         <literal type="string">"reverse: %s]"</literal></expr></argument>,
         <argument><expr><name>table</name></expr></argument>, <argument><expr><ternary><condition><expr><name>condition</name></expr> ?</condition><then> <expr><name>condition</name></expr> </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>, <argument><expr><name>row_count</name></expr></argument>,
         <argument><expr><ternary><condition><expr><name>reverse</name></expr> ?</condition><then> <expr><literal type="string">"yes"</literal></expr> </then><else>: <expr><literal type="string">"no"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <goto>goto <name>bail</name>;</goto>
<label><name>bail_log_sql</name>:</label>
    <expr_stmt><expr><call><name>LOGE</name><argument_list>(<argument><expr><literal type="string">"SQL execution failed: %s, [SQL: %s]"</literal></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><ternary><condition><expr><name>stmt</name></expr> ?</condition><then> <expr><call><name>sqlite3_sql</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>sql_buf</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>bail</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>stmt</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compar_table_tabdesc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>key</name></expr></argument>,
                  <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>mm_backup_tabdesc</name> <operator>*</operator><operator>)</operator> <name>value</name><operator>)</operator><operator>-&gt;</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>dump_callback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ud</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>num_columns</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>columns</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>mm_backup_ctx</name> <operator>*</operator><operator>)</operator> <name>ud</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table</name> <init>= <expr><name><name>values</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><name><name>values</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sql</name> <init>= <expr><name><name>values</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

    <comment type="line">// check exit status.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// deal with system tables.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="string">"sqlite_sequence"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>dump_write_blob</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_SQL_ONESHOT</name></expr></argument>,
                            <argument><expr><call><name>string_literal</name><argument_list>(<argument><expr><literal type="string">"DELETE FROM sqlite_sequence;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator>
            <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>sqlite3_strglob</name><argument_list>(<argument><expr><literal type="string">"sqlite_stat?"</literal></expr></argument>, <argument><expr><name>table</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>dump_write_blob</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_SQL_ONESHOT</name></expr></argument>,
                            <argument><expr><call><name>string_literal</name><argument_list>(<argument><expr><literal type="string">"ANALYZE sqlite_master;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>table</name></expr></argument>, <argument><expr><literal type="string">"sqlite_"</literal></expr></argument>, <argument><expr><literal type="number">7</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// find whether in dump list.</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>table_condition</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>mm_backup_tabdesc</name> <modifier>*</modifier></type><name>desc</name> <init>= <expr><operator>(</operator><specifier>const</specifier> <name>mm_backup_tabdesc</name> <operator>*</operator><operator>)</operator> <call><name>bsearch</name><argument_list>(
            <argument><expr><name>table</name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_tabdesc</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_backup_tabdesc</name></expr></argument>)</argument_list></sizeof></expr></argument>,
            <argument><expr><name>compar_table_tabdesc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>desc</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><literal type="number">0</literal></expr>;</return></block_content></block></if></if_stmt>

        <expr_stmt><expr><name>table_condition</name> <operator>=</operator> <name><name>desc</name><operator>-&gt;</operator><name>condition</name></name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strncmp</name><argument_list>(<argument><expr><name>sql</name></expr></argument>, <argument><expr><literal type="string">"CREATE VIRTUAL TABLE"</literal></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MMBAK_FLAG_NO_CREATE_TABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>writable_schema</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>dump_write_blob</name><argument_list>(
                        <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_SQL_ONESHOT</name></expr></argument>,
                        <argument><expr><call><name>string_literal</name><argument_list>(<argument><expr><literal type="string">"PRAGMA writable_schema=ON;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>writable_schema</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>vt_sql</name> <init>= <expr><call><name>sqlite3_mprintf</name><argument_list>(
                <argument><expr><literal type="string">"INSERT INTO sqlite_master(type,name,tbl_name,rootpage,sql)"</literal>
                <literal type="string">"VALUES('table','%q','%q',0,'%q');"</literal></expr></argument>,
                <argument><expr><name>table</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>dump_write_blob</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_SQL_ONESHOT</name></expr></argument>, <argument><expr><name>vt_sql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>vt_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MMBAK_FLAG_NO_CREATE_TABLE</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>dump_write_blob</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_SQL_ONESHOT</name></expr></argument>, <argument><expr><name>sql</name></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// for tables, dump all rows.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="string">"table"</literal></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_rows</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>table_condition</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SQLITE_CORRUPT</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>table_condition</name> <operator>&amp;&amp;</operator>
            <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MMBAK_FLAG_FIX_CORRUPTION</name><operator>)</operator></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>dump_rows</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>table</name></expr></argument>, <argument><expr><name>table_condition</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SQLITE_CORRUPT</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>ret</name> <operator>=</operator> <name>SQLITE_OK</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><operator>-</operator><literal type="number">1</literal></expr>;</return></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>run_schema_dump_query</name><parameter_list>(<parameter><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>query_sql</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// check cancel status.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>MMBAK_RET_CANCELED</name></expr>;</return></block_content></block></if></if_stmt>

    <comment type="line">// dump all tables.</comment>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>, <argument><expr><name>dump_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SQLITE_ABORT</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// abort due to user cancellation or error.</comment>
        <if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <return>return <expr><ternary><condition><expr><operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name><operator>)</operator></expr> ?</condition><then> <expr><name>MMBAK_RET_CANCELED</name></expr> </then><else>: <expr><name>MMBAK_RET_FAILED</name></expr></else></ternary></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>==</operator> <name>SQLITE_CORRUPT</name> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>&amp;</operator> <name>MMBAK_FLAG_FIX_CORRUPTION</name><operator>)</operator></expr>)</condition> <block>{<block_content>
        <comment type="line">// in case of database corruption, dump tables in reverse order.</comment>
        <if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>LOGE</name><argument_list>(<argument><expr><literal type="string">"SQL execution failed: %s [SQL: %s]"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>errmsg</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>query_sql_reverse</name> <init>= <expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>query_sql_reverse</name></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>len</name> <operator>+</operator> <literal type="number">32</literal></expr></argument>, <argument><expr><name>query_sql_reverse</name></expr></argument>, <argument><expr><literal type="string">"%s ORDER BY rowid DESC"</literal></expr></argument>,
                         <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name></expr></argument>, <argument><expr><name>query_sql_reverse</name></expr></argument>, <argument><expr><name>dump_callback</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>,
                           <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>query_sql_reverse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>LOGE</name><argument_list>(<argument><expr><literal type="string">"SQL execution failed: %s [SQL: %s]"</literal></expr></argument>, <argument><expr><name>errmsg</name></expr></argument>, <argument><expr><name>query_sql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>SQLITE_OK</name><operator>)</operator></expr> ?</condition><then> <expr><name>MMBAK_RET_OK</name></expr> </then><else>: <expr><name>MMBAK_RET_FAILED</name></expr></else></ternary></expr>;</return>
</block_content>}</block></function>

<function><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>mm_backup_init</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>,
                              <parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>,
                              <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>out_path</name></decl></parameter>,
                              <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flags</name></decl></parameter>,
                              <parameter><decl><type><name>mm_logfunc</name></type> <name>logfunc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>logfunc</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logfunc</name> <operator>=</operator> <name>dummy_log</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>mm_backup_ctx</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_backup_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>logfunc</name><argument_list>(<argument><expr><name>MMBAK_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Memory allocation failed."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_backup_ctx</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>log</name></name> <operator>=</operator> <name>logfunc</name></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>compress_level</name> <init>=
        <expr><ternary><condition><expr><operator>(</operator><name>flags</name> <operator>&amp;</operator> <name>MMBAK_FLAG_NO_COMPRESS</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><name>Z_DEFAULT_COMPRESSION</name></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>Z_OK</name> <operator>!=</operator> <call><name>deflateInit</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name></name></expr></argument>, <argument><expr><name>compress_level</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Failed to initialize deflate: %s"</literal></expr></argument>,
                     <argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>msg</name></name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name><operator>.</operator><name>msg</name></name></expr> </then><else>: <expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>key</name> <operator>&amp;&amp;</operator> <name>key_len</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>RC4_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>rc4_key</name></name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><name>flags</name> <operator>|=</operator> <name>MMBAK_FLAG_NO_CIPHER</name></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>flags</name> <operator>&amp;</operator> <name>MMBAK_FLAG_INCREMENTAL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>out_path</name></expr></argument>, <argument><expr><literal type="string">"rb+"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot open file '%s' for appending: %s"</literal></expr></argument>, <argument><expr><name>out_path</name></expr></argument>,
                         <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// check header and version.</comment>
        <decl_stmt><decl><type><name>mm_backup_header</name></type> <name>header</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fread</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_backup_header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Invalid header in base file '%s'."</literal></expr></argument>, <argument><expr><name>out_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name>MMBAK_MAGIC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MMBAK_MAGIC</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator>
            <name><name>header</name><operator>.</operator><name>version</name></name> <operator>!=</operator> <name>MMBAK_VERSION</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Invalid header in base file '%s'."</literal></expr></argument>, <argument><expr><name>out_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// seek to end.</comment>
        <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fseek</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot seek in file '%s': %s"</literal></expr></argument>, <argument><expr><name>out_path</name></expr></argument>,
                         <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name> <operator>=</operator> <call><name>fopen</name><argument_list>(<argument><expr><name>out_path</name></expr></argument>, <argument><expr><literal type="string">"wb"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot open file '%s' for writing: %s"</literal></expr></argument>, <argument><expr><name>out_path</name></expr></argument>,
                         <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// write file header.</comment>
        <decl_stmt><decl><type><name>mm_backup_header</name></type> <name>header</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>header</name><operator>.</operator><name>magic</name></name></expr></argument>, <argument><expr><name>MMBAK_MAGIC</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MMBAK_MAGIC</name></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>header</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name>MMBAK_VERSION</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>header</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot write to file '%s': %s"</literal></expr></argument>, <argument><expr><name>out_path</name></expr></argument>,
                         <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sec_pos</name></name> <operator>=</operator> <operator>(</operator><name>uint32_t</name><operator>)</operator> <call><name>ftell</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>pthread_mutex_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_cond</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name> <operator>=</operator> <name>flags</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_finish</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_avail</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>in_full</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_error</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name><operator>.</operator><name>avail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">1</literal></expr>]</index></name><operator>.</operator><name>avail</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>p_buf</name></name> <operator>=</operator> <operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buffer</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"Database backup context initialized. [output: %s, flags: 0x%04x]"</literal></expr></argument>,
         <argument><expr><name>out_path</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>ctx</name></expr>;</return>

<label><name>bail</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>NULL</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>compar_tabdesc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>a</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strcmp</name><argument_list>(<argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>mm_backup_tabdesc</name> <operator>*</operator><operator>)</operator> <name>a</name><operator>)</operator><operator>-&gt;</operator><name>table</name></expr></argument>,
                  <argument><expr><operator>(</operator><operator>(</operator><specifier>const</specifier> <name>mm_backup_tabdesc</name> <operator>*</operator><operator>)</operator> <name>b</name><operator>)</operator><operator>-&gt;</operator><name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>mm_backup_run</name><parameter_list>(<parameter><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                  <parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>mm_backup_tabdesc</name> <modifier>*</modifier></type><name>desc</name></decl></parameter>,
                  <parameter><decl><type><name>int</name></type> <name>num_desc</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>errmsg</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>= <expr><name>MMBAK_RET_FAILED</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>dbfile</name> <init>= <expr><call><name>sqlite3_db_filename</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"main"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"Database backup started. [db: %s]"</literal></expr></argument>,
         <argument><expr><ternary><condition><expr><name>dbfile</name></expr> ?</condition><then> <expr><name>dbfile</name></expr> </then><else>: <expr><literal type="string">"(temp or memory)"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make a sorted copy of tabdesc.</comment>
    <if_stmt><if>if <condition>(<expr><name>desc</name> <operator>&amp;&amp;</operator> <name>num_desc</name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name></name> <operator>=</operator>
            <operator>(</operator><name>mm_backup_tabdesc</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_backup_tabdesc</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Not enough memory."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name></name></expr></argument>, <argument><expr><name>desc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_backup_tabdesc</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>num_desc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>qsort</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name></name></expr></argument>, <argument><expr><name>num_desc</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_backup_tabdesc</name></expr></argument>)</argument_list></sizeof></expr></argument>,
              <argument><expr><name>compar_tabdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_tabdesc</name></name> <operator>=</operator> <name>num_desc</name></expr>;</expr_stmt>

        <comment type="line">// adjust/print tabdesc.</comment>
        <expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"Backup with table descriptors. [count: %d]"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_tabdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>num_desc</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>condition</name> <operator>&amp;&amp;</operator> <name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name><name>condition</name><index>[<expr><literal type="number">0</literal></expr>]</index></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>condition</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            <expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"  &gt; table: %s, condition: %s"</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name></expr></argument>,
                 <argument><expr><ternary><condition><expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>condition</name></expr> ?</condition><then> <expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>condition</name></expr>
                                           </then><else>: <expr><literal type="string">"null"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>num_tabdesc</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>db</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>stmt_count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>sec_size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <comment type="line">// initialize write thread.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>pthread_create</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>write_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>write_thread_entry</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot initialize writer thread."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"SAVEPOINT dump; PRAGMA writable_schema=ON;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name>errmsg</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot execute startup SQL: %s"</literal></expr></argument>,
                     <argument><expr><ternary><condition><expr><name>errmsg</name></expr> ?</condition><then> <expr><name>errmsg</name></expr> </then><else>: <expr><literal type="string">"Unknown"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// write section placeholder.</comment>
    <decl_stmt><decl><type><name>mm_backup_section</name></type> <name>section</name> <init>= <expr><block>{<expr><operator>.</operator><name>flags</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>flags</name></name></expr>, <expr><operator>.</operator><name>sec_size</name> <operator>=</operator> <literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>section</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_backup_section</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot write to file: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// dump tables.</comment>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>run_schema_dump_query</name><argument_list>(
             <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"SELECT name, type, sql FROM sqlite_master WHERE sql NOT NULL"</literal>
                  <literal type="string">" AND type=='table' AND name!='sqlite_sequence'"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator>
        <name>MMBAK_RET_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>run_schema_dump_query</name><argument_list>(
             <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"SELECT name, type, sql FROM sqlite_master WHERE "</literal>
                  <literal type="string">"name=='sqlite_sequence'"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>MMBAK_RET_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>(</operator><name>ret</name> <operator>=</operator> <call><name>run_schema_dump_query</name><argument_list>(
             <argument><expr><name>ctx</name></expr></argument>, <argument><expr><literal type="string">"SELECT name, type, sql FROM sqlite_master WHERE sql NOT NULL"</literal>
                  <literal type="string">" AND type IN ('index','trigger','view')"</literal></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <name>MMBAK_RET_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

    <comment type="line">// recover writable_schema.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>writable_schema</name></name></expr>)</condition><block type="pseudo"><block_content>
        <if_stmt><if>if <condition>(<expr><call><name>dump_write_blob</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>MMBAK_TAG_SQL_ONESHOT</name></expr></argument>,
                            <argument><expr><call><name>string_literal</name><argument_list>(<argument><expr><literal type="string">"PRAGMA writable_schema=OFF;"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>dump_write_end</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA writable_schema=OFF; RELEASE dump;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_join</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_thread</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// write section header.</comment>
    <expr_stmt><expr><name><name>section</name><operator>.</operator><name>sec_size</name></name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>sec_size</name></name></expr>;</expr_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fseek</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sec_pos</name></name></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot seek in file: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>fwrite</name><argument_list>(<argument><expr><operator>&amp;</operator><name>section</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_backup_section</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>LOG_AND_FAIL</name><argument_list>(<argument><expr><literal type="string">"Cannot write to file: %s"</literal></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"Database backup finished. [items: %u, section size: %u]"</literal></expr></argument>,
         <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>stmt_count</name></name></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>sec_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>

<label><name>bail</name>:</label>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"PRAGMA writable_schema=OFF; RELEASE dump;"</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>errmsg</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>errmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>ret</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mm_backup_cancel</name><parameter_list>(<parameter><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>LOGI_</name><argument_list>(<argument><expr><literal type="string">"Backup operation canceled."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mm_backup_finish</name><parameter_list>(<parameter><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>canceled</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pthread_cond_broadcast</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>write_thread</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>tabdesc</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_mutex_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_lock</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pthread_cond_destroy</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>buf_cond</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>fp</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>deflateEnd</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>ctx</name><operator>-&gt;</operator><name>zstrm</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>mm_backup_statistics</name><parameter_list>(<parameter><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name> <modifier>*</modifier></type><name>stmt_count</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>stmt_count</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><operator>*</operator><name>stmt_count</name> <operator>=</operator> <name><name>ctx</name><operator>-&gt;</operator><name>stmt_count</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>mm_backup_last_error</name><parameter_list>(<parameter><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><name><name>ctx</name><operator>-&gt;</operator><name>errmsg</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
