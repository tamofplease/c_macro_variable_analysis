<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/repair/sqliterk_values.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SQLiteRepairKit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="line">//declaration</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkValuesAutoGrow</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>;</function_decl>

<typedef>typedef <type><name>int64_t</name></type> <name>sqliterk_integer</name>;</typedef>
<typedef>typedef <type><name>double</name></type> <name>sqliterk_number</name>;</typedef>
<typedef>typedef <type><name><name>struct</name> <name>sqliterk_text</name></name></type> <name>sqliterk_text</name>;</typedef>
<struct>struct <name>sqliterk_text</name> <block>{
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>t</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>struct</name> <name>sqliterk_binary</name></name></type> <name>sqliterk_binary</name>;</typedef>
<struct>struct <name>sqliterk_binary</name> <block>{
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>b</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>s</name></decl>;</decl_stmt>
}</block>;</struct>
<typedef>typedef <type><name><name>union</name> <name>sqliterk_any</name></name></type> <name>sqliterk_any</name>;</typedef>
<union>union <name>sqliterk_any</name> <block>{
    <decl_stmt><decl><type><name>sqliterk_integer</name></type> <name>integer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_number</name></type> <name>number</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_text</name></type> <name>text</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_binary</name></type> <name>binary</name></decl>;</decl_stmt>
}</block>;</union>

<struct>struct <name>sqliterk_value</name> <block>{
    <decl_stmt><decl><type><name>sqliterk_value_type</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_any</name></type> <name>any</name></decl>;</decl_stmt>
}</block>;</struct>

<struct>struct <name>sqliterk_values</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>count</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>capacity</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>values</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type> <name>sqliterkValuesAlloc</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier><modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>theValues</name> <init>= <expr><call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqliterk_values</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>theValues</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>sqliterkValuesAlloc_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkValuesAutoGrow</name><argument_list>(<argument><expr><name>theValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>sqliterkValuesAlloc_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>values</name> <operator>=</operator> <name>theValues</name></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
<label><name>sqliterkValuesAlloc_Failed</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>theValues</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkValuesFree</name><argument_list>(<argument><expr><name>theValues</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesFree</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqliterkValueClear</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>values</name><operator>-&gt;</operator><name>values</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name><name>values</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>values</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesClear</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>values</name><operator>-&gt;</operator><name>count</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqliterkValueClear</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <expr_stmt><expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkValuesAutoGrow</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name> <operator>&gt;=</operator> <name><name>values</name><operator>-&gt;</operator><name>capacity</name></name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>oldCapacity</name> <init>= <expr><name><name>values</name><operator>-&gt;</operator><name>capacity</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>newCapacity</name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>oldCapacity</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">//init for 4</comment>
            <expr_stmt><expr><name>newCapacity</name> <operator>=</operator> <literal type="number">4</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>oldCapacity</name> <operator>&gt;</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>newCapacity</name> <operator>=</operator> <name>oldCapacity</name> <operator>+</operator> <literal type="number">8</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>newCapacity</name> <operator>=</operator> <name>oldCapacity</name> <operator>*</operator> <literal type="number">2</literal></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>newValues</name> <init>=
            <expr><call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqliterk_value</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>newCapacity</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>newValues</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>SQLITERK_NOMEM</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>values</name><operator>-&gt;</operator><name>values</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>newValues</name></expr></argument>, <argument><expr><name><name>values</name><operator>-&gt;</operator><name>values</name></name></expr></argument>,
                   <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqliterk_value</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name>oldCapacity</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name><name>values</name><operator>-&gt;</operator><name>values</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name><name>values</name><operator>-&gt;</operator><name>values</name></name> <operator>=</operator> <name>newValues</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>values</name><operator>-&gt;</operator><name>capacity</name></name> <operator>=</operator> <name>newCapacity</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesGetCount</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>sqliterk_value_type</name></type> <name>sqliterkValuesGetType</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>values</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name>sqliterkValuesGetCount</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>index</name></expr>]</index></name><operator>.</operator><name>type</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>sqliterk_value_type_null</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>sqliterkValuesGetInteger64</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int64_t</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>values</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name>sqliterkValuesGetCount</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name>sqliterkValuesGetType</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>sqliterk_value_type_integer</name></expr>:</case>
                <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>integer</name></name><operator>)</operator></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>sqliterk_value_type_number</name></expr>:</case>
                <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>number</name></name><operator>)</operator></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>sqliterk_value_type_text</name></expr>:</case>
                <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>atol</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesGetInteger</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>sqliterkValuesGetInteger64</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>sqliterkValuesGetNumber</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>double</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>values</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name>sqliterkValuesGetCount</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><call><name>sqliterkValuesGetType</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>sqliterk_value_type_integer</name></expr>:</case>
                <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>integer</name></name><operator>)</operator></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>sqliterk_value_type_number</name></expr>:</case>
                <expr_stmt><expr><name>out</name> <operator>=</operator> <operator>(</operator><name>double</name><operator>)</operator> <operator>(</operator><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>number</name></name><operator>)</operator></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>sqliterk_value_type_text</name></expr>:</case>
                <expr_stmt><expr><name>out</name> <operator>=</operator> <call><name>atof</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqliterkValuesGetText</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>values</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name>sqliterkValuesGetCount</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>sqliterk_value_type_text</name></expr>:</case>
                <expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>t</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sqliterkValuesGetBinary</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>out</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>values</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name>sqliterkValuesGetCount</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>sqliterk_value_type_binary</name></expr>:</case>
                <expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>binary</name><operator>.</operator><name>b</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesGetBytes</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>out</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>values</name> <operator>&amp;&amp;</operator> <name>index</name> <operator>&lt;</operator> <call><name>sqliterkValuesGetCount</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name>index</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>sqliterk_value_type_binary</name></expr>:</case>
                <expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>binary</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>sqliterk_value_type_text</name></expr>:</case>
                <expr_stmt><expr><name>out</name> <operator>=</operator> <name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>s</name></name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>out</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesAddInteger64</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int64_t</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqliterkValuesAutoGrow</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>sqliterk_value_type_integer</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>integer</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesAddInteger</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>i</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkValuesAddInteger64</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesAddNumber</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><name>double</name></type> <name>d</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqliterkValuesAutoGrow</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>sqliterk_value_type_number</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>number</name></name> <operator>=</operator> <name>d</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesAddText</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkValuesAddNoTerminatorText</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesAddNoTerminatorText</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>t</name></decl></parameter>,
                                      <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name> <operator>||</operator> <operator>!</operator><name>t</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqliterkValuesAutoGrow</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>sqliterk_value_type_text</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>t</name></name> <operator>=</operator> <call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>s</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>t</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>sqliterkValuesAddNoTerminatorText_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>t</name></name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>t</name><index>[<expr><name>s</name></expr>]</index></name> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>

<label><name>sqliterkValuesAddNoTerminatorText_Failed</name>:</label>
    <expr_stmt><expr><call><name>sqliterkValueClear</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesAddBinary</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>b</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>s</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name> <operator>||</operator> <operator>!</operator><name>b</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqliterkValuesAutoGrow</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>sqliterk_value_type_binary</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>binary</name><operator>.</operator><name>s</name></name> <operator>=</operator> <name>s</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>binary</name><operator>.</operator><name>b</name></name> <operator>=</operator> <call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>binary</name><operator>.</operator><name>b</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_NOMEM</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>binary</name><operator>.</operator><name>b</name></name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValuesAddNull</name><parameter_list>(<parameter><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>values</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><call><name>sqliterkValuesAutoGrow</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>rc</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><operator>&amp;</operator><name><name>values</name><operator>-&gt;</operator><name>values</name><index>[<expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>sqliterk_value_type_null</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>values</name><operator>-&gt;</operator><name>count</name></name><operator>++</operator></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkValueClear</name><parameter_list>(<parameter><decl><type><name>sqliterk_value</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>value</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <switch>switch <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>sqliterk_value_type_text</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>t</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>t</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>text</name><operator>.</operator><name>t</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <case>case <expr><name>sqliterk_value_type_binary</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>binary</name><operator>.</operator><name>b</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>binary</name><operator>.</operator><name>b</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>any</name><operator>.</operator><name>binary</name><operator>.</operator><name>b</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <break>break;</break>
        <default>default:</default>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><name><name>value</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>sqliterk_value_type_null</name></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>
</unit>
