<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/repair/sqliterk_pager.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_pager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SQLiteRepairKit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_crypto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;errno.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkPagerParseHeader</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forcePageSize</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkPageAcquireOne</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>,
                                  <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>,
                                  <parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier><modifier>*</modifier></type><name>page</name></decl></parameter>,
                                  <parameter><decl><type><name>sqliterk_page_type</name></type> <name>type</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>sqliterk_page</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>pageno</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>data</name></decl>;</decl_stmt> <comment type="line">// page data</comment>
    <decl_stmt><decl><type><name>sqliterk_page_type</name></type> <name>type</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type> <name>sqliterkPagerOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
                      <parameter><decl><type><specifier>const</specifier> <name>sqliterk_cipher_conf</name> <modifier>*</modifier></type><name>cipher</name></decl></parameter>,
                      <parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier><modifier>*</modifier></type><name>pager</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Workaround page size cannot be specified for plain-text</comment>
    <comment type="line">// databases. For that case, pass non-null cipher_conf with</comment>
    <comment type="line">// null key and non-zero page size.</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>forcePageSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>cipher</name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>cipher</name><operator>-&gt;</operator><name>key</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>forcePageSize</name> <operator>=</operator> <name><name>cipher</name><operator>-&gt;</operator><name>page_size</name></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>cipher</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>thePager</name> <init>= <expr><call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqliterk_pager</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>thePager</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory, required %zu bytes."</literal></expr></argument>,
                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqliterk_pager</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>sqliterkPagerOpen_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkOSReadOnlyOpen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>thePager</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>sqliterkPagerOpen_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>cipher</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Try KDF salt in SQLite file first.</comment>
        <decl_stmt><decl><type><name>sqliterk_cipher_conf</name></type> <name>c</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><operator>&amp;</operator><name>c</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>c</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>c</name><operator>.</operator><name>kdf_salt</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkCryptoSetCipher</name><argument_list>(<argument><expr><name>thePager</name></expr></argument>, <argument><expr><name><name>thePager</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>sqliterkPagerOpen_Failed</name>;</goto></block_content></block></if></if_stmt>

        <comment type="line">// Try parsing header.</comment>
        <expr_stmt><expr><call><name>sqliterkPagerParseHeader</name><argument_list>(<argument><expr><name>thePager</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>thePager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;</operator> <name>SQLITERK_INTEGRITY_HEADER</name></expr>)</condition> <block>{<block_content>
            <comment type="line">// If header is parsed successfully, original KDF salt is also correct.</comment>
            <expr_stmt><expr><name><name>thePager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>|=</operator> <name>SQLITERK_INTEGRITY_KDF_SALT</name></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>cipher</name><operator>-&gt;</operator><name>kdf_salt</name></name></expr>)</condition> <block>{<block_content>
            <comment type="line">// If anything goes wrong, use KDF salt specified in cipher config.</comment>
            <expr_stmt><expr><call><name>sqliterkOSWarning</name><argument_list>(<argument><expr><name>SQLITERK_DAMAGED</name></expr></argument>, <argument><expr><literal type="string">"Header cannot be decoded "</literal>
                                                <literal type="string">"correctly. Trying to apply "</literal>
                                                <literal type="string">"recovery data."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkCryptoSetCipher</name><argument_list>(<argument><expr><name>thePager</name></expr></argument>, <argument><expr><name><name>thePager</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>sqliterkPagerOpen_Failed</name>;</goto></block_content></block></if></if_stmt>

            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkPagerParseHeader</name><argument_list>(<argument><expr><name>thePager</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>sqliterkPagerOpen_Failed</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkPagerParseHeader</name><argument_list>(<argument><expr><name>thePager</name></expr></argument>, <argument><expr><name>forcePageSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>sqliterkPagerOpen_Failed</name>;</goto></block_content></block></if></if_stmt>

        <comment type="line">// For plain-text databases, just mark KDF salt correct.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>thePager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;</operator> <name>SQLITERK_INTEGRITY_HEADER</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>thePager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>|=</operator> <name>SQLITERK_INTEGRITY_KDF_SALT</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><name><name>thePager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;</operator> <name>SQLITERK_INTEGRITY_HEADER</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqliterkOSWarning</name><argument_list>(<argument><expr><name>SQLITERK_DAMAGED</name></expr></argument>, <argument><expr><literal type="string">"Header corrupted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqliterkOSInfo</name><argument_list>(<argument><expr><name>SQLITERK_OK</name></expr></argument>, <argument><expr><literal type="string">"Header checksum OK."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>pageCount</name> <init>= <expr><name><name>thePager</name><operator>-&gt;</operator><name>pagecount</name></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>len</name> <init>= <expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqliterk_status</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>pageCount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>thePager</name><operator>-&gt;</operator><name>pagesStatus</name></name> <operator>=</operator> <call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thePager</name><operator>-&gt;</operator><name>pagesStatus</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory, required %zu bytes."</literal></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>sqliterkPagerOpen_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>pager</name> <operator>=</operator> <name>thePager</name></expr>;</expr_stmt>

    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>

<label><name>sqliterkPagerOpen_Failed</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>thePager</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkPagerClose</name><argument_list>(<argument><expr><name>thePager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>pager</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Get the meta from header and set it into pager.</comment>
<comment type="line">// For further information, see https://www.sqlite.org/fileformat2.html</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkPagerParseHeader</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>forcePageSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// For encrypted databases, assume default page size, decode the first</comment>
    <comment type="line">// page, and we have the plain-text header.</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Overwrite pager page size if forcePageSize is specified.</comment>
    <if_stmt><if>if <condition>(<expr><name>forcePageSize</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>=</operator> <name>forcePageSize</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><ternary><condition><expr><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name></expr> ?</condition><then> <expr><name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name></expr> </then><else>: <expr><literal type="number">100</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

    <comment type="line">// Read data</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>= <expr><call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>buffer</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory, required %zu bytes."</literal></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>sqliterkPagerParseHeader_End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkOSRead</name><argument_list>(<argument><expr><name><name>pager</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITERK_SHORT_READ</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"File truncated."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Cannot read file '%s': %s"</literal></expr></argument>,
                            <argument><expr><call><name>sqliterkOSGetFilePath</name><argument_list>(<argument><expr><name><name>pager</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITERK_INTEGRITY_HEADER</name></expr>;</expr_stmt>
        <goto>goto <name>sqliterkPagerParseHeader_End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>|=</operator> <name>SQLITERK_INTEGRITY_HEADER</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkCryptoDecode</name><argument_list>(<argument><expr><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sqliterkOSWarning</name><argument_list>(<argument><expr><name>SQLITERK_DAMAGED</name></expr></argument>,
                              <argument><expr><literal type="string">"Failed to decode page 1, header corrupted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITERK_INTEGRITY_HEADER</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;</operator> <name>SQLITERK_INTEGRITY_HEADER</name></expr>)</condition> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"SQLite format 3\000"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">//parse pagesize</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>pagesize</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sqliterkParseInt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name> <operator>||</operator> <name>forcePageSize</name></expr>)</condition> <block>{<block_content>
                <comment type="line">// Page size is predefined, check whether it matches the header.</comment>
                <if_stmt><if>if <condition>(<expr><name>pagesize</name> <operator>!=</operator> <name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sqliterkOSWarning</name><argument_list>(
                        <argument><expr><name>SQLITERK_DAMAGED</name></expr></argument>,
                        <argument><expr><literal type="string">"Invalid page size: %d expected, %d returned."</literal></expr></argument>,
                        <argument><expr><name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITERK_INTEGRITY_HEADER</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><operator>(</operator><operator>(</operator><name>pagesize</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>&amp;</operator> <name>pagesize</name><operator>)</operator> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>pagesize</name> <operator>&lt;</operator> <literal type="number">512</literal></expr>)</condition> <block>{<block_content>
                <comment type="line">// Page size is not predefined and value in the header is invalid,</comment>
                <comment type="line">// use the default page size.</comment>
                <expr_stmt><expr><call><name>sqliterkOSWarning</name><argument_list>(<argument><expr><name>SQLITERK_DAMAGED</name></expr></argument>,
                                  <argument><expr><literal type="string">"Page size field is corrupted. Default page "</literal>
                                  <literal type="string">"size %d is used"</literal></expr></argument>,
                                  <argument><expr><name>SQLITRK_CONFIG_DEFAULT_PAGESIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>=</operator> <name>SQLITRK_CONFIG_DEFAULT_PAGESIZE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITERK_INTEGRITY_HEADER</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <comment type="line">// Page size is not predefined and value in the header is valid,</comment>
                <comment type="line">// use the value in header.</comment>
                <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>=</operator> <name>pagesize</name></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <comment type="line">// parse free page count</comment>
            <expr_stmt><expr><call><name>sqliterkParseInt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">36</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>pager</name><operator>-&gt;</operator><name>freepagecount</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// parse reserved bytes</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>reservedBytes</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sqliterkParseInt</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="number">20</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>reservedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>reservedBytes</name> <operator>!=</operator> <name><name>pager</name><operator>-&gt;</operator><name>reservedBytes</name></name></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sqliterkOSWarning</name><argument_list>(<argument><expr><name>SQLITERK_DAMAGED</name></expr></argument>,
                                      <argument><expr><literal type="string">"Reserved bytes field doesn't match. %d "</literal>
                                      <literal type="string">"expected, %d returned."</literal></expr></argument>,
                                      <argument><expr><name><name>pager</name><operator>-&gt;</operator><name>reservedBytes</name></name></expr></argument>, <argument><expr><name>reservedBytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITERK_INTEGRITY_HEADER</name></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name><name>reservedBytes</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">0</literal> <operator>||</operator> <name>reservedBytes</name></expr></argument> &gt;</argument_list></name> <literal type="number">255</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sqliterkOSWarning</name><argument_list>(
                    <argument><expr><name>SQLITERK_DAMAGED</name></expr></argument>,
                    <argument><expr><literal type="string">"The [reserved bytes] field is corrupted. 0 is used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>reservedBytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITERK_INTEGRITY_HEADER</name></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>reservedBytes</name></name> <operator>=</operator> <name>reservedBytes</name></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <comment type="line">// Header is corrupted. Defaults the config</comment>
            <expr_stmt><expr><call><name>sqliterkOSWarning</name><argument_list>(<argument><expr><name>SQLITERK_DAMAGED</name></expr></argument>,
                              <argument><expr><literal type="string">"SQLite format magic corrupted."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>=</operator> <name>SQLITRK_CONFIG_DEFAULT_PAGESIZE</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>reservedBytes</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>freepagecount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITERK_INTEGRITY_HEADER</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Assign page count</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>filesize</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkOSFileSize</name><argument_list>(<argument><expr><name><name>pager</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Failed to get size of file '%s': %s"</literal></expr></argument>,
                        <argument><expr><call><name>sqliterkOSGetFilePath</name><argument_list>(<argument><expr><name><name>pager</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>errno</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>sqliterkPagerParseHeader_End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>pagecount</name></name> <operator>=</operator>
        <operator>(</operator><name>int</name><operator>)</operator> <operator>(</operator><operator>(</operator><name>filesize</name> <operator>+</operator> <name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>/</operator> <name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name><operator>)</operator></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pager</name><operator>-&gt;</operator><name>pagecount</name></name> <operator>&lt;</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_DAMAGED</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"File truncated."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>sqliterkPagerParseHeader_End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Check free page</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pager</name><operator>-&gt;</operator><name>freepagecount</name></name> <operator>&lt;</operator> <literal type="number">0</literal> <operator>||</operator> <name><name>pager</name><operator>-&gt;</operator><name>freepagecount</name></name> <operator>&gt;</operator> <name><name>pager</name><operator>-&gt;</operator><name>pagecount</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSWarning</name><argument_list>(
            <argument><expr><name>SQLITERK_DAMAGED</name></expr></argument>,
            <argument><expr><literal type="string">"The [free page count] field is corrupted. 0 is used"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>freepagecount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>&amp;=</operator> <operator>~</operator><name>SQLITERK_INTEGRITY_HEADER</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Assign usableSize</comment>
    <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>usableSize</name></name> <operator>=</operator> <name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>-</operator> <name><name>pager</name><operator>-&gt;</operator><name>reservedBytes</name></name></expr>;</expr_stmt>

<label><name>sqliterkPagerParseHeader_End</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>buffer</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPagerClose</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pager</name><operator>-&gt;</operator><name>file</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkOSClose</name><argument_list>(<argument><expr><name><name>pager</name><operator>-&gt;</operator><name>file</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>file</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>pager</name><operator>-&gt;</operator><name>pagesStatus</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name><name>pager</name><operator>-&gt;</operator><name>pagesStatus</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>pagesStatus</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>pagecount</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqliterkCryptoFreeCodec</name><argument_list>(<argument><expr><name>pager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name>pager</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPagerGetPageCount</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>pager</name><operator>-&gt;</operator><name>pagecount</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPagerIsPagenoValid</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name> <operator>||</operator> <name><name>pageno</name> <argument_list type="generic">&lt; <argument><expr><literal type="number">1</literal> <operator>||</operator> <name>pageno</name></expr></argument> &gt;</argument_list></name> <name><name>pager</name><operator>-&gt;</operator><name>pagecount</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Get the page type from file at page [pageno]</comment>
<function><type><name>int</name></type> <name>sqliterkPageAcquireType</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>,
                            <parameter><decl><type><name>sqliterk_page_type</name> <modifier>*</modifier></type><name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// TODO: for encrypted databases, decode the whole page.</comment>
    <comment type="line">// Use sqliterkPageAcquire instead.</comment>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name> <operator>||</operator> <call><name>sqliterkPagerIsPagenoValid</name><argument_list>(<argument><expr><name>pager</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITERK_OK</name> <operator>||</operator>
        <operator>!</operator><name>type</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>typedata</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>typesize</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkOSRead</name><argument_list>(<argument><expr><name><name>pager</name><operator>-&gt;</operator><name>file</name></name></expr></argument>,
                        <argument><expr><call><name>sqliterkPagenoHeaderOffset</name><argument_list>(<argument><expr><name>pageno</name></expr></argument>)</argument_list></call> <operator>+</operator>
                            <operator>(</operator><name>pageno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name></expr></argument>,
                        <argument><expr><operator>&amp;</operator><name>typedata</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>typesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>sqliterkPageAcquireType_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>theType</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqliterkParseInt</name><argument_list>(<argument><expr><operator>&amp;</operator><name>typedata</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>theType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch <condition>(<expr><name>theType</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>sqliterk_page_type_interior_index</name></expr>:</case>
        <case>case <expr><name>sqliterk_page_type_interior_table</name></expr>:</case>
        <case>case <expr><name>sqliterk_page_type_leaf_index</name></expr>:</case>
        <case>case <expr><name>sqliterk_page_type_leaf_table</name></expr>:</case>
            <expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>theType</name></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>sqliterk_page_type_unknown</name></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>

<label><name>sqliterkPageAcquireType_Failed</name>:</label>
    <expr_stmt><expr><operator>*</operator><name>type</name> <operator>=</operator> <name>sqliterk_page_type_unknown</name></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Get whole page data from file at page [pageno] and setup the [page].</comment>
<function><type><name>int</name></type> <name>sqliterkPageAcquire</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>, <parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier><modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkPageAcquireOne</name><argument_list>(<argument><expr><name>pager</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>page</name></expr></argument>,
                                  <argument><expr><name>sqliterk_page_type_unknown</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPageAcquireOverflow</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>,
                                <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>,
                                <parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier><modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkPageAcquireOne</name><argument_list>(<argument><expr><name>pager</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>page</name></expr></argument>,
                                  <argument><expr><name>sqliterk_page_type_overflow</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkPageAcquireOne</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>,
                                  <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>,
                                  <parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier><modifier>*</modifier></type><name>page</name></decl></parameter>,
                                  <parameter><decl><type><name>sqliterk_page_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name> <operator>||</operator> <operator>!</operator><name>page</name> <operator>||</operator>
        <call><name>sqliterkPagerIsPagenoValid</name><argument_list>(<argument><expr><name>pager</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>thePage</name> <init>= <expr><call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqliterk_page</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>thePage</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>sqliterkPageAcquire_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>thePage</name><operator>-&gt;</operator><name>pageno</name></name> <operator>=</operator> <name>pageno</name></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>thePage</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>thePage</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>sqliterkPageAcquire_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkOSRead</name><argument_list>(<argument><expr><name><name>pager</name><operator>-&gt;</operator><name>file</name></name></expr></argument>, <argument><expr><operator>(</operator><name>pageno</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>*</operator> <name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name></expr></argument>,
                        <argument><expr><name><name>thePage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>sqliterkPageAcquire_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// For encrypted databases, decode page.</comment>
    <if_stmt><if>if <condition>(<expr><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkCryptoDecode</name><argument_list>(<argument><expr><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name><name>thePage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>sqliterkPageAcquire_Failed</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Check type</comment>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>==</operator> <name>sqliterk_page_type_unknown</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkParseInt</name><argument_list>(<argument><expr><name><name>thePage</name><operator>-&gt;</operator><name>data</name></name></expr></argument>, <argument><expr><call><name>sqliterkPageHeaderOffset</name><argument_list>(<argument><expr><name>thePage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>,
                         <argument><expr><operator>&amp;</operator><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>sqliterk_page_type_interior_index</name></expr>:</case>
            <case>case <expr><name>sqliterk_page_type_interior_table</name></expr>:</case>
            <case>case <expr><name>sqliterk_page_type_leaf_index</name></expr>:</case>
            <case>case <expr><name>sqliterk_page_type_leaf_table</name></expr>:</case>
                <expr_stmt><expr><name><name>thePage</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name><name>thePage</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>sqliterk_page_type_unknown</name></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>thePage</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <expr_stmt><expr><operator>*</operator><name>page</name> <operator>=</operator> <name>thePage</name></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>

<label><name>sqliterkPageAcquire_Failed</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>thePage</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkPageRelease</name><argument_list>(<argument><expr><name>thePage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>page</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPageRelease</name><parameter_list>(<parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>page</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Ahead release the page data to save memory</comment>
<function><type><name>int</name></type> <name>sqliterkPageClearData</name><parameter_list>(<parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>page</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>page</name><operator>-&gt;</operator><name>data</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>data</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>page</name><operator>-&gt;</operator><name>data</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>sqliterkPageGetData</name><parameter_list>(<parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>page</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>page</name><operator>-&gt;</operator><name>data</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPagerGetSize</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPagerGetUsableSize</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>pager</name><operator>-&gt;</operator><name>usableSize</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPageGetPageno</name><parameter_list>(<parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>page</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>page</name><operator>-&gt;</operator><name>pageno</name></name></expr>;</return>
</block_content>}</block></function>
<function><type><name>sqliterk_page_type</name></type> <name>sqliterkPageGetType</name><parameter_list>(<parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>page</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>sqliterk_page_type_unknown</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>page</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPagenoHeaderOffset</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>pageno</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">100</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPageHeaderOffset</name><parameter_list>(<parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>page</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>sqliterkPagenoHeaderOffset</name><argument_list>(<argument><expr><name><name>page</name><operator>-&gt;</operator><name>pageno</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqliterkPageGetTypeName</name><parameter_list>(<parameter><decl><type><name>sqliterk_page_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>sqliterk_page_type_interior_index</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"interior-index btree"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>sqliterk_page_type_interior_table</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"interior-table btree"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>sqliterk_page_type_leaf_index</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"leaf-index btree"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>sqliterk_page_type_leaf_table</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"leaf-table btree"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"unknown page"</literal></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqliterkPagerSetStatus</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>,
                            <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>,
                            <parameter><decl><type><name>sqliterk_status</name></type> <name>status</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name> <operator>||</operator> <operator>!</operator><name><name>pager</name><operator>-&gt;</operator><name>pagesStatus</name></name> <operator>||</operator>
        <call><name>sqliterkPagerIsPagenoValid</name><argument_list>(<argument><expr><name>pager</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>pagesStatus</name><index>[<expr><name>pageno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>=</operator> <name>status</name></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>sqliterk_status_checked</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name> <operator>|=</operator> <name>SQLITERK_INTEGRITY_DATA</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>sqliterk_status</name></type> <name>sqliterkPagerGetStatus</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name> <operator>||</operator> <operator>!</operator><name><name>pager</name><operator>-&gt;</operator><name>pagesStatus</name></name> <operator>||</operator>
        <call><name>sqliterkPagerIsPagenoValid</name><argument_list>(<argument><expr><name>pager</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>sqliterk_status_invalid</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>pager</name><operator>-&gt;</operator><name>pagesStatus</name><index>[<expr><name>pageno</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPagerGetParsedPageCount</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name> <operator>||</operator> <operator>!</operator><name><name>pager</name><operator>-&gt;</operator><name>pagesStatus</name></name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>, <decl><type ref="prev"/><name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name><name>pager</name><operator>-&gt;</operator><name>pagecount</name></name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>pager</name><operator>-&gt;</operator><name>pagesStatus</name><index>[<expr><name>i</name></expr>]</index></name> <operator>==</operator> <name>sqliterk_status_checked</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>count</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkPagerGetValidPageCount</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>pager</name><operator>-&gt;</operator><name>pagecount</name></name> <operator>-</operator> <name><name>pager</name><operator>-&gt;</operator><name>freepagecount</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>sqliterkPagerGetIntegrity</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>pager</name><operator>-&gt;</operator><name>integrity</name></name></expr>;</return>
</block_content>}</block></function>
</unit>
