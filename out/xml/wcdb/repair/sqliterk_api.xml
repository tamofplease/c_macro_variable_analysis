<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/repair/sqliterk_api.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SQLiteRepairKit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_column.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_pager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_values.h"</cpp:file></cpp:include>

<function><type><name>int</name></type> <name>sqliterk_register_notify</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>sqliterk_notify</name></type> <name>notify</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkSetNotify</name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><name>notify</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_open</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
                  <parameter><decl><type><specifier>const</specifier> <name>sqliterk_cipher_conf</name> <modifier>*</modifier></type><name>cipher</name></decl></parameter>,
                  <parameter><decl><type><name>sqliterk</name> <modifier>*</modifier><modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkOpen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sqliterk_user_info</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkGetUserInfo</name><argument_list>(<argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_parse</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkParse</name><argument_list>(<argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_parse_page</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkParsePage</name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_parse_master</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkParseMaster</name><argument_list>(<argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_close</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkClose</name><argument_list>(<argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sqliterk_get_user_info</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkGetUserInfo</name><argument_list>(<argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqliterk_set_user_info</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>sqliterkSetUserInfo</name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><name>userInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_column_count</name><parameter_list>(<parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkValuesGetCount</name><argument_list>(<argument><expr><call><name>sqliterkColumnGetValues</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>sqliterk_value_type</name></type> <name>sqliterk_column_type</name><parameter_list>(<parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkValuesGetType</name><argument_list>(<argument><expr><call><name>sqliterkColumnGetValues</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_column_integer</name><parameter_list>(<parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkValuesGetInteger</name><argument_list>(<argument><expr><call><name>sqliterkColumnGetValues</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>sqliterk_column_integer64</name><parameter_list>(<parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkValuesGetInteger64</name><argument_list>(<argument><expr><call><name>sqliterkColumnGetValues</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>double</name></type> <name>sqliterk_column_number</name><parameter_list>(<parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkValuesGetNumber</name><argument_list>(<argument><expr><call><name>sqliterkColumnGetValues</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqliterk_column_text</name><parameter_list>(<parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkValuesGetText</name><argument_list>(<argument><expr><call><name>sqliterkColumnGetValues</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>sqliterk_column_binary</name><parameter_list>(<parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkValuesGetBinary</name><argument_list>(<argument><expr><call><name>sqliterkColumnGetValues</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_column_bytes</name><parameter_list>(<parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>index</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkValuesGetBytes</name><argument_list>(<argument><expr><call><name>sqliterkColumnGetValues</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int64_t</name></type> <name>sqliterk_column_rowid</name><parameter_list>(<parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkColumnGetRowId</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqliterk_table_name</name><parameter_list>(<parameter><decl><type><name>sqliterk_table</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkBtreeGetName</name><argument_list>(<argument><expr><operator>(</operator><name>sqliterk_btree</name> <operator>*</operator><operator>)</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqliterk_table_set_user_info</name><parameter_list>(<parameter><decl><type><name>sqliterk_table</name> <modifier>*</modifier></type><name>table</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>sqliterkBtreeSetUserInfo</name><argument_list>(<argument><expr><operator>(</operator><name>sqliterk_btree</name> <operator>*</operator><operator>)</operator> <name>table</name></expr></argument>, <argument><expr><name>userInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sqliterk_table_get_user_info</name><parameter_list>(<parameter><decl><type><name>sqliterk_table</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkBtreeGetUserInfo</name><argument_list>(<argument><expr><operator>(</operator><name>sqliterk_btree</name> <operator>*</operator><operator>)</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>sqliterk_type</name></type> <name>sqliterk_table_type</name><parameter_list>(<parameter><decl><type><name>sqliterk_table</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><operator>(</operator><name>sqliterk_type</name><operator>)</operator> <call><name>sqliterkBtreeGetType</name><argument_list>(<argument><expr><operator>(</operator><name>sqliterk_btree</name> <operator>*</operator><operator>)</operator> <name>table</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_register</name><parameter_list>(<parameter><decl><type><name>sqliterk_os</name></type> <name>os</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkOSRegister</name><argument_list>(<argument><expr><name>os</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_table_root</name><parameter_list>(<parameter><decl><type><name>sqliterk_table</name> <modifier>*</modifier></type><name>table</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><call><name>sqliterkBtreeGetRootPage</name><argument_list>(<argument><expr><operator>(</operator><name>sqliterk_btree</name> <operator>*</operator><operator>)</operator> <name>table</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <return>return <expr><call><name>sqliterkPageGetPageno</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqliterk_description</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkGetResultCodeDescription</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_parsed_page_count</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkGetParsedPageCount</name><argument_list>(<argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_valid_page_count</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkGetValidPageCount</name><argument_list>(<argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterk_page_count</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkGetPageCount</name><argument_list>(<argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>sqliterk_integrity</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>sqliterkGetIntegrity</name><argument_list>(<argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqliterk_cipher_conf_set_key</name><parameter_list>(<parameter><decl><type><name>sqliterk_cipher_conf</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name><modifier>*</modifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>conf</name> <operator>!=</operator> <name>NULL</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name> <operator>=</operator> <name>key</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>conf</name><operator>-&gt;</operator><name>key_len</name></name> <operator>=</operator> <name>key_len</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>
</unit>
