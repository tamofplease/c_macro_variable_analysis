<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/repair/sqliterk_crypto.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_crypto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SQLiteRepairKit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_pager.h"</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WCDB_BUILTIN_SQLCIPHER</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlcipher/sqlite3.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>  <comment type="line">//WCDB_BUILTIN_SQLCIPHER</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="line">//WCDB_BUILTIN_SQLCIPHER</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="line">// Declarations by SQLCipher.</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIPHER_DECRYPT</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIPHER_ENCRYPT</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIPHER_READ_CTX</name></cpp:macro> <cpp:value>0</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIPHER_WRITE_CTX</name></cpp:macro> <cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CIPHER_READWRITE_CTX</name></cpp:macro> <cpp:value>2</cpp:value></cpp:define>

<comment type="block">/* Extensions defined in crypto_impl.c */</comment>
<typedef>typedef <type><name><name>struct</name> <name>codec_ctx</name></name></type> <name>codec_ctx</name>;</typedef>

<comment type="block">/* activation and initialization */</comment>
<function_decl><type><name>void</name></type> <name>sqlcipher_activate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlcipher_deactivate</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_init</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlcipher_codec_ctx_free</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_key_derive</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_key_copy</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* Page cipher implementation */</comment>
<function_decl><type><name>int</name></type> <name>sqlcipher_page_cipher</name><parameter_list>(
    <parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="block">/* context setters &amp; getters */</comment>
<comment type="line">//void sqlcipher_codec_ctx_set_error(codec_ctx *, int);</comment>

<function_decl><type><name>void</name></type> <name>sqlcipher_codec_get_pass</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_set_pass</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlcipher_codec_get_keyspec</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>zKey</name></decl></parameter>, <parameter><decl><type><name>int</name> <modifier>*</modifier></type><name>nKey</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_set_pagesize</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_get_pagesize</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_get_reservesize</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sqlcipher_set_default_pagesize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_get_default_pagesize</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sqlcipher_set_default_kdf_iter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_get_default_kdf_iter</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_set_kdf_iter</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_get_kdf_iter</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_set_kdf_salt</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_get_kdf_salt</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier><modifier>*</modifier></type><name>salt</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_set_fast_kdf_iter</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>, <parameter><decl><type><name>int</name></type></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_get_fast_kdf_iter</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>sqlcipher_codec_ctx_get_cipher</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name><modifier>*</modifier></type> <name>sqlcipher_codec_ctx_get_data</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type></decl></parameter>)</parameter_list>;</function_decl>

<comment type="line">//void sqlcipher_exportFunc(sqlite3_context *, int, sqlite3_value **);</comment>

<function_decl><type><name>void</name></type> <name>sqlcipher_set_default_use_hmac</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>use</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_get_default_use_hmac</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>void</name></type> <name>sqlcipher_set_hmac_salt_mask</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>char</name></type> <name>mask</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>unsigned</name> <name>char</name></type> <name>sqlcipher_get_hmac_salt_mask</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_set_use_hmac</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>use</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_get_use_hmac</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>for_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_set_flag</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_unset_flag</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_ctx_get_flag</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>,
                                 <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>flag</name></decl></parameter>,
                                 <parameter><decl><type><name>int</name></type> <name>for_ctx</name></decl></parameter>)</parameter_list>;</function_decl>

<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlcipher_codec_get_cipher_provider</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">//int sqlcipher_codec_ctx_migrate(codec_ctx *ctx);</comment>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_add_random</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>data</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>random_sz</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlcipher_cipher_profile</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>destination</name></decl></parameter>)</parameter_list>;</function_decl>
<comment type="line">//static void sqlcipher_profile_callback(void *file, const char *sql, sqlite3_uint64 run_time);</comment>
<comment type="line">//static int sqlcipher_codec_get_store_pass(codec_ctx *ctx);</comment>
<comment type="line">//static void sqlcipher_codec_get_pass(codec_ctx *ctx, void **zKey, int *nKey);</comment>
<comment type="line">//static void sqlcipher_codec_set_store_pass(codec_ctx *ctx, int value);</comment>
<function_decl><type><name>int</name></type> <name>sqlcipher_codec_fips_status</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqlcipher_codec_get_provider_version</name><parameter_list>(<parameter><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>)</parameter_list>;</function_decl>


<function><type><name>int</name></type> <name>sqliterkCryptoSetCipher</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>,
                            <parameter><decl><type><name>sqliterk_file</name> <modifier>*</modifier></type><name>fd</name></decl></parameter>,
                            <parameter><decl><type><specifier>const</specifier> <name>sqliterk_cipher_conf</name> <modifier>*</modifier></type><name>conf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>codec_ctx</name> <modifier>*</modifier></type><name>codec</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>conf</name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Check arguments.</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>conf</name><operator>-&gt;</operator><name>key</name></name> <operator>||</operator> <name><name>conf</name><operator>-&gt;</operator><name>key_len</name></name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return></block_content></block></if></if_stmt>

        <comment type="line">// SQLite library must be initialized before calling sqlcipher_activate(),</comment>
        <comment type="line">// or it will cause a deadlock.</comment>
        <expr_stmt><expr><call><name>sqlite3_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_activate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// XXX: fake BTree structure passed to sqlcipher_codec_ctx_init.</comment>
        <comment type="line">// Member of such structure is assigned but never used by repair kit.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name><name>fake_db</name><index>[<expr><literal type="number">8</literal></expr>]</index></name></decl>;</decl_stmt>

        <comment type="line">// Initialize codec context.</comment>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_init</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codec</name></expr></argument>, <argument><expr><name>fake_db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>bail_sqlite_errstr</name>;</goto></block_content></block></if></if_stmt>

        <comment type="line">// Read and set KDF salt.</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>salt</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>salt_buf</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>kdf_salt</name></name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>salt</name> <operator>=</operator> <operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name><name>conf</name><operator>-&gt;</operator><name>kdf_salt</name></name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <decl_stmt><decl><type><name>size_t</name></type> <name>salt_size</name> <init>= <expr><literal type="number">16</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkOSRead</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>salt_buf</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>salt_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Failed to load KDF salt from file."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <goto>goto <name>bail</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>salt</name> <operator>=</operator> <name>salt_buf</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <expr_stmt><expr><call><name>sqlcipher_codec_ctx_set_kdf_salt</name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set page size.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>page_size</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_pagesize</name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>page_size</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>bail_sqlite_errstr</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set HMAC usage.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>use_hmac</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_use_hmac</name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>use_hmac</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>bail_sqlite_errstr</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set KDF Iteration.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>conf</name><operator>-&gt;</operator><name>kdf_iter</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_ctx_set_kdf_iter</name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name><name>conf</name><operator>-&gt;</operator><name>kdf_iter</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
                <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Update pager page size.</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>page_sz</name> <init>= <expr><call><name>sqlcipher_codec_ctx_get_pagesize</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>reserve_sz</name> <init>= <expr><call><name>sqlcipher_codec_ctx_get_reservesize</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>pagesize</name></name> <operator>=</operator> <name>page_sz</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>reservedBytes</name></name> <operator>=</operator> <name>reserve_sz</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlcipher_codec_ctx_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlcipher_deactivate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name> <operator>=</operator> <name>codec</name></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>

<label><name>bail_sqlite_errstr</name>:</label>
    <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(<argument><expr><name>SQLITERK_CANTOPEN</name></expr></argument>,
                    <argument><expr><literal type="string">"Failed to initialize cipher context: %s"</literal></expr></argument>,
                    <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_CANTOPEN</name></expr>;</expr_stmt>
<label><name>bail</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>codec</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlcipher_codec_ctx_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlcipher_deactivate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqliterkCryptoFreeCodec</name><parameter_list>(<parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name></expr>)</condition><block type="pseudo"><block_content>
        <return>return;</return></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlcipher_codec_ctx_free</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>pager</name><operator>-&gt;</operator><name>codec</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlcipher_deactivate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkCryptoDecode</name><parameter_list>(<parameter><decl><type><name>sqliterk_codec</name> <modifier>*</modifier></type><name>codec</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pgno</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>data</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pdata</name> <init>= <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>data</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>page_sz</name> <init>= <expr><call><name>sqlcipher_codec_ctx_get_pagesize</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>buffer</name> <init>=
        <expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <call><name>sqlcipher_codec_ctx_get_data</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_codec_key_derive</name><argument_list>(<argument><expr><name>codec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>rc</name></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>pgno</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>offset</name> <operator>=</operator> <literal type="number">16</literal></expr>;</expr_stmt> <comment type="line">// FILE_HEADER_SZ</comment>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><literal type="string">"SQLite format 3"</literal></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqlcipher_page_cipher</name><argument_list>(<argument><expr><name>codec</name></expr></argument>, <argument><expr><name>CIPHER_READ_CTX</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>CIPHER_DECRYPT</name></expr></argument>,
                               <argument><expr><name>page_sz</name> <operator>-</operator> <name>offset</name></expr></argument>, <argument><expr><name>pdata</name> <operator>+</operator> <name>offset</name></expr></argument>,
                               <argument><expr><name>buffer</name> <operator>+</operator> <name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>pdata</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>page_sz</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>

<label><name>bail</name>:</label>
    <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(<argument><expr><name>SQLITERK_DAMAGED</name></expr></argument>, <argument><expr><literal type="string">"Failed to decode page %d: %s"</literal></expr></argument>, <argument><expr><name>pgno</name></expr></argument>,
                    <argument><expr><call><name>sqlite3_errstr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>
</unit>
