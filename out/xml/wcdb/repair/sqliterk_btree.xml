<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/repair/sqliterk_btree.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SQLiteRepairKit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_column.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_pager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;inttypes.h&gt;</cpp:file></cpp:include>

<comment type="line">// Declarations</comment>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkBtreeParsePage</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkBtreeParseCell</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>,
                                  <parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>cellPointerArray</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>cellsCount</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkBtreeParsePayload</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>,
                                     <parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>,
                                     <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,
                                     <parameter><decl><type><name>int</name></type> <name>payloadSize</name></decl></parameter>,
                                     <parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkBtreeGetLengthForSerialType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>serialType</name></decl></parameter>)</parameter_list>;</function_decl>

<struct>struct <name>sqliterk_btree</name> <block>{
    <decl_stmt><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_btree_type</name></type> <name>type</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>rootpage</name></decl>;</decl_stmt>
    <comment type="line">// For leaf-table. See https://www.sqlite.org/fileformat2.html#btree</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>maxLocal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>minLocal</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>maxLeaf</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>minLeaf</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>sqliterk_btree_notify</name></type> <name>notify</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>userInfo</name></decl>;</decl_stmt>
}</block>;</struct>

<function><type><name>int</name></type> <name>sqliterkBtreeOpen</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                      <parameter><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl></parameter>,
                      <parameter><decl><type><name>int</name></type> <name>rootPageno</name></decl></parameter>,
                      <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier><modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pager</name> <operator>||</operator> <operator>!</operator><name>btree</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>theBtree</name> <init>= <expr><call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqliterk_btree</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>theBtree</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>sqliterkBtreeOpen_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>theBtree</name><operator>-&gt;</operator><name>pager</name></name> <operator>=</operator> <name>pager</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkPageAcquire</name><argument_list>(<argument><expr><name><name>theBtree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>rootPageno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>theBtree</name><operator>-&gt;</operator><name>rootpage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>sqliterkBtreeOpen_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rootPageno</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkBtreeSetMeta</name><argument_list>(<argument><expr><name>theBtree</name></expr></argument>, <argument><expr><literal type="string">"sqlite_master"</literal></expr></argument>,
                                  <argument><expr><name>sqliterk_btree_type_master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>sqliterkBtreeOpen_Failed</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <switch>switch <condition>(<expr><call><name>sqliterkPageGetType</name><argument_list>(<argument><expr><name><name>theBtree</name><operator>-&gt;</operator><name>rootpage</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
            <case>case <expr><name>sqliterk_page_type_interior_index</name></expr>:</case>
            <case>case <expr><name>sqliterk_page_type_leaf_index</name></expr>:</case>
                <expr_stmt><expr><name><name>theBtree</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>sqliterk_btree_type_index</name></expr>;</expr_stmt>
                <break>break;</break>
            <case>case <expr><name>sqliterk_page_type_interior_table</name></expr>:</case>
            <case>case <expr><name>sqliterk_page_type_leaf_table</name></expr>:</case>
                <expr_stmt><expr><name><name>theBtree</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>sqliterk_btree_type_table</name></expr>;</expr_stmt>
                <break>break;</break>
            <default>default:</default>
                <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_DAMAGED</name></expr>;</expr_stmt>
                <goto>goto <name>sqliterkBtreeOpen_Failed</name>;</goto>
        </block_content>}</block></switch>
    </block_content>}</block></else></if_stmt>
    <comment type="line">// Save memory</comment>
    <expr_stmt><expr><call><name>sqliterkPageClearData</name><argument_list>(<argument><expr><name><name>theBtree</name><operator>-&gt;</operator><name>rootpage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>theBtree</name><operator>-&gt;</operator><name>maxLocal</name></name> <operator>=</operator>
        <operator>(</operator><call><name>sqliterkPagerGetUsableSize</name><argument_list>(<argument><expr><name><name>theBtree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>*</operator> <literal type="number">64</literal> <operator>/</operator> <literal type="number">255</literal> <operator>-</operator> <literal type="number">23</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>theBtree</name><operator>-&gt;</operator><name>minLocal</name></name> <operator>=</operator>
        <operator>(</operator><call><name>sqliterkPagerGetUsableSize</name><argument_list>(<argument><expr><name><name>theBtree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>*</operator> <literal type="number">32</literal> <operator>/</operator> <literal type="number">255</literal> <operator>-</operator> <literal type="number">23</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>theBtree</name><operator>-&gt;</operator><name>maxLeaf</name></name> <operator>=</operator> <call><name>sqliterkPagerGetUsableSize</name><argument_list>(<argument><expr><name><name>theBtree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">35</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>theBtree</name><operator>-&gt;</operator><name>minLeaf</name></name> <operator>=</operator>
        <operator>(</operator><call><name>sqliterkPagerGetUsableSize</name><argument_list>(<argument><expr><name><name>theBtree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">12</literal><operator>)</operator> <operator>*</operator> <literal type="number">32</literal> <operator>/</operator> <literal type="number">255</literal> <operator>-</operator> <literal type="number">23</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>theBtree</name><operator>-&gt;</operator><name>rk</name></name> <operator>=</operator> <name>rk</name></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>btree</name> <operator>=</operator> <name>theBtree</name></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>

<label><name>sqliterkBtreeOpen_Failed</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>theBtree</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkBtreeClose</name><argument_list>(<argument><expr><name>theBtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>btree</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkBtreeParse</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onBeginParseBtree</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onBeginParseBtree</name></name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>rk</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>=
        <expr><call><name>sqliterkBtreeParsePage</name><argument_list>(<argument><expr><name>btree</name></expr></argument>, <argument><expr><call><name>sqliterkPageGetPageno</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>rootpage</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onEndParseBtree</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onEndParseBtree</name></name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>rk</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// If the page is an interior-btree, no matter is an interior-table btree</comment>
<comment type="line">// or an interior-index btree, this function will recursively parse the page</comment>
<comment type="line">// until it find the leaf page or any error occur.</comment>
<comment type="line">// A leaf-index btree will only be found but not parse, since its data make</comment>
<comment type="line">// no sense.</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkBtreeParsePage</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name> <operator>||</operator> <name>pageno</name> <operator>&gt;</operator> <call><name>sqliterkPagerGetPageCount</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onBeginParsePage</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onBeginParsePage</name></name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>rk</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>rc</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>cellPointerArray</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// ahead checking type to fast up parsing</comment>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkPageAcquire</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>sqliterkBtreeParsePage_End</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>sqliterk_page_type</name></type> <name>type</name> <init>= <expr><call><name>sqliterkPageGetType</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>!=</operator> <name>sqliterk_page_type_interior_index</name> <operator>&amp;&amp;</operator>
        <name>type</name> <operator>!=</operator> <name>sqliterk_page_type_interior_table</name> <operator>&amp;&amp;</operator>
        <name>type</name> <operator>!=</operator> <name>sqliterk_page_type_leaf_index</name> <operator>&amp;&amp;</operator>
        <name>type</name> <operator>!=</operator> <name>sqliterk_page_type_leaf_table</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkOSWarning</name><argument_list>(<argument><expr><name>SQLITERK_DAMAGED</name></expr></argument>, <argument><expr><literal type="string">"Page %d has invalid type"</literal></expr></argument>,
                               <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>sqliterkBtreeParsePage_End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">//sqliterkOSDebug(SQLITERK_OK, "Page %d is %s", pageno, sqliterkPageGetTypeName(type));</comment>

    <comment type="line">// Parse cell pointer array. For further information, see [cell pointer]</comment>
    <comment type="line">// at https://www.sqlite.org/fileformat2.html#btree</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pagedata</name> <init>= <expr><call><name>sqliterkPageGetData</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offsetCellPointerArray</name> <init>=
        <expr><ternary><condition><expr><operator>(</operator><name>type</name> <operator>==</operator> <name>sqliterk_page_type_interior_table</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">12</literal></expr> </then><else>: <expr><literal type="number">8</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>cellsCount</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqliterkParseInt</name><argument_list>(<argument><expr><name>pagedata</name></expr></argument>, <argument><expr><literal type="number">3</literal> <operator>+</operator> <call><name>sqliterkPageHeaderOffset</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>,
                     <argument><expr><operator>&amp;</operator><name>cellsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>cellsCount</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <name>cellsCount</name> <operator>*</operator> <literal type="number">2</literal> <operator>+</operator> <name>offsetCellPointerArray</name> <operator>&gt;</operator>
                               <call><name>sqliterkPagerGetSize</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_DAMAGED</name></expr>;</expr_stmt>
        <goto>goto <name>sqliterkBtreeParsePage_End</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>cellPointerArray</name> <operator>=</operator> <call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>cellsCount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>cellPointerArray</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>sqliterkBtreeParsePage_End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cellsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>cellPointer</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqliterkParseInt</name><argument_list>(<argument><expr><name>pagedata</name></expr></argument>,
                         <argument><expr><call><name>sqliterkPageHeaderOffset</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call> <operator>+</operator>
                             <name>offsetCellPointerArray</name> <operator>+</operator> <name>i</name> <operator>*</operator> <literal type="number">2</literal></expr></argument>,
                         <argument><expr><literal type="number">2</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>cellPointer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>cellPointerArray</name><index>[<expr><name>i</name></expr>]</index></name> <operator>=</operator> <name>cellPointer</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>sqliterk_page_type_interior_table</name></expr>:</case>
        <case>case <expr><name>sqliterk_page_type_interior_index</name></expr>:</case> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>hasRightMostPageno</name> <init>=
                <expr><operator>(</operator><name>type</name> <operator>==</operator> <name>sqliterk_page_type_interior_table</name><operator>)</operator></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>pagenosCount</name> <init>= <expr><name>cellsCount</name> <operator>+</operator> <name>hasRightMostPageno</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>int</name> <modifier>*</modifier></type><name>pagenos</name> <init>= <expr><call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>pagenosCount</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name>pagenos</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
                <goto>goto <name>sqliterkBtreeParsePage_End</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cellsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>sqliterkParseInt</name><argument_list>(<argument><expr><name>pagedata</name></expr></argument>, <argument><expr><name><name>cellPointerArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pagenos</name> <operator>+</operator> <name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
            <if_stmt><if>if <condition>(<expr><name>hasRightMostPageno</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sqliterkParseInt</name><argument_list>(<argument><expr><name>pagedata</name></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><name>pagenos</name> <operator>+</operator> <name>cellsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// All done for page data. Ahead release the page data to avoid memory overflow</comment>
            <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name>cellPointerArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>cellPointerArray</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqliterkPageClearData</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Recursively decode the page</comment>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>pagenosCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>sqliterkBtreeParsePage</name><argument_list>(<argument><expr><name>btree</name></expr></argument>, <argument><expr><name><name>pagenos</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call> <operator>==</operator>
                    <name>SQLITERK_CANCELLED</name></expr>)</condition><block type="pseudo"><block_content>
                    <break>break;</break></block_content></block></if></if_stmt>
            </block_content>}</block></for>
            <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name>pagenos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        </block_content>}</block>
        <case>case <expr><name>sqliterk_page_type_leaf_table</name></expr>:</case>
            <if_stmt><if>if <condition>(<expr><call><name>sqliterkBtreeIsSystemType</name><argument_list>(<argument><expr><call><name>sqliterkBtreeGetType</name><argument_list>(<argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <name><name>btree</name><operator>-&gt;</operator><name>type</name></name> <operator>!=</operator> <name>sqliterk_btree_type_master</name></expr>)</condition> <block>{<block_content>
                <comment type="line">//skip a non-master system table, since its column is generated.</comment>
                <goto>goto <name>sqliterkBtreeParsePage_End</name>;</goto>
            </block_content>}</block></if></if_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkBtreeParseCell</name><argument_list>(<argument><expr><name>btree</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>cellPointerArray</name></expr></argument>,
                                        <argument><expr><name>cellsCount</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>sqliterk_page_type_leaf_index</name></expr>:</case>
            <comment type="line">// Just skip it since the column in leaf index make no sense.</comment>
            <break>break;</break>
        <default>default:</default>
            <break>break;</break>
    </block_content>}</block></switch>

<label><name>sqliterkBtreeParsePage_End</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>cellPointerArray</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name>cellPointerArray</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onEndParsePage</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onEndParsePage</name></name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>rk</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>page</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkPageRelease</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>!=</operator> <name>SQLITERK_CANCELLED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSDebug</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse page %d."</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Parse the payload data. see [B-tree Cell Format]</comment>
<comment type="line">// at https://www.sqlite.org/fileformat2.html#btree</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkBtreeParseCell</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>,
                                  <parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>int</name> <modifier>*</modifier></type><name>cellPointerArray</name></decl></parameter>,
                                  <parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>cellsCount</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name> <operator>||</operator> <operator>!</operator><name>page</name> <operator>||</operator> <operator>!</operator><name>cellPointerArray</name> <operator>||</operator> <name>cellsCount</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pagedata</name> <init>= <expr><call><name>sqliterkPageGetData</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkColumnAlloc</name><argument_list>(<argument><expr><operator>&amp;</operator><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>sqliterkBtreeParsePayload_End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>cellsCount</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkColumnClear</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>offset</name> <init>= <expr><name><name>cellPointerArray</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <comment type="line">// Find payload</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>payloadSizeLength</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>payloadSize</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkParseVarint64</name><argument_list>(<argument><expr><name>pagedata</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>payloadSizeLength</name></expr></argument>,
                                 <argument><expr><operator>&amp;</operator><name>payloadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>sqliterkBtreeParsePayload_End</name>;</goto>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>payloadSize</name> <operator>&gt;</operator> <literal type="number">64</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>)</condition> <block>{<block_content>
            <comment type="line">// We assume that payload is at most 64MB.</comment>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_DAMAGED</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqliterkOSDebug</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Invalid payload size: %"</literal> <name>PRId64</name> <literal type="string">"."</literal></expr></argument>, <argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <goto>goto <name>sqliterkBtreeParsePayload_End</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>payloadSizeLength</name></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>int</name></type> <name>rowidLength</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int64_t</name></type> <name>rowid</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkParseVarint64</name><argument_list>(<argument><expr><name>pagedata</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowidLength</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>rowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>sqliterkBtreeParsePayload_End</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>offset</name> <operator>+=</operator> <name>rowidLength</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqliterkColumnSetRowId</name><argument_list>(<argument><expr><name>column</name></expr></argument>, <argument><expr><name>rowid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>rc</name> <operator>=</operator>
            <call><name>sqliterkBtreeParsePayload</name><argument_list>(<argument><expr><name>btree</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>, <argument><expr><name>payloadSize</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>sqliterkBtreeParsePayload_End</name>;</goto>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
<label><name>sqliterkBtreeParsePayload_End</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>column</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkColumnFree</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name> <operator>&amp;&amp;</operator> <name>rc</name> <operator>!=</operator> <name>SQLITERK_CANCELLED</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSDebug</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Failed to parse payload."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Parse the payload for leaf-table page only. We don't implement the parse</comment>
<comment type="line">// method for index page, since we are not concerned about the data in an</comment>
<comment type="line">// index page. See [Record Format] at https://www.sqlite.org/fileformat2.html</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkBtreeParsePayload</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>,
                                     <parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>,
                                     <parameter><decl><type><name>int</name></type> <name>offset</name></decl></parameter>,
                                     <parameter><decl><type><name>int</name></type> <name>payloadSize</name></decl></parameter>,
                                     <parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name> <operator>||</operator> <name>payloadSize</name> <operator>&lt;=</operator> <literal type="number">0</literal> <operator>||</operator> <operator>!</operator><name>column</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>payloadData</name> <init>= <expr><call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><name>payloadSize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>payloadData</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
        <goto>goto <name>sqliterkBtreeParseColumn_End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Check overflow</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>local</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>payloadSize</name> <operator>&lt;=</operator> <name><name>btree</name><operator>-&gt;</operator><name>maxLeaf</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>local</name> <operator>=</operator> <name>payloadSize</name></expr>;</expr_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <comment type="line">// Since it is a leaf-table page, the max local should be equal to max leaf</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>maxPageLocal</name> <init>= <expr><name><name>btree</name><operator>-&gt;</operator><name>maxLeaf</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>minPageLocal</name> <init>= <expr><name><name>btree</name><operator>-&gt;</operator><name>minLocal</name></name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>surplus</name> <init>=
            <expr><name>minPageLocal</name> <operator>+</operator> <operator>(</operator><name>payloadSize</name> <operator>-</operator> <name>minPageLocal</name><operator>)</operator> <operator>%</operator>
                               <operator>(</operator><call><name>sqliterkPagerGetUsableSize</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal><operator>)</operator></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>surplus</name> <operator>&lt;=</operator> <name>maxPageLocal</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>local</name> <operator>=</operator> <name>surplus</name></expr>;</expr_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>local</name> <operator>=</operator> <name>minPageLocal</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Read data</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>payloadPointer</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pagedata</name> <init>= <expr><call><name>sqliterkPageGetData</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>offset</name> <operator>+</operator> <name>local</name> <operator>&gt;</operator> <call><name>sqliterkPagerGetSize</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_DAMAGED</name></expr>;</expr_stmt>
        <goto>goto <name>sqliterkBtreeParseColumn_End</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>pagedata</name> <operator>+</operator> <name>offset</name></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>payloadPointer</name> <operator>+=</operator> <name>local</name></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name>payloadPointer</name> <operator>&lt;</operator> <name>payloadSize</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>overflowPages</name> <init>= <expr><call><name>sqliterkColumnGetOverflowPages</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>overflowPageno</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pagedata</name> <init>= <expr><call><name>sqliterkPageGetData</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqliterkParseInt</name><argument_list>(<argument><expr><name>pagedata</name></expr></argument>, <argument><expr><name>offset</name> <operator>+</operator> <name>local</name></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflowPageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while <condition>(<expr><call><name>sqliterkPagerIsPagenoValid</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>overflowPageno</name></expr></argument>)</argument_list></call> <operator>==</operator>
               <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><call><name>sqliterkValuesAddInteger</name><argument_list>(<argument><expr><name>overflowPages</name></expr></argument>, <argument><expr><name>overflowPageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onBeginParsePage</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onBeginParsePage</name></name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>rk</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>,
                                               <argument><expr><name>overflowPageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <decl_stmt><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkPageAcquireOverflow</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>overflowPageno</name></expr></argument>,
                                             <argument><expr><operator>&amp;</operator><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onEndParsePage</name></name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onEndParsePage</name></name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>rk</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>overflowPageno</name></expr></argument>,
                                             <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
            <comment type="line">// Read data</comment>
            <decl_stmt><decl><type><name>int</name></type> <name>overflowSize</name> <init>= <expr><name>payloadSize</name> <operator>-</operator> <name>payloadPointer</name></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>overflowSize</name> <operator>&lt;=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <break>break;</break></block_content></block></if></if_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>maxSize</name> <init>= <expr><call><name>sqliterkPagerGetUsableSize</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">4</literal></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><name>overflowSize</name> <operator>&gt;</operator> <name>maxSize</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>overflowSize</name> <operator>=</operator> <name>maxSize</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>pageData</name> <init>= <expr><call><name>sqliterkPageGetData</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>payloadData</name> <operator>+</operator> <name>payloadPointer</name></expr></argument>, <argument><expr><name>pageData</name> <operator>+</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><name>overflowSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>payloadPointer</name> <operator>+=</operator> <name>overflowSize</name></expr>;</expr_stmt>
            <comment type="line">// Iterate</comment>
            <expr_stmt><expr><call><name>sqliterkParseInt</name><argument_list>(<argument><expr><name>pageData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>overflowPageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="line">// Clear</comment>
            <expr_stmt><expr><call><name>sqliterkPageRelease</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></while>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>columnOffsetValue</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>columnOffsetValueLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkParseVarint</name><argument_list>(<argument><expr><name>payloadData</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>columnOffsetValueLength</name></expr></argument>,
                             <argument><expr><operator>&amp;</operator><name>columnOffsetValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>sqliterkBtreeParseColumn_End</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>offsetSerialType</name> <init>= <expr><name>columnOffsetValueLength</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>offsetValue</name> <init>= <expr><name>columnOffsetValue</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>endSerialType</name> <init>= <expr><name>offsetValue</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>int</name></type> <name>endValue</name> <init>= <expr><name>payloadSize</name></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>serialTypeLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>serialType</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>valueLength</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>sqliterkColumnGetValues</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <while>while <condition>(<expr><name>offsetValue</name> <operator>&lt;</operator> <name>endValue</name> <operator>||</operator> <name>offsetSerialType</name> <operator>&lt;</operator> <name>endSerialType</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkParseVarint</name><argument_list>(<argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>offsetSerialType</name></expr></argument>,
                                 <argument><expr><operator>&amp;</operator><name>serialTypeLength</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>serialType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>sqliterkBtreeParseColumn_End</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>valueLength</name> <operator>=</operator> <call><name>sqliterkBtreeGetLengthForSerialType</name><argument_list>(<argument><expr><name>serialType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>serialType</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkValuesAddNull</name><argument_list>(<argument><expr><name>values</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>serialType</name> <operator>&lt;</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>value</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sqliterkParseInt64</name><argument_list>(<argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>offsetValue</name></expr></argument>, <argument><expr><name>valueLength</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkValuesAddInteger64</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>serialType</name> <operator>==</operator> <literal type="number">7</literal></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>double</name></type> <name>value</name></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sqliterkParseNumber</name><argument_list>(<argument><expr><name>payloadData</name></expr></argument>, <argument><expr><name>offsetValue</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkValuesAddNumber</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>serialType</name> <operator>==</operator> <literal type="number">8</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkValuesAddInteger</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>serialType</name> <operator>==</operator> <literal type="number">9</literal></expr>)</condition> <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkValuesAddInteger</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>serialType</name> <operator>&gt;=</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>serialType</name> <operator>%</operator> <literal type="number">2</literal> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkValuesAddBinary</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><name>payloadData</name> <operator>+</operator> <name>offsetValue</name></expr></argument>,
                                             <argument><expr><name>valueLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if> <else>else <block>{<block_content>
                <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkValuesAddNoTerminatorText</name><argument_list>(
                    <argument><expr><name>values</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator> <name>payloadData</name> <operator>+</operator> <name>offsetValue</name></expr></argument>,
                    <argument><expr><name>valueLength</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></if> <else>else <block>{<block_content>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_DAMAGED</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
        <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
            <goto>goto <name>sqliterkBtreeParseColumn_End</name>;</goto>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><name>offsetValue</name> <operator>+=</operator> <name>valueLength</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>offsetSerialType</name> <operator>+=</operator> <name>serialTypeLength</name></expr>;</expr_stmt>
    </block_content>}</block></while>
    <if_stmt><if>if <condition>(<expr><name>offsetSerialType</name> <operator>!=</operator> <name>endSerialType</name> <operator>||</operator> <name>offsetValue</name> <operator>!=</operator> <name>endValue</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_DAMAGED</name></expr>;</expr_stmt>
        <goto>goto <name>sqliterkBtreeParseColumn_End</name>;</goto>
    </block_content>}</block></if></if_stmt>

<label><name>sqliterkBtreeParseColumn_End</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITERK_OK</name> <operator>&amp;&amp;</operator> <name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onParseColumn</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name><name>btree</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onParseColumn</name></name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>rk</name></name></expr></argument>, <argument><expr><name>btree</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>payloadData</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name>payloadData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkBtreeClose</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>rootpage</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkPageRelease</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>rootpage</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>rootpage</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>pager</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>userInfo</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>rk</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkBtreeSetMeta</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>,
                         <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl></parameter>,
                         <parameter><decl><type><name>sqliterk_btree_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>btree</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>name</name></expr>)</condition> <block>{<block_content>
        <decl_stmt><decl><type><name>size_t</name></type> <name>length</name> <init>= <expr><call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>char</name></expr></argument>)</argument_list></sizeof> <operator>*</operator> <operator>(</operator><name>length</name> <operator>+</operator> <literal type="number">1</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>btree</name><operator>-&gt;</operator><name>name</name></name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>SQLITERK_NOMEM</name></expr>;</return>
        </block_content>}</block></if></if_stmt>
        <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>length</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <comment type="line">// If it's a system btree name, then setup its b-tree type.</comment>
        <decl_stmt><decl><type><name>sqliterk_btree_type</name></type> <name>i</name></decl>;</decl_stmt>
        <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <name>sqliterk_btree_type_system_begin</name></expr>;</init>
             <condition><expr><name>i</name> <operator>&lt;</operator> <name>sqliterk_btree_type_system_end</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>typename</name> <init>= <expr><call><name>sqliterkBtreeGetTypeName</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <if_stmt><if>if <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name>typename</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>typename</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>i</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>name</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>sqliterkBtreeIsSystemType</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <name>type</name> <operator>!=</operator> <name>sqliterk_btree_type_unknown</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqliterkBtreeGetName</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>btree</name><operator>-&gt;</operator><name>name</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>sqliterk_btree_type</name></type> <name>sqliterkBtreeGetType</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>sqliterk_btree_type_unknown</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>btree</name><operator>-&gt;</operator><name>type</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkBtreeSetType</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>sqliterk_btree_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sqliterkBtreeIsSystemType</name><argument_list>(<argument><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>)</condition> <block>{<block_content>
        <comment type="line">// You can only set the type manually when the type is not a system type</comment>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>type</name></name> <operator>=</operator> <name>type</name></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkBtreeIsSystemType</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&gt;=</operator> <name>sqliterk_btree_type_system_begin</name> <operator>&amp;&amp;</operator>
        <name>type</name> <operator>&lt;</operator> <name>sqliterk_btree_type_system_end</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">1</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqliterkBtreeSetNotify</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>,
                            <parameter><decl><type><name>sqliterk_btree_notify</name> <modifier>*</modifier></type><name>notify</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name> <operator>||</operator> <operator>!</operator><name>notify</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>notify</name></name> <operator>=</operator> <operator>*</operator><name>notify</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqliterkBtreeSetUserInfo</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>btree</name><operator>-&gt;</operator><name>userInfo</name></name> <operator>=</operator> <name>userInfo</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sqliterkBtreeGetUserInfo</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>btree</name><operator>-&gt;</operator><name>userInfo</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>sqliterkBtreeGetRootPage</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>btree</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>btree</name><operator>-&gt;</operator><name>rootpage</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>sqliterkBtreeGetTypeName</name><parameter_list>(<parameter><decl><type><name>sqliterk_btree_type</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>
    <switch>switch <condition>(<expr><name>type</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>sqliterk_btree_type_autoindex</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"sqlite_autoindex"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>sqliterk_btree_type_sequence</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"sqlite_sequence"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>sqliterk_btree_type_stat</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"sqlite_stat"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>sqliterk_btree_type_master</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"sqlite_master"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>sqliterk_btree_type_table</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"table"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>sqliterk_btree_type_index</name></expr>:</case>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"index"</literal></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><name>name</name> <operator>=</operator> <literal type="string">"unknown"</literal></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
    <return>return <expr><name>name</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// See [Serial Type Codes Of The Record Format]</comment>
<comment type="line">// at https://www.sqlite.org/fileformat2.html</comment>
<function><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkBtreeGetLengthForSerialType</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>serialType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>serialType</name> <operator>&lt;</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name><name>sqliterk_btree_serialtype_fixlengths</name><index>[<expr><literal type="number">12</literal></expr>]</index></name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>, <expr><literal type="number">1</literal></expr>, <expr><literal type="number">2</literal></expr>, <expr><literal type="number">3</literal></expr>, <expr><literal type="number">4</literal></expr>, <expr><literal type="number">6</literal></expr>,
                                                           <expr><literal type="number">8</literal></expr>, <expr><literal type="number">8</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>, <expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>serialType</name> <operator>&lt;</operator> <literal type="number">12</literal></expr>)</condition> <block>{<block_content>
        <return>return <expr><name><name>sqliterk_btree_serialtype_fixlengths</name><index>[<expr><name>serialType</name></expr>]</index></name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><operator>(</operator><name>serialType</name> <operator>-</operator> <literal type="number">12</literal> <operator>-</operator> <name>serialType</name> <operator>%</operator> <literal type="number">2</literal><operator>)</operator> <operator>/</operator> <literal type="number">2</literal></expr>;</return>
</block_content>}</block></function></unit>
