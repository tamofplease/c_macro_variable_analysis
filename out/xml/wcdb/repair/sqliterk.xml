<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/repair/sqliterk.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"SQLiteRepairKit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_btree.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_column.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_os.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_pager.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliterk_values.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<struct>struct <name>sqliterk</name> <block>{
    <decl_stmt><decl><type><name>sqliterk_pager</name> <modifier>*</modifier></type><name>pager</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_btree_notify</name></type> <name>listen</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_notify</name></type> <name>notify</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>userInfo</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name>recursive</name></decl>;</decl_stmt>
}</block>;</struct>

<comment type="line">//declaration</comment>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sqliterkNotify_onBeginParseBtree</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                                             <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type>
<name>sqliterkNotify_onEndParseBtree</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkNotify_onParseColumn</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                                        <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>,
                                        <parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>,
                                        <parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkNotify_onBeginParsePage</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                                           <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>,
                                           <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>void</name></type> <name>sqliterkNotify_onEndParsePage</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                                          <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>,
                                          <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>,
                                          <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkParseBtree</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>;</function_decl>

<function><type><name>int</name></type> <name>sqliterkOpen</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>,
                 <parameter><decl><type><specifier>const</specifier> <name>sqliterk_cipher_conf</name> <modifier>*</modifier></type><name>cipher</name></decl></parameter>,
                 <parameter><decl><type><name>sqliterk</name> <modifier>*</modifier><modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>therk</name> <init>= <expr><call><name>sqliterkOSMalloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqliterk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>therk</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>rc</name> <operator>=</operator> <name>SQLITERK_NOMEM</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(<argument><expr><name>rc</name></expr></argument>, <argument><expr><literal type="string">"Not enough memory, required: %zu bytes"</literal></expr></argument>,
                        <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>sqliterk</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>sqliterkOpen_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkPagerOpen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>cipher</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>therk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>sqliterkOpen_Failed</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name><name>therk</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>onBeginParsePage</name></name> <operator>=</operator> <name>sqliterkNotify_onBeginParsePage</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>therk</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>onEndParsePage</name></name> <operator>=</operator> <name>sqliterkNotify_onEndParsePage</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>therk</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>onBeginParseBtree</name></name> <operator>=</operator> <name>sqliterkNotify_onBeginParseBtree</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>therk</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>onEndParseBtree</name></name> <operator>=</operator> <name>sqliterkNotify_onEndParseBtree</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>therk</name><operator>-&gt;</operator><name>listen</name><operator>.</operator><name>onParseColumn</name></name> <operator>=</operator> <name>sqliterkNotify_onParseColumn</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>therk</name><operator>-&gt;</operator><name>recursive</name></name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>

    <expr_stmt><expr><operator>*</operator><name>rk</name> <operator>=</operator> <name>therk</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqliterkOSInfo</name><argument_list>(<argument><expr><name>SQLITERK_OK</name></expr></argument>, <argument><expr><literal type="string">"RepairKit on '%s' opened, %s."</literal></expr></argument>, <argument><expr><name>path</name></expr></argument>,
                   <argument><expr><ternary><condition><expr><name>cipher</name></expr> ?</condition><then> <expr><literal type="string">"encrypted"</literal></expr> </then><else>: <expr><literal type="string">"plain-text"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>

<label><name>sqliterkOpen_Failed</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>therk</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkClose</name><argument_list>(<argument><expr><name>therk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><operator>*</operator><name>rk</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name></type> <name>sqliterk_set_recursive</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>recursive</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><name><name>rk</name><operator>-&gt;</operator><name>recursive</name></name> <operator>=</operator> <operator>(</operator><name>char</name><operator>)</operator> <name>recursive</name></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkParse</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sqliterkPagerGetPageCount</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
        <decl_stmt><decl><type><name>int</name></type> <name>pageno</name> <init>= <expr><name>i</name> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqliterkParsePage</name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkParsePage</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sqliterkPagerGetStatus</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call> <operator>!=</operator>
        <name>sqliterk_status_unchecked</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkBtreeOpen</name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <goto>goto <name>sqliterkParsePage_End</name>;</goto>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkParseBtree</name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<label><name>sqliterkParsePage_End</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>btree</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkBtreeClose</name><argument_list>(<argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkParseBtree</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name> <init>= <expr><call><name>sqliterkBtreeGetRootPage</name><argument_list>(<argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>pageno</name> <init>= <expr><call><name>sqliterkPageGetPageno</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>page</name> <operator>||</operator> <call><name>sqliterkPagerIsPagenoValid</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqliterkBtreeSetNotify</name><argument_list>(<argument><expr><name>btree</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>rk</name><operator>-&gt;</operator><name>listen</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkBtreeParse</name><argument_list>(<argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkParseMaster</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// The page 1 is always sqlite_master. See [B-tree Pages] at</comment>
    <comment type="line">// https://www.sqlite.org/fileformat2.html</comment>
    <return>return <expr><call><name>sqliterkParsePage</name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkClose</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqliterkPagerClose</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqliterkOSFree</name><argument_list>(<argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sqliterkNotify_onBeginParseBtree</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                                             <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>rk</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onBeginParseTable</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rk</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onBeginParseTable</name></name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><operator>(</operator><name>sqliterk_table</name> <operator>*</operator><operator>)</operator> <name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <decl_stmt><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>rootpage</name> <init>= <expr><call><name>sqliterkBtreeGetRootPage</name><argument_list>(<argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqliterkOSDebug</name><argument_list>(
        <argument><expr><name>SQLITERK_OK</name></expr></argument>, <argument><expr><literal type="string">"Parsing B-tree -&gt; [root: %d, name: %s, type: %s]"</literal></expr></argument>,
        <argument><expr><call><name>sqliterkPageGetPageno</name><argument_list>(<argument><expr><name>rootpage</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sqliterkBtreeGetName</name><argument_list>(<argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>sqliterkBtreeGetTypeName</name><argument_list>(<argument><expr><call><name>sqliterkBtreeGetType</name><argument_list>(<argument><expr><name>btree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>sqliterkNotify_onEndParseBtree</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name><name>rk</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onEndParseTable</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rk</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onEndParseTable</name></name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><operator>(</operator><name>sqliterk_table</name> <operator>*</operator><operator>)</operator> <name>btree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type> <name>sqliterkNotify_onParseColumn</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                                        <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>,
                                        <parameter><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>page</name></decl></parameter>,
                                        <parameter><decl><type><name>sqliterk_column</name> <modifier>*</modifier></type><name>column</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>result</name></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name><name>rk</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onParseColumn</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name><name>rk</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>onParseColumn</name></name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><operator>(</operator><name>sqliterk_table</name> <operator>*</operator><operator>)</operator> <name>btree</name></expr></argument>, <argument><expr><name>column</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <name>SQLITERK_CANCELLED</name></expr>)</condition> <block>{<block_content>
            <return>return <expr><name>result</name></expr>;</return>
        </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><name>result</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>int</name></type> <name>pageno</name> <init>= <expr><call><name>sqliterkPageGetPageno</name><argument_list>(<argument><expr><name>page</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sqliterkPagerSetStatus</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>,
                                   <argument><expr><name>sqliterk_status_discarded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>overflowPages</name> <init>=
                <expr><call><name>sqliterkColumnGetOverflowPages</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
            <for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <call><name>sqliterkValuesGetCount</name><argument_list>(<argument><expr><name>overflowPages</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control> <block>{<block_content>
                <expr_stmt><expr><call><name>sqliterkPagerSetStatus</name><argument_list>(
                    <argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><call><name>sqliterkValuesGetInteger</name><argument_list>(<argument><expr><name>overflowPages</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>sqliterk_status_discarded</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if> <else>else <block>{<block_content>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <name>SQLITERK_OK</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>sqliterkBtreeGetType</name><argument_list>(<argument><expr><name>btree</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>sqliterk_btree_type_master</name> <operator>&amp;&amp;</operator>
        <name><name>rk</name><operator>-&gt;</operator><name>recursive</name></name></expr>)</condition> <block>{<block_content>
        <comment type="line">// Recursively decode the page since the mapping of [table]-&gt;[rootPageno] is known</comment>
        <decl_stmt><decl><type><name>sqliterk_values</name> <modifier>*</modifier></type><name>values</name> <init>= <expr><call><name>sqliterkColumnGetValues</name><argument_list>(<argument><expr><name>column</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>type</name> <init>= <expr><call><name>sqliterkValuesGetText</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>sqliterkValuesGetText</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rootPageno</name> <init>= <expr><call><name>sqliterkValuesGetInteger</name><argument_list>(<argument><expr><name>values</name></expr></argument>, <argument><expr><literal type="number">3</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name> <init>= <expr><name>SQLITERK_OK</name></expr></init></decl>;</decl_stmt>
        <if_stmt><if>if <condition>(<expr><name>type</name> <operator>&amp;&amp;</operator> <name>name</name></expr>)</condition> <block>{<block_content>
            <decl_stmt><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>subbtree</name></decl>;</decl_stmt>
            <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkBtreeOpen</name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>rootPageno</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>subbtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>==</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"table"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sqliterkBtreeSetMeta</name><argument_list>(<argument><expr><name>subbtree</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                         <argument><expr><name>sqliterk_btree_type_table</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <if type="elseif">else if <condition>(<expr><call><name>memcmp</name><argument_list>(<argument><expr><literal type="string">"index"</literal></expr></argument>, <argument><expr><name>type</name></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
                    <expr_stmt><expr><call><name>sqliterkBtreeSetMeta</name><argument_list>(<argument><expr><name>subbtree</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                         <argument><expr><name>sqliterk_btree_type_index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if> <else>else <block>{<block_content>
                    <expr_stmt><expr><call><name>sqliterkBtreeSetMeta</name><argument_list>(<argument><expr><name>subbtree</name></expr></argument>, <argument><expr><name>name</name></expr></argument>,
                                         <argument><expr><name>sqliterk_btree_type_unknown</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
                <expr_stmt><expr><name>rc</name> <operator>=</operator> <call><name>sqliterkParseBtree</name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><name>subbtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>rc</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition> <block>{<block_content>
                <decl_stmt><decl><type><name>sqliterk_page</name> <modifier>*</modifier></type><name>rootpage</name> <init>= <expr><call><name>sqliterkBtreeGetRootPage</name><argument_list>(<argument><expr><name>subbtree</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>sqliterkOSError</name><argument_list>(
                    <argument><expr><name>rc</name></expr></argument>,
                    <argument><expr><literal type="string">"sqliterkNotify_onParseColumn: failed to parse known "</literal>
                    <literal type="string">"table with root page no. %d, name %s, type %s"</literal></expr></argument>,
                    <argument><expr><call><name>sqliterkPageGetPageno</name><argument_list>(<argument><expr><name>rootpage</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>sqliterkBtreeGetName</name><argument_list>(<argument><expr><name>subbtree</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>sqliterkBtreeGetTypeName</name><argument_list>(<argument><expr><call><name>sqliterkBtreeGetType</name><argument_list>(<argument><expr><name>subbtree</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
            <if_stmt><if>if <condition>(<expr><name>subbtree</name></expr>)</condition> <block>{<block_content>
                <expr_stmt><expr><call><name>sqliterkBtreeClose</name><argument_list>(<argument><expr><name>subbtree</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>int</name></type>
<name>sqliterkNotify_onBeginParsePage</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">//sqliterkOSDebug(SQLITERK_OK, "sqliterkNotify_onBeginParsePage: %d", pageno);</comment>
    <if_stmt><if>if <condition>(<expr><call><name>sqliterkPagerGetStatus</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>sqliterk_status_checking</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>sqliterkPagerSetStatus</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>sqliterk_status_checking</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>sqliterkNotify_onEndParsePage</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>,
                                          <parameter><decl><type><name>sqliterk_btree</name> <modifier>*</modifier></type><name>btree</name></decl></parameter>,
                                          <parameter><decl><type><name>int</name></type> <name>pageno</name></decl></parameter>,
                                          <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>
    <switch>switch <condition>(<expr><name>result</name></expr>)</condition> <block>{<block_content>
        <case>case <expr><name>SQLITERK_OK</name></expr>:</case>
            <expr_stmt><expr><call><name>sqliterkPagerSetStatus</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>sqliterk_status_checked</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SQLITERK_DAMAGED</name></expr>:</case>
            <expr_stmt><expr><call><name>sqliterkPagerSetStatus</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>sqliterk_status_damaged</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <case>case <expr><name>SQLITERK_CANCELLED</name></expr>:</case>
            <expr_stmt><expr><call><name>sqliterkOSDebug</name><argument_list>(<argument><expr><name>SQLITERK_CANCELLED</name></expr></argument>, <argument><expr><literal type="string">"Cancelled parsing page %d."</literal></expr></argument>,
                            <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
        <default>default:</default>
            <expr_stmt><expr><call><name>sqliterkOSWarning</name><argument_list>(<argument><expr><name>SQLITERK_MISUSE</name></expr></argument>,
                              <argument><expr><literal type="string">"Cannot parse page %d. Invalid type."</literal></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqliterkPagerSetStatus</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>, <argument><expr><name>sqliterk_status_invalid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
    </block_content>}</block></switch>
    <comment type="line">//sqliterkOSDebug(result, "sqliterkNotify_onEndParsePage: %d", pageno);</comment>
    <if_stmt><if>if <condition>(<expr><name><name>rk</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>didParsePage</name></name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name><name>rk</name><operator>-&gt;</operator><name>notify</name><operator>.</operator><name>didParsePage</name></name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><name>pageno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkSetNotify</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>sqliterk_notify</name></type> <name>notify</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>rk</name><operator>-&gt;</operator><name>notify</name></name> <operator>=</operator> <name>notify</name></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkSetUserInfo</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>userInfo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>SQLITERK_MISUSE</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><name><name>rk</name><operator>-&gt;</operator><name>userInfo</name></name> <operator>=</operator> <name>userInfo</name></expr>;</expr_stmt>
    <return>return <expr><name>SQLITERK_OK</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>void</name> <modifier>*</modifier></type><name>sqliterkGetUserInfo</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><name>NULL</name></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><name><name>rk</name><operator>-&gt;</operator><name>userInfo</name></name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkGetParsedPageCount</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>sqliterkPagerGetParsedPageCount</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkGetValidPageCount</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>sqliterkPagerGetValidPageCount</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqliterkGetPageCount</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>sqliterkPagerGetPageCount</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type> <name>sqliterkGetIntegrity</name><parameter_list>(<parameter><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>rk</name></expr>)</condition> <block>{<block_content>
        <return>return <expr><literal type="number">0</literal></expr>;</return>
    </block_content>}</block></if></if_stmt>
    <return>return <expr><call><name>sqliterkPagerGetIntegrity</name><argument_list>(<argument><expr><name><name>rk</name><operator>-&gt;</operator><name>pager</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
