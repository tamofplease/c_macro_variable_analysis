<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/fts/mm_cipher.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mm_fts.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;icucompat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/rc4.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unicode/ucnv.h&gt;</cpp:file></cpp:include>

<typedef>typedef <type><struct>struct <name>mm_cipher_context_t</name> <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>ref_count</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>UConverter</name> <modifier>*</modifier></type><name>cnv</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>uint8_t</name></type> <name><name>key</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
}</block></struct></type> <name>mm_cipher_context_t</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type> <name>do_rc4</name><parameter_list>(<parameter><decl><type><name>mm_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>buf</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>buf_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>RC4_KEY</name></type> <name>rc4_key</name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>RC4_set_key</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc4_key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>, <argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>RC4</name><argument_list>(<argument><expr><operator>&amp;</operator><name>rc4_key</name></expr></argument>, <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator> <name>buf_len</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>,
        <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator> <name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmenc_func</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mm_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>UChar</name> <modifier>*</modifier></type><name>src</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>src_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>dst_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UErrorCode</name></type> <name>status</name> <init>= <expr><name>U_ZERO_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>arg_type</name></decl>;</decl_stmt>

    <comment type="line">// only accept 1 argument.</comment>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_misuse</name>;</goto></block_content></block></if></if_stmt>

    <comment type="line">// encoding BLOB data type is not supported.</comment>
    <expr_stmt><expr><name>arg_type</name> <operator>=</operator> <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>arg_type</name> <operator>==</operator> <name>SQLITE_BLOB</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_misuse</name>;</goto></block_content></block></if></if_stmt>

    <comment type="line">// for data types other than TEXT, just return them.</comment>
    <if_stmt><if>if <condition>(<expr><name>arg_type</name> <operator>!=</operator> <name>SQLITE_TEXT</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_result_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>mm_cipher_context_t</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>src_len</name> <operator>=</operator> <call><name>sqlite3_value_bytes16</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr>;</expr_stmt>
    <expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>UChar</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_value_text16</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// transform input string to BOCU-1 encoding.</comment>
    <comment type="line">// try stack buffer first, if it doesn't fit, malloc a new buffer.</comment>
    <expr_stmt><expr><name>dst_len</name> <operator>=</operator>
        <call><name>ucnv_fromUChars</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cnv</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>U_BUFFER_OVERFLOW_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>U_ZERO_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>dst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dst_len</name> <operator>=</operator>
            <call><name>ucnv_fromUChars</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cnv</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>U_FAILURE</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <name>U_STRING_NOT_TERMINATED_WARNING</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_mm_set_last_error</name><argument_list>(
            <argument><expr><literal type="string">"Failed transforming text to internal encoding."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// encrypt transformed BOCU-1 string.</comment>
    <expr_stmt><expr><call><name>do_rc4</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// return</comment>
    <expr_stmt><expr><call><name>sqlite3_result_blob</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return;</return>

<label><name>error_error</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>

<label><name>error_misuse</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_MISUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mmdec_func</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mm_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>src_buf</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>src</name> <init>= <expr><name>src_buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>src_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UChar</name></type> <name><name>buf</name><index>[<expr><literal type="number">512</literal></expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UChar</name> <modifier>*</modifier></type><name>dst</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int32_t</name></type> <name>dst_len</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>UErrorCode</name></type> <name>status</name> <init>= <expr><name>U_ZERO_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>arg_type</name></decl>;</decl_stmt>

    <comment type="line">// only accept 1 argument.</comment>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_misuse</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>arg_type</name> <operator>=</operator> <call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// for data types other than BLOB, just return them.</comment>
    <if_stmt><if>if <condition>(<expr><name>arg_type</name> <operator>!=</operator> <name>SQLITE_BLOB</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_result_value</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return;</return>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>mm_cipher_context_t</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>src_len</name> <operator>=</operator> <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>src_len</name> <operator>&gt;</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>src_buf</name></expr></argument>)</argument_list></sizeof></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>src</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>src</name></expr>)</condition><block type="pseudo"><block_content>
            <goto>goto <name>error_error</name>;</goto></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>src</name></expr></argument>, <argument><expr><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// decrypt transformed BOCU-1 string.</comment>
    <expr_stmt><expr><call><name>do_rc4</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// transform input string from BOCU-1 encoding.</comment>
    <comment type="line">// try stack buffer first, if it doesn't fit, malloc a new buffer.</comment>
    <expr_stmt><expr><name>dst_len</name> <operator>=</operator> <call><name>ucnv_toUChars</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cnv</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>status</name> <operator>==</operator> <name>U_BUFFER_OVERFLOW_ERROR</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><name>status</name> <operator>=</operator> <name>U_ZERO_ERROR</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>dst</name> <operator>=</operator> <operator>(</operator><name>UChar</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>dst_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UChar</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>dst_len</name> <operator>=</operator> <call><name>ucnv_toUChars</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cnv</name></name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>src_len</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>U_FAILURE</name><argument_list>(<argument><expr><name>status</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>status</name> <operator>!=</operator> <name>U_STRING_NOT_TERMINATED_WARNING</name></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>sqlite3_mm_set_last_error</name><argument_list>(
            <argument><expr><literal type="string">"Failed transforming text from internal encoding."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>error_error</name>;</goto>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// return</comment>
    <expr_stmt><expr><call><name>sqlite3_result_text16</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>dst</name></expr></argument>, <argument><expr><name>dst_len</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><name>UChar</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>src_buf</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return;</return>

<label><name>error_error</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>src_buf</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>

<label><name>error_misuse</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>src</name> <operator>!=</operator> <name>src_buf</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>src</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><name>dst</name> <operator>!=</operator> <name>buf</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>dst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_MISUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>mm_cipher_key_func</name><parameter_list>(<parameter><decl><type><name>sqlite3_context</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>sqlite3_value</name> <modifier>*</modifier><modifier>*</modifier></type><name>argv</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mm_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

    <comment type="line">// only accept 1 BLOB argument.</comment>
    <if_stmt><if>if <condition>(<expr><name>argc</name> <operator>!=</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_misuse</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>SQLITE_BLOB</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_misuse</name>;</goto></block_content></block></if></if_stmt>
    <if_stmt><if>if <condition>(<expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">16</literal></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error_misuse</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <operator>(</operator><name>mm_cipher_context_t</name> <operator>*</operator><operator>)</operator> <call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>sqlite3_result_null</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>

<label><name>error_misuse</name>:</label>
    <expr_stmt><expr><call><name>sqlite3_result_error_code</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_MISUSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>mm_func_destroy</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>mm_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><operator>(</operator><name>mm_cipher_context_t</name> <operator>*</operator><operator>)</operator> <name>ptr</name></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><operator>--</operator><name><name>ctx</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition> <block>{<block_content>
        <expr_stmt><expr><call><name>ucnv_close</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>cnv</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3_register_mm_cipher</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>char</name> <modifier>*</modifier></type><name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>UErrorCode</name></type> <name>status</name> <init>= <expr><name>U_ZERO_ERROR</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>sqlite_err</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>mm_cipher_context_t</name> <modifier>*</modifier></type><name>ctx</name></decl>;</decl_stmt>

    <comment type="line">// XXX: if we failed to load ICU functions, just skip initializing.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ucnv_openCCSID</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>SQLITE_OK</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>ctx</name> <operator>=</operator> <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_cipher_context_t</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>sqlite_err</name> <operator>=</operator> <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <comment type="line">// open converter using CCSID instead of converter name to hide "BOCU-1" string.</comment>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>cnv</name></name> <operator>=</operator> <call><name>ucnv_openCCSID</name><argument_list>(<argument><expr><literal type="number">1214</literal></expr></argument>, <argument><expr><name>UCNV_IBM</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>status</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>ctx</name><operator>-&gt;</operator><name>cnv</name></name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name><name>ctx</name><operator>-&gt;</operator><name>key</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><literal type="number">16</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>ctx</name><operator>-&gt;</operator><name>ref_count</name></name> <operator>=</operator> <literal type="number">3</literal></expr>;</expr_stmt>

    <expr_stmt><expr><name>sqlite_err</name> <operator>=</operator>
        <call><name>sqlite3_create_function_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"mmenc"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mmenc_func</name></expr></argument>,
                                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mm_func_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sqlite_err</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>sqlite_err</name> <operator>=</operator>
        <call><name>sqlite3_create_function_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"mmdec"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>, <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mmdec_func</name></expr></argument>,
                                   <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>mm_func_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sqlite_err</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

    <expr_stmt><expr><name>sqlite_err</name> <operator>=</operator> <call><name>sqlite3_create_function_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"mm_cipher_key"</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>,
                                            <argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>mm_cipher_key_func</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>,
                                            <argument><expr><name>mm_func_destroy</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if_stmt><if>if <condition>(<expr><name>sqlite_err</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <goto>goto <name>error</name>;</goto></block_content></block></if></if_stmt>

    <return>return <expr><name>SQLITE_OK</name></expr>;</return>

<label><name>error</name>:</label>
    <if_stmt><if>if <condition>(<expr><name>ctx</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    <return>return <expr><name>sqlite_err</name></expr>;</return>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>sqlite3_mm_set_cipher_key</name><parameter_list>(<parameter><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>void</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>key_len</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>sqlite3_stmt</name> <modifier>*</modifier></type><name>stmt</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ret</name> <init>=
        <expr><call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="string">"SELECT mm_cipher_key(?)"</literal></expr></argument>, <argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>stmt</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><name>ret</name></expr>;</return></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_step</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>stmt</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
