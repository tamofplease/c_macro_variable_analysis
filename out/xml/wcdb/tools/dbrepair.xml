<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/tools/dbrepair.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;SQLiteRepairKit.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>

<decl_stmt><decl><type><specifier>static</specifier> <name>char</name></type> <name>g_verbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>g_in_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>g_out_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>g_out_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>g_save_master</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>g_load_master</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>sqliterk_cipher_conf</name></type> <name>g_cipher_conf</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier><modifier>*</modifier></type><name>g_filter</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>g_num_filter</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>size_t</name></type> <name>g_filter_capacity</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sqlcipher_set_default_kdf_iter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sqlcipher_set_default_use_hmac</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>use</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sqlcipher_set_default_pagesize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_size</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sqlcipher_set_default_hmac_algorithm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>int</name></type> <name>sqlcipher_set_default_kdf_algorithm</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>algorithm</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>g_options</name><index>[]</index></name> <init>=
<expr><block>{
    <expr><block>{<expr><literal type="string">"help"</literal></expr>,            <expr><name>no_argument</name></expr>,        <expr><name>NULL</name></expr>, <expr><literal type="char">'h'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"verbose"</literal></expr>,			<expr><name>no_argument</name></expr>,		<expr><name>NULL</name></expr>, <expr><literal type="char">'v'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"output"</literal></expr>,			<expr><name>required_argument</name></expr>, 	<expr><name>NULL</name></expr>, <expr><literal type="char">'o'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"out-key"</literal></expr>,			<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="char">'K'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"in-key"</literal></expr>,			<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="char">'k'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"version"</literal></expr>,			<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="number">0x100</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"page-size"</literal></expr>,		<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="number">0x101</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"save-master"</literal></expr>,		<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="char">'M'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"load-master"</literal></expr>,		<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="char">'m'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"filter"</literal></expr>,			<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="char">'f'</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"USAGE:\n"</literal>
		<literal type="string">"  %1$s --output=&lt;output_path&gt; [OPTIONS] &lt;db_path&gt;\n"</literal>
		<literal type="string">"  %1$s --save-master=&lt;master_path&gt; [OPTIONS] &lt;db_path&gt;\n"</literal></expr></argument>,
		<argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>puts</name><argument_list>(<argument><expr><literal type="string">"\n"</literal>
	<literal type="string">"OUTPUT OPTIONS:\n"</literal>
	<literal type="string">"  -o, --output=&lt;path&gt;        Output recovered data to new SQLite database.\n"</literal>
	<literal type="string">"  -m, --load-master=&lt;path&gt;   Load previously saved master info from &lt;path&gt;.\n"</literal>
	<literal type="string">"  -M, --save-master=&lt;path&gt;   Save master info and do no recover.\n"</literal>
	<literal type="string">"                             &lt;db_path&gt; should be database that's not corrupted.\n"</literal>
	<literal type="string">"  -f, --filter=&lt;table&gt;       Add &lt;table&gt; to the filter. If one or more table is in the\n"</literal>
	<literal type="string">"                             filter, only filtered tables is read and recovered.\n"</literal>
	<literal type="string">"\n"</literal>
	<literal type="string">"CIPHER OPTIONS:\n"</literal>
	<literal type="string">"  -k, --in-key=&lt;key&gt;         Specify the input key used to read database in &lt;db_path&gt;.\n"</literal>
	<literal type="string">"  -K, --out-key=&lt;key&gt;        Specify the output key used to write '--output' database.\n"</literal>
	<literal type="string">"      --page-size=&lt;size&gt;     Specify page size of the encrypted input database.\n"</literal>
	<literal type="string">"      --version=&lt;1|2|3&gt;      Use SQLCipher format version 1.x, 2.x or 3.x.\n"</literal>
	<literal type="string">"\n"</literal>
    <literal type="string">"MISCELLANEOUS OPTIONS:\n"</literal>
    <literal type="string">"  -h, --help                 Show this help message and exit.\n"</literal>
    <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_log</name><parameter_list>(<parameter><decl><type><name>sqliterk_loglevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>int</name></type> <name>result</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name><modifier>*</modifier></type> <name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name> <specifier>inline</specifier></type> <name>LOGI</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>print_log</name><argument_list>(<argument><expr><name>sqliterk_loglevel_info</name></expr></argument>, <argument><expr><name>SQLITERK_OK</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

	<comment type="line">// default to SQLCipher version 1, for compatibility to KKDB.</comment>
	<expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlcipher_set_default_hmac_algorithm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlcipher_set_default_kdf_algorithm</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><name><name>g_cipher_conf</name><operator>.</operator><name>use_hmac</name></name> <operator>=</operator> <operator>-</operator><literal type="number">1</literal></expr>;</expr_stmt>

	<comment type="line">// parse options</comment>
	<expr_stmt><expr><name>optind</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"hvo:K:k:M:m:"</literal></expr></argument>, <argument><expr><name>g_options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>opt</name></expr>)</condition>
		<block>{<block_content>
        <case>case <expr><literal type="char">'h'</literal></expr>:</case>   <comment type="line">// help</comment>
            <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <break>break;</break>
		<case>case <expr><literal type="char">'v'</literal></expr>:</case>	<comment type="line">// verbose</comment>
			<expr_stmt><expr><name>g_verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'o'</literal></expr>:</case>	<comment type="line">// output</comment>
			<expr_stmt><expr><name>g_out_path</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'K'</literal></expr>:</case>	<comment type="line">// out-key</comment>
			<expr_stmt><expr><name>g_out_key</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'k'</literal></expr>:</case>	<comment type="line">// in-key</comment>
			<expr_stmt><expr><name><name>g_cipher_conf</name><operator>.</operator><name>key</name></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>g_cipher_conf</name><operator>.</operator><name>key_len</name></name> <operator>=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>	<comment type="line">// filter</comment>
			<if_stmt><if>if <condition>(<expr><name>g_num_filter</name> <operator>==</operator> <name>g_filter_capacity</name></expr>)</condition>
			<block>{<block_content>
				<decl_stmt><decl><type><name>size_t</name></type> <name>sz</name> <init>= <expr><ternary><condition><expr><name>g_filter_capacity</name></expr> ?</condition><then> <expr><name>g_filter_capacity</name> <operator>*</operator> <literal type="number">2</literal></expr> </then><else>: <expr><literal type="number">64</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>ptr</name> <init>= <expr><call><name>realloc</name><argument_list>(<argument><expr><name>g_filter</name></expr></argument>, <argument><expr><name>sz</name> <operator>*</operator> <sizeof>sizeof<argument_list>(<argument><expr><specifier>const</specifier> <name>char</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
				<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ptr</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">5</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
				<expr_stmt><expr><name>g_filter</name> <operator>=</operator> <operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>*</operator><operator>)</operator> <name>ptr</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>g_filter_capacity</name> <operator>=</operator> <name>sz</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><name><name>g_filter</name><index>[<expr><name>g_num_filter</name><operator>++</operator></expr>]</index></name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'M'</literal></expr>:</case>	<comment type="line">// save-master</comment>
			<expr_stmt><expr><name>g_save_master</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'m'</literal></expr>:</case>	<comment type="line">// load-master</comment>
			<expr_stmt><expr><name>g_load_master</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x100</literal></expr>:</case>	<comment type="line">// version</comment>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">64000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"Version must be 1, 2 or 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x101</literal></expr>:</case>	<comment type="line">// page-size</comment>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="number">512</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">1024</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">2048</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">4096</literal> <operator>&amp;&amp;</operator>
					<name>value</name> <operator>!=</operator> <literal type="number">8192</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">16384</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">32768</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">65536</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"Page size must be 512, 1024, 2048, ..., or 65536"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
            <expr_stmt><expr><call><name>sqlcipher_set_default_pagesize</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
        <default>default:</default>    <comment type="line">// ?</comment>
            <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></while>
	
	<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>!=</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 	<comment type="line">// no database path</comment>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>g_in_path</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>g_save_master</name> <operator>&amp;&amp;</operator> <operator>(</operator><name>g_load_master</name> <operator>||</operator> <name>g_out_path</name><operator>)</operator></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"--save-master must be used without --load-master or --output."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>

	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_out_path</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>g_save_master</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>LOGI</name><argument_list>(<argument><expr><literal type="string">"Output path must be specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<decl_stmt><decl><type><specifier>static</specifier> <name>uint8_t</name></type> <name><name>MASTER_KEY</name><index>[]</index></name> <init>= <expr><block>{ <expr><literal type="number">0xdc</literal></expr>, <expr><literal type="number">0x1c</literal></expr>, <expr><literal type="number">0xbb</literal></expr>, <expr><literal type="number">0x92</literal></expr>, <expr><literal type="number">0xa1</literal></expr>, <expr><literal type="number">0xb1</literal></expr>, <expr><literal type="number">0xcb</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, 
	<expr><literal type="number">0x06</literal></expr>, <expr><literal type="number">0x5b</literal></expr>, <expr><literal type="number">0xf0</literal></expr>, <expr><literal type="number">0x5e</literal></expr>, <expr><literal type="number">0x05</literal></expr>, <expr><literal type="number">0x0e</literal></expr>, <expr><literal type="number">0xd9</literal></expr>, <expr><literal type="number">0x36</literal></expr> }</block></expr></init></decl>;</decl_stmt>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqliterk</name> <modifier>*</modifier></type><name>rk</name></decl>;</decl_stmt>
	
    <decl_stmt><decl><type><name>sqliterk_os</name></type> <name>reg</name> <init>= <expr><block>{ <expr><name>print_log</name></expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqliterk_register</name><argument_list>(<argument><expr><name>reg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

	<expr_stmt><expr><call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>g_save_master</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><name>g_in_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name><name>g_cipher_conf</name><operator>.</operator><name>key</name></name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sqlite3_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>g_cipher_conf</name><operator>.</operator><name>key</name></name></expr></argument>, <argument><expr><name><name>g_cipher_conf</name><operator>.</operator><name>key_len</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<decl_stmt><decl><type><name>int</name></type> <name>out_key_len</name> <init>= <expr><ternary><condition><expr><name>g_out_key</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>g_out_key</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqliterk_save_master</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>g_save_master</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		
		<expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>SQLITERK_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">4</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></if>
	<else>else
	<block>{<block_content>
		<decl_stmt><decl><type><name>sqliterk_master_info</name> <modifier>*</modifier></type><name>master</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>salt</name><index>[<expr><literal type="number">16</literal></expr>]</index></name></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>g_load_master</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqliterk_load_master</name><argument_list>(<argument><expr><name>g_load_master</name></expr></argument>, <argument><expr><name>MASTER_KEY</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>MASTER_KEY</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><name>g_filter</name></expr></argument>, <argument><expr><name>g_num_filter</name></expr></argument>,
				<argument><expr><operator>&amp;</operator><name>master</name></expr></argument>, <argument><expr><name>salt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name><name>g_cipher_conf</name><operator>.</operator><name>kdf_salt</name></name> <operator>=</operator> <name>salt</name></expr>;</expr_stmt>
		</block_content>}</block></if>
		<else>else<block type="pseudo"><block_content>
			<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqliterk_make_master</name><argument_list>(<argument><expr><name>g_filter</name></expr></argument>, <argument><expr><name>g_num_filter</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">6</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqliterk_open</name><argument_list>(<argument><expr><name>g_in_path</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>g_cipher_conf</name><operator>.</operator><name>key</name></name></expr> ?</condition><then> <expr><operator>&amp;</operator><name>g_cipher_conf</name></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></argument>, <argument><expr><operator>&amp;</operator><name>rk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITERK_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><name>g_out_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
		<if_stmt><if>if <condition>(<expr><name>g_out_key</name></expr>)</condition><block type="pseudo"><block_content>
			<expr_stmt><expr><call><name>sqlite3_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>g_out_key</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>g_out_key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqliterk_output</name><argument_list>(<argument><expr><name>rk</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>master</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>sqliterk_free_master</name><argument_list>(<argument><expr><name>master</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>sqliterk_close</name><argument_list>(<argument><expr><name>rk</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>g_filter</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr><ternary><condition><expr><operator>(</operator><name>ret</name> <operator>==</operator> <name>SQLITERK_OK</name><operator>)</operator></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><operator>-</operator><literal type="number">4</literal></expr></else></ternary></expr>;</return>
	</block_content>}</block></else></if_stmt>
</block_content>}</block></function>
</unit>
