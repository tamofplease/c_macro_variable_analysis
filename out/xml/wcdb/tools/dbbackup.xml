<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/wcdb/tools/dbbackup.c"><comment type="block">/*
 * Tencent is pleased to support the open source community by making
 * WCDB available.
 *
 * Copyright (C) 2017 THL A29 Limited, a Tencent company.
 * All rights reserved.
 *
 * Licensed under the BSD 3-Clause License (the "License"); you may not use
 * this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 *       https://opensource.org/licenses/BSD-3-Clause
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */</comment>
 
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sqlite3.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"../mm_backup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;getopt.h&gt;</cpp:file></cpp:include>


<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBBAK_OP_BACKUP</name></cpp:macro>		<cpp:value>1</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DBBAK_OP_RECOVER</name></cpp:macro>	<cpp:value>2</cpp:value></cpp:define>

<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_verbose</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_operation</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>uint32_t</name></type> <name>g_flags</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>g_db_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>g_dump_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>g_key</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name> <modifier>*</modifier></type><name>g_dbkey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>g_tabdesc_path</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>char</name> <modifier>*</modifier></type><name>g_tabdesc_buffer</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>mm_backup_tabdesc</name> <modifier>*</modifier></type><name>g_tabdesc</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><specifier>static</specifier> <name>int</name></type> <name>g_num_tabdesc</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>


<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sqlcipher_set_default_kdf_iter</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>iter</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sqlcipher_set_default_use_hmac</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>use</name></decl></parameter>)</parameter_list>;</function_decl>
<function_decl><type><specifier>extern</specifier> <name>void</name></type> <name>sqlcipher_set_default_pagesize</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>page_size</name></decl></parameter>)</parameter_list>;</function_decl>


<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name><name>struct</name> <name>option</name></name></type> <name><name>g_options</name><index>[]</index></name> <init>=
<expr><block>{
	<expr><block>{<expr><literal type="string">"verbose"</literal></expr>,			<expr><name>no_argument</name></expr>,		<expr><name>NULL</name></expr>, <expr><literal type="char">'v'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"compress"</literal></expr>,		<expr><name>no_argument</name></expr>,		<expr><name>NULL</name></expr>, <expr><literal type="char">'z'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"no-compress"</literal></expr>,		<expr><name>no_argument</name></expr>,		<expr><name>NULL</name></expr>, <expr><literal type="char">'Z'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"fix"</literal></expr>,				<expr><name>no_argument</name></expr>, 		<expr><name>NULL</name></expr>, <expr><literal type="char">'f'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"no-fix"</literal></expr>,			<expr><name>no_argument</name></expr>,		<expr><name>NULL</name></expr>, <expr><literal type="char">'F'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"create-table"</literal></expr>,	    <expr><name>no_argument</name></expr>, 		<expr><name>NULL</name></expr>, <expr><literal type="char">'t'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"no-create-table"</literal></expr>,	<expr><name>no_argument</name></expr>, 		<expr><name>NULL</name></expr>, <expr><literal type="char">'T'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"incremental"</literal></expr>,		<expr><name>no_argument</name></expr>, 		<expr><name>NULL</name></expr>, <expr><literal type="char">'i'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"output"</literal></expr>,			<expr><name>required_argument</name></expr>, 	<expr><name>NULL</name></expr>, <expr><literal type="char">'o'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"tabdesc"</literal></expr>,			<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="char">'d'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"dbkey"</literal></expr>,			<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="char">'K'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"key"</literal></expr>,				<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="char">'k'</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"version"</literal></expr>,			<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="number">0x100</literal></expr>}</block></expr>,
	<expr><block>{<expr><literal type="string">"page-size"</literal></expr>,		<expr><name>required_argument</name></expr>,	<expr><name>NULL</name></expr>, <expr><literal type="number">0x101</literal></expr>}</block></expr>,
}</block></expr></init></decl>;</decl_stmt>


<function><type><specifier>static</specifier> <name>void</name></type> <name>usage</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>argv0</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><literal type="string">"USAGE: %s &lt;backup|recover&gt; &lt;db_path&gt; &lt;dump_path&gt; &lt;passwd&gt; [encrypt]\n"</literal></expr></argument>,
			<argument><expr><name>argv0</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>print_log</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>prio</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>msg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<expr_stmt><expr><call><name>fputs</name><argument_list>(<argument><expr><name>msg</name></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>fputc</name><argument_list>(<argument><expr><literal type="char">'\n'</literal></expr></argument>, <argument><expr><name>stderr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_options</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>opt</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
	
	<comment type="line">// parse operation</comment>
	<if_stmt><if>if <condition>(<expr><name>argc</name> <operator>&lt;</operator> <literal type="number">2</literal></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>opstr</name> <init>= <expr><name><name>argv</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">"backup"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>g_operation</name> <operator>=</operator> <name>DBBAK_OP_BACKUP</name></expr>;</expr_stmt></block_content></block></if>
	<if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strcmp</name><argument_list>(<argument><expr><name>opstr</name></expr></argument>, <argument><expr><literal type="string">"recover"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>g_operation</name> <operator>=</operator> <name>DBBAK_OP_RECOVER</name></expr>;</expr_stmt></block_content></block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

	<comment type="line">// default to SQLCipher version 1, thanks to kkdb.</comment>
	<expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="line">// parse options</comment>
	<expr_stmt><expr><name>optind</name> <operator>=</operator> <literal type="number">2</literal></expr>;</expr_stmt>
	<while>while <condition>(<expr><operator>(</operator><name>opt</name> <operator>=</operator> <call><name>getopt_long</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>, <argument><expr><literal type="string">"vzZfFtTio:d:K:k:"</literal></expr></argument>, <argument><expr><name>g_options</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
	<block>{<block_content>
		<switch>switch <condition>(<expr><name>opt</name></expr>)</condition>
		<block>{<block_content>
		<case>case <expr><literal type="char">'v'</literal></expr>:</case>	<comment type="line">// verbose</comment>
			<expr_stmt><expr><name>g_verbose</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'z'</literal></expr>:</case>	<comment type="line">// compress</comment>
			<expr_stmt><expr><name>g_flags</name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>MMBAK_FLAG_NO_COMPRESS</name><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'Z'</literal></expr>:</case>	<comment type="line">// no-compress</comment>
			<expr_stmt><expr><name>g_flags</name> <operator>|=</operator> <name>MMBAK_FLAG_NO_COMPRESS</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'f'</literal></expr>:</case>	<comment type="line">// fix</comment>
			<expr_stmt><expr><name>g_flags</name> <operator>|=</operator> <name>MMBAK_FLAG_FIX_CORRUPTION</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'F'</literal></expr>:</case>	<comment type="line">// no-fix</comment>
			<expr_stmt><expr><name>g_flags</name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>MMBAK_FLAG_FIX_CORRUPTION</name><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'t'</literal></expr>:</case>	<comment type="line">// create-table</comment>
			<expr_stmt><expr><name>g_flags</name> <operator>&amp;=</operator> <operator>(</operator><operator>~</operator><name>MMBAK_FLAG_NO_CREATE_TABLE</name><operator>)</operator></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'T'</literal></expr>:</case>	<comment type="line">// no-create-table</comment>
			<expr_stmt><expr><name>g_flags</name> <operator>|=</operator> <name>MMBAK_FLAG_NO_CREATE_TABLE</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'i'</literal></expr>:</case>	<comment type="line">// incremental</comment>
			<expr_stmt><expr><name>g_flags</name> <operator>|=</operator> <name>MMBAK_FLAG_INCREMENTAL</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'o'</literal></expr>:</case>	<comment type="line">// output</comment>
			<expr_stmt><expr><name>g_dump_path</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'d'</literal></expr>:</case>	<comment type="line">// tabdesc</comment>
			<expr_stmt><expr><name>g_tabdesc_path</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'K'</literal></expr>:</case>	<comment type="line">// dbkey</comment>
			<expr_stmt><expr><name>g_dbkey</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="char">'k'</literal></expr>:</case>	<comment type="line">// key</comment>
			<expr_stmt><expr><name>g_key</name> <operator>=</operator> <name>optarg</name></expr>;</expr_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x100</literal></expr>:</case>	<comment type="line">// version</comment>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">1</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">2</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">4000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<if type="elseif">else if <condition>(<expr><name>value</name> <operator>==</operator> <literal type="number">3</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>sqlcipher_set_default_kdf_iter</name><argument_list>(<argument><expr><literal type="number">64000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>sqlcipher_set_default_use_hmac</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if>
			<else>else
			<block>{<block_content>
				<expr_stmt><expr><call><name>print_log</name><argument_list>(<argument><expr><name>MMBAK_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Version must be 1, 2 or 3"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></else></if_stmt>
			<break>break;</break>
		<case>case <expr><literal type="number">0x101</literal></expr>:</case>	<comment type="line">// page-size</comment>
			<expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>atoi</name><argument_list>(<argument><expr><name>optarg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <literal type="number">512</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">1024</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">2048</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">4096</literal> <operator>&amp;&amp;</operator>
					<name>value</name> <operator>!=</operator> <literal type="number">8192</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">16384</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">32768</literal> <operator>&amp;&amp;</operator> <name>value</name> <operator>!=</operator> <literal type="number">65536</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><call><name>print_log</name><argument_list>(<argument><expr><name>MMBAK_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Page size must be 512, 1024, 2048, ..., 65536"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><operator>-</operator><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
			<expr_stmt><expr><call><name>sqlcipher_set_default_pagesize</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		<default>default:</default>	<comment type="line">// ?</comment>
			<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		</block_content>}</block></switch>
	</block_content>}</block></while>
	
	<if_stmt><if>if <condition>(<expr><name>optind</name> <operator>!=</operator> <name>argc</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content> 	<comment type="line">// no database path</comment>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><name>g_db_path</name> <operator>=</operator> <name><name>argv</name><index>[<expr><name>optind</name><operator>++</operator></expr>]</index></name></expr>;</expr_stmt>
	
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_dump_path</name></expr>)</condition>
	<block>{<block_content>
		<expr_stmt><expr><call><name>print_log</name><argument_list>(<argument><expr><name>MMBAK_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Output path must be specified."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>g_key</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><name>g_flags</name> <operator>|=</operator> <name>MMBAK_FLAG_NO_CIPHER</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>parse_tabdesc</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>path</name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>FILE</name> <modifier>*</modifier></type><name>fp</name> <init>= <expr><call><name>fopen</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"r"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
	
	<comment type="line">// get file length</comment>
	<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_END</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<decl_stmt><decl><type><name>long</name></type> <name>file_len</name> <init>= <expr><call><name>ftell</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><call><name>fseek</name><argument_list>(<argument><expr><name>fp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>SEEK_SET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<comment type="line">// read whole file into buffer</comment>
	<expr_stmt><expr><name>g_tabdesc_buffer</name> <operator>=</operator> <operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator> <call><name>malloc</name><argument_list>(<argument><expr><name>file_len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_tabdesc_buffer</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
	<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>p</name> <init>= <expr><name>g_tabdesc_buffer</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>count</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
	<while>while <condition>(<expr><operator>!</operator><call><name>feof</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>ferror</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>p</name> <operator>-</operator> <name>g_tabdesc_buffer</name> <operator>&lt;</operator> <name>file_len</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>char</name> <modifier>*</modifier></type><name>ret</name> <init>= <expr><call><name>fgets</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>g_tabdesc_buffer</name> <operator>+</operator> <name>file_len</name> <operator>-</operator> <name>p</name></expr></argument>, <argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name></expr>)</condition>
		<block>{<block_content>
			<expr_stmt><expr><name>count</name><operator>++</operator></expr>;</expr_stmt>
			<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
			<while>while <condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>)</condition>
			<block>{<block_content>
				<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'\n'</literal></expr>)</condition>
				<block>{<block_content>
					<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
					<break>break;</break>
				</block_content>}</block></if></if_stmt>
			</block_content>}</block></while>
		</block_content>}</block></if></if_stmt>
	</block_content>}</block></while>
	<expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>fp</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
	
	<comment type="line">// translate strings to tabdesc</comment>
	<expr_stmt><expr><name>g_tabdesc</name> <operator>=</operator> <operator>(</operator><name>mm_backup_tabdesc</name> <operator>*</operator><operator>)</operator> <call><name>calloc</name><argument_list>(<argument><expr><name>count</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>mm_backup_tabdesc</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><operator>!</operator><name>g_tabdesc</name></expr>)</condition><block type="pseudo"><block_content> <goto>goto <name>bail</name>;</goto></block_content></block></if></if_stmt>
	
	<expr_stmt><expr><name>p</name> <operator>=</operator> <name>g_tabdesc_buffer</name></expr>;</expr_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
	<for>for <control>(<init><expr><name>i</name> <operator>=</operator> <literal type="number">0</literal></expr>;</init> <condition><expr><name>i</name> <operator>&lt;</operator> <name>count</name></expr>;</condition> <incr><expr><name>i</name><operator>++</operator></expr></incr>)</control>
	<block>{<block_content>
		<expr_stmt><expr><name><name>g_tabdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>table</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>c</name></decl>;</decl_stmt>
		<while>while <condition>(<expr><name>c</name> <operator>=</operator> <operator>*</operator><name>p</name><operator>++</operator></expr>)</condition>
		<block>{<block_content>
			<if_stmt><if>if <condition>(<expr><name>c</name> <operator>==</operator> <literal type="char">'|'</literal></expr>)</condition>
			<block>{<block_content>
				<expr_stmt><expr><operator>*</operator><operator>(</operator><name>p</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator> <operator>=</operator> <literal type="char">'\0'</literal></expr>;</expr_stmt>
				<expr_stmt><expr><name><name>g_tabdesc</name><index>[<expr><name>i</name></expr>]</index></name><operator>.</operator><name>condition</name> <operator>=</operator> <name>p</name></expr>;</expr_stmt>
			</block_content>}</block></if></if_stmt>
		</block_content>}</block></while>
	</block_content>}</block></for>
	<expr_stmt><expr><name>g_num_tabdesc</name> <operator>=</operator> <name>count</name></expr>;</expr_stmt>
	<return>return;</return>
		
<label><name>bail</name>:</label>
	<expr_stmt><expr><call><name>print_log</name><argument_list>(<argument><expr><name>MMBAK_LOG_ERROR</name></expr></argument>, <argument><expr><literal type="string">"Cannot parse table descriptor."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>fp</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>fp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	<expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argc</name></decl></parameter>, <parameter><decl><type><name>char</name> <modifier>*</modifier></type><name><name>argv</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
	<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>sqlite3</name> <modifier>*</modifier></type><name>db</name></decl>;</decl_stmt>
	
	<expr_stmt><expr><call><name>parse_options</name><argument_list>(<argument><expr><name>argc</name></expr></argument>, <argument><expr><name>argv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>g_tabdesc_path</name></expr>)</condition><block type="pseudo"><block_content> <expr_stmt><expr><call><name>parse_tabdesc</name><argument_list>(<argument><expr><name>g_tabdesc_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<decl_stmt><decl><type><name>int</name></type> <name>key_len</name> <init>= <expr><ternary><condition><expr><name>g_key</name></expr> ?</condition><then> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>g_key</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>
	
	<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>sqlite3_open</name><argument_list>(<argument><expr><name>g_db_path</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <name>SQLITE_OK</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">3</literal></expr>;</return></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>g_dbkey</name></expr>)</condition><block type="pseudo"><block_content>
		<expr_stmt><expr><call><name>sqlite3_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>g_dbkey</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>g_dbkey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
	
	<if_stmt><if>if <condition>(<expr><name>g_operation</name> <operator>==</operator> <name>DBBAK_OP_BACKUP</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>mm_backup_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mm_backup_init</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>g_key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>g_dump_path</name></expr></argument>,
				<argument><expr><name>g_flags</name></expr></argument>, <argument><expr><name>print_log</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mm_backup_run</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>g_tabdesc</name></expr></argument>, <argument><expr><name>g_num_tabdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><call><name>mm_backup_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<if type="elseif">else if <condition>(<expr><name>g_operation</name> <operator>==</operator> <name>DBBAK_OP_RECOVER</name></expr>)</condition>
	<block>{<block_content>
		<decl_stmt><decl><type><name>mm_recover_ctx</name> <modifier>*</modifier></type><name>ctx</name> <init>= <expr><call><name>mm_recover_init</name><argument_list>(<argument><expr><name>g_dump_path</name></expr></argument>, <argument><expr><operator>(</operator><specifier>const</specifier> <name>uint8_t</name> <operator>*</operator><operator>)</operator> <name>g_key</name></expr></argument>, <argument><expr><name>key_len</name></expr></argument>, <argument><expr><name>print_log</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<if_stmt><if>if <condition>(<expr><operator>!</operator><name>ctx</name></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">2</literal></expr>;</return></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><name>ret</name> <operator>=</operator> <call><name>mm_recover_run</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if_stmt><if>if <condition>(<expr><name>ret</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content> <return>return <expr><operator>-</operator><literal type="number">4</literal></expr>;</return></block_content></block></if></if_stmt>
		
		<expr_stmt><expr><call><name>mm_recover_finish</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	</block_content>}</block></if>
	<else>else<block type="pseudo"><block_content> <expr_stmt><expr><call><name>usage</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
	
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>g_tabdesc_buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>g_tabdesc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
	<expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
