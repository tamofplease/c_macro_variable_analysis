<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/storage/azure/storage.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Azure Storage
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/socket/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/regExp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/azure/read.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/azure/storage.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/azure/write.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Azure http headers
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_HEADER_VERSION_STR</name></expr></argument>,                             <argument><expr><literal type="string">"x-ms-version"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_HEADER_VERSION_VALUE_STR</name></expr></argument>,                       <argument><expr><literal type="string">"2019-02-02"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Azure query tokens
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_QUERY_MARKER_STR</name></expr></argument>,                               <argument><expr><literal type="string">"marker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>AZURE_QUERY_COMP_STR</name></expr></argument>,                                 <argument><expr><name>AZURE_QUERY_COMP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_QUERY_DELIMITER_STR</name></expr></argument>,                            <argument><expr><literal type="string">"delimiter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_QUERY_PREFIX_STR</name></expr></argument>,                               <argument><expr><literal type="string">"prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>AZURE_QUERY_RESTYPE_STR</name></expr></argument>,                              <argument><expr><name>AZURE_QUERY_RESTYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_QUERY_SIG_STR</name></expr></argument>,                                  <argument><expr><literal type="string">"sig"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_QUERY_VALUE_LIST_STR</name></expr></argument>,                           <argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>AZURE_QUERY_VALUE_CONTAINER_STR</name></expr></argument>,                      <argument><expr><name>AZURE_QUERY_VALUE_CONTAINER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
XML tags
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_XML_TAG_BLOB_PREFIX_STR</name></expr></argument>,                        <argument><expr><literal type="string">"BlobPrefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_XML_TAG_BLOB_STR</name></expr></argument>,                               <argument><expr><literal type="string">"Blob"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_XML_TAG_BLOBS_STR</name></expr></argument>,                              <argument><expr><literal type="string">"Blobs"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_XML_TAG_CONTENT_LENGTH_STR</name></expr></argument>,                     <argument><expr><literal type="string">"Content-Length"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_XML_TAG_LAST_MODIFIED_STR</name></expr></argument>,                      <argument><expr><literal type="string">"Last-Modified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_XML_TAG_NEXT_MARKER_STR</name></expr></argument>,                        <argument><expr><literal type="string">"NextMarker"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_XML_TAG_NAME_STR</name></expr></argument>,                               <argument><expr><literal type="string">"Name"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>AZURE_XML_TAG_PROPERTIES_STR</name></expr></argument>,                         <argument><expr><literal type="string">"Properties"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>StorageAzure</name>
<block>{
    <expr_stmt><expr><name>STORAGE_COMMON_MEMBER</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>HttpClient</name> <modifier>*</modifier></type><name>httpClient</name></decl>;</decl_stmt>                                         <comment type="line">// Http client to service requests</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>headerRedactList</name></decl>;</decl_stmt>                                   <comment type="line">// List of headers to redact from logging</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>queryRedactList</name></decl>;</decl_stmt>                                    <comment type="line">// List of query keys to redact from logging</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>container</name></decl>;</decl_stmt>                                        <comment type="line">// Container to store data in</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>account</name></decl>;</decl_stmt>                                          <comment type="line">// Account</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>sharedKey</name></decl>;</decl_stmt>                                        <comment type="line">// Shared key</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>HttpQuery</name> <modifier>*</modifier></type><name>sasKey</name></decl>;</decl_stmt>                                        <comment type="line">// SAS key</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>host</name></decl>;</decl_stmt>                                             <comment type="line">// Host name</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>blockSize</name></decl>;</decl_stmt>                                               <comment type="line">// Block size for multi-block upload</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pathPrefix</name></decl>;</decl_stmt>                                       <comment type="line">// Account/container prefix</comment>

    <decl_stmt><decl><type><name>uint64_t</name></type> <name>fileId</name></decl>;</decl_stmt>                                                <comment type="line">// Id to used to make file block identifiers unique</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Generate authorization header and add it to the supplied header list

Based on the documentation at https://docs.microsoft.com/en-us/rest/api/storageservices/authorize-with-shared-key
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageAzureAuth</name><parameter_list>(
    <parameter><decl><type><name>StorageAzure</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>HttpQuery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>dateTime</name></decl></parameter>, <parameter><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>httpHeader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_AZURE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>HTTP_QUERY</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>dateTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>KEY_VALUE</name></expr></argument>, <argument><expr><name>httpHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>verb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dateTime</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>httpHeader</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Host header is required for both types of authentication</comment>
        <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_HOST_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>host</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Shared key authentication</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>sharedKey</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Set required headers</comment>
            <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_DATE_STR</name></expr></argument>, <argument><expr><name>dateTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>AZURE_HEADER_VERSION_STR</name></expr></argument>, <argument><expr><name>AZURE_HEADER_VERSION_VALUE_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Generate canonical headers</comment>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>headerCanonical</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>headerKeyList</name> <init>= <expr><call><name>httpHeaderList</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>headerKeyIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>headerKeyIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>headerKeyList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>headerKeyIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>headerKey</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>headerKeyList</name></expr></argument>, <argument><expr><name>headerKeyIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strBeginsWithZ</name><argument_list>(<argument><expr><name>headerKey</name></expr></argument>, <argument><expr><literal type="string">"x-ms-"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>headerCanonical</name></expr></argument>, <argument><expr><literal type="string">"%s:%s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>headerKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>headerKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <comment type="line">// Generate canonical query</comment>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>queryCanonical</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>query</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>queryKeyList</name> <init>= <expr><call><name>httpQueryList</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strLstEmpty</name><argument_list>(<argument><expr><name>queryKeyList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>queryKeyIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>queryKeyIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>queryKeyList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>queryKeyIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>queryKey</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>queryKeyList</name></expr></argument>, <argument><expr><name>queryKeyIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>queryCanonical</name></expr></argument>, <argument><expr><literal type="string">"\n%s:%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>queryKey</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpQueryGet</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>queryKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Generate string to sign</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>contentLength</name> <init>= <expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>contentMd5</name> <init>= <expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_MD5_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>range</name> <init>= <expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_RANGE_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>stringToSign</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(
                <argument><expr><literal type="string">"%s\n"</literal>                                                  <comment type="line">// verb</comment>
                <literal type="string">"\n"</literal>                                                    <comment type="line">// content-encoding</comment>
                <literal type="string">"\n"</literal>                                                    <comment type="line">// content-language</comment>
                <literal type="string">"%s\n"</literal>                                                  <comment type="line">// content-length</comment>
                <literal type="string">"%s\n"</literal>                                                  <comment type="line">// content-md5</comment>
                <literal type="string">"\n"</literal>                                                    <comment type="line">// content-type</comment>
                <literal type="string">"%s\n"</literal>                                                  <comment type="line">// date</comment>
                <literal type="string">"\n"</literal>                                                    <comment type="line">// If-Modified-Since</comment>
                <literal type="string">"\n"</literal>                                                    <comment type="line">// If-Match</comment>
                <literal type="string">"\n"</literal>                                                    <comment type="line">// If-None-Match</comment>
                <literal type="string">"\n"</literal>                                                    <comment type="line">// If-Unmodified-Since</comment>
                <literal type="string">"%s\n"</literal>                                                  <comment type="line">// range</comment>
                <literal type="string">"%s"</literal>                                                    <comment type="line">// Canonicalized headers</comment>
                <literal type="string">"/%s%s"</literal>                                                 <comment type="line">// Canonicalized account/path</comment>
                <literal type="string">"%s"</literal></expr></argument>,                                                   <comment type="line">// Canonicalized query</comment>
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><call><name>strEq</name><argument_list>(<argument><expr><name>contentLength</name></expr></argument>, <argument><expr><name>ZERO_STR</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>strZ</name><argument_list>(<argument><expr><name>contentLength</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><ternary><condition><expr><name>contentMd5</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>strZ</name><argument_list>(<argument><expr><name>contentMd5</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>range</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>strZ</name><argument_list>(<argument><expr><name>range</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>headerCanonical</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>account</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>queryCanonical</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Generate authorization header</comment>
            <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(
                <argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_AUTHORIZATION_STR</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"SharedKey %s:%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>account</name></name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strNewEncode</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><call><name>cryptoHmacOne</name><argument_list>(<argument><expr><name>hashTypeSha256</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>sharedKey</name></name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name>stringToSign</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// SAS authentication</comment>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpQueryMerge</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>sasKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Process Azure request
***********************************************************************************************************************************/</comment>
<function><type><name>HttpRequest</name> <modifier>*</modifier></type>
<name>storageAzureRequestAsync</name><parameter_list>(<parameter><decl><type><name>StorageAzure</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><name>StorageAzureRequestAsyncParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_AZURE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_HEADER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_QUERY</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>verb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Prepend path prefix</comment>
        <expr_stmt><expr><name><name>param</name><operator>.</operator><name>path</name></name> <operator>=</operator> <ternary><condition><expr><name><name>param</name><operator>.</operator><name>path</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>this</name><operator>-&gt;</operator><name>pathPrefix</name></name></expr> </then><else>: <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pathPrefix</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr>;</expr_stmt>

        <comment type="line">// Create header list and add content length</comment>
        <decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>requestHeader</name> <init>= <expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then>
            <expr><call><name>httpHeaderNew</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>httpHeaderDup</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set content length</comment>
        <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(
            <argument><expr><name>requestHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>bufEmpty</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ZERO_STR</name></expr> </then><else>: <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%zu"</literal></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Calculate content-md5 header if there is content</comment>
        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(
                <argument><expr><name>requestHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_MD5_STR</name></expr></argument>, <argument><expr><call><name>strNewEncode</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeMd5</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Encode path</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>path</name> <init>= <expr><call><name>httpUriEncode</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Make a copy of the query so it can be modified</comment>
        <decl_stmt><decl><type><name>HttpQuery</name> <modifier>*</modifier></type><name>query</name> <init>=
            <expr><ternary><condition><expr><name><name>this</name><operator>-&gt;</operator><name>sasKey</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>param</name><operator>.</operator><name>query</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then>
                <expr><call><name>httpQueryNewP</name><argument_list>(<argument><expr><operator>.</operator><name>redactList</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>queryRedactList</name></name></expr></argument>)</argument_list></call></expr> </then><else>:
                <expr><call><name>httpQueryDupP</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>, <argument><expr><operator>.</operator><name>redactList</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>queryRedactList</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="line">// Generate authorization header</comment>
        <expr_stmt><expr><call><name>storageAzureAuth</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>httpDateFromTime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>requestHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Send request</comment>
        <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>httpRequestNewP</name><argument_list>(
                <argument><expr><name><name>this</name><operator>-&gt;</operator><name>httpClient</name></name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name>query</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name>requestHeader</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HttpResponse</name> <modifier>*</modifier></type>
<name>storageAzureResponse</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>StorageAzureResponseParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>allowMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>request</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Get response</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>httpRequestResponse</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Error if the request was not successful</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>httpResponseCodeOk</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>param</name><operator>.</operator><name>allowMissing</name></name> <operator>||</operator> <call><name>httpResponseCode</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_RESPONSE_CODE_NOT_FOUND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpRequestError</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Move response to the prior context</comment>
        <expr_stmt><expr><call><name>httpResponseMove</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HttpResponse</name> <modifier>*</modifier></type>
<name>storageAzureRequest</name><parameter_list>(<parameter><decl><type><name>StorageAzure</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><name>StorageAzureRequestParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_AZURE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>path</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_HEADER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_QUERY</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>allowMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>request</name> <init>= <expr><call><name>storageAzureRequestAsyncP</name><argument_list>(
        <argument><expr><name>this</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><operator>.</operator><name>path</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>path</name></name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>storageAzureResponseP</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>allowMissing</name></name></expr></argument>, <argument><expr><operator>.</operator><name>contentIo</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>httpRequestFree</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
General function for listing files to be used by other list routines
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageAzureListInternal</name><parameter_list>(
    <parameter><decl><type><name>StorageAzure</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>expression</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recurse</name></decl></parameter>,
    <parameter><decl><type><name>StorageListCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_AZURE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Build the base prefix by stripping off the initial /</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>basePrefix</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>basePrefix</name> <operator>=</operator> <name>EMPTY_STR</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>basePrefix</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strSub</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Get the expression prefix when possible to limit initial results</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>expressionPrefix</name> <init>= <expr><call><name>regExpPrefix</name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If there is an expression prefix then use it to build the query prefix, otherwise query prefix is base prefix</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>queryPrefix</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>expressionPrefix</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>queryPrefix</name> <operator>=</operator> <name>basePrefix</name></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strEmpty</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>queryPrefix</name> <operator>=</operator> <name>expressionPrefix</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>queryPrefix</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>expressionPrefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Create query</comment>
        <decl_stmt><decl><type><name>HttpQuery</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Add the delimiter to not recurse</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>recurse</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>AZURE_QUERY_DELIMITER_STR</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Add resource type</comment>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>AZURE_QUERY_RESTYPE_STR</name></expr></argument>, <argument><expr><name>AZURE_QUERY_VALUE_CONTAINER_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add list comp</comment>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>AZURE_QUERY_COMP_STR</name></expr></argument>, <argument><expr><name>AZURE_QUERY_VALUE_LIST_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Don't specify empty prefix because it is the default</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEmpty</name><argument_list>(<argument><expr><name>queryPrefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>AZURE_QUERY_PREFIX_STR</name></expr></argument>, <argument><expr><name>queryPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Loop as long as a continuation marker returned</comment>
        <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <comment type="line">// Use an inner mem context here because we could potentially be retrieving millions of files so it is a good idea to</comment>
            <comment type="line">// free memory at regular intervals</comment>
            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <comment type="line">// If there is an outstanding async request then wait for the response</comment>
                <if_stmt><if>if <condition>(<expr><name>request</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>storageAzureResponseP</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>httpRequestFree</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>request</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else get the response immediately from a sync request</comment>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>storageAzureRequestP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <decl_stmt><decl><type><name>XmlNode</name> <modifier>*</modifier></type><name>xmlRoot</name> <init>= <expr><call><name>xmlDocumentRoot</name><argument_list>(<argument><expr><call><name>xmlDocumentNewBuf</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// If a continuation marker exists then send an async request to get more data</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>continuationMarker</name> <init>= <expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xmlRoot</name></expr></argument>, <argument><expr><name>AZURE_XML_TAG_NEXT_MARKER_STR</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>continuationMarker</name></expr></argument>, <argument><expr><name>EMPTY_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>httpQueryPut</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>AZURE_QUERY_MARKER_STR</name></expr></argument>, <argument><expr><name>continuationMarker</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Store request in the outer temp context</comment>
                    <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <expr_stmt><expr><name>request</name> <operator>=</operator> <call><name>storageAzureRequestAsyncP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Get prefix list</comment>
                <decl_stmt><decl><type><name>XmlNode</name> <modifier>*</modifier></type><name>blobs</name> <init>= <expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xmlRoot</name></expr></argument>, <argument><expr><name>AZURE_XML_TAG_BLOBS_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>XmlNodeList</name> <modifier>*</modifier></type><name>blobPrefixList</name> <init>= <expr><call><name>xmlNodeChildList</name><argument_list>(<argument><expr><name>blobs</name></expr></argument>, <argument><expr><name>AZURE_XML_TAG_BLOB_PREFIX_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>blobPrefixIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>blobPrefixIdx</name> <operator>&lt;</operator> <call><name>xmlNodeLstSize</name><argument_list>(<argument><expr><name>blobPrefixList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>blobPrefixIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier></type><name>subPathNode</name> <init>= <expr><call><name>xmlNodeLstGet</name><argument_list>(<argument><expr><name>blobPrefixList</name></expr></argument>, <argument><expr><name>blobPrefixIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Get path name</comment>
                    <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>=
                    <expr><block>{
                        <expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>,
                        <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>subPathNode</name></expr></argument>, <argument><expr><name>AZURE_XML_TAG_NAME_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
                        <expr><operator>.</operator><name>exists</name> <operator>=</operator> <name>true</name></expr>,
                    }</block></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Strip off base prefix and final /</comment>
                    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strSubN</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Add type info if requested</comment>
                    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>storageInfoLevelType</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>storageTypePath</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="line">// Callback with info</comment>
                    <expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <comment type="line">// Get file list</comment>
                <decl_stmt><decl><type><name>XmlNodeList</name> <modifier>*</modifier></type><name>fileList</name> <init>= <expr><call><name>xmlNodeChildList</name><argument_list>(<argument><expr><name>blobs</name></expr></argument>, <argument><expr><name>AZURE_XML_TAG_BLOB_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>xmlNodeLstSize</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier></type><name>fileNode</name> <init>= <expr><call><name>xmlNodeLstGet</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Get file name</comment>
                    <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>=
                    <expr><block>{
                        <expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>,
                        <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>fileNode</name></expr></argument>, <argument><expr><name>AZURE_XML_TAG_NAME_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
                        <expr><operator>.</operator><name>exists</name> <operator>=</operator> <name>true</name></expr>,
                    }</block></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Strip off the base prefix when present</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEmpty</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strSub</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="line">// Add basic info if requested (no need to add type info since file is default type)</comment>
                    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>storageInfoLevelBasic</name></expr>)</condition>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>XmlNode</name> <modifier>*</modifier></type><name>property</name> <init>= <expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>fileNode</name></expr></argument>, <argument><expr><name>AZURE_XML_TAG_PROPERTIES_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>cvtZToUInt64</name><argument_list>(
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>AZURE_XML_TAG_CONTENT_LENGTH_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name> <operator>=</operator> <call><name>httpDateToTime</name><argument_list>(
                            <argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>property</name></expr></argument>, <argument><expr><name>AZURE_XML_TAG_LAST_MODIFIED_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">// Callback with info</comment>
                    <expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>request</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StorageInfo</name></type>
<name>storageAzureInfo</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><name>StorageInterfaceInfoParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageAzure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_AZURE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>param</name></expr>;</expr_stmt>                                                <comment type="line">// No parameters are used</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Attempt to get file info</comment>
    <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier><specifier>const</specifier></type> <name>httpResponse</name> <init>= <expr><call><name>storageAzureRequestP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_HEAD_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>path</name> <operator>=</operator> <name>file</name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Does the file exist?</comment>
    <decl_stmt><decl><type><name>StorageInfo</name></type> <name>result</name> <init>= <expr><block>{<expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>, <expr><operator>.</operator><name>exists</name> <operator>=</operator> <macro><name>httpResponseCodeOk</name><argument_list>(<argument>httpResponse</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add basic level info if requested and the file exists (no need to add type info since file is default type)</comment>
    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>level</name></name> <operator>&gt;=</operator> <name>storageInfoLevelBasic</name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>.</operator><name>exists</name></name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>cvtZToUInt64</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><call><name>httpResponseHeader</name><argument_list>(<argument><expr><name>httpResponse</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>timeModified</name></name> <operator>=</operator> <call><name>httpDateToTime</name><argument_list>(<argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><call><name>httpResponseHeader</name><argument_list>(<argument><expr><name>httpResponse</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_HEADER_LAST_MODIFIED_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>httpResponseFree</name><argument_list>(<argument><expr><name>httpResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageAzureListCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>callbackData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>storageLstAdd</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>StorageList</name> <modifier>*</modifier></type>
<name>storageAzureList</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInterfaceListParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageAzure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_AZURE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>expression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>storageLstNew</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>storageAzureListInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>expression</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>storageAzureListCallback</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_LIST</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StorageRead</name> <modifier>*</modifier></type>
<name>storageAzureNewRead</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreMissing</name></decl></parameter>, <parameter><decl><type><name>StorageInterfaceNewReadParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageAzure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_AZURE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>ignoreMissing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_READ</name></expr></argument>, <argument><expr><call><name>storageReadAzureNew</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>ignoreMissing</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StorageWrite</name> <modifier>*</modifier></type>
<name>storageAzureNewWrite</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>StorageInterfaceNewWriteParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageAzure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_AZURE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>param</name></expr>;</expr_stmt>                                                <comment type="line">// No parameters are used</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>createPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>truncate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>user</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>group</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>timeModified</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_WRITE</name></expr></argument>, <argument><expr><call><name>storageWriteAzureNew</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>fileId</name></name><operator>++</operator></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>blockSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>StorageAzurePathRemoveData</name>
<block>{
    <decl_stmt><decl><type><name>StorageAzure</name> <modifier>*</modifier></type><name>this</name></decl>;</decl_stmt>                                             <comment type="line">// Storage object</comment>
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context to create requests in</comment>
    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>                                           <comment type="line">// Async remove request</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>                                             <comment type="line">// Root path of remove</comment>
}</block></struct></type> <name>StorageAzurePathRemoveData</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageAzurePathRemoveCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>callbackData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageAzurePathRemoveData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data</name> <init>= <expr><name>callbackData</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Get response from prior async request</comment>
    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>httpResponseFree</name><argument_list>(<argument><expr><call><name>storageAzureResponseP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpRequestFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Only delete files since paths don't really exist</comment>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>storageTypeFile</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>data-&gt;memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <call><name>storageAzureRequestAsyncP</name><argument_list>(
                <argument><expr><name><name>data</name><operator>-&gt;</operator><name>this</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE_STR</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>storageAzurePathRemove</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recurse</name></decl></parameter>, <parameter><decl><type><name>StorageInterfacePathRemoveParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageAzure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_AZURE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>param</name></expr>;</expr_stmt>                                                <comment type="line">// No parameters are used</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageAzurePathRemoveData</name></type> <name>data</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>this</name> <operator>=</operator> <name>this</name></expr>,
            <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>path</name> <operator>=</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call> <operator>?</operator> <name>EMPTY_STR</name> <operator>:</operator> <name>path</name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>storageAzureListInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>storageInfoLevelType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>storageAzurePathRemoveCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check response on last async request</comment>
        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>request</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>storageAzureResponseP</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>request</name></name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageAzureRemove</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>StorageInterfaceRemoveParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageAzure</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_AZURE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>errorOnMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>errorOnMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>httpResponseFree</name><argument_list>(<argument><expr><call><name>storageAzureRequestP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE_STR</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StorageInterface</name></type> <name>storageInterfaceAzure</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>info</name> <operator>=</operator> <name>storageAzureInfo</name></expr>,
    <expr><operator>.</operator><name>list</name> <operator>=</operator> <name>storageAzureList</name></expr>,
    <expr><operator>.</operator><name>newRead</name> <operator>=</operator> <name>storageAzureNewRead</name></expr>,
    <expr><operator>.</operator><name>newWrite</name> <operator>=</operator> <name>storageAzureNewWrite</name></expr>,
    <expr><operator>.</operator><name>pathRemove</name> <operator>=</operator> <name>storageAzurePathRemove</name></expr>,
    <expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>storageAzureRemove</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Storage</name> <modifier>*</modifier></type>
<name>storageAzureNew</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>StoragePathExpressionCallback</name></type> <name>pathExpressionFunction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>container</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>account</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageAzureKeyType</name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>size_t</name></type> <name>blockSize</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>endpoint</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageAzureUriStyle</name></type> <name>uriStyle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>TimeMSec</name></type> <name>timeout</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>verifyPeer</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>caFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>caPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>pathExpressionFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>account</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>blockSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>uriStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>verifyPeer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>caFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>caPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>container</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>account</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>endpoint</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>blockSize</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>StorageAzure</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageAzure</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>StorageAzure</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>interface</name> <operator>=</operator> <name>storageInterfaceAzure</name></expr>,
            <expr><operator>.</operator><name>container</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>account</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>account</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>blockSize</name> <operator>=</operator> <name>blockSize</name></expr>,
            <expr><operator>.</operator><name>host</name> <operator>=</operator> <name>uriStyle</name> <operator>==</operator> <name>storageAzureUriStyleHost</name> <operator>?</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>account</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>pathPrefix</name> <operator>=</operator> <name>uriStyle</name> <operator>==</operator> <name>storageAzureUriStyleHost</name> <operator>?</operator>
                <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"/%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>account</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>container</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
        }</block></expr>;</expr_stmt>

        <comment type="line">// Store shared key or parse sas query</comment>
        <if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>storageAzureKeyTypeShared</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>sharedKey</name></name> <operator>=</operator> <call><name>bufNewDecode</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>sasKey</name></name> <operator>=</operator> <call><name>httpQueryNewStr</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Create the http client used to service requests</comment>
        <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>httpClient</name></name> <operator>=</operator> <call><name>httpClientNew</name><argument_list>(
            <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>host</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>verifyPeer</name></expr></argument>, <argument><expr><operator>.</operator><name>caFile</name> <operator>=</operator> <name>caFile</name></expr></argument>,
                <argument><expr><operator>.</operator><name>caPath</name> <operator>=</operator> <name>caPath</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create list of redacted headers</comment>
        <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>headerRedactList</name></name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>, <argument><expr><name>HTTP_HEADER_AUTHORIZATION_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>, <argument><expr><name>HTTP_HEADER_DATE_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create list of redacted query keys</comment>
        <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>queryRedactList</name></name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>queryRedactList</name></name></expr></argument>, <argument><expr><name>AZURE_QUERY_SIG_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Generate starting file id</comment>
        <expr_stmt><expr><call><name>cryptoRandomBytes</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name><name>driver</name><operator>-&gt;</operator><name>fileId</name></name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>fileId</name></name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>storageNew</name><argument_list>(<argument><expr><name>STORAGE_AZURE_TYPE</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>write</name></expr></argument>, <argument><expr><name>pathExpressionFunction</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
