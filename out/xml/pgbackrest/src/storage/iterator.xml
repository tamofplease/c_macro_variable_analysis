<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/storage/iterator.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Storage Iterator
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/regExp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/iterator.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/storage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>StorageIterator</name>
<block>{
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>driver</name></decl>;</decl_stmt>                                                   <comment type="line">// Storage driver</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>                                             <comment type="line">// Path to iterate</comment>
    <decl_stmt><decl><type><name>StorageInfoLevel</name></type> <name>level</name></decl>;</decl_stmt>                                         <comment type="line">// Info level</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>recurse</name></decl>;</decl_stmt>                                                   <comment type="line">// Recurse into paths</comment>
    <decl_stmt><decl><type><name>SortOrder</name></type> <name>sortOrder</name></decl>;</decl_stmt>                                            <comment type="line">// Sort order</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>expression</name></decl>;</decl_stmt>                                       <comment type="line">// Match expression</comment>
    <decl_stmt><decl><type><name>RegExp</name> <modifier>*</modifier></type><name>regExp</name></decl>;</decl_stmt>                                                 <comment type="line">// Parsed match expression</comment>

    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>stack</name></decl>;</decl_stmt>                                                    <comment type="line">// Stack of info lists</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>returnedNext</name></decl>;</decl_stmt>                                              <comment type="line">// Next info was returned</comment>
    <decl_stmt><decl><type><name>StorageInfo</name></type> <name>infoNext</name></decl>;</decl_stmt>                                           <comment type="line">// Info to be returned by next</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>nameNext</name></decl>;</decl_stmt>                                               <comment type="line">// Name for next info</comment>
}</block>;</struct>

<comment type="line">// Path info list</comment>
<typedef>typedef <type><struct>struct <name>StorageIteratorInfo</name>
<block>{
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>pathSub</name></decl>;</decl_stmt>                                                <comment type="line">// Subpath</comment>
    <decl_stmt><decl><type><name>StorageList</name> <modifier>*</modifier></type><name>list</name></decl>;</decl_stmt>                                              <comment type="line">// Storage info list</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>listIdx</name></decl>;</decl_stmt>                                           <comment type="line">// Current index in info list</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>pathContentSkip</name></decl>;</decl_stmt>                                           <comment type="line">// Skip reading path content</comment>
}</block></struct></type> <name>StorageIteratorInfo</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Check a path and add it to the stack if it exists and has content
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>StorageItrPathAddResult</name>
<block>{
    <decl_stmt><decl><type><name>bool</name></type> <name>exists</name></decl>;</decl_stmt>                                                    <comment type="line">// Does the path exist?</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>content</name></decl>;</decl_stmt>                                                   <comment type="line">// Does the path have content?</comment>
}</block></struct></type> <name>StorageItrPathAddResult</name>;</typedef>

<function><type><specifier>static</specifier> <name>StorageItrPathAddResult</name></type>
<name>storageItrPathAdd</name><parameter_list>(<parameter><decl><type><name>StorageIterator</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pathSub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_ITERATOR</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>pathSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageItrPathAddResult</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Get path content</comment>
        <decl_stmt><decl><type><name>StorageList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>list</name> <init>= <expr><call><name>storageInterfaceListP</name><argument_list>(
            <argument><expr><name><name>this</name><operator>-&gt;</operator><name>driver</name></name></expr></argument>, <argument><expr><ternary><condition><expr><name>pathSub</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name><name>this</name><operator>-&gt;</operator><name>path</name></name></expr> </then><else>: <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>pathSub</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>level</name></name></expr></argument>,
            <argument><expr><operator>.</operator><name>expression</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>expression</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If path exists</comment>
        <if_stmt><if>if <condition>(<expr><name>list</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>exists</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

            <comment type="line">// If the path has content</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>storageLstEmpty</name><argument_list>(<argument><expr><name>list</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>result</name><operator>.</operator><name>content</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

                <comment type="line">// Sort if requested</comment>
                <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>sortOrder</name></name> <operator>!=</operator> <name>sortOrderNone</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>storageLstSort</name><argument_list>(<argument><expr><name>list</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>sortOrder</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Add path to top of stack</comment>
                <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this-&gt;stack</argument>)</argument_list></macro>
                <block>{<block_content>
                    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>StorageIteratorInfo</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = <literal type="number">1</literal></argument>)</argument_list></macro>
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>StorageIteratorInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>listInfo</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><operator>*</operator><name>listInfo</name> <operator>=</operator> <operator>(</operator><name>StorageIteratorInfo</name><operator>)</operator><block>{
                            <expr><operator>.</operator><name>pathSub</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>pathSub</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>list</name> <operator>=</operator> <macro><name>storageLstMove</name><argument_list>(<argument>list</argument>, <argument>memContextCurrent()</argument>)</argument_list></macro></expr>}</block></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>lstAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_STRUCT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>StorageIterator</name> <modifier>*</modifier></type>
<name>storageItrNew</name><parameter_list>(
    <parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>driver</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>errorOnMissing</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>nullOnMissing</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>recurse</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>SortOrder</name></type> <name>sortOrder</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>expression</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>errorOnMissing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>nullOnMissing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>sortOrder</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>driver</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name>recurse</name> <operator>||</operator> <name>level</name> <operator>&gt;=</operator> <name>storageInfoLevelType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageIterator</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>StorageIterator</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Create object</comment>
            <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>StorageIterator</name><operator>)</operator>
            <block>{
                <expr><operator>.</operator><name>driver</name> <operator>=</operator> <name>driver</name></expr>,
                <expr><operator>.</operator><name>path</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>,
                <expr><operator>.</operator><name>recurse</name> <operator>=</operator> <name>recurse</name></expr>,
                <expr><operator>.</operator><name>sortOrder</name> <operator>=</operator> <name>sortOrder</name></expr>,
                <expr><operator>.</operator><name>expression</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>stack</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>StorageIteratorInfo</name> <operator>*</operator></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>nameNext</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>,
                <expr><operator>.</operator><name>returnedNext</name> <operator>=</operator> <name>true</name></expr>,
            }</block></expr>;</expr_stmt>

            <comment type="line">// Compile regular expression</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>expression</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>regExp</name></name> <operator>=</operator> <call><name>regExpNew</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>expression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// If root path does not exist</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>storageItrPathAdd</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>.</operator><name>exists</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Throw an error when requested</comment>
                <if_stmt><if>if <condition>(<expr><name>errorOnMissing</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>PathMissingError</name></expr></argument>, <argument><expr><name>STORAGE_ERROR_LIST_INFO_MISSING</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Return NULL when requested</comment>
                <if_stmt><if>if <condition>(<expr><name>nullOnMissing</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name>this</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>storageItrMove</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_ITERATOR</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>storageItrMore</name><parameter_list>(<parameter><decl><type><name>StorageIterator</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_ITERATOR</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If next has not been called then return true</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>returnedNext</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Search stack for info</comment>
    <while>while <condition>(<expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Always pull from the top of the stack</comment>
        <decl_stmt><decl><type><name>StorageIteratorInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>listInfo</name> <init>= <expr><operator>*</operator><operator>(</operator><name>StorageIteratorInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>lstGetLast</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Search list for info</comment>
        <for>for <control>(<init>;</init> <condition><expr><name><name>listInfo</name><operator>-&gt;</operator><name>listIdx</name></name> <operator>&lt;</operator> <call><name>storageLstSize</name><argument_list>(<argument><expr><name><name>listInfo</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name><name>listInfo</name><operator>-&gt;</operator><name>listIdx</name></name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// Next info</comment>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>infoNext</name></name> <operator>=</operator> <call><name>storageLstGet</name><argument_list>(<argument><expr><name><name>listInfo</name><operator>-&gt;</operator><name>list</name></name></expr></argument>, <argument><expr><name><name>listInfo</name><operator>-&gt;</operator><name>listIdx</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Update info name when in subpath</comment>
            <if_stmt><if>if <condition>(<expr><name><name>listInfo</name><operator>-&gt;</operator><name>pathSub</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strTrunc</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>nameNext</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>listInfo</name><operator>-&gt;</operator><name>pathSub</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>infoNext</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>infoNext</name><operator>.</operator><name>name</name></name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>nameNext</name></name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Does the path have content?</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>pathContent</name> <init>=
                <expr><name><name>this</name><operator>-&gt;</operator><name>infoNext</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>storageTypePath</name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>-&gt;</operator><name>recurse</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><name><name>listInfo</name><operator>-&gt;</operator><name>pathContentSkip</name></name> <operator>&amp;&amp;</operator>
                <call><name>storageItrPathAdd</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>infoNext</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call><operator>.</operator><name>content</name></expr></init></decl>;</decl_stmt>

            <comment type="line">// Clear path content skip flag if it was set on a previous iteration</comment>
            <expr_stmt><expr><name><name>listInfo</name><operator>-&gt;</operator><name>pathContentSkip</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

            <comment type="line">// Skip info if it does match the provided expression</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>regExp</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>regExpMatch</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>regExp</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>infoNext</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Path content may match the expression even if the path does not. Break so the content on the top of the stack</comment>
                <comment type="line">// will be checked and increment the index so that path will be skipped.</comment>
                <if_stmt><if>if <condition>(<expr><name>pathContent</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>listInfo</name><operator>-&gt;</operator><name>listIdx</name></name><operator>++</operator></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Skip info and continue</comment>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// When sort order is descending the path will need to be output after the content. Break so that content gets checked</comment>
            <comment type="line">// but set a flag so on the next iteration the path will be output but the content skipped.</comment>
            <if_stmt><if>if <condition>(<expr><name>pathContent</name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>-&gt;</operator><name>sortOrder</name></name> <operator>==</operator> <name>sortOrderDesc</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>listInfo</name><operator>-&gt;</operator><name>pathContentSkip</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Return next info</comment>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>returnedNext</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>listInfo</name><operator>-&gt;</operator><name>listIdx</name></name><operator>++</operator></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <comment type="line">// If no more info then free the list. This check is required because we may break out of the above loop early.</comment>
        <comment type="line">//</comment>
        <comment type="line">// Only free when the list is at the top of the stack. It is possible that this is the last entry in the current list but</comment>
        <comment type="line">// it is a path that must be checked for entries. In that case the path entries will end up at the top of the stack so we'll</comment>
        <comment type="line">// need to wait to free the list containing the path until the path entries have been processed.</comment>
        <if_stmt><if>if <condition>(<expr><name><name>listInfo</name><operator>-&gt;</operator><name>listIdx</name></name> <operator>&gt;=</operator> <call><name>storageLstSize</name><argument_list>(<argument><expr><name><name>listInfo</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name>listInfo</name> <operator>==</operator> <operator>*</operator><operator>(</operator><name>StorageIteratorInfo</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>lstGetLast</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>objFree</name><argument_list>(<argument><expr><name>listInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>lstRemoveLast</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></while>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>StorageInfo</name></type> <name>storageItrNext</name><parameter_list>(<parameter><decl><type><name>StorageIterator</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_ITERATOR</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>returnedNext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>returnedNext</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>infoNext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>storageItrToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StorageIterator</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"{stack: %s}"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>lstToLog</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>stack</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
