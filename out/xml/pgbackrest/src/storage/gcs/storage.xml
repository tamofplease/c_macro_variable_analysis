<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/storage/gcs/storage.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
GCS Storage
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/bio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/x509.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;openssl/pem.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/socket/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/regExp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/gcs/read.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/gcs/storage.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/gcs/write.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
HTTP headers
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>GCS_HEADER_UPLOAD_ID_STR</name></expr></argument>,                             <argument><expr><name>GCS_HEADER_UPLOAD_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>GCS_HEADER_METADATA_FLAVOR_STR</name></expr></argument>,                       <argument><expr><literal type="string">"metadata-flavor"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>GCS_HEADER_GOOGLE_STR</name></expr></argument>,                                <argument><expr><literal type="string">"Google"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Query tokens
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>GCS_QUERY_DELIMITER_STR</name></expr></argument>,                              <argument><expr><literal type="string">"delimiter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>GCS_QUERY_FIELDS_STR</name></expr></argument>,                                 <argument><expr><name>GCS_QUERY_FIELDS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>GCS_QUERY_MEDIA_STR</name></expr></argument>,                                  <argument><expr><name>GCS_QUERY_MEDIA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>GCS_QUERY_NAME_STR</name></expr></argument>,                                   <argument><expr><name>GCS_QUERY_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>GCS_QUERY_PAGE_TOKEN_STR</name></expr></argument>,                             <argument><expr><literal type="string">"pageToken"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>GCS_QUERY_PREFIX_STR</name></expr></argument>,                                 <argument><expr><literal type="string">"prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_EXTERN</name><argument_list>(<argument><expr><name>GCS_QUERY_UPLOAD_ID_STR</name></expr></argument>,                              <argument><expr><name>GCS_QUERY_UPLOAD_ID</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
JSON tokens
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_ACCESS_TOKEN_VAR</name></expr></argument>,                    <argument><expr><literal type="string">"access_token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_CLIENT_EMAIL_VAR</name></expr></argument>,                    <argument><expr><literal type="string">"client_email"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_ERROR_VAR</name></expr></argument>,                           <argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_ERROR_DESCRIPTION_VAR</name></expr></argument>,               <argument><expr><literal type="string">"error_description"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_EXPIRES_IN_VAR</name></expr></argument>,                      <argument><expr><literal type="string">"expires_in"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCS_JSON_ITEMS</name></cpp:macro>                                              <cpp:value>"items"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_ITEMS_VAR</name></expr></argument>,                       <argument><expr><name>GCS_JSON_ITEMS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_EXTERN</name><argument_list>(<argument><expr><name>GCS_JSON_MD5_HASH_VAR</name></expr></argument>,                        <argument><expr><name>GCS_JSON_MD5_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_EXTERN</name><argument_list>(<argument><expr><name>GCS_JSON_NAME_VAR</name></expr></argument>,                            <argument><expr><name>GCS_JSON_NAME</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCS_JSON_NEXT_PAGE_TOKEN</name></cpp:macro>                                    <cpp:value>"nextPageToken"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_NEXT_PAGE_TOKEN_VAR</name></expr></argument>,             <argument><expr><name>GCS_JSON_NEXT_PAGE_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCS_JSON_PREFIXES</name></cpp:macro>                                           <cpp:value>"prefixes"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_PREFIXES_VAR</name></expr></argument>,                    <argument><expr><name>GCS_JSON_PREFIXES</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_PRIVATE_KEY_VAR</name></expr></argument>,                     <argument><expr><literal type="string">"private_key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_EXTERN</name><argument_list>(<argument><expr><name>GCS_JSON_SIZE_VAR</name></expr></argument>,                            <argument><expr><name>GCS_JSON_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_TOKEN_TYPE_VAR</name></expr></argument>,                      <argument><expr><literal type="string">"token_type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_TOKEN_URI_VAR</name></expr></argument>,                       <argument><expr><literal type="string">"token_uri"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCS_JSON_UPDATED</name></cpp:macro>                                            <cpp:value>"updated"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>GCS_JSON_UPDATED_VAR</name></expr></argument>,                     <argument><expr><name>GCS_JSON_UPDATED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="line">// Fields required when listing files</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>GCS_FIELD_LIST</name></cpp:macro>                                                                                                             \
    <cpp:value>GCS_JSON_NEXT_PAGE_TOKEN "," GCS_JSON_PREFIXES "," GCS_JSON_ITEMS "(" GCS_JSON_NAME</cpp:value></cpp:define>

<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>GCS_FIELD_LIST_MIN_STR</name></expr></argument>,                               <argument><expr><name>GCS_FIELD_LIST</name> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>GCS_FIELD_LIST_MAX_STR</name></expr></argument>,                               <argument><expr><name>GCS_FIELD_LIST</name> <literal type="string">","</literal> <name>GCS_JSON_SIZE</name> <literal type="string">","</literal> <name>GCS_JSON_UPDATED</name> <literal type="string">")"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>StorageGcs</name>
<block>{
    <expr_stmt><expr><name>STORAGE_COMMON_MEMBER</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>HttpClient</name> <modifier>*</modifier></type><name>httpClient</name></decl>;</decl_stmt>                                         <comment type="line">// Http client to service requests</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>headerRedactList</name></decl>;</decl_stmt>                                   <comment type="line">// List of headers to redact from logging</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>queryRedactList</name></decl>;</decl_stmt>                                    <comment type="line">// List of query keys to redact from logging</comment>

    <decl_stmt><decl><type><name>bool</name></type> <name>write</name></decl>;</decl_stmt>                                                     <comment type="line">// Storage is writable</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>                                           <comment type="line">// Bucket to store data in</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>endpoint</name></decl>;</decl_stmt>                                         <comment type="line">// Endpoint</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>chunkSize</name></decl>;</decl_stmt>                                               <comment type="line">// Block size for resumable upload</comment>

    <decl_stmt><decl><type><name>StorageGcsKeyType</name></type> <name>keyType</name></decl>;</decl_stmt>                                      <comment type="line">// Auth key type</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>credential</name></decl>;</decl_stmt>                                       <comment type="line">// Credential (client email)</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>privateKey</name></decl>;</decl_stmt>                                       <comment type="line">// Private key in PEM format</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>                                                  <comment type="line">// Token</comment>
    <decl_stmt><decl><type><name>time_t</name></type> <name>tokenTimeExpire</name></decl>;</decl_stmt>                                         <comment type="line">// Token expiration time (if service auth)</comment>
    <decl_stmt><decl><type><name>HttpUrl</name> <modifier>*</modifier></type><name>authUrl</name></decl>;</decl_stmt>                                               <comment type="line">// URL for authentication server</comment>
    <decl_stmt><decl><type><name>HttpClient</name> <modifier>*</modifier></type><name>authClient</name></decl>;</decl_stmt>                                         <comment type="line">// Client to service auth requests</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse HTTP JSON response containing an authentication token and expiration

Note that the function is intended to run directly in the caller's mem context and results will be placed in the caller's prior mem
context.
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct
<block>{
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>tokenType</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>token</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>time_t</name></type> <name>timeExpire</name></decl>;</decl_stmt>
}</block></struct></type> <name>StorageGcsAuthTokenResult</name>;</typedef>

<function><type><specifier>static</specifier> <name>StorageGcsAuthTokenResult</name></type>
<name>storageGcsAuthToken</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>request</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>time_t</name></type> <name>timeBegin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name>timeBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageGcsAuthTokenResult</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Get the response</comment>
        <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>kvResponse</name> <init>= <expr><call><name>varKv</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><call><name>httpRequestResponse</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Check for an error</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>error</name> <init>= <expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>kvResponse</name></expr></argument>, <argument><expr><name>GCS_JSON_ERROR_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>error</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                <argument><expr><name>ProtocolError</name></expr></argument>, <argument><expr><literal type="string">"unable to get authentication token: [%s] %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strZNull</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>kvResponse</name></expr></argument>, <argument><expr><name>GCS_JSON_ERROR_DESCRIPTION_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Get token</comment>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>tokenType</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>kvResponse</name></expr></argument>, <argument><expr><name>GCS_JSON_TOKEN_TYPE_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>tokenType</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"token type missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>token</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>kvResponse</name></expr></argument>, <argument><expr><name>GCS_JSON_ACCESS_TOKEN_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name><name>result</name><operator>.</operator><name>token</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"access token missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Get expiration</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>expiresIn</name> <init>= <expr><call><name>kvGet</name><argument_list>(<argument><expr><name>kvResponse</name></expr></argument>, <argument><expr><name>GCS_JSON_EXPIRES_IN_VAR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name>expiresIn</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"expiry missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>timeExpire</name></name> <operator>=</operator> <name>timeBegin</name> <operator>+</operator> <operator>(</operator><name>time_t</name><operator>)</operator><call><name>varInt64Force</name><argument_list>(<argument><expr><name>expiresIn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>StorageGcsAuthTokenResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Get authentication header for service keys

Based on the documentation at https://developers.google.com/identity/protocols/oauth2/service-account#httprest
***********************************************************************************************************************************/</comment>
<comment type="line">// Helper to construct a JSON Web Token</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>storageGcsAuthJwt</name><parameter_list>(<parameter><decl><type><name>StorageGcs</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>timeBegin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name>timeBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Static header with dot delimiter</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9."</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Add claim</comment>
        <expr_stmt><expr><call><name>strCatEncode</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>, <argument><expr><name>encodeBase64Url</name></expr></argument>,
            <argument><expr><call><name>BUFSTR</name><argument_list>(
                <argument><expr><call><name>strNewFmt</name><argument_list>(
                    <argument><expr><literal type="string">"{\"iss\":\"%s\",\"scope\":\"https://www.googleapis.com/auth/devstorage.read%s\",\"aud\":\"%s\""</literal>
                        <literal type="string">",\"exp\":%"</literal> <name>PRIu64</name> <literal type="string">",\"iat\":%"</literal> <name>PRIu64</name> <literal type="string">"}"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>credential</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name><name>this</name><operator>-&gt;</operator><name>write</name></name></expr> ?</condition><then> <expr><literal type="string">"_write"</literal></expr> </then><else>: <expr><literal type="string">"_only"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpUrl</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>timeBegin</name> <operator>+</operator> <literal type="number">3600</literal></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><name>timeBegin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Sign with RSA key</comment>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>BIO</name> <modifier>*</modifier></type><name>bio</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>EVP_PKEY</name> <modifier>*</modifier></type><name>privateKey</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>EVP_MD_CTX</name> <modifier>*</modifier></type><name>sign</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>cryptoInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Load key</comment>
            <expr_stmt><expr><name>bio</name> <operator>=</operator> <call><name>BIO_new</name><argument_list>(<argument><expr><call><name>BIO_s_mem</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>BIO_write</name><argument_list>(<argument><expr><operator>(</operator><name>BIO</name> <operator>*</operator><operator>)</operator><name>bio</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>privateKey</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>strSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>privateKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>privateKey</name> <operator>=</operator> <call><name>PEM_read_bio_PrivateKey</name><argument_list>(<argument><expr><operator>(</operator><name>BIO</name> <operator>*</operator><operator>)</operator><name>bio</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><name>privateKey</name> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"unable to read PEM"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create signature</comment>
            <expr_stmt><expr><name>sign</name> <operator>=</operator> <call><name>EVP_MD_CTX_create</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(
                <argument><expr><call><name>EVP_DigestSignInit</name><argument_list>(<argument><expr><operator>(</operator><name>EVP_MD_CTX</name> <operator>*</operator><operator>)</operator><name>sign</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>EVP_sha256</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>(</operator><name>EVP_PKEY</name> <operator>*</operator><operator>)</operator><name>privateKey</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"unable to init"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(
                <argument><expr><call><name>EVP_DigestSignUpdate</name><argument_list>(<argument><expr><operator>(</operator><name>EVP_MD_CTX</name> <operator>*</operator><operator>)</operator><name>sign</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><call><name>strZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>strSize</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>,
                <argument><expr><literal type="string">"unable to update"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>size_t</name></type> <name>signatureLen</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><call><name>EVP_DigestSignFinal</name><argument_list>(<argument><expr><operator>(</operator><name>EVP_MD_CTX</name> <operator>*</operator><operator>)</operator><name>sign</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>signatureLen</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"unable to get size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>signature</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><name>signatureLen</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>bufUsedSet</name><argument_list>(<argument><expr><name>signature</name></expr></argument>, <argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>cryptoError</name><argument_list>(<argument><expr><call><name>EVP_DigestSignFinal</name><argument_list>(<argument><expr><operator>(</operator><name>EVP_MD_CTX</name> <operator>*</operator><operator>)</operator><name>sign</name></expr></argument>, <argument><expr><call><name>bufPtr</name><argument_list>(<argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>signatureLen</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"unable to finalize"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Add dot delimiter and signature</comment>
            <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strCatEncode</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>encodeBase64Url</name></expr></argument>, <argument><expr><name>signature</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <macro><name>FINALLY</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>BIO_free</name><argument_list>(<argument><expr><operator>(</operator><name>BIO</name> <operator>*</operator><operator>)</operator><name>bio</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>OPENSSL_VERSION_NUMBER</name> <operator>&lt;</operator> <literal type="number">0x10100000L</literal></expr></cpp:if>
            <expr_stmt><expr><call><name>EVP_MD_CTX_cleanup</name><argument_list>(<argument><expr><operator>(</operator><name>EVP_MD_CTX</name> <operator>*</operator><operator>)</operator><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
            <expr_stmt><expr><call><name>EVP_MD_CTX_free</name><argument_list>(<argument><expr><operator>(</operator><name>EVP_MD_CTX</name> <operator>*</operator><operator>)</operator><name>sign</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><call><name>EVP_PKEY_free</name><argument_list>(<argument><expr><operator>(</operator><name>EVP_PKEY</name> <operator>*</operator><operator>)</operator><name>privateKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>StorageGcsAuthTokenResult</name></type>
<name>storageGcsAuthService</name><parameter_list>(<parameter><decl><type><name>StorageGcs</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>timeBegin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name>timeBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timeBegin</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageGcsAuthTokenResult</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(
            <argument><expr><literal type="string">"grant_type=urn%%3Aietf%%3Aparams%%3Aoauth%%3Agrant-type%%3Ajwt-bearer&amp;assertion=%s"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>storageGcsAuthJwt</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>timeBegin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>httpHeaderNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>HTTP_HEADER_HOST_STR</name></expr></argument>, <argument><expr><call><name>httpUrlHost</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_TYPE_STR</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_TYPE_APP_FORM_URL_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%zu"</literal></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><call><name>httpRequestNewP</name><argument_list>(
            <argument><expr><name><name>this</name><operator>-&gt;</operator><name>authClient</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_POST_STR</name></expr></argument>, <argument><expr><call><name>httpUrlPath</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name>header</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <call><name>BUFSTR</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>storageGcsAuthToken</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>timeBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>StorageGcsAuthTokenResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Get authentication token automatically for instances running in GCE.

Based on the documentation at https://cloud.google.com/compute/docs/access/create-enable-service-accounts-for-instances#applications
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StorageGcsAuthTokenResult</name></type>
<name>storageGcsAuthAuto</name><parameter_list>(<parameter><decl><type><name>StorageGcs</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>time_t</name></type> <name>timeBegin</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name>timeBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>timeBegin</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageGcsAuthTokenResult</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>header</name> <init>= <expr><call><name>httpHeaderNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>HTTP_HEADER_HOST_STR</name></expr></argument>, <argument><expr><call><name>httpUrlHost</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>GCS_HEADER_METADATA_FLAVOR_STR</name></expr></argument>, <argument><expr><name>GCS_HEADER_GOOGLE_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>, <argument><expr><name>ZERO_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><call><name>httpRequestNewP</name><argument_list>(
            <argument><expr><name><name>this</name><operator>-&gt;</operator><name>authClient</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><call><name>httpUrlPath</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>storageGcsAuthToken</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>timeBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>StorageGcsAuthTokenResult</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Generate authorization header and add it to the supplied header list
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageGcsAuth</name><parameter_list>(<parameter><decl><type><name>StorageGcs</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>httpHeader</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>HTTP_HEADER</name></expr></argument>, <argument><expr><name>httpHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>httpHeader</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Get the token if it was not supplied by the user</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>keyType</name></name> <operator>!=</operator> <name>storageGcsKeyTypeToken</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>keyType</name></name> <operator>==</operator> <name>storageGcsKeyTypeAuto</name> <operator>||</operator> <name><name>this</name><operator>-&gt;</operator><name>keyType</name></name> <operator>==</operator> <name>storageGcsKeyTypeService</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>time_t</name></type> <name>timeBegin</name> <init>= <expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// If the current token has expired then request a new one</comment>
            <if_stmt><if>if <condition>(<expr><name>timeBegin</name> <operator>&gt;=</operator> <name><name>this</name><operator>-&gt;</operator><name>tokenTimeExpire</name></name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>StorageGcsAuthTokenResult</name></type> <name>tokenResult</name> <init>= <expr><ternary><condition><expr><name><name>this</name><operator>-&gt;</operator><name>keyType</name></name> <operator>==</operator> <name>storageGcsKeyTypeAuto</name></expr> ?</condition><then>
                    <expr><call><name>storageGcsAuthAuto</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>timeBegin</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>storageGcsAuthService</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>timeBegin</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>tokenResult</name><operator>.</operator><name>tokenType</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>tokenResult</name><operator>.</operator><name>token</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Subtract http client timeout * 2 so the token does not expire in the middle of http retries</comment>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>tokenTimeExpire</name></name> <operator>=</operator>
                        <name><name>tokenResult</name><operator>.</operator><name>timeExpire</name></name> <operator>-</operator> <operator>(</operator><operator>(</operator><name>time_t</name><operator>)</operator><operator>(</operator><call><name>httpClientTimeout</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>httpClient</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <name>MSEC_PER_SEC</name> <operator>*</operator> <literal type="number">2</literal><operator>)</operator><operator>)</operator></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Add authorization header</comment>
        <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_AUTHORIZATION_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>token</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Process Gcs request
***********************************************************************************************************************************/</comment>
<function><type><name>HttpRequest</name> <modifier>*</modifier></type>
<name>storageGcsRequestAsync</name><parameter_list>(<parameter><decl><type><name>StorageGcs</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><name>StorageGcsRequestAsyncParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>noBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>upload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>noAuth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_HEADER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_QUERY</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>verb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>noBucket</name></name> <operator>||</operator> <name><name>param</name><operator>.</operator><name>object</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Generate path</comment>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>path</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s/storage/v1/b"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>upload</name></name></expr> ?</condition><then> <expr><literal type="string">"/upload"</literal></expr> </then><else>: <expr><literal type="string">""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>param</name><operator>.</operator><name>noBucket</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/%s/o"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>bucket</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>object</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpUriEncode</name><argument_list>(<argument><expr><call><name>strSub</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>object</name></name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Create header list and add content length</comment>
        <decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>requestHeader</name> <init>= <expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then>
            <expr><call><name>httpHeaderNew</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>httpHeaderDup</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set host</comment>
        <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>requestHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_HOST_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set content length</comment>
        <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(
            <argument><expr><name>requestHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>bufEmpty</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ZERO_STR</name></expr> </then><else>: <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%zu"</literal></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Make a copy of the query so it can be modified</comment>
        <decl_stmt><decl><type><name>HttpQuery</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>httpQueryDupP</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>, <argument><expr><operator>.</operator><name>redactList</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>queryRedactList</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Generate authorization header</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>param</name><operator>.</operator><name>noAuth</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>storageGcsAuth</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>requestHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Send request</comment>
        <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>httpRequestNewP</name><argument_list>(
                <argument><expr><name><name>this</name><operator>-&gt;</operator><name>httpClient</name></name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name>query</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name>requestHeader</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HttpResponse</name> <modifier>*</modifier></type>
<name>storageGcsResponse</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>StorageGcsResponseParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>allowMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>allowIncomplete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>request</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>allowMissing</name></name> <operator>||</operator> <operator>!</operator><name><name>param</name><operator>.</operator><name>allowIncomplete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Get response</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>httpRequestResponse</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Error if the request was not successful</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>httpResponseCodeOk</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>param</name><operator>.</operator><name>allowMissing</name></name> <operator>||</operator> <call><name>httpResponseCode</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_RESPONSE_CODE_NOT_FOUND</name><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><operator>!</operator><name><name>param</name><operator>.</operator><name>allowIncomplete</name></name> <operator>||</operator> <call><name>httpResponseCode</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_RESPONSE_CODE_PERMANENT_REDIRECT</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpRequestError</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Move response to the prior context</comment>
        <expr_stmt><expr><call><name>httpResponseMove</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HttpResponse</name> <modifier>*</modifier></type>
<name>storageGcsRequest</name><parameter_list>(<parameter><decl><type><name>StorageGcs</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>verb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageGcsRequestParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>noBucket</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>upload</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>noAuth</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>object</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_HEADER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_QUERY</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>allowMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>allowIncomplete</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>request</name> <init>= <expr><call><name>storageGcsRequestAsyncP</name><argument_list>(
        <argument><expr><name>this</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><operator>.</operator><name>noBucket</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>noBucket</name></name></expr></argument>, <argument><expr><operator>.</operator><name>upload</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>upload</name></name></expr></argument>, <argument><expr><operator>.</operator><name>noAuth</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>noAuth</name></name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>object</name></name></expr></argument>,
        <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>storageGcsResponseP</name><argument_list>(
        <argument><expr><name>request</name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>allowMissing</name></name></expr></argument>, <argument><expr><operator>.</operator><name>allowIncomplete</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>allowIncomplete</name></name></expr></argument>, <argument><expr><operator>.</operator><name>contentIo</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>httpRequestFree</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
General function for listing files to be used by other list routines
***********************************************************************************************************************************/</comment>
<comment type="line">// Helper to convert YYYY-MM-DDTHH:MM:SS.MSECZ format to time_t. This format is very nearly ISO-8601 except for the inclusion of</comment>
<comment type="line">// milliseconds, which are discarded here.</comment>
<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>storageGcsCvtTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(
        <argument><expr><name>TIME</name></expr></argument>,
        <argument><expr><call><name>epochFromParts</name><argument_list>(
            <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageGcsInfoFile</name><parameter_list>(<parameter><decl><type><name>StorageInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>KeyValue</name> <modifier>*</modifier></type><name>file</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>KEY_VALUE</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <call><name>cvtZToUInt64</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>GCS_JSON_SIZE_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>info</name><operator>-&gt;</operator><name>timeModified</name></name> <operator>=</operator> <call><name>storageGcsCvtTime</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>GCS_JSON_UPDATED_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageGcsListInternal</name><parameter_list>(
    <parameter><decl><type><name>StorageGcs</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>expression</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recurse</name></decl></parameter>,
    <parameter><decl><type><name>StorageListCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Build the base prefix by stripping off the initial /</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>basePrefix</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>basePrefix</name> <operator>=</operator> <name>EMPTY_STR</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>basePrefix</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strSub</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Get the expression prefix when possible to limit initial results</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>expressionPrefix</name> <init>= <expr><call><name>regExpPrefix</name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If there is an expression prefix then use it to build the query prefix, otherwise query prefix is base prefix</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>queryPrefix</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>expressionPrefix</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>queryPrefix</name> <operator>=</operator> <name>basePrefix</name></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strEmpty</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>queryPrefix</name> <operator>=</operator> <name>expressionPrefix</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>queryPrefix</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>expressionPrefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Create query</comment>
        <decl_stmt><decl><type><name>HttpQuery</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Add the delimiter to not recurse</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>recurse</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>GCS_QUERY_DELIMITER_STR</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Don't specify empty prefix because it is the default</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEmpty</name><argument_list>(<argument><expr><name>queryPrefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>GCS_QUERY_PREFIX_STR</name></expr></argument>, <argument><expr><name>queryPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Add fields to limit the amount of data returned</comment>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>GCS_QUERY_FIELDS_STR</name></expr></argument>, <argument><expr><ternary><condition><expr><name>level</name> <operator>&gt;=</operator> <name>storageInfoLevelBasic</name></expr> ?</condition><then> <expr><name>GCS_FIELD_LIST_MAX_STR</name></expr> </then><else>: <expr><name>GCS_FIELD_LIST_MIN_STR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Loop as long as a continuation marker returned</comment>
        <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <comment type="line">// Use an inner mem context here because we could potentially be retrieving millions of files so it is a good idea to</comment>
            <comment type="line">// free memory at regular intervals</comment>
            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <comment type="line">// If there is an outstanding async request then wait for the response</comment>
                <if_stmt><if>if <condition>(<expr><name>request</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>storageGcsResponseP</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>httpRequestFree</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>request</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else get the response immediately from a sync request</comment>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>storageGcsRequestP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>varKv</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// If next page token exists then send an async request to get more data</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>nextPageToken</name> <init>= <expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>GCS_JSON_NEXT_PAGE_TOKEN_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>nextPageToken</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>httpQueryPut</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>GCS_QUERY_PAGE_TOKEN_STR</name></expr></argument>, <argument><expr><name>nextPageToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Store request in the outer temp context</comment>
                    <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <expr_stmt><expr><name>request</name> <operator>=</operator> <call><name>storageGcsRequestAsyncP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Get prefix list</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier></type><name>prefixList</name> <init>= <expr><call><name>varVarLst</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>GCS_JSON_PREFIXES_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>prefixList</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>prefixIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>prefixIdx</name> <operator>&lt;</operator> <call><name>varLstSize</name><argument_list>(<argument><expr><name>prefixList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>prefixIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <comment type="line">// Get path name</comment>
                        <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>=
                        <expr><block>{
                            <expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>,
                            <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>prefixList</name></expr></argument>, <argument><expr><name>prefixIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
                            <expr><operator>.</operator><name>exists</name> <operator>=</operator> <name>true</name></expr>,
                        }</block></expr></init></decl>;</decl_stmt>

                        <comment type="line">// Strip off base prefix and final /</comment>
                        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strSubN</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Add type info if requested</comment>
                        <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>storageInfoLevelType</name></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>storageTypePath</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <comment type="line">// Callback with info</comment>
                        <expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Get file list</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier></type><name>fileList</name> <init>= <expr><call><name>varVarLst</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>content</name></expr></argument>, <argument><expr><name>GCS_JSON_ITEMS_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>fileList</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>varLstSize</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <decl_stmt><decl><type><specifier>const</specifier> <name>KeyValue</name> <modifier>*</modifier></type><name>file</name> <init>= <expr><call><name>varKv</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"file missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Get file name</comment>
                        <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>=
                        <expr><block>{
                            <expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>,
                            <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>file</name></expr></argument>, <argument><expr><name>GCS_JSON_NAME_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
                            <expr><operator>.</operator><name>exists</name> <operator>=</operator> <name>true</name></expr>,
                        }</block></expr></init></decl>;</decl_stmt>

                        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name><name>info</name><operator>.</operator><name>name</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"file name missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Strip off the base prefix when present</comment>
                        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEmpty</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                            <expr_stmt><expr><name><name>info</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strSub</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                        <comment type="line">// Add basic level info if requested</comment>
                        <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>storageInfoLevelBasic</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>storageTypeFile</name></expr>;</expr_stmt>
                            <expr_stmt><expr><call><name>storageGcsInfoFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>info</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <comment type="line">// Callback with info</comment>
                        <expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>request</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StorageInfo</name></type>
<name>storageGcsInfo</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInterfaceInfoParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageGcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>param</name></expr>;</expr_stmt>                                                <comment type="line">// No parameters are used</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageInfo</name></type> <name>result</name> <init>= <expr><block>{<expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>}</block></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Attempt to get file info</comment>
        <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier><specifier>const</specifier></type> <name>httpResponse</name> <init>= <expr><call><name>storageGcsRequestP</name><argument_list>(
            <argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <name>file</name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name>true</name></expr></argument>,
            <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <call><name>httpQueryAdd</name><argument_list>(
                <argument><expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>GCS_QUERY_FIELDS_STR</name></expr></argument>,
                <argument><expr><ternary><condition><expr><name>level</name> <operator>&gt;=</operator> <name>storageInfoLevelBasic</name></expr> ?</condition><then> <expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>GCS_JSON_SIZE</name> <literal type="string">","</literal> <name>GCS_JSON_UPDATED</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>EMPTY_STR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Does the file exist?</comment>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>exists</name></name> <operator>=</operator> <call><name>httpResponseCodeOk</name><argument_list>(<argument><expr><name>httpResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add basic level info if requested and the file exists</comment>
        <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>level</name></name> <operator>&gt;=</operator> <name>storageInfoLevelBasic</name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>.</operator><name>exists</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>storageTypeFile</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>storageGcsInfoFile</name><argument_list>(<argument><expr><operator>&amp;</operator><name>result</name></expr></argument>, <argument><expr><call><name>varKv</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>httpResponse</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>httpResponseFree</name><argument_list>(<argument><expr><name>httpResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageGcsListCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>callbackData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>storageLstAdd</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>StorageList</name> <modifier>*</modifier></type>
<name>storageGcsList</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInterfaceListParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageGcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>expression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>storageLstNew</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>storageGcsListInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>expression</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>storageGcsListCallback</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_LIST</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StorageRead</name> <modifier>*</modifier></type>
<name>storageGcsNewRead</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreMissing</name></decl></parameter>, <parameter><decl><type><name>StorageInterfaceNewReadParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageGcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>ignoreMissing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_READ</name></expr></argument>, <argument><expr><call><name>storageReadGcsNew</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>ignoreMissing</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StorageWrite</name> <modifier>*</modifier></type>
<name>storageGcsNewWrite</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>StorageInterfaceNewWriteParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageGcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>param</name></expr>;</expr_stmt>                                                <comment type="line">// No parameters are used</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>createPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>truncate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>user</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>group</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>timeModified</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_WRITE</name></expr></argument>, <argument><expr><call><name>storageWriteGcsNew</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>chunkSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>StorageGcsPathRemoveData</name>
<block>{
    <decl_stmt><decl><type><name>StorageGcs</name> <modifier>*</modifier></type><name>this</name></decl>;</decl_stmt>                                               <comment type="line">// Storage Object</comment>
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context to create requests in</comment>
    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>                                           <comment type="line">// Async remove request</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>                                             <comment type="line">// Root path of remove</comment>
}</block></struct></type> <name>StorageGcsPathRemoveData</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageGcsPathRemoveCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>callbackData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageGcsPathRemoveData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data</name> <init>= <expr><name>callbackData</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Get response from prior async request</comment>
    <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>httpResponseFree</name><argument_list>(<argument><expr><call><name>storageGcsResponseP</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpRequestFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Only delete files since paths don't really exist</comment>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>storageTypeFile</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>data-&gt;memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <call><name>storageGcsRequestAsyncP</name><argument_list>(
                <argument><expr><name><name>data</name><operator>-&gt;</operator><name>this</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>storageGcsPathRemove</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recurse</name></decl></parameter>, <parameter><decl><type><name>StorageInterfacePathRemoveParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageGcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>param</name></expr>;</expr_stmt>                                                <comment type="line">// No parameters are used</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageGcsPathRemoveData</name></type> <name>data</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>this</name> <operator>=</operator> <name>this</name></expr>,
            <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>path</name> <operator>=</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call> <operator>?</operator> <name>EMPTY_STR</name> <operator>:</operator> <name>path</name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>storageGcsListInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>storageInfoLevelType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>storageGcsPathRemoveCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Check response on last async request</comment>
        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>request</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>storageGcsResponseP</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>request</name></name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageGcsRemove</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInterfaceRemoveParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageGcs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_GCS</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>errorOnMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>errorOnMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>httpResponseFree</name><argument_list>(<argument><expr><call><name>storageGcsRequestP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>object</name> <operator>=</operator> <name>file</name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StorageInterface</name></type> <name>storageInterfaceGcs</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>info</name> <operator>=</operator> <name>storageGcsInfo</name></expr>,
    <expr><operator>.</operator><name>list</name> <operator>=</operator> <name>storageGcsList</name></expr>,
    <expr><operator>.</operator><name>newRead</name> <operator>=</operator> <name>storageGcsNewRead</name></expr>,
    <expr><operator>.</operator><name>newWrite</name> <operator>=</operator> <name>storageGcsNewWrite</name></expr>,
    <expr><operator>.</operator><name>pathRemove</name> <operator>=</operator> <name>storageGcsPathRemove</name></expr>,
    <expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>storageGcsRemove</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Storage</name> <modifier>*</modifier></type>
<name>storageGcsNew</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>StoragePathExpressionCallback</name></type> <name>pathExpressionFunction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>bucket</name></decl></parameter>,
    <parameter><decl><type><name>StorageGcsKeyType</name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>key</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>chunkSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>endpoint</name></decl></parameter>, <parameter><decl><type><name>TimeMSec</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verifyPeer</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>caFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>caPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>pathExpressionFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>chunkSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>endpoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>verifyPeer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>caFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>caPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bucket</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>keyType</name> <operator>==</operator> <name>storageGcsKeyTypeAuto</name> <operator>||</operator> <name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>chunkSize</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>StorageGcs</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageGcs</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>StorageGcs</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>interface</name> <operator>=</operator> <name>storageInterfaceGcs</name></expr>,
            <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>write</name></expr>,
            <expr><operator>.</operator><name>bucket</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>keyType</name> <operator>=</operator> <name>keyType</name></expr>,
            <expr><operator>.</operator><name>chunkSize</name> <operator>=</operator> <name>chunkSize</name></expr>,
        }</block></expr>;</expr_stmt>

        <comment type="line">// Handle auth key types</comment>
        <switch>switch <condition>(<expr><name>keyType</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Auto authentication for GCE instances</comment>
            <case>case <expr><name>storageGcsKeyTypeAuto</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>authUrl</name></name> <operator>=</operator> <call><name>httpUrlNewParseP</name><argument_list>(
                    <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token"</literal></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>.</operator><name>type</name> <operator>=</operator> <name>httpProtocolTypeHttp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>authClient</name></name> <operator>=</operator> <call><name>httpClientNew</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>httpUrlHost</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>httpUrlPort</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </block_content>}</block>

            <comment type="line">// Read data from file for service keys</comment>
            <case>case <expr><name>storageGcsKeyTypeService</name></expr>:</case>
            <block>{<block_content>
                <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier></type><name>kvKey</name> <init>= <expr><call><name>varKv</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credential</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>kvKey</name></expr></argument>, <argument><expr><name>GCS_JSON_CLIENT_EMAIL_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>privateKey</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>kvKey</name></expr></argument>, <argument><expr><name>GCS_JSON_PRIVATE_KEY_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>uri</name> <init>= <expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>kvKey</name></expr></argument>, <argument><expr><name>GCS_JSON_TOKEN_URI_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>credential</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name><name>driver</name><operator>-&gt;</operator><name>privateKey</name></name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>uri</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"credentials missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>authUrl</name></name> <operator>=</operator> <call><name>httpUrlNewParseP</name><argument_list>(<argument><expr><name>uri</name></expr></argument>, <argument><expr><operator>.</operator><name>type</name> <operator>=</operator> <name>httpProtocolTypeHttps</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>authClient</name></name> <operator>=</operator> <call><name>httpClientNew</name><argument_list>(
                    <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                        <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><call><name>httpUrlHost</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>httpUrlPort</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>httpUrlHost</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>authUrl</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>verifyPeer</name></expr></argument>, <argument><expr><operator>.</operator><name>caFile</name> <operator>=</operator> <name>caFile</name></expr></argument>, <argument><expr><operator>.</operator><name>caPath</name> <operator>=</operator> <name>caPath</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </block_content>}</block>

            <comment type="line">// Store the authentication token</comment>
            <case>case <expr><name>storageGcsKeyTypeToken</name></expr>:</case>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>token</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>

        <comment type="line">// Parse the endpoint to extract the host and port</comment>
        <decl_stmt><decl><type><name>HttpUrl</name> <modifier>*</modifier></type><name>url</name> <init>= <expr><call><name>httpUrlNewParseP</name><argument_list>(<argument><expr><name>endpoint</name></expr></argument>, <argument><expr><operator>.</operator><name>type</name> <operator>=</operator> <name>httpProtocolTypeHttps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>endpoint</name></name> <operator>=</operator> <call><name>httpUrlHost</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create the http client used to service requests</comment>
        <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>httpClient</name></name> <operator>=</operator> <call><name>httpClientNew</name><argument_list>(
            <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>, <argument><expr><call><name>httpUrlPort</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>endpoint</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>verifyPeer</name></expr></argument>,
                <argument><expr><operator>.</operator><name>caFile</name> <operator>=</operator> <name>caFile</name></expr></argument>, <argument><expr><operator>.</operator><name>caPath</name> <operator>=</operator> <name>caPath</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create list of redacted headers</comment>
        <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>headerRedactList</name></name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>, <argument><expr><name>HTTP_HEADER_AUTHORIZATION_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>, <argument><expr><name>GCS_HEADER_UPLOAD_ID_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Create list of redacted query keys</comment>
        <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>queryRedactList</name></name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>queryRedactList</name></name></expr></argument>, <argument><expr><name>GCS_QUERY_UPLOAD_ID_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>storageNew</name><argument_list>(<argument><expr><name>STORAGE_GCS_TYPE</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>write</name></expr></argument>, <argument><expr><name>pathExpressionFunction</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
