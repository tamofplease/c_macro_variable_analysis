<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/storage/remote/read.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Remote Storage Read
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/read.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/convert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/remote/protocol.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/remote/read.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/read.intern.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>StorageReadRemote</name>
<block>{
    <decl_stmt><decl><type><name>StorageReadInterface</name></type> <name>interface</name></decl>;</decl_stmt>                                 <comment type="line">// Interface</comment>
    <decl_stmt><decl><type><name>StorageRemote</name> <modifier>*</modifier></type><name>storage</name></decl>;</decl_stmt>                                         <comment type="line">// Storage that created this object</comment>
    <decl_stmt><decl><type><name>StorageRead</name> <modifier>*</modifier></type><name>read</name></decl>;</decl_stmt>                                              <comment type="line">// Storage read interface</comment>

    <decl_stmt><decl><type><name>ProtocolClient</name> <modifier>*</modifier></type><name>client</name></decl>;</decl_stmt>                                         <comment type="line">// Protocol client for requests</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>remaining</name></decl>;</decl_stmt>                                               <comment type="line">// Bytes remaining to be read in block</comment>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>block</name></decl>;</decl_stmt>                                                  <comment type="line">// Block currently being read</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>eof</name></decl>;</decl_stmt>                                                       <comment type="line">// Has the file reached eof?</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
    <decl_stmt><decl><type><name>uint64_t</name></type> <name>protocolReadBytes</name></decl>;</decl_stmt>                                     <comment type="line">// How many bytes were read from the protocol layer?</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></struct></type> <name>StorageReadRemote</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Macros for function logging
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_STORAGE_READ_REMOTE_TYPE</name></cpp:macro>                                                                                      \
    <cpp:value>StorageReadRemote *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_STORAGE_READ_REMOTE_FORMAT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>bufferSize</name></type></parameter>)</parameter_list></cpp:macro>                                                         \
    <cpp:value>objToLog(value, "StorageReadRemote", buffer, bufferSize)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Clear protocol if the entire file is not read or an error occurs before the read is complete. This is required to clear the
protocol state so a subsequent command can succeed.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageReadRemoteFreeResource</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageReadRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_READ_REMOTE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Read if eof has not been reached</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition>
    <block>{<block_content>
        <do>do
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>read</name> <init>= <expr><call><name>protocolClientDataGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>pckReadNext</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// If binary then discard</comment>
                <if_stmt><if>if <condition>(<expr><call><name>pckReadType</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>pckTypeBin</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else read is complete so discard the filter list</comment>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>pckReadPackP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>protocolClientDataEndGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition>;</do>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Read from a file
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>storageReadRemote</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>block</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageReadRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_READ_REMOTE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>block</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bufFull</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Read if eof has not been reached</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition>
    <block>{<block_content>
        <do>do
        <block>{<block_content>
            <comment type="line">// If no bytes remaining then read a new block</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>remaining</name></name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>PackRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>read</name> <init>= <expr><call><name>protocolClientDataGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>pckReadNext</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// If binary then read the next block</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>pckReadType</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>pckTypeBin</name></expr>)</condition>
                    <block>{<block_content>
                        <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
                        <block>{<block_content>
                            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <call><name>pckReadBinP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>remaining</name></name> <operator>=</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block>
                        <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <comment type="line">// Else read is complete and get the filter list</comment>
                    <else>else
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>bufFree</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>ioFilterGroupResultAllSet</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pckReadPackP</name><argument_list>(<argument><expr><name>read</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>eof</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

                        <expr_stmt><expr><call><name>protocolClientDataEndGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></else></if_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DEBUG</name></cpp:ifdef>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>protocolReadBytes</name></name> <operator>+=</operator> <name><name>this</name><operator>-&gt;</operator><name>remaining</name></name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Read if not eof</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>eof</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// If the buffer can contain all remaining bytes</comment>
                <if_stmt><if>if <condition>(<expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>&gt;=</operator> <name><name>this</name><operator>-&gt;</operator><name>remaining</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>bufCatSub</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>this</name><operator>-&gt;</operator><name>remaining</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>remaining</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>remaining</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>bufFree</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>block</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else read what we can</comment>
                <else>else
                <block>{<block_content>
                    <decl_stmt><decl><type><name>size_t</name></type> <name>remains</name> <init>= <expr><call><name>bufRemains</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>bufCatSub</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>block</name></name></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>block</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <name><name>this</name><operator>-&gt;</operator><name>remaining</name></name></expr></argument>, <argument><expr><name>remains</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>remaining</name></name> <operator>-=</operator> <name>remains</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        while <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>eof</name></name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>bufFull</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Has file reached EOF?
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>storageReadRemoteEof</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageReadRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_READ_REMOTE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>eof</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Open the file
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>bool</name></type>
<name>storageReadRemoteOpen</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageReadRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_READ_REMOTE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>result</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// If the file is compressible add compression filter on the remote</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>compressible</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(
                <argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>compressFilter</name><argument_list>(<argument><expr><name>compressTypeGz</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>compressLevel</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <decl_stmt><decl><type><name>ProtocolCommand</name> <modifier>*</modifier></type><name>command</name> <init>= <expr><call><name>protocolCommandNew</name><argument_list>(<argument><expr><name>PROTOCOL_COMMAND_STORAGE_OPEN_READ</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>param</name> <init>= <expr><call><name>protocolCommandParam</name><argument_list>(<argument><expr><name>command</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>ignoreMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>limit</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteNullP</name><argument_list>(<argument><expr><name>param</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteU64P</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><call><name>varUInt64</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>pckWritePackP</name><argument_list>(<argument><expr><name>param</name></expr></argument>, <argument><expr><call><name>ioFilterGroupParamAll</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>protocolClientCommandPut</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>client</name></name></expr></argument>, <argument><expr><name>command</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// If the file exists</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>pckReadBoolP</name><argument_list>(<argument><expr><call><name>protocolClientDataGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name>result</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Clear filters since they will be run on the remote side</comment>
            <expr_stmt><expr><call><name>ioFilterGroupClear</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// If the file is compressible add decompression filter locally</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>compressible</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioReadFilterGroup</name><argument_list>(<argument><expr><call><name>storageReadIo</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>decompressFilter</name><argument_list>(<argument><expr><name>compressTypeGz</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Set free callback to ensure the protocol is cleared on a short read</comment>
            <expr_stmt><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>storageReadRemoteFreeResource</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else nothing to do</comment>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>protocolClientDataEndGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>client</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Close the file and read any remaining data. It is possible that all data has been read but if the amount of data is exactly
divisible by the buffer size then the eof may not have been received.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageReadRemoteClose</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageReadRemote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_READ_REMOTE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>memContextCallbackClear</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>storageReadRemoteFreeResource</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>StorageRead</name> <modifier>*</modifier></type>
<name>storageReadRemoteNew</name><parameter_list>(
    <parameter><decl><type><name>StorageRemote</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storage</name></decl></parameter>, <parameter><decl><type><name>ProtocolClient</name> <modifier>*</modifier><specifier>const</specifier></type> <name>client</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>ignoreMissing</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>compressible</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>compressLevel</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>offset</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>limit</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_REMOTE</name></expr></argument>, <argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>PROTOCOL_CLIENT</name></expr></argument>, <argument><expr><name>client</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>ignoreMissing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>compressible</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>compressLevel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>offset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>storage</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>client</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageReadRemote</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>StorageReadRemote</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.callbackQty = <literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>StorageReadRemote</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>storage</name> <operator>=</operator> <name>storage</name></expr>,
            <expr><operator>.</operator><name>client</name> <operator>=</operator> <name>client</name></expr>,

            <expr><operator>.</operator><name>interface</name> <operator>=</operator> <operator>(</operator><name>StorageReadInterface</name><operator>)</operator>
            <block>{
                <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>STORAGE_REMOTE_TYPE</name></expr>,
                <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>compressible</name> <operator>=</operator> <name>compressible</name></expr>,
                <expr><operator>.</operator><name>compressLevel</name> <operator>=</operator> <name>compressLevel</name></expr>,
                <expr><operator>.</operator><name>ignoreMissing</name> <operator>=</operator> <name>ignoreMissing</name></expr>,
                <expr><operator>.</operator><name>offset</name> <operator>=</operator> <name>offset</name></expr>,
                <expr><operator>.</operator><name>limit</name> <operator>=</operator> <call><name>varDup</name><argument_list>(<argument><expr><name>limit</name></expr></argument>)</argument_list></call></expr>,

                <expr><operator>.</operator><name>ioInterface</name> <operator>=</operator> <operator>(</operator><name>IoReadInterface</name><operator>)</operator>
                <block>{
                    <expr><operator>.</operator><name>close</name> <operator>=</operator> <name>storageReadRemoteClose</name></expr>,
                    <expr><operator>.</operator><name>eof</name> <operator>=</operator> <name>storageReadRemoteEof</name></expr>,
                    <expr><operator>.</operator><name>open</name> <operator>=</operator> <name>storageReadRemoteOpen</name></expr>,
                    <expr><operator>.</operator><name>read</name> <operator>=</operator> <name>storageReadRemote</name></expr>,
                }</block></expr>,
            }</block></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name> <operator>=</operator> <call><name>storageReadNew</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_READ</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>read</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
