<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/storage/list.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Storage List
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/blob.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/storage.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>StorageList</name>
<block>{
    <decl_stmt><decl><type><name>StorageListPub</name></type> <name>pub</name></decl>;</decl_stmt>                                             <comment type="line">// Publicly accessible variables</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>ownerList</name></decl>;</decl_stmt>                                          <comment type="line">// List of users/groups</comment>
    <decl_stmt><decl><type><name>Blob</name> <modifier>*</modifier></type><name>blob</name></decl>;</decl_stmt>                                                     <comment type="line">// Blob of info data</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>                                                   <comment type="line">// Current info name</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>linkDestination</name></decl>;</decl_stmt>                                        <comment type="line">// Current link destination</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
A more space efficient version of StorageInfo. Each level is contained in a struct to ensure alignment when only using part of the
struct to store info. This also keeps the size calculations accurate if members are added to a level.
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>StorageListInfo</name>
<block>{
    <comment type="line">// Set when info type &gt;= storageInfoLevelExists</comment>
    <struct>struct
    <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>name</name></decl>;</decl_stmt>                                           <comment type="line">// Name of path/file/link</comment>
    }</block> <decl><name>exists</name></decl>;</struct>

    <comment type="line">// Mode is only provided at detail level but is included here to save space on 64-bit architectures</comment>
    <struct>struct
    <block>{
        <comment type="line">// Set when info type &gt;= storageInfoLevelType (undefined at lower levels)</comment>
        <decl_stmt><decl><type><name>StorageType</name></type> <name>type</name></decl>;</decl_stmt>                                           <comment type="line">// Type file/path/link)</comment>

        <comment type="line">// Set when info type &gt;= storageInfoLevelDetail (undefined at lower levels)</comment>
        <decl_stmt><decl><type><name>mode_t</name></type> <name>mode</name></decl>;</decl_stmt>                                                <comment type="line">// Mode of path/file/link</comment>
    }</block> <decl><name>type</name></decl>;</struct>

    <comment type="line">// Set when info type &gt;= storageInfoLevelBasic (undefined at lower levels)</comment>
    <struct>struct
    <block>{
        <decl_stmt><decl><type><name>uint64_t</name></type> <name>size</name></decl>;</decl_stmt>                                              <comment type="line">// Size (path/link is 0)</comment>
        <decl_stmt><decl><type><name>time_t</name></type> <name>timeModified</name></decl>;</decl_stmt>                                        <comment type="line">// Time file was last modified</comment>
    }</block> <decl><name>basic</name></decl>;</struct>

    <comment type="line">// Set when info type &gt;= storageInfoLevelDetail (undefined at lower levels)</comment>
    <struct>struct
    <block>{
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>user</name></decl>;</decl_stmt>                                         <comment type="line">// Name of user that owns the file</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>group</name></decl>;</decl_stmt>                                        <comment type="line">// Name of group that owns the file</comment>
        <decl_stmt><decl><type><name>uid_t</name></type> <name>userId</name></decl>;</decl_stmt>                                               <comment type="line">// User that owns the file</comment>
        <decl_stmt><decl><type><name>uid_t</name></type> <name>groupId</name></decl>;</decl_stmt>                                              <comment type="line">// Group that owns the file</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>linkDestination</name></decl>;</decl_stmt>                                <comment type="line">// Destination if this is a link</comment>
    }</block> <decl><name>detail</name></decl>;</struct>
}</block></struct></type> <name>StorageListInfo</name>;</typedef>

<comment type="line">// Determine size of struct to store in the list. We only need to store the members that are used by the current level.</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>uint8_t</name></type> <name><name>storageLstInfoSize</name><index>[<expr><name>storageInfoLevelDetail</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <init>=
<expr><block>{
    <expr><literal type="number">0</literal></expr>,                                                              <comment type="line">// storageInfoLevelDefault (should not be used)</comment>
    <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StorageListInfo</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>,                                <comment type="line">// storageInfoLevelExists</comment>
    <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StorageListInfo</name></expr></argument>, <argument><expr><name>basic</name></expr></argument>)</argument_list></call></expr>,                               <comment type="line">// storageInfoLevelType</comment>
    <expr><call><name>offsetof</name><argument_list>(<argument><expr><name>StorageListInfo</name></expr></argument>, <argument><expr><name>detail</name></expr></argument>)</argument_list></call></expr>,                              <comment type="line">// storageInfoLevelBasic</comment>
    <expr><sizeof>sizeof<argument_list>(<argument><expr><name>StorageListInfo</name></expr></argument>)</argument_list></sizeof></expr>,                                        <comment type="line">// storageInfoLevelDetail</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>StorageList</name> <modifier>*</modifier></type>
<name>storageLstNew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>level</name> <operator>!=</operator> <name>storageInfoLevelDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageList</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>StorageList</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Create object</comment>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>StorageList</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>pub</name> <operator>=</operator>
            <block>{
                <expr><operator>.</operator><name>list</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><name><name>storageLstInfoSize</name><index>[<expr><name>level</name></expr>]</index></name></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorZ</name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>,
            }</block></expr>,
            <expr><operator>.</operator><name>ownerList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>blob</name> <operator>=</operator> <call><name>blbNew</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>linkDestination</name> <operator>=</operator> <call><name>strNew</name><argument_list>()</argument_list></call></expr>,
        }</block></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STORAGE_LIST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>storageLstInsert</name><parameter_list>(<parameter><decl><type><name>StorageList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_LIST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this-&gt;pub.list</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageListInfo</name></type> <name>listInfo</name> <init>= <expr><block>{<expr><operator>.</operator><name>exists</name> <operator>=</operator> <block>{<expr><operator>.</operator><name>name</name> <operator>=</operator> <macro><name>blbAdd</name><argument_list>(<argument>this-&gt;blob</argument>, <argument>strZ(info-&gt;name)</argument>, <argument>strSize(info-&gt;name) + <literal type="number">1</literal></argument>)</argument_list></macro></expr>}</block></expr>}</block></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><call><name>storageLstLevel</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>storageInfoLevelDetail</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><name><name>listInfo</name><operator>.</operator><name>type</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>mode</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>listInfo</name><operator>.</operator><name>detail</name><operator>.</operator><name>user</name></name> <operator>=</operator> <call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ownerList</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>user</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>listInfo</name><operator>.</operator><name>detail</name><operator>.</operator><name>group</name></name> <operator>=</operator> <call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>ownerList</name></name></expr></argument>, <argument><expr><name><name>info</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>listInfo</name><operator>.</operator><name>detail</name><operator>.</operator><name>userId</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>userId</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>listInfo</name><operator>.</operator><name>detail</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>groupId</name></name></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>linkDestination</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>listInfo</name><operator>.</operator><name>detail</name><operator>.</operator><name>linkDestination</name></name> <operator>=</operator> <call><name>blbAdd</name><argument_list>(
                        <argument><expr><name><name>this</name><operator>-&gt;</operator><name>blob</name></name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>linkDestination</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>linkDestination</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block>

            <case>case <expr><name>storageInfoLevelBasic</name></expr>:</case>
                <expr_stmt><expr><name><name>listInfo</name><operator>.</operator><name>basic</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>size</name></name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>listInfo</name><operator>.</operator><name>basic</name><operator>.</operator><name>timeModified</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>timeModified</name></name></expr>;</expr_stmt>

            <case>case <expr><name>storageInfoLevelType</name></expr>:</case>
                <expr_stmt><expr><name><name>listInfo</name><operator>.</operator><name>type</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>info</name><operator>-&gt;</operator><name>type</name></name></expr>;</expr_stmt>

            <default>default:</default>
                <break>break;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><call><name>lstInsert</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>listInfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>StorageInfo</name></type>
<name>storageLstGet</name><parameter_list>(<parameter><decl><type><name>StorageList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>idx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_LIST</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>StorageListInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>listInfo</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>list</name></name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>StorageInfo</name></type> <name>result</name> <init>=
    <expr><block>{
        <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strTrunc</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>listInfo</name><operator>-&gt;</operator><name>exists</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>exists</name> <operator>=</operator> <name>true</name></expr>,
        <expr><operator>.</operator><name>level</name> <operator>=</operator> <macro><name>storageLstLevel</name><argument_list>(<argument>this</argument>)</argument_list></macro></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name><name>result</name><operator>.</operator><name>level</name></name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>storageInfoLevelDetail</name></expr>:</case>
        <block>{<block_content>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>mode</name></name> <operator>=</operator> <name><name>listInfo</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>mode</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>user</name></name> <operator>=</operator> <name><name>listInfo</name><operator>-&gt;</operator><name>detail</name><operator>.</operator><name>user</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>group</name></name> <operator>=</operator> <name><name>listInfo</name><operator>-&gt;</operator><name>detail</name><operator>.</operator><name>group</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>userId</name></name> <operator>=</operator> <name><name>listInfo</name><operator>-&gt;</operator><name>detail</name><operator>.</operator><name>userId</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>groupId</name></name> <operator>=</operator> <name><name>listInfo</name><operator>-&gt;</operator><name>detail</name><operator>.</operator><name>groupId</name></name></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>listInfo</name><operator>-&gt;</operator><name>detail</name><operator>.</operator><name>linkDestination</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>result</name><operator>.</operator><name>linkDestination</name></name> <operator>=</operator> <call><name>strCatZ</name><argument_list>(<argument><expr><call><name>strTrunc</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>linkDestination</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>listInfo</name><operator>-&gt;</operator><name>detail</name><operator>.</operator><name>linkDestination</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>

        <case>case <expr><name>storageInfoLevelBasic</name></expr>:</case>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>=</operator> <name><name>listInfo</name><operator>-&gt;</operator><name>basic</name><operator>.</operator><name>size</name></name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>timeModified</name></name> <operator>=</operator> <name><name>listInfo</name><operator>-&gt;</operator><name>basic</name><operator>.</operator><name>timeModified</name></name></expr>;</expr_stmt>

        <case>case <expr><name>storageInfoLevelType</name></expr>:</case>
            <expr_stmt><expr><name><name>result</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name><name>listInfo</name><operator>-&gt;</operator><name>type</name><operator>.</operator><name>type</name></name></expr>;</expr_stmt>

        <default>default:</default>
            <break>break;</break>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>storageLstToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StorageList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"{size: %u}"</literal></expr></argument>, <argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
