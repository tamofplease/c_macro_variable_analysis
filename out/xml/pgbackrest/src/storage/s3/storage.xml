<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/storage/s3/storage.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
S3 Storage
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/socket/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/tls/client.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/regExp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/s3/read.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/s3/storage.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/s3/write.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Defaults
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>STORAGE_S3_DELETE_MAX</name></cpp:macro>                                       <cpp:value>1000</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
S3 HTTP headers
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_HEADER_CONTENT_SHA256_STR</name></expr></argument>,                         <argument><expr><literal type="string">"x-amz-content-sha256"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_HEADER_DATE_STR</name></expr></argument>,                                   <argument><expr><literal type="string">"x-amz-date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_HEADER_TOKEN_STR</name></expr></argument>,                                  <argument><expr><literal type="string">"x-amz-security-token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_HEADER_SRVSDENC_STR</name></expr></argument>,                               <argument><expr><literal type="string">"x-amz-server-side-encryption"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_HEADER_SRVSDENC_KMS_STR</name></expr></argument>,                           <argument><expr><literal type="string">"aws:kms"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_HEADER_SRVSDENC_KMSKEYID_STR</name></expr></argument>,                      <argument><expr><literal type="string">"x-amz-server-side-encryption-aws-kms-key-id"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
S3 query tokens
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_QUERY_CONTINUATION_TOKEN_STR</name></expr></argument>,                      <argument><expr><literal type="string">"continuation-token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_QUERY_DELETE_STR</name></expr></argument>,                                  <argument><expr><literal type="string">"delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_QUERY_DELIMITER_STR</name></expr></argument>,                               <argument><expr><literal type="string">"delimiter"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_QUERY_LIST_TYPE_STR</name></expr></argument>,                               <argument><expr><literal type="string">"list-type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_QUERY_PREFIX_STR</name></expr></argument>,                                  <argument><expr><literal type="string">"prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_QUERY_VALUE_LIST_TYPE_2_STR</name></expr></argument>,                       <argument><expr><literal type="string">"2"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
XML tags
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_COMMON_PREFIXES_STR</name></expr></argument>,                       <argument><expr><literal type="string">"CommonPrefixes"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_CONTENTS_STR</name></expr></argument>,                              <argument><expr><literal type="string">"Contents"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_DELETE_STR</name></expr></argument>,                                <argument><expr><literal type="string">"Delete"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_ERROR_STR</name></expr></argument>,                                 <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_IS_TRUNCATED_STR</name></expr></argument>,                          <argument><expr><literal type="string">"IsTruncated"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_KEY_STR</name></expr></argument>,                                   <argument><expr><literal type="string">"Key"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_LAST_MODIFIED_STR</name></expr></argument>,                         <argument><expr><literal type="string">"LastModified"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3_XML_TAG_NEXT_CONTINUATION_TOKEN</name></cpp:macro>                          <cpp:value>"NextContinuationToken"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_NEXT_CONTINUATION_TOKEN_STR</name></expr></argument>,           <argument><expr><name>S3_XML_TAG_NEXT_CONTINUATION_TOKEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_OBJECT_STR</name></expr></argument>,                                <argument><expr><literal type="string">"Object"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_PREFIX_STR</name></expr></argument>,                                <argument><expr><literal type="string">"Prefix"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_QUIET_STR</name></expr></argument>,                                 <argument><expr><literal type="string">"Quiet"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_SIZE_STR</name></expr></argument>,                                  <argument><expr><literal type="string">"Size"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
AWS authentication v4 constants
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3</name></cpp:macro>                                                          <cpp:value>"s3"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>BUFFER_STRDEF_STATIC</name><argument_list>(<argument><expr><name>S3_BUF</name></expr></argument>,                                    <argument><expr><name>S3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AWS4</name></cpp:macro>                                                        <cpp:value>"AWS4"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AWS4_REQUEST</name></cpp:macro>                                                <cpp:value>"aws4_request"</cpp:value></cpp:define>
    <expr_stmt><expr><call><name>BUFFER_STRDEF_STATIC</name><argument_list>(<argument><expr><name>AWS4_REQUEST_BUF</name></expr></argument>,                          <argument><expr><name>AWS4_REQUEST</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>AWS4_HMAC_SHA256</name></cpp:macro>                                            <cpp:value>"AWS4-HMAC-SHA256"</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Starting date for signing string so it will be regenerated on the first request
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>YYYYMMDD_STR</name></expr></argument>,                                         <argument><expr><literal type="string">"YYYYMMDD"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>StorageS3</name>
<block>{
    <expr_stmt><expr><name>STORAGE_COMMON_MEMBER</name></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>HttpClient</name> <modifier>*</modifier></type><name>httpClient</name></decl>;</decl_stmt>                                         <comment type="line">// HTTP client to service requests</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>headerRedactList</name></decl>;</decl_stmt>                                   <comment type="line">// List of headers to redact from logging</comment>

    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>bucket</name></decl>;</decl_stmt>                                           <comment type="line">// Bucket to store data in</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>region</name></decl>;</decl_stmt>                                           <comment type="line">// e.g. us-east-1</comment>
    <decl_stmt><decl><type><name>StorageS3KeyType</name></type> <name>keyType</name></decl>;</decl_stmt>                                       <comment type="line">// Key type (e.g. storageS3KeyTypeShared)</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>accessKey</name></decl>;</decl_stmt>                                              <comment type="line">// Access key</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>secretAccessKey</name></decl>;</decl_stmt>                                        <comment type="line">// Secret access key</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>securityToken</name></decl>;</decl_stmt>                                          <comment type="line">// Security token, if any</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>kmsKeyId</name></decl>;</decl_stmt>                                         <comment type="line">// Server-side encryption key</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>partSize</name></decl>;</decl_stmt>                                                <comment type="line">// Part size for multi-part upload</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>deleteMax</name></decl>;</decl_stmt>                                         <comment type="line">// Maximum objects that can be deleted in one request</comment>
    <decl_stmt><decl><type><name>StorageS3UriStyle</name></type> <name>uriStyle</name></decl>;</decl_stmt>                                     <comment type="line">// Path or host style URIs</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>bucketEndpoint</name></decl>;</decl_stmt>                                   <comment type="line">// Set to {bucket}.{endpoint}</comment>

    <comment type="line">// For retrieving temporary security credentials</comment>
    <decl_stmt><decl><type><name>HttpClient</name> <modifier>*</modifier></type><name>credHttpClient</name></decl>;</decl_stmt>                                     <comment type="line">// HTTP client to service credential requests</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>credHost</name></decl>;</decl_stmt>                                         <comment type="line">// Credentials host</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>credRole</name></decl>;</decl_stmt>                                         <comment type="line">// Role to use for credential requests</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>webIdToken</name></decl>;</decl_stmt>                                       <comment type="line">// Token to use for credential requests</comment>
    <decl_stmt><decl><type><name>time_t</name></type> <name>credExpirationTime</name></decl>;</decl_stmt>                                      <comment type="line">// Time the temporary credentials expire</comment>

    <comment type="line">// Current signing key and date it is valid for</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>signingKeyDate</name></decl>;</decl_stmt>                                   <comment type="line">// Date of cached signing key (so we know when to regenerate)</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>signingKey</name></decl>;</decl_stmt>                                       <comment type="line">// Cached signing key</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Expected ISO-8601 data/time size
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ISO_8601_DATE_TIME_SIZE</name></cpp:macro>                                     <cpp:value>16</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Format ISO-8601 date/time for authentication
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>storageS3DateTime</name><parameter_list>(<parameter><decl><type><name>time_t</name></type> <name>authTime</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>TIME</name></expr></argument>, <argument><expr><name>authTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name><name>struct</name> <name>tm</name></name></type> <name>timePart</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>buffer</name><index>[<expr><name>ISO_8601_DATE_TIME_SIZE</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(
        <argument><expr><call><name>strftime</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%Y%m%dT%H%M%SZ"</literal></expr></argument>, <argument><expr><call><name>gmtime_r</name><argument_list>(<argument><expr><operator>&amp;</operator><name>authTime</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>timePart</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>ISO_8601_DATE_TIME_SIZE</name></expr></argument>, <argument><expr><name>AssertError</name></expr></argument>,
        <argument><expr><literal type="string">"unable to format date"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>strNewZ</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Generate authorization header and add it to the supplied header list

Based on the excellent documentation at http://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-header-based-auth.html.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageS3Auth</name><parameter_list>(
    <parameter><decl><type><name>StorageS3</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HttpQuery</name> <modifier>*</modifier></type><name>query</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>dateTime</name></decl></parameter>,
    <parameter><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>httpHeader</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>payloadHash</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>HTTP_QUERY</name></expr></argument>, <argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>dateTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>KEY_VALUE</name></expr></argument>, <argument><expr><name>httpHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>payloadHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>verb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>dateTime</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>httpHeader</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>payloadHash</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Get date from datetime</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>date</name> <init>= <expr><call><name>strSubN</name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set required headers</comment>
        <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>S3_HEADER_CONTENT_SHA256_STR</name></expr></argument>, <argument><expr><name>payloadHash</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>S3_HEADER_DATE_STR</name></expr></argument>, <argument><expr><name>dateTime</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_HOST_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>bucketEndpoint</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>securityToken</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>S3_HEADER_TOKEN_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>securityToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Generate canonical request and signed headers</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier></type><name>headerList</name> <init>= <expr><call><name>strLstSort</name><argument_list>(<argument><expr><call><name>strLstDup</name><argument_list>(<argument><expr><call><name>httpHeaderList</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>signedHeaders</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>canonicalRequest</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s\n%s\n%s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>query</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpQueryRenderP</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>headerIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>headerIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>headerList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>headerIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>headerKey</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>headerList</name></expr></argument>, <argument><expr><name>headerIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>headerKeyLower</name> <init>= <expr><call><name>strLower</name><argument_list>(<argument><expr><call><name>strDup</name><argument_list>(<argument><expr><name>headerKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Skip the authorization (exists on retry) and content-length headers since they do not need to be signed</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>headerKeyLower</name></expr></argument>, <argument><expr><name>HTTP_HEADER_AUTHORIZATION_STR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>headerKeyLower</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <continue>continue;</continue></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>canonicalRequest</name></expr></argument>, <argument><expr><literal type="string">"%s:%s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>headerKeyLower</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>headerKey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>signedHeaders</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>signedHeaders</name> <operator>=</operator> <call><name>strCat</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>headerKeyLower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>signedHeaders</name></expr></argument>, <argument><expr><literal type="string">";%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>headerKeyLower</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>canonicalRequest</name></expr></argument>, <argument><expr><literal type="string">"\n%s\n%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>signedHeaders</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>payloadHash</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Generate string to sign</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>stringToSign</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(
            <argument><expr><name>AWS4_HMAC_SHA256</name> <literal type="string">"\n%s\n%s/%s/"</literal> <name>S3</name> <literal type="string">"/"</literal> <name>AWS4_REQUEST</name> <literal type="string">"\n%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>dateTime</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>region</name></name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha256</name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name>canonicalRequest</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Generate signing key.  This key only needs to be regenerated every seven days but we'll do it once a day to keep the</comment>
        <comment type="line">// logic simple.  It's a relatively expensive operation so we'd rather not do it for every request.</comment>
        <comment type="line">// If the cached signing key has expired (or has none been generated) then regenerate it</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>date</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>signingKeyDate</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>dateKey</name> <init>= <expr><call><name>cryptoHmacOne</name><argument_list>(
                <argument><expr><name>hashTypeSha256</name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>AWS4</name> <literal type="string">"%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>secretAccessKey</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>regionKey</name> <init>= <expr><call><name>cryptoHmacOne</name><argument_list>(<argument><expr><name>hashTypeSha256</name></expr></argument>, <argument><expr><name>dateKey</name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>region</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>serviceKey</name> <init>= <expr><call><name>cryptoHmacOne</name><argument_list>(<argument><expr><name>hashTypeSha256</name></expr></argument>, <argument><expr><name>regionKey</name></expr></argument>, <argument><expr><name>S3_BUF</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Switch to the object context so signing key and date are not lost</comment>
            <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>signingKey</name></name> <operator>=</operator> <call><name>cryptoHmacOne</name><argument_list>(<argument><expr><name>hashTypeSha256</name></expr></argument>, <argument><expr><name>serviceKey</name></expr></argument>, <argument><expr><name>AWS4_REQUEST_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>signingKeyDate</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Generate authorization header</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>authorization</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(
            <argument><expr><name>AWS4_HMAC_SHA256</name> <literal type="string">" Credential=%s/%s/%s/"</literal> <name>S3</name> <literal type="string">"/"</literal> <name>AWS4_REQUEST</name> <literal type="string">",SignedHeaders=%s,Signature=%s"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>accessKey</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>date</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>region</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>signedHeaders</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHmacOne</name><argument_list>(<argument><expr><name>hashTypeSha256</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>signingKey</name></name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name>stringToSign</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_AUTHORIZATION_STR</name></expr></argument>, <argument><expr><name>authorization</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Convert YYYY-MM-DDTHH:MM:SS.MSECZ format to time_t. This format is very nearly ISO-8601 except for the inclusion of milliseconds,
which are discarded here.
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>time_t</name></type>
<name>storageS3CvtTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>time</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>time</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(
        <argument><expr><name>TIME</name></expr></argument>,
        <argument><expr><call><name>epochFromParts</name><argument_list>(
            <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">4</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">5</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">8</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">11</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">14</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cvtZSubNToInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>time</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">17</literal></expr></argument>, <argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Automatically get credentials for an associated IAM role

Documentation for the response format is found at: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
Documentation for IMDSv2 tokens: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-data-retrieval.html
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_CREDENTIAL_HOST_STR</name></expr></argument>,                               <argument><expr><literal type="string">"169.254.169.254"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3_CREDENTIAL_PORT</name></cpp:macro>                                          <cpp:value>80</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3_CREDENTIAL_PATH</name></cpp:macro>                                          <cpp:value>"/latest/meta-data/iam/security-credentials"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3_CREDENTIAL_RENEW_SEC</name></cpp:macro>                                     <cpp:value>(5 * 60)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>S3_JSON_TAG_ACCESS_KEY_ID_VAR</name></expr></argument>,                <argument><expr><literal type="string">"AccessKeyId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>S3_JSON_TAG_CODE_VAR</name></expr></argument>,                         <argument><expr><literal type="string">"Code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>S3_JSON_TAG_EXPIRATION_VAR</name></expr></argument>,                   <argument><expr><literal type="string">"Expiration"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>S3_JSON_TAG_SECRET_ACCESS_KEY_VAR</name></expr></argument>,            <argument><expr><literal type="string">"SecretAccessKey"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>S3_JSON_TAG_TOKEN_VAR</name></expr></argument>,                        <argument><expr><literal type="string">"Token"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<expr_stmt><expr><call><name>VARIANT_STRDEF_STATIC</name><argument_list>(<argument><expr><name>S3_JSON_VALUE_SUCCESS_VAR</name></expr></argument>,                    <argument><expr><literal type="string">"Success"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageS3AuthAuto</name><parameter_list>(<parameter><decl><type><name>StorageS3</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><name>HttpHeader</name> <modifier>*</modifier><specifier>const</specifier></type> <name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_HEADER</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Retrieve the IMDSv2 token. Do not store the token because it will likely be expired by the time the credentials expire</comment>
        <comment type="line">// since credentials have a much longer default expiration. The TTL needs to be long enough to survive retries of the two</comment>
        <comment type="line">// metadata queries.</comment>
        <decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tokenHeader</name> <init>= <expr><call><name>httpHeaderDup</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(
            <argument><expr><name>tokenHeader</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"x-aws-ec2-metadata-token-ttl-seconds"</literal></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><call><name>httpClientTimeout</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>credHttpClient</name></name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">1000</literal> <operator>*</operator> <literal type="number">3</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><call><name>httpRequestNewP</name><argument_list>(
            <argument><expr><name><name>this</name><operator>-&gt;</operator><name>credHttpClient</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"/latest/api/token"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name>tokenHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><call><name>httpRequestResponse</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set IMDSv2 token on success. If the token request fails for any reason assume that IMDSv2 is not supported. If the</comment>
        <comment type="line">// instance only supports IMDSv2 then subsequent metadata requests will fail because of the missing token.</comment>
        <if_stmt><if>if <condition>(<expr><call><name>httpResponseCodeOk</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"x-aws-ec2-metadata-token"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// If the role was not set explicitly or retrieved previously then retrieve it</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>credRole</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Request the role</comment>
            <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><call><name>httpRequestNewP</name><argument_list>(
                <argument><expr><name><name>this</name><operator>-&gt;</operator><name>credHttpClient</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>S3_CREDENTIAL_PATH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name>header</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><call><name>httpRequestResponse</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Not found likely means no role is associated with this instance</comment>
            <if_stmt><if>if <condition>(<expr><call><name>httpResponseCode</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HTTP_RESPONSE_CODE_NOT_FOUND</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW</name><argument_list>(
                    <argument><expr><name>ProtocolError</name></expr></argument>,
                    <argument><expr><literal type="string">"role to retrieve temporary credentials not found\n"</literal>
                        <literal type="string">"HINT: is a valid IAM role associated with this instance?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else an error that we can't handle</comment>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>httpResponseCodeOk</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>httpRequestError</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Get role from the text response</comment>
            <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>credRole</name></name> <operator>=</operator> <call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Retrieve the temp credentials</comment>
        <expr_stmt><expr><name>request</name> <operator>=</operator> <call><name>httpRequestNewP</name><argument_list>(
            <argument><expr><name><name>this</name><operator>-&gt;</operator><name>credHttpClient</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>S3_CREDENTIAL_PATH</name> <literal type="string">"/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>credRole</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>httpRequestResponse</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Not found likely means the role is not valid</comment>
        <if_stmt><if>if <condition>(<expr><call><name>httpResponseCode</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>HTTP_RESPONSE_CODE_NOT_FOUND</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                <argument><expr><name>ProtocolError</name></expr></argument>,
                <argument><expr><literal type="string">"role '%s' not found\n"</literal>
                    <literal type="string">"HINT: is '%s' a valid IAM role associated with this instance?"</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>credRole</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>credRole</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else an error that we can't handle</comment>
        <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>httpResponseCodeOk</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpRequestError</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Get credentials from the JSON response</comment>
        <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier></type><name>credential</name> <init>= <expr><call><name>varKv</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Check the code field for errors</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>code</name> <init>= <expr><call><name>kvGetDefault</name><argument_list>(<argument><expr><name>credential</name></expr></argument>, <argument><expr><name>S3_JSON_TAG_CODE_VAR</name></expr></argument>, <argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"code field is missing"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name>code</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"error code missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>varEq</name><argument_list>(<argument><expr><name>code</name></expr></argument>, <argument><expr><name>S3_JSON_VALUE_SUCCESS_VAR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unable to retrieve temporary credentials: %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><name>code</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Make sure the required values are present</comment>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>credential</name></expr></argument>, <argument><expr><name>S3_JSON_TAG_ACCESS_KEY_ID_VAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"access key missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>credential</name></expr></argument>, <argument><expr><name>S3_JSON_TAG_SECRET_ACCESS_KEY_VAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"secret access key missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>credential</name></expr></argument>, <argument><expr><name>S3_JSON_TAG_TOKEN_VAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"token missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Copy credentials</comment>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>accessKey</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>credential</name></expr></argument>, <argument><expr><name>S3_JSON_TAG_ACCESS_KEY_ID_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>secretAccessKey</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>credential</name></expr></argument>, <argument><expr><name>S3_JSON_TAG_SECRET_ACCESS_KEY_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>securityToken</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>credential</name></expr></argument>, <argument><expr><name>S3_JSON_TAG_TOKEN_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Update expiration time</comment>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>credential</name></expr></argument>, <argument><expr><name>S3_JSON_TAG_EXPIRATION_VAR</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"expiration missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>credExpirationTime</name></name> <operator>=</operator> <call><name>storageS3CvtTime</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>credential</name></expr></argument>, <argument><expr><name>S3_JSON_TAG_EXPIRATION_VAR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Automatically get credentials for an associated web identity service account

Documentation is found at: https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRoleWithWebIdentity.html
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_STS_HOST_STR</name></expr></argument>,                                      <argument><expr><literal type="string">"sts.amazonaws.com"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3_STS_PORT</name></cpp:macro>                                                 <cpp:value>443</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageS3AuthWebId</name><parameter_list>(<parameter><decl><type><name>StorageS3</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>HttpHeader</name> <modifier>*</modifier><specifier>const</specifier></type> <name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_HEADER</name></expr></argument>, <argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Get credentials</comment>
        <decl_stmt><decl><type><name>HttpQuery</name> <modifier>*</modifier><specifier>const</specifier></type> <name>query</name> <init>= <expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Action"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"AssumeRoleWithWebIdentity"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"RoleArn"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>credRole</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"RoleSessionName"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>PROJECT_NAME</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Version"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"2011-06-15"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"WebIdentityToken"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>webIdToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>request</name> <init>= <expr><call><name>httpRequestNewP</name><argument_list>(
            <argument><expr><name><name>this</name><operator>-&gt;</operator><name>credHttpClient</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name>header</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name>query</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier><specifier>const</specifier></type> <name>response</name> <init>= <expr><call><name>httpRequestResponse</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><call><name>httpResponseCode</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_RESPONSE_CODE_NOT_FOUND</name></expr></argument>, <argument><expr><literal type="string">"invalid response code"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Copy credentials</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xmlCred</name> <init>=
            <expr><call><name>xmlNodeChild</name><argument_list>(
                <argument><expr><call><name>xmlNodeChild</name><argument_list>(
                    <argument><expr><call><name>xmlDocumentRoot</name><argument_list>(<argument><expr><call><name>xmlDocumentNewBuf</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"AssumeRoleWithWebIdentityResult"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Credentials"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>accessKeyNode</name> <init>= <expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xmlCred</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"AccessKeyId"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>secretAccessKeyNode</name> <init>= <expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xmlCred</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"SecretAccessKey"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>securityTokenNode</name> <init>= <expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xmlCred</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"SessionToken"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>accessKey</name></name> <operator>=</operator> <call><name>xmlNodeContent</name><argument_list>(<argument><expr><name>accessKeyNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>secretAccessKey</name></name> <operator>=</operator> <call><name>xmlNodeContent</name><argument_list>(<argument><expr><name>secretAccessKeyNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>securityToken</name></name> <operator>=</operator> <call><name>xmlNodeContent</name><argument_list>(<argument><expr><name>securityTokenNode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Update expiration time</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>credExpirationTime</name></name> <operator>=</operator> <call><name>storageS3CvtTime</name><argument_list>(<argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xmlCred</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"Expiration"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Process S3 request
***********************************************************************************************************************************/</comment>
<function><type><name>HttpRequest</name> <modifier>*</modifier></type>
<name>storageS3RequestAsync</name><parameter_list>(<parameter><decl><type><name>StorageS3</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>StorageS3RequestAsyncParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_HEADER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_QUERY</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>sseKms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>verb</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>requestHeader</name> <init>= <expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>header</name></name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then>
            <expr><call><name>httpHeaderNew</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><call><name>httpHeaderDup</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>

        <comment type="line">// Set content length</comment>
        <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(
            <argument><expr><name>requestHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>bufEmpty</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>ZERO_STR</name></expr> </then><else>: <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%zu"</literal></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Calculate content-md5 header if there is content</comment>
        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(
                <argument><expr><name>requestHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_MD5_STR</name></expr></argument>, <argument><expr><call><name>strNewEncode</name><argument_list>(<argument><expr><name>encodeBase64</name></expr></argument>, <argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeMd5</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Set KMS headers when requested</comment>
        <if_stmt><if>if <condition>(<expr><name><name>param</name><operator>.</operator><name>sseKms</name></name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>-&gt;</operator><name>kmsKeyId</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>requestHeader</name></expr></argument>, <argument><expr><name>S3_HEADER_SRVSDENC_STR</name></expr></argument>, <argument><expr><name>S3_HEADER_SRVSDENC_KMS_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>httpHeaderPut</name><argument_list>(<argument><expr><name>requestHeader</name></expr></argument>, <argument><expr><name>S3_HEADER_SRVSDENC_KMSKEYID_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>kmsKeyId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// When using path-style URIs the bucket name needs to be prepended</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>uriStyle</name></name> <operator>==</operator> <name>storageS3UriStylePath</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"/%s%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>bucket</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// If temp credentials will be expiring soon then renew them</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>credExpirationTime</name></name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>(</operator><name><name>this</name><operator>-&gt;</operator><name>credExpirationTime</name></name> <operator>-</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&lt;</operator> <name>S3_CREDENTIAL_RENEW_SEC</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Free old credentials</comment>
            <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>accessKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>secretAccessKey</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>securityToken</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Set content-length and host headers</comment>
            <decl_stmt><decl><type><name>HttpHeader</name> <modifier>*</modifier></type><name>credHeader</name> <init>= <expr><call><name>httpHeaderNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(<argument><expr><name>credHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>, <argument><expr><name>ZERO_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>httpHeaderAdd</name><argument_list>(<argument><expr><name>credHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_HOST_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>credHost</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Get credentials</comment>
            <switch>switch <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>keyType</name></name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Auto authentication</comment>
                <case>case <expr><name>storageS3KeyTypeAuto</name></expr>:</case>
                    <expr_stmt><expr><call><name>storageS3AuthAuto</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>credHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Web identity authentication</comment>
                <default>default:</default>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>keyType</name></name> <operator>==</operator> <name>storageS3KeyTypeWebId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>storageS3AuthWebId</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>credHeader</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block>
            </block_content>}</block></switch>

            <comment type="line">// Reset the signing key date so the signing key gets regenerated</comment>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>signingKeyDate</name></name> <operator>=</operator> <name>YYYYMMDD_STR</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Encode path</comment>
        <expr_stmt><expr><name>path</name> <operator>=</operator> <call><name>httpUriEncode</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Generate authorization header</comment>
        <expr_stmt><expr><call><name>storageS3Auth</name><argument_list>(
            <argument><expr><name>this</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>, <argument><expr><call><name>storageS3DateTime</name><argument_list>(<argument><expr><call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>requestHeader</name></expr></argument>,
            <argument><expr><ternary><condition><expr><name><name>param</name><operator>.</operator><name>content</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>bufEmpty</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr> ?</condition><then>
                <expr><name>HASH_TYPE_SHA256_ZERO_STR</name></expr> </then><else>: <expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>cryptoHashOne</name><argument_list>(<argument><expr><name>hashTypeSha256</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Send request</comment>
        <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>httpRequestNewP</name><argument_list>(
                <argument><expr><name><name>this</name><operator>-&gt;</operator><name>httpClient</name></name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name>requestHeader</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HttpResponse</name> <modifier>*</modifier></type>
<name>storageS3Response</name><parameter_list>(<parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name></decl></parameter>, <parameter><decl><type><name>StorageS3ResponseParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>allowMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>request</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Get response</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>httpRequestResponse</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Error if the request was not successful</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>httpResponseCodeOk</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name><name>param</name><operator>.</operator><name>allowMissing</name></name> <operator>||</operator> <call><name>httpResponseCode</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>HTTP_RESPONSE_CODE_NOT_FOUND</name><operator>)</operator></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpRequestError</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Move response to the prior context</comment>
        <expr_stmt><expr><call><name>httpResponseMove</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>HttpResponse</name> <modifier>*</modifier></type>
<name>storageS3Request</name><parameter_list>(<parameter><decl><type><name>StorageS3</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>verb</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>StorageS3RequestParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_HEADER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>HTTP_QUERY</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>allowMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>sseKms</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>request</name> <init>= <expr><call><name>storageS3RequestAsyncP</name><argument_list>(
        <argument><expr><name>this</name></expr></argument>, <argument><expr><name>verb</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><operator>.</operator><name>header</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>header</name></name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>query</name></name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>content</name></name></expr></argument>, <argument><expr><operator>.</operator><name>sseKms</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>sseKms</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>storageS3ResponseP</name><argument_list>(
        <argument><expr><name>request</name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>allowMissing</name></name></expr></argument>, <argument><expr><operator>.</operator><name>contentIo</name> <operator>=</operator> <name><name>param</name><operator>.</operator><name>contentIo</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>httpRequestFree</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>HTTP_RESPONSE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
General function for listing files to be used by other list routines
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageS3ListInternal</name><parameter_list>(
    <parameter><decl><type><name>StorageS3</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>expression</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recurse</name></decl></parameter>,
    <parameter><decl><type><name>StorageListCallback</name></type> <name>callback</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>callback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Build the base prefix by stripping off the initial /</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>basePrefix</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strSize</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>basePrefix</name> <operator>=</operator> <name>EMPTY_STR</name></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>basePrefix</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strSub</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Get the expression prefix when possible to limit initial results</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>expressionPrefix</name> <init>= <expr><call><name>regExpPrefix</name><argument_list>(<argument><expr><name>expression</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If there is an expression prefix then use it to build the query prefix, otherwise query prefix is base prefix</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>queryPrefix</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>expressionPrefix</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>queryPrefix</name> <operator>=</operator> <name>basePrefix</name></expr>;</expr_stmt></block_content></block></if>
        <else>else
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strEmpty</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>queryPrefix</name> <operator>=</operator> <name>expressionPrefix</name></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>queryPrefix</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>expressionPrefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></else></if_stmt>

        <comment type="line">// Create query</comment>
        <decl_stmt><decl><type><name>HttpQuery</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Add the delimiter to not recurse</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>recurse</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>S3_QUERY_DELIMITER_STR</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Use list type 2</comment>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>S3_QUERY_LIST_TYPE_STR</name></expr></argument>, <argument><expr><name>S3_QUERY_VALUE_LIST_TYPE_2_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Don't specify empty prefix because it is the default</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEmpty</name><argument_list>(<argument><expr><name>queryPrefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>S3_QUERY_PREFIX_STR</name></expr></argument>, <argument><expr><name>queryPrefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Loop as long as a continuation token returned</comment>
        <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <comment type="line">// Use an inner mem context here because we could potentially be retrieving millions of files so it is a good idea to</comment>
            <comment type="line">// free memory at regular intervals</comment>
            <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                <comment type="line">// If there is an outstanding async request then wait for the response</comment>
                <if_stmt><if>if <condition>(<expr><name>request</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>storageS3ResponseP</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>httpRequestFree</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>request</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else get the response immediately from a sync request</comment>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name>response</name> <operator>=</operator> <call><name>storageS3RequestP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <decl_stmt><decl><type><name>XmlNode</name> <modifier>*</modifier></type><name>xmlRoot</name> <init>= <expr><call><name>xmlDocumentRoot</name><argument_list>(<argument><expr><call><name>xmlDocumentNewBuf</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// If list is truncated then send an async request to get more data</comment>
                <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xmlRoot</name></expr></argument>, <argument><expr><name>S3_XML_TAG_IS_TRUNCATED_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>nextContinuationToken</name> <init>= <expr><call><name>xmlNodeContent</name><argument_list>(
                        <argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xmlRoot</name></expr></argument>, <argument><expr><name>S3_XML_TAG_NEXT_CONTINUATION_TOKEN_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><operator>!</operator><call><name>strEmpty</name><argument_list>(<argument><expr><name>nextContinuationToken</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>S3_XML_TAG_NEXT_CONTINUATION_TOKEN</name> <literal type="string">" may not be empty"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <expr_stmt><expr><call><name>httpQueryPut</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>S3_QUERY_CONTINUATION_TOKEN_STR</name></expr></argument>, <argument><expr><name>nextContinuationToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Store request in the outer temp context</comment>
                    <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
                    <block>{<block_content>
                        <expr_stmt><expr><name>request</name> <operator>=</operator> <call><name>storageS3RequestAsyncP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_GET_STR</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Get prefix list</comment>
                <decl_stmt><decl><type><name>XmlNodeList</name> <modifier>*</modifier></type><name>subPathList</name> <init>= <expr><call><name>xmlNodeChildList</name><argument_list>(<argument><expr><name>xmlRoot</name></expr></argument>, <argument><expr><name>S3_XML_TAG_COMMON_PREFIXES_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>subPathIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>subPathIdx</name> <operator>&lt;</operator> <call><name>xmlNodeLstSize</name><argument_list>(<argument><expr><name>subPathList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>subPathIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier></type><name>subPathNode</name> <init>= <expr><call><name>xmlNodeLstGet</name><argument_list>(<argument><expr><name>subPathList</name></expr></argument>, <argument><expr><name>subPathIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Get path name</comment>
                    <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>=
                    <expr><block>{
                        <expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>,
                        <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>subPathNode</name></expr></argument>, <argument><expr><name>S3_XML_TAG_PREFIX_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
                        <expr><operator>.</operator><name>exists</name> <operator>=</operator> <name>true</name></expr>,
                    }</block></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Strip off base prefix and final /</comment>
                    <expr_stmt><expr><name><name>info</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strSubN</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <comment type="line">// Add type info if requested</comment>
                    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>storageInfoLevelType</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>type</name></name> <operator>=</operator> <name>storageTypePath</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="line">// Callback with info</comment>
                    <expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <comment type="line">// Get file list</comment>
                <decl_stmt><decl><type><name>XmlNodeList</name> <modifier>*</modifier></type><name>fileList</name> <init>= <expr><call><name>xmlNodeChildList</name><argument_list>(<argument><expr><name>xmlRoot</name></expr></argument>, <argument><expr><name>S3_XML_TAG_CONTENTS_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>fileIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>fileIdx</name> <operator>&lt;</operator> <call><name>xmlNodeLstSize</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>fileIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier></type><name>fileNode</name> <init>= <expr><call><name>xmlNodeLstGet</name><argument_list>(<argument><expr><name>fileList</name></expr></argument>, <argument><expr><name>fileIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Get file name</comment>
                    <decl_stmt><decl><type><name>StorageInfo</name></type> <name>info</name> <init>=
                    <expr><block>{
                        <expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>,
                        <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>fileNode</name></expr></argument>, <argument><expr><name>S3_XML_TAG_KEY_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
                        <expr><operator>.</operator><name>exists</name> <operator>=</operator> <name>true</name></expr>,
                    }</block></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Strip off the base prefix when present</comment>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEmpty</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>name</name></name> <operator>=</operator> <call><name>strSub</name><argument_list>(<argument><expr><name><name>info</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>basePrefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <comment type="line">// Add basic info if requested (no need to add type info since file is default type)</comment>
                    <if_stmt><if>if <condition>(<expr><name>level</name> <operator>&gt;=</operator> <name>storageInfoLevelBasic</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>cvtZToUInt64</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>fileNode</name></expr></argument>, <argument><expr><name>S3_XML_TAG_SIZE_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>info</name><operator>.</operator><name>timeModified</name></name> <operator>=</operator> <call><name>storageS3CvtTime</name><argument_list>(
                            <argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>fileNode</name></expr></argument>, <argument><expr><name>S3_XML_TAG_LAST_MODIFIED_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <comment type="line">// Callback with info</comment>
                    <expr_stmt><expr><call><name>callback</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name>request</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>;</do>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StorageInfo</name></type>
<name>storageS3Info</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInterfaceInfoParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>param</name></expr>;</expr_stmt>                                                <comment type="line">// No parameters are used</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Attempt to get file info</comment>
    <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier><specifier>const</specifier></type> <name>httpResponse</name> <init>= <expr><call><name>storageS3RequestP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_HEAD_STR</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><operator>.</operator><name>allowMissing</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Does the file exist?</comment>
    <decl_stmt><decl><type><name>StorageInfo</name></type> <name>result</name> <init>= <expr><block>{<expr><operator>.</operator><name>level</name> <operator>=</operator> <name>level</name></expr>, <expr><operator>.</operator><name>exists</name> <operator>=</operator> <macro><name>httpResponseCodeOk</name><argument_list>(<argument>httpResponse</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add basic level info if requested and the file exists (no need to add type info since file is default type)</comment>
    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>level</name></name> <operator>&gt;=</operator> <name>storageInfoLevelBasic</name> <operator>&amp;&amp;</operator> <name><name>result</name><operator>.</operator><name>exists</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>HttpHeader</name> <modifier>*</modifier><specifier>const</specifier></type> <name>httpHeader</name> <init>= <expr><call><name>httpResponseHeader</name><argument_list>(<argument><expr><name>httpResponse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>contentLength</name> <init>= <expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_CONTENT_LENGTH_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name>contentLength</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"content length missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>size</name></name> <operator>=</operator> <call><name>cvtZToUInt64</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>contentLength</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lastModified</name> <init>= <expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><name>httpHeader</name></expr></argument>, <argument><expr><name>HTTP_HEADER_LAST_MODIFIED_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name>lastModified</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"last modified missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>timeModified</name></name> <operator>=</operator> <call><name>httpDateToTime</name><argument_list>(<argument><expr><name>lastModified</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>httpResponseFree</name><argument_list>(<argument><expr><name>httpResponse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageS3ListCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>callbackData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfo</name> <modifier>*</modifier><specifier>const</specifier></type> <name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>storageLstAdd</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>StorageList</name> <modifier>*</modifier></type>
<name>storageS3List</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>path</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfoLevel</name></type> <name>level</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInterfaceListParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>level</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>expression</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>storageLstNew</name><argument_list>(<argument><expr><name>level</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>storageS3ListInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>level</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>expression</name></name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><name>storageS3ListCallback</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_LIST</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StorageRead</name> <modifier>*</modifier></type>
<name>storageS3NewRead</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>ignoreMissing</name></decl></parameter>, <parameter><decl><type><name>StorageInterfaceNewReadParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>ignoreMissing</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>offset</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_READ</name></expr></argument>, <argument><expr><call><name>storageReadS3New</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name>ignoreMissing</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>offset</name></name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>limit</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StorageWrite</name> <modifier>*</modifier></type>
<name>storageS3NewWrite</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>file</name></decl></parameter>, <parameter><decl><type><name>StorageInterfaceNewWriteParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>param</name></expr>;</expr_stmt>                                                <comment type="line">// No parameters are used</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>createPath</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>truncate</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>user</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>group</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>param</name><operator>.</operator><name>timeModified</name></name> <operator>==</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_WRITE</name></expr></argument>, <argument><expr><call><name>storageWriteS3New</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>file</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>partSize</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>StorageS3PathRemoveData</name>
<block>{
    <decl_stmt><decl><type><name>StorageS3</name> <modifier>*</modifier></type><name>this</name></decl>;</decl_stmt>                                                <comment type="line">// Storage object</comment>
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context to create xml document in</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>size</name></decl>;</decl_stmt>                                              <comment type="line">// Size of delete request</comment>
    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>                                           <comment type="line">// Async delete request</comment>
    <decl_stmt><decl><type><name>XmlDocument</name> <modifier>*</modifier></type><name>xml</name></decl>;</decl_stmt>                                               <comment type="line">// Delete xml</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl>;</decl_stmt>                                             <comment type="line">// Root path of remove</comment>
}</block></struct></type> <name>StorageS3PathRemoveData</name>;</typedef>

<function><type><specifier>static</specifier> <name>HttpRequest</name> <modifier>*</modifier></type>
<name>storageS3PathRemoveInternal</name><parameter_list>(<parameter><decl><type><name>StorageS3</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><name>HttpRequest</name> <modifier>*</modifier><specifier>const</specifier></type> <name>request</name></decl></parameter>, <parameter><decl><type><name>XmlDocument</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>XML_DOCUMENT</name></expr></argument>, <argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get response for async request</comment>
    <if_stmt><if>if <condition>(<expr><name>request</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>response</name> <init>= <expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><call><name>storageS3ResponseP</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Nothing is returned when there are no errors</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufEmpty</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>XmlNodeList</name> <modifier>*</modifier></type><name>errorList</name> <init>= <expr><call><name>xmlNodeChildList</name><argument_list>(<argument><expr><call><name>xmlDocumentRoot</name><argument_list>(<argument><expr><call><name>xmlDocumentNewBuf</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>S3_XML_TAG_ERROR_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Attempt to remove errored files one at a time rather than retrying the batch</comment>
                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>errorIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>errorIdx</name> <operator>&lt;</operator> <call><name>xmlNodeLstSize</name><argument_list>(<argument><expr><name>errorList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>errorIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>storageS3RequestP</name><argument_list>(
                        <argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE_STR</name></expr></argument>,
                        <argument><expr><call><name>strNewFmt</name><argument_list>(
                            <argument><expr><literal type="string">"/%s"</literal></expr></argument>,
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><call><name>xmlNodeLstGet</name><argument_list>(<argument><expr><name>errorList</name></expr></argument>, <argument><expr><name>errorIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>S3_XML_TAG_KEY_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>httpRequestFree</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Send new async request if there is more to remove</comment>
    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>xml</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HttpQuery</name> <modifier>*</modifier><specifier>const</specifier></type> <name>query</name> <init>= <expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>S3_QUERY_DELETE_STR</name></expr></argument>, <argument><expr><name>EMPTY_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>content</name> <init>= <expr><call><name>xmlDocumentBuf</name><argument_list>(<argument><expr><name>xml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>storageS3RequestAsyncP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_POST_STR</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name>query</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>httpQueryFree</name><argument_list>(<argument><expr><name>query</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>bufFree</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>HTTP_REQUEST</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageS3PathRemoveCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInfo</name> <modifier>*</modifier></type><name>info</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STORAGE_INFO</name></expr></argument>, <argument><expr><name>info</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>info</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Only delete files since paths don't really exist</comment>
    <if_stmt><if>if <condition>(<expr><name><name>info</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>storageTypeFile</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageS3PathRemoveData</name> <modifier>*</modifier></type><name>data</name> <init>= <expr><operator>(</operator><name>StorageS3PathRemoveData</name> <operator>*</operator><operator>)</operator><name>callbackData</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// If there is something to delete then create the request</comment>
        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>xml</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>data-&gt;memContext</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>xml</name></name> <operator>=</operator> <call><name>xmlDocumentNew</name><argument_list>(<argument><expr><name>S3_XML_TAG_DELETE_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>xmlNodeContentSet</name><argument_list>(<argument><expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><call><name>xmlDocumentRoot</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>xml</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>S3_XML_TAG_QUIET_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TRUE_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Add to delete list</comment>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><call><name>xmlNodeContentSet</name><argument_list>(
                <argument><expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><call><name>xmlDocumentRoot</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>xml</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>S3_XML_TAG_OBJECT_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>S3_XML_TAG_KEY_STR</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>path</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>info</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>size</name></name><operator>++</operator></expr>;</expr_stmt>

        <comment type="line">// Delete list when it is full</comment>
        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>-&gt;</operator><name>size</name></name> <operator>==</operator> <name><name>data</name><operator>-&gt;</operator><name>this</name><operator>-&gt;</operator><name>deleteMax</name></name></expr>)</condition>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>data-&gt;memContext</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <call><name>storageS3PathRemoveInternal</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>this</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>request</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>-&gt;</operator><name>xml</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>xmlDocumentFree</name><argument_list>(<argument><expr><name><name>data</name><operator>-&gt;</operator><name>xml</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>xml</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>data</name><operator>-&gt;</operator><name>size</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>bool</name></type>
<name>storageS3PathRemove</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>recurse</name></decl></parameter>, <parameter><decl><type><name>StorageInterfacePathRemoveParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>recurse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>(</operator><name>void</name><operator>)</operator><name>param</name></expr>;</expr_stmt>                                                <comment type="line">// No parameters are used</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageS3PathRemoveData</name></type> <name>data</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>this</name> <operator>=</operator> <name>this</name></expr>,
            <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>path</name> <operator>=</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call> <operator>?</operator> <name>EMPTY_STR</name> <operator>:</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s/"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strSub</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>storageS3ListInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>storageInfoLevelType</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><name>storageS3PathRemoveCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Call if there is more to be removed</comment>
        <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>xml</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>data</name><operator>.</operator><name>request</name></name> <operator>=</operator> <call><name>storageS3PathRemoveInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>request</name></name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>xml</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Check response on last async request</comment>
        <expr_stmt><expr><call><name>storageS3PathRemoveInternal</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name><name>data</name><operator>.</operator><name>request</name></name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageS3Remove</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>file</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>StorageInterfaceRemoveParam</name></type> <name>param</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>param</name><operator>.</operator><name>errorOnMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>file</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><name><name>param</name><operator>.</operator><name>errorOnMissing</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>httpResponseFree</name><argument_list>(<argument><expr><call><name>storageS3RequestP</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>HTTP_VERB_DELETE_STR</name></expr></argument>, <argument><expr><name>file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StorageInterface</name></type> <name>storageInterfaceS3</name> <init>=
<expr><block>{
    <expr><operator>.</operator><name>info</name> <operator>=</operator> <name>storageS3Info</name></expr>,
    <expr><operator>.</operator><name>list</name> <operator>=</operator> <name>storageS3List</name></expr>,
    <expr><operator>.</operator><name>newRead</name> <operator>=</operator> <name>storageS3NewRead</name></expr>,
    <expr><operator>.</operator><name>newWrite</name> <operator>=</operator> <name>storageS3NewWrite</name></expr>,
    <expr><operator>.</operator><name>pathRemove</name> <operator>=</operator> <name>storageS3PathRemove</name></expr>,
    <expr><operator>.</operator><name>remove</name> <operator>=</operator> <name>storageS3Remove</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<function><type><name>Storage</name> <modifier>*</modifier></type>
<name>storageS3New</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>path</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>StoragePathExpressionCallback</name></type> <name>pathExpressionFunction</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>bucket</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>endPoint</name></decl></parameter>, <parameter><decl><type><name>StorageS3UriStyle</name></type> <name>uriStyle</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>region</name></decl></parameter>, <parameter><decl><type><name>StorageS3KeyType</name></type> <name>keyType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>accessKey</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>secretAccessKey</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>securityToken</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>kmsKeyId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>credRole</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>webIdToken</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>partSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>host</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>port</name></decl></parameter>, <parameter><decl><type><name>TimeMSec</name></type> <name>timeout</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>verifyPeer</name></decl></parameter>,
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>caFile</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>caPath</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>pathExpressionFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>endPoint</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>uriStyle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>keyType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>accessKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>secretAccessKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>securityToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>kmsKeyId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>webIdToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>SIZE</name></expr></argument>, <argument><expr><name>partSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>host</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>port</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>TIME_MSEC</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>verifyPeer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>caFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>caPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>path</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>bucket</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>endPoint</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>region</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>partSize</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>StorageS3</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageS3</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>StorageS3</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>interface</name> <operator>=</operator> <name>storageInterfaceS3</name></expr>,
            <expr><operator>.</operator><name>bucket</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>region</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>region</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>keyType</name> <operator>=</operator> <name>keyType</name></expr>,
            <expr><operator>.</operator><name>kmsKeyId</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>kmsKeyId</name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>partSize</name> <operator>=</operator> <name>partSize</name></expr>,
            <expr><operator>.</operator><name>deleteMax</name> <operator>=</operator> <name>STORAGE_S3_DELETE_MAX</name></expr>,
            <expr><operator>.</operator><name>uriStyle</name> <operator>=</operator> <name>uriStyle</name></expr>,
            <expr><operator>.</operator><name>bucketEndpoint</name> <operator>=</operator> <name>uriStyle</name> <operator>==</operator> <name>storageS3UriStyleHost</name> <operator>?</operator>
                <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s.%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>bucket</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>endPoint</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>:</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>endPoint</name></expr></argument>)</argument_list></call></expr>,

            <comment type="line">// Force the signing key to be generated on the first run</comment>
            <expr><operator>.</operator><name>signingKeyDate</name> <operator>=</operator> <name>YYYYMMDD_STR</name></expr>,
        }</block></expr>;</expr_stmt>

        <comment type="line">// Create the HTTP client used to service requests</comment>
        <if_stmt><if>if <condition>(<expr><name>host</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>host</name> <operator>=</operator> <name><name>driver</name><operator>-&gt;</operator><name>bucketEndpoint</name></name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>httpClient</name></name> <operator>=</operator> <call><name>httpClientNew</name><argument_list>(
            <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>verifyPeer</name></expr></argument>, <argument><expr><operator>.</operator><name>caFile</name> <operator>=</operator> <name>caFile</name></expr></argument>, <argument><expr><operator>.</operator><name>caPath</name> <operator>=</operator> <name>caPath</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Initialize authentication</comment>
        <switch>switch <condition>(<expr><name><name>driver</name><operator>-&gt;</operator><name>keyType</name></name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Create the HTTP client used to retrieve temporary security credentials</comment>
            <case>case <expr><name>storageS3KeyTypeAuto</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>accessKey</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>secretAccessKey</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>securityToken</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credRole</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credHost</name></name> <operator>=</operator> <name>S3_CREDENTIAL_HOST_STR</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credExpirationTime</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credHttpClient</name></name> <operator>=</operator> <call><name>httpClientNew</name><argument_list>(
                    <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>credHost</name></name></expr></argument>, <argument><expr><name>S3_CREDENTIAL_PORT</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </block_content>}</block>

            <comment type="line">// Create the HTTP client used to retrieve web identity security credentials</comment>
            <case>case <expr><name>storageS3KeyTypeWebId</name></expr>:</case>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>accessKey</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>secretAccessKey</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>securityToken</name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>credRole</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>webIdToken</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credRole</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>credRole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>webIdToken</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>webIdToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credHost</name></name> <operator>=</operator> <name>S3_STS_HOST_STR</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credExpirationTime</name></name> <operator>=</operator> <call><name>time</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>credHttpClient</name></name> <operator>=</operator> <call><name>httpClientNew</name><argument_list>(
                    <argument><expr><call><name>tlsClientNewP</name><argument_list>(
                        <argument><expr><call><name>sckClientNew</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>credHost</name></name></expr></argument>, <argument><expr><name>S3_STS_PORT</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>credHost</name></name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>timeout</name></expr></argument>, <argument><expr><name>true</name></expr></argument>,
                        <argument><expr><operator>.</operator><name>caFile</name> <operator>=</operator> <name>caFile</name></expr></argument>, <argument><expr><operator>.</operator><name>caPath</name> <operator>=</operator> <name>caPath</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>timeout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </block_content>}</block>

            <comment type="line">// Set shared key credentials</comment>
            <default>default:</default>
            <block>{<block_content>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>keyType</name></name> <operator>==</operator> <name>storageS3KeyTypeShared</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>accessKey</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>secretAccessKey</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>accessKey</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>accessKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>secretAccessKey</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>secretAccessKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>securityToken</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>securityToken</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <break>break;</break>
            </block_content>}</block>
        </block_content>}</block></switch>

        <comment type="line">// Create list of redacted headers</comment>
        <expr_stmt><expr><name><name>driver</name><operator>-&gt;</operator><name>headerRedactList</name></name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>, <argument><expr><name>HTTP_HEADER_AUTHORIZATION_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>, <argument><expr><name>S3_HEADER_DATE_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>driver</name><operator>-&gt;</operator><name>headerRedactList</name></name></expr></argument>, <argument><expr><name>S3_HEADER_TOKEN_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>storageNew</name><argument_list>(<argument><expr><name>STORAGE_S3_TYPE</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>write</name></expr></argument>, <argument><expr><name>pathExpressionFunction</name></expr></argument>, <argument><expr><name>driver</name></expr></argument>, <argument><expr><name><name>driver</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
