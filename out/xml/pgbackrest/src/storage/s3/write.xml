<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/storage/s3/write.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
S3 Storage File Write
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/s3/write.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/write.intern.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
S3 query tokens
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_QUERY_PART_NUMBER_STR</name></expr></argument>,                             <argument><expr><literal type="string">"partNumber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_QUERY_UPLOADS_STR</name></expr></argument>,                                 <argument><expr><literal type="string">"uploads"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_QUERY_UPLOAD_ID_STR</name></expr></argument>,                               <argument><expr><literal type="string">"uploadId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
XML tags
***********************************************************************************************************************************/</comment>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_ETAG_STR</name></expr></argument>,                                  <argument><expr><literal type="string">"ETag"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_UPLOAD_ID_STR</name></expr></argument>,                             <argument><expr><literal type="string">"UploadId"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_COMPLETE_MULTIPART_UPLOAD_STR</name></expr></argument>,             <argument><expr><literal type="string">"CompleteMultipartUpload"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_PART_STR</name></expr></argument>,                                  <argument><expr><literal type="string">"Part"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>STRING_STATIC</name><argument_list>(<argument><expr><name>S3_XML_TAG_PART_NUMBER_STR</name></expr></argument>,                           <argument><expr><literal type="string">"PartNumber"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>StorageWriteS3</name>
<block>{
    <decl_stmt><decl><type><name>StorageWriteInterface</name></type> <name>interface</name></decl>;</decl_stmt>                                <comment type="line">// Interface</comment>
    <decl_stmt><decl><type><name>StorageS3</name> <modifier>*</modifier></type><name>storage</name></decl>;</decl_stmt>                                             <comment type="line">// Storage that created this object</comment>

    <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name></decl>;</decl_stmt>                                           <comment type="line">// Async request</comment>
    <decl_stmt><decl><type><name>size_t</name></type> <name>partSize</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>partBuffer</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>uploadId</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>uploadPartList</name></decl>;</decl_stmt>
}</block></struct></type> <name>StorageWriteS3</name>;</typedef>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Macros for function logging
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_STORAGE_WRITE_S3_TYPE</name></cpp:macro>                                                                                         \
    <cpp:value>StorageWriteS3 *</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>FUNCTION_LOG_STORAGE_WRITE_S3_FORMAT</name><parameter_list>(<parameter><type><name>value</name></type></parameter>, <parameter><type><name>buffer</name></type></parameter>, <parameter><type><name>bufferSize</name></type></parameter>)</parameter_list></cpp:macro>                                                            \
    <cpp:value>objToLog(value, "StorageWriteS3", buffer, bufferSize)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Open the file
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageWriteS3Open</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageWriteS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_WRITE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name> <operator>==</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Allocate the part buffer</comment>
    <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name> <operator>=</operator> <call><name>bufNew</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partSize</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Flush bytes to upload part
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageWriteS3Part</name><parameter_list>(<parameter><decl><type><name>StorageWriteS3</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_WRITE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If there is an outstanding async request then wait for the response and store the part id</comment>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>request</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier><specifier>const</specifier></type> <name>response</name> <init>= <expr><call><name>storageS3ResponseP</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>uploadPartList</name></name></expr></argument>, <argument><expr><call><name>httpHeaderGet</name><argument_list>(<argument><expr><call><name>httpResponseHeader</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>HTTP_HEADER_ETAG_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>uploadPartList</name></name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>uploadPartList</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>httpResponseFree</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpRequestFree</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>request</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageWriteS3PartAsync</name><parameter_list>(<parameter><decl><type><name>StorageWriteS3</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_WRITE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Complete prior async request, if any</comment>
        <expr_stmt><expr><call><name>storageWriteS3Part</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Get the upload id if we have not already</comment>
        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>uploadId</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Initiate mult-part upload</comment>
            <decl_stmt><decl><type><name>XmlNode</name> <modifier>*</modifier></type><name>xmlRoot</name> <init>= <expr><call><name>xmlDocumentRoot</name><argument_list>(
                <argument><expr><call><name>xmlDocumentNewBuf</name><argument_list>(
                    <argument><expr><call><name>httpResponseContent</name><argument_list>(
                        <argument><expr><call><name>storageS3RequestP</name><argument_list>(
                            <argument><expr><name><name>this</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_POST_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>name</name></name></expr></argument>,
                            <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <call><name>httpQueryAdd</name><argument_list>(<argument><expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>S3_QUERY_UPLOADS_STR</name></expr></argument>, <argument><expr><name>EMPTY_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>sseKms</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Store the upload id</comment>
            <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>uploadId</name></name> <operator>=</operator> <call><name>xmlNodeContent</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xmlRoot</name></expr></argument>, <argument><expr><name>S3_XML_TAG_UPLOAD_ID_STR</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>uploadPartList</name></name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Upload the part async</comment>
        <decl_stmt><decl><type><name>HttpQuery</name> <modifier>*</modifier></type><name>query</name> <init>= <expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>S3_QUERY_UPLOAD_ID_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>uploadId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>httpQueryAdd</name><argument_list>(<argument><expr><name>query</name></expr></argument>, <argument><expr><name>S3_QUERY_PART_NUMBER_STR</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>uploadPartList</name></name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>request</name></name> <operator>=</operator> <call><name>storageS3RequestAsyncP</name><argument_list>(
                <argument><expr><name><name>this</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <name>query</name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Write to internal buffer
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageWriteS3</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier></type><name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageWriteS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_WRITE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>buffer</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>size_t</name></type> <name>bytesTotal</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// Continue until the write buffer has been exhausted</comment>
    <do>do
    <block>{<block_content>
        <comment type="line">// Copy as many bytes as possible into the part buffer</comment>
        <decl_stmt><decl><type><name>size_t</name></type> <name>bytesNext</name> <init>= <expr><ternary><condition><expr><call><name>bufRemains</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>bytesTotal</name></expr> ?</condition><then>
            <expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call> <operator>-</operator> <name>bytesTotal</name></expr> </then><else>: <expr><call><name>bufRemains</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name></expr></argument>)</argument_list></call></expr></else></ternary></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bufCatSub</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>bytesTotal</name></expr></argument>, <argument><expr><name>bytesNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>bytesTotal</name> <operator>+=</operator> <name>bytesNext</name></expr>;</expr_stmt>

        <comment type="line">// If the part buffer is full then write it</comment>
        <if_stmt><if>if <condition>(<expr><call><name>bufRemains</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name></expr></argument>)</argument_list></call> <operator>==</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>storageWriteS3PartAsync</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bufUsedZero</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    while <condition>(<expr><name>bytesTotal</name> <operator>!=</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>)</condition>;</do>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Close the file
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>storageWriteS3Close</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>StorageWriteS3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_WRITE_S3</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Close if the file has not already been closed</comment>
    <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// If a multi-part upload was started we need to finish that way</comment>
            <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>uploadId</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// If there is anything left in the part buffer then write it</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>bufEmpty</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>storageWriteS3PartAsync</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <comment type="line">// Complete prior async request, if any</comment>
                <expr_stmt><expr><call><name>storageWriteS3Part</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Generate the xml part list</comment>
                <decl_stmt><decl><type><name>XmlDocument</name> <modifier>*</modifier></type><name>partList</name> <init>= <expr><call><name>xmlDocumentNew</name><argument_list>(<argument><expr><name>S3_XML_TAG_COMPLETE_MULTIPART_UPLOAD_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>partIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>partIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>uploadPartList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>partIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><name>XmlNode</name> <modifier>*</modifier></type><name>partNode</name> <init>= <expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><call><name>xmlDocumentRoot</name><argument_list>(<argument><expr><name>partList</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>S3_XML_TAG_PART_STR</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>xmlNodeContentSet</name><argument_list>(<argument><expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><name>partNode</name></expr></argument>, <argument><expr><name>S3_XML_TAG_PART_NUMBER_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><name>partIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>xmlNodeContentSet</name><argument_list>(<argument><expr><call><name>xmlNodeAdd</name><argument_list>(<argument><expr><name>partNode</name></expr></argument>, <argument><expr><name>S3_XML_TAG_ETAG_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>uploadPartList</name></name></expr></argument>, <argument><expr><name>partIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <comment type="line">// Finalize the multi-part upload</comment>
                <decl_stmt><decl><type><name>HttpRequest</name> <modifier>*</modifier></type><name>request</name> <init>= <expr><call><name>storageS3RequestAsyncP</name><argument_list>(
                    <argument><expr><name><name>this</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_POST_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>name</name></name></expr></argument>,
                    <argument><expr><operator>.</operator><name>query</name> <operator>=</operator> <call><name>httpQueryAdd</name><argument_list>(<argument><expr><call><name>httpQueryNewP</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>S3_QUERY_UPLOAD_ID_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>uploadId</name></name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <call><name>xmlDocumentBuf</name><argument_list>(<argument><expr><name>partList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>HttpResponse</name> <modifier>*</modifier></type><name>response</name> <init>= <expr><call><name>storageS3ResponseP</name><argument_list>(<argument><expr><name>request</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Error if there is no etag in the result. This indicates that the request did not succeed despite the success code.</comment>
                <if_stmt><if>if <condition>(<expr><call><name>xmlNodeChild</name><argument_list>(
                        <argument><expr><call><name>xmlDocumentRoot</name><argument_list>(<argument><expr><call><name>xmlDocumentNewBuf</name><argument_list>(<argument><expr><call><name>httpResponseContent</name><argument_list>(<argument><expr><name>response</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>S3_XML_TAG_ETAG_STR</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>httpRequestError</name><argument_list>(<argument><expr><name>request</name></expr></argument>, <argument><expr><name>response</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else upload all the data in a single put</comment>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>storageS3RequestP</name><argument_list>(
                    <argument><expr><name><name>this</name><operator>-&gt;</operator><name>storage</name></name></expr></argument>, <argument><expr><name>HTTP_VERB_PUT_STR</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>interface</name><operator>.</operator><name>name</name></name></expr></argument>, <argument><expr><operator>.</operator><name>content</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name></expr></argument>, <argument><expr><operator>.</operator><name>sseKms</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>bufFree</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>partBuffer</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>StorageWrite</name> <modifier>*</modifier></type>
<name>storageWriteS3New</name><parameter_list>(<parameter><decl><type><name>StorageS3</name> <modifier>*</modifier></type><name>storage</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>name</name></decl></parameter>, <parameter><decl><type><name>size_t</name></type> <name>partSize</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STORAGE_S3</name></expr></argument>, <argument><expr><name>storage</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>storage</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>name</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StorageWrite</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>StorageWriteS3</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.allocQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>StorageWriteS3</name> <modifier>*</modifier></type><name>driver</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><operator>*</operator><name>driver</name> <operator>=</operator> <operator>(</operator><name>StorageWriteS3</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>storage</name> <operator>=</operator> <name>storage</name></expr>,
            <expr><operator>.</operator><name>partSize</name> <operator>=</operator> <name>partSize</name></expr>,

            <expr><operator>.</operator><name>interface</name> <operator>=</operator> <operator>(</operator><name>StorageWriteInterface</name><operator>)</operator>
            <block>{
                <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>STORAGE_S3_TYPE</name></expr>,
                <expr><operator>.</operator><name>name</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>,
                <expr><operator>.</operator><name>atomic</name> <operator>=</operator> <name>true</name></expr>,
                <expr><operator>.</operator><name>createPath</name> <operator>=</operator> <name>true</name></expr>,
                <expr><operator>.</operator><name>syncFile</name> <operator>=</operator> <name>true</name></expr>,
                <expr><operator>.</operator><name>syncPath</name> <operator>=</operator> <name>true</name></expr>,
                <expr><operator>.</operator><name>truncate</name> <operator>=</operator> <name>true</name></expr>,

                <expr><operator>.</operator><name>ioInterface</name> <operator>=</operator> <operator>(</operator><name>IoWriteInterface</name><operator>)</operator>
                <block>{
                    <expr><operator>.</operator><name>close</name> <operator>=</operator> <name>storageWriteS3Close</name></expr>,
                    <expr><operator>.</operator><name>open</name> <operator>=</operator> <name>storageWriteS3Open</name></expr>,
                    <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>storageWriteS3</name></expr>,
                }</block></expr>,
            }</block></expr>,
        }</block></expr>;</expr_stmt>

        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>storageWriteNew</name><argument_list>(<argument><expr><name>driver</name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>driver</name><operator>-&gt;</operator><name>interface</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE_WRITE</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
