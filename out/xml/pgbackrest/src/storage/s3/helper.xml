<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/storage/s3/helper.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
S3 Storage Helper
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/http/url.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/s3/helper.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>Storage</name> <modifier>*</modifier></type>
<name>storageS3Helper</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>repoIdx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>write</name></decl></parameter>, <parameter><decl><type><name>StoragePathExpressionCallback</name></type> <name>pathExpressionCallback</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>pathExpressionCallback</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STORAGE_S3_TYPE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Storage</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Parse the endpoint url</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>HttpUrl</name> <modifier>*</modifier><specifier>const</specifier></type> <name>url</name> <init>= <expr><call><name>httpUrlNewParseP</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoS3Endpoint</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>type</name> <operator>=</operator> <name>httpProtocolTypeHttps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>endPoint</name> <init>= <expr><call><name>httpUrlHost</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>port</name> <init>= <expr><call><name>httpUrlPort</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If host was specified then use it</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>host</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxSource</name><argument_list>(<argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cfgSourceDefault</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>HttpUrl</name> <modifier>*</modifier><specifier>const</specifier></type> <name>url</name> <init>= <expr><call><name>httpUrlNewParseP</name><argument_list>(
                <argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoStorageHost</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>.</operator><name>type</name> <operator>=</operator> <name>httpProtocolTypeHttps</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><name>host</name> <operator>=</operator> <call><name>httpUrlHost</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>httpUrlPort</name><argument_list>(<argument><expr><name>url</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// If port was specified, overwrite the parsed/default port</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxSource</name><argument_list>(<argument><expr><name>cfgOptRepoStoragePort</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cfgSourceDefault</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>port</name> <operator>=</operator> <call><name>cfgOptionIdxUInt</name><argument_list>(<argument><expr><name>cfgOptRepoStoragePort</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Get role and token</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>StorageS3KeyType</name></type> <name>keyType</name> <init>= <expr><operator>(</operator><name>StorageS3KeyType</name><operator>)</operator><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoS3KeyType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>role</name> <init>= <expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoS3Role</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>webIdToken</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <comment type="line">// If web identity authentication then load the role and token from environment variables documented here:</comment>
        <comment type="line">// https://docs.aws.amazon.com/eks/latest/userguide/iam-roles-for-service-accounts-technical-overview.html</comment>
        <if_stmt><if>if <condition>(<expr><name>keyType</name> <operator>==</operator> <name>storageS3KeyTypeWebId</name></expr>)</condition>
        <block>{<block_content>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3_ENV_AWS_ROLE_ARN</name></cpp:macro>                             <cpp:value>"AWS_ROLE_ARN"</cpp:value></cpp:define>
            <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>S3_ENV_AWS_WEB_IDENTITY_TOKEN_FILE</name></cpp:macro>              <cpp:value>"AWS_WEB_IDENTITY_TOKEN_FILE"</cpp:value></cpp:define>

            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>roleZ</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>S3_ENV_AWS_ROLE_ARN</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>webIdTokenFileZ</name> <init>= <expr><call><name>getenv</name><argument_list>(<argument><expr><name>S3_ENV_AWS_WEB_IDENTITY_TOKEN_FILE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>roleZ</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <name>webIdTokenFileZ</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>OptionInvalidError</name></expr></argument>,
                    <argument><expr><literal type="string">"option '%s' is '"</literal> <name>CFGOPTVAL_REPO_S3_KEY_TYPE_WEB_ID_Z</name> <literal type="string">"' but '"</literal> <name>S3_ENV_AWS_ROLE_ARN</name> <literal type="string">"' and '"</literal>
                        <name>S3_ENV_AWS_WEB_IDENTITY_TOKEN_FILE</name> <literal type="string">"' are not set"</literal></expr></argument>,
                    <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoS3KeyType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>role</name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><name>roleZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>webIdToken</name> <operator>=</operator> <call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>webIdTokenFileZ</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <macro><name>MEM_CONTEXT_PRIOR_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>storageS3New</name><argument_list>(
            <argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>write</name></expr></argument>, <argument><expr><name>pathExpressionCallback</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoS3Bucket</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><name>endPoint</name></expr></argument>, <argument><expr><operator>(</operator><name>StorageS3UriStyle</name><operator>)</operator><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoS3UriStyle</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoS3Region</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>keyType</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoS3Key</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoS3KeySecret</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoS3Token</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoS3KmsKeyId</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>role</name></expr></argument>, <argument><expr><name>webIdToken</name></expr></argument>,
            <argument><expr><operator>(</operator><name>size_t</name><operator>)</operator><call><name>cfgOptionIdxUInt64</name><argument_list>(<argument><expr><name>cfgOptRepoStorageUploadChunkSize</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>host</name></expr></argument>, <argument><expr><name>port</name></expr></argument>, <argument><expr><call><name>ioTimeoutMs</name><argument_list>()</argument_list></call></expr></argument>,
            <argument><expr><call><name>cfgOptionIdxBool</name><argument_list>(<argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoStorageCaFile</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptRepoStorageCaPath</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_PRIOR_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STORAGE</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
