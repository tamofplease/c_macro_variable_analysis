<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/main.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Main
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/annotate/annotate.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/archive/get/get.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/archive/push/push.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/backup/backup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/check/check.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/control/start.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/control/stop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/exit.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/expire/expire.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/help/help.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/info/info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/local/local.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/remote/remote.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/repo/create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/repo/get.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/repo/ls.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/repo/put.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/repo/rm.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/restore/restore.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/server/ping.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/server/server.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/stanza/create.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/stanza/delete.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/stanza/upgrade.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/verify/verify.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/fdWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/stat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/load.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/azure/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/cifs/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/gcs/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/s3/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Include automatically generated help data
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/help/help.auto.c.inc"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><name>int</name></type> <name>argListSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argList</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Set stack trace and mem context error cleanup handlers</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>ErrorHandlerFunction</name></type> <name><name>errorHandlerList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>stackTraceClean</name></expr>, <expr><name>memContextClean</name></expr>}</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>errorHandlerSet</name><argument_list>(<argument><expr><name>errorHandlerList</name></expr></argument>, <argument><expr><call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>errorHandlerList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set storage helpers</comment>
    <decl_stmt><decl><type><specifier>static</specifier> <specifier>const</specifier> <name>StorageHelper</name></type> <name><name>storageHelperList</name><index>[]</index></name> <init>=
    <expr><block>{
        <expr><name>STORAGE_AZURE_HELPER</name></expr>,
        <expr><name>STORAGE_CIFS_HELPER</name></expr>,
        <expr><name>STORAGE_GCS_HELPER</name></expr>,
        <expr><name>STORAGE_S3_HELPER</name></expr>,
        <expr><name>STORAGE_END_HELPER</name></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>storageHelperInit</name><argument_list>(<argument><expr><name>storageHelperList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WITH_BACKTRACE</name></cpp:ifdef>
    <expr_stmt><expr><call><name>stackTraceInit</name><argument_list>(<argument><expr><name><name>argList</name><index>[<expr><literal type="number">0</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><name>argListSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>CHARPY</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize command with the start time</comment>
    <expr_stmt><expr><call><name>cmdInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize statistics collector</comment>
    <expr_stmt><expr><call><name>statInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize exit handler</comment>
    <expr_stmt><expr><call><name>exitInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Process commands</comment>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>error</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Load the configuration</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <expr_stmt><expr><call><name>cfgLoad</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>argListSize</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>ConfigCommandRole</name></type> <name>commandRole</name> <init>= <expr><call><name>cfgCommandRole</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Display help</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgCommandHelp</name><argument_list>()</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>cmdHelp</name><argument_list>(<argument><expr><call><name>BUF</name><argument_list>(<argument><expr><name>helpData</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>helpData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Local role</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <if type="elseif">else if <condition>(<expr><name>commandRole</name> <operator>==</operator> <name>cfgCmdRoleLocal</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROTOCOL_SERVICE_LOCAL</name> <literal type="string">"-%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptProcess</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>cmdLocal</name><argument_list>(
                <argument><expr><call><name>protocolServerNew</name><argument_list>(
                    <argument><expr><name>name</name></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_LOCAL_STR</name></expr></argument>, <argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Remote role</comment>
        <comment type="line">// -------------------------------------------------------------------------------------------------------------------------</comment>
        <if type="elseif">else if <condition>(<expr><name>commandRole</name> <operator>==</operator> <name>cfgCmdRoleRemote</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>name</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROTOCOL_SERVICE_REMOTE</name> <literal type="string">"-%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptProcess</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>cmdRemote</name><argument_list>(
                <argument><expr><call><name>protocolServerNew</name><argument_list>(
                    <argument><expr><name>name</name></expr></argument>, <argument><expr><name>PROTOCOL_SERVICE_REMOTE_STR</name></expr></argument>, <argument><expr><call><name>ioFdReadNewOpen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>STDIN_FILENO</name></expr></argument>, <argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>ioFdWriteNewOpen</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>STDOUT_FILENO</name></expr></argument>, <argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <switch>switch <condition>(<expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Annotate command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdAnnotate</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdAnnotate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Archive get command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdArchiveGet</name></expr>:</case>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>commandRole</name> <operator>==</operator> <name>cfgCmdRoleAsync</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>cmdArchiveGetAsync</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cmdArchiveGet</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break>break;</break>
                </block_content>}</block>

                <comment type="line">// Archive push command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdArchivePush</name></expr>:</case>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>commandRole</name> <operator>==</operator> <name>cfgCmdRoleAsync</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>cmdArchivePushAsync</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>cmdArchivePush</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <break>break;</break>
                </block_content>}</block>

                <comment type="line">// Backup command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdBackup</name></expr>:</case>
                <block>{<block_content>
                    <comment type="line">// Run backup</comment>
                    <expr_stmt><expr><call><name>cmdBackup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptExpireAuto</name></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <comment type="line">// Switch to expire command</comment>
                        <expr_stmt><expr><call><name>cmdEnd</name><argument_list>(<argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>cfgCommandSet</name><argument_list>(<argument><expr><name>cfgCmdExpire</name></expr></argument>, <argument><expr><name>cfgCmdRoleMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>cfgLoadLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>cmdBegin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Null out any backup percent complete value in the backup lock file</comment>
                        <expr_stmt><expr><call><name>lockWriteDataP</name><argument_list>(<argument><expr><name>lockTypeBackup</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                        <comment type="line">// Run expire</comment>
                        <expr_stmt><expr><call><name>cmdExpire</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <break>break;</break>
                </block_content>}</block>

                <comment type="line">// Check command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdCheck</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdCheck</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Expire command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdExpire</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdExpire</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Help command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdHelp</name></expr>:</case>
                <case>case <expr><name>cfgCmdNone</name></expr>:</case>
                    <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'help' and 'none' commands should have been handled already"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Info command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdInfo</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdInfo</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Repository create command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdRepoCreate</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdRepoCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Repository get file command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdRepoGet</name></expr>:</case>
                    <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>cmdStorageGet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Repository list paths/files command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdRepoLs</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdStorageList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Repository put file command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdRepoPut</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdStoragePut</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Repository remove paths/files command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdRepoRm</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdStorageRemove</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Server command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdServer</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdServer</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><name>argListSize</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Server ping command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdServerPing</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdServerPing</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Restore command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdRestore</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdRestore</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Stanza create command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdStanzaCreate</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdStanzaCreate</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Stanza delete command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdStanzaDelete</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdStanzaDelete</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Stanza upgrade command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdStanzaUpgrade</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdStanzaUpgrade</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Start command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdStart</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdStart</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Stop command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdStop</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Verify command</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdVerify</name></expr>:</case>
                    <expr_stmt><expr><call><name>cmdVerify</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>

                <comment type="line">// Display version</comment>
                <comment type="line">// -----------------------------------------------------------------------------------------------------------------</comment>
                <case>case <expr><name>cfgCmdVersion</name></expr>:</case>
                    <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr><name>PROJECT_NAME</name> <literal type="string">" "</literal> <name>PROJECT_VERSION</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>stdout</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
            </block_content>}</block></switch>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block>
    <macro><name>CATCH_FATAL</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>error</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>exitSafe</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>true</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Free protocol objects</comment>
    <expr_stmt><expr><call><name>protocolFree</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><ternary><condition><expr><name>error</name></expr> ?</condition><then> <expr><name>result</name></expr> </then><else>: <expr><call><name>exitSafe</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
