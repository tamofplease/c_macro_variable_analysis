<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/build/error/render.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Render Error Data
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/convert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/common/render.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/error/render.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Build error name from a string
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldErrName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>valuePtr</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>upper</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>valueIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>valueIdx</name> <operator>&lt;</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>valueIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><ternary><condition><expr><name>upper</name></expr> ?</condition><then> <expr><operator>(</operator><name>char</name><operator>)</operator><call><name>toupper</name><argument_list>(<argument><expr><name><name>valuePtr</name><index>[<expr><name>valueIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>valuePtr</name><index>[<expr><name>valueIdx</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>upper</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>valuePtr</name><index>[<expr><name>valueIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>upper</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>valueIdx</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"Error"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Render error.auto.h
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_MODULE</name></cpp:macro>                                               <cpp:value>"error"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_AUTO_COMMENT</name></cpp:macro>                                         <cpp:value>"Error Type Definition"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bldErrRenderErrorAutoH</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldErr</name></type> <name>bldErr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"%s"</literal>
        <literal type="string">"#ifndef COMMON_ERROR_AUTO_H\n"</literal>
        <literal type="string">"#define COMMON_ERROR_AUTO_H\n"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldHeader</name><argument_list>(<argument><expr><name>ERROR_MODULE</name></expr></argument>, <argument><expr><name>ERROR_AUTO_COMMENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Error declarations</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>error</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Error type declarations\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>errIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>errIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldErr</name><operator>.</operator><name>errList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>errIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldErrError</name> <modifier>*</modifier><specifier>const</specifier></type> <name>err</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldErr</name><operator>.</operator><name>errList</name></name></expr></argument>, <argument><expr><name>errIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"ERROR_DECLARE(%s);\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldErrName</name><argument_list>(<argument><expr><name><name>err</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// End and save</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>error</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <literal type="string">"#endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>bldPut</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><literal type="string">"src/common/error.auto.h"</literal></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Render error.auto.c.inc
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bldErrRenderErrorAutoC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldErr</name></type> <name>bldErr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>error</name> <init>= <expr><call><name>bldHeader</name><argument_list>(<argument><expr><name>ERROR_MODULE</name></expr></argument>, <argument><expr><name>ERROR_AUTO_COMMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Error type definitions</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>error</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Error type definitions\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>errIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>errIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldErr</name><operator>.</operator><name>errList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>errIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldErrError</name> <modifier>*</modifier><specifier>const</specifier></type> <name>err</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldErr</name><operator>.</operator><name>errList</name></name></expr></argument>, <argument><expr><name>errIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"ERROR_DEFINE(%3u, %s, %s, RuntimeError);\n"</literal></expr></argument>, <argument><expr><name><name>err</name><operator>-&gt;</operator><name>code</name></name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldErrName</name><argument_list>(<argument><expr><name><name>err</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>err</name><operator>-&gt;</operator><name>fatal</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Error type array</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>error</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Error type array\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
        <literal type="string">"static const ErrorType *errorTypeList[] =\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>errIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>errIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldErr</name><operator>.</operator><name>errList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>errIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldErrError</name> <modifier>*</modifier><specifier>const</specifier></type> <name>err</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldErr</name><operator>.</operator><name>errList</name></name></expr></argument>, <argument><expr><name>errIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>error</name></expr></argument>, <argument><expr><literal type="string">"    &amp;%s,\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldErrName</name><argument_list>(<argument><expr><name><name>err</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>error</name></expr></argument>,
        <argument><expr><literal type="string">"    NULL,\n"</literal>
        <literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>bldPut</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><literal type="string">"src/common/error.auto.c.inc"</literal></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>bldErrRender</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldErr</name></type> <name>bldErr</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>bldErrRenderErrorAutoH</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>bldErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>bldErrRenderErrorAutoC</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>bldErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
