<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/build/error/parse.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse Error Yaml
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;yaml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/macro.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/convert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/common/yaml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/error/parse.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Error min/max codes
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_CODE_MIN</name></cpp:macro>                                              <cpp:value>25</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>ERROR_CODE_MAX</name></cpp:macro>                                              <cpp:value>125</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse error list
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>BldErrErrorRaw</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl>;</decl_stmt>                                       <comment type="line">// See BldErrError for comments</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>code</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>fatal</name></decl>;</decl_stmt>
}</block></struct></type> <name>BldErrErrorRaw</name>;</typedef>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>bldErrParseErrorList</name><parameter_list>(<parameter><decl><type><name>Yaml</name> <modifier>*</modifier><specifier>const</specifier></type> <name>yaml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BldErrError</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeMapBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <decl_stmt><decl><type><name>YamlEvent</name></type> <name>err</name> <init>= <expr><call><name>yamlEventNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <expr_stmt><expr><call><name>yamlEventCheck</name><argument_list>(<argument><expr><name>err</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>BldErrErrorRaw</name></type> <name>errRaw</name> <init>=
            <expr><block>{
                <expr><operator>.</operator><name>name</name> <operator>=</operator> <name><name>err</name><operator>.</operator><name>value</name></name></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><name>YamlEvent</name></type> <name>errDef</name> <init>= <expr><call><name>yamlEventNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// If scalar then it is an error code</comment>
            <if_stmt><if>if <condition>(<expr><name><name>errDef</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>yamlEventTypeScalar</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>errRaw</name><operator>.</operator><name>code</name></name> <operator>=</operator> <call><name>cvtZToUInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>errDef</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else there may be multiple definitions</comment>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>yamlEventCheck</name><argument_list>(<argument><expr><name>errDef</name></expr></argument>, <argument><expr><name>yamlEventTypeMapBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>YamlEvent</name></type> <name>errDef</name> <init>= <expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <do>do
                <block>{<block_content>
                    <decl_stmt><decl><type><name>YamlEvent</name></type> <name>errDefVal</name> <init>= <expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>errDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"code"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>errRaw</name><operator>.</operator><name>code</name></name> <operator>=</operator> <call><name>cvtZToUInt</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>errDefVal</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>errDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"fatal"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>errRaw</name><operator>.</operator><name>fatal</name></name> <operator>=</operator> <call><name>yamlBoolParse</name><argument_list>(<argument><expr><name>errDefVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unknown error definition '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>errDef</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt><expr><name>errDef</name> <operator>=</operator> <call><name>yamlEventNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                while <condition>(<expr><name><name>errDef</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>yamlEventTypeMapEnd</name></expr>)</condition>;</do>
            </block_content>}</block></else></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>errRaw</name><operator>.</operator><name>code</name></name> <operator>&lt;</operator> <name>ERROR_CODE_MIN</name> <operator>||</operator> <name><name>errRaw</name><operator>.</operator><name>code</name></name> <operator>&gt;</operator> <name>ERROR_CODE_MAX</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"error '%s' code must be &gt;= "</literal> <call><name>STRINGIFY</name><argument_list>(<argument><expr><name>ERROR_CODE_MIN</name></expr></argument>)</argument_list></call> <literal type="string">" and &lt;= "</literal> <call><name>STRINGIFY</name><argument_list>(<argument><expr><name>ERROR_CODE_MAX</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>errRaw</name><operator>.</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Add to list</comment>
            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(result)</argument>)</argument_list></macro>
            <block>{<block_content>
                <macro><name>lstAdd</name><argument_list>(
                    <argument>result</argument>,
                    <argument>&amp;(BldErrError)
                    {
                        .name = strDup(errRaw.name)</argument>,
                        <argument>.code = errRaw.code</argument>,
                        <argument>.fatal = errRaw.fatal</argument>,
                    <argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><name>err</name> <operator>=</operator> <call><name>yamlEventNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><name><name>err</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>yamlEventTypeMapEnd</name></expr>)</condition>;</do>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>BldErr</name></type>
<name>bldErrParse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Initialize yaml</comment>
    <decl_stmt><decl><type><name>Yaml</name> <modifier>*</modifier><specifier>const</specifier></type> <name>yaml</name> <init>= <expr><call><name>yamlNew</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"src/build/error/error.yaml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Parse error</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>errList</name> <init>= <expr><call><name>bldErrParseErrorList</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><operator>(</operator><name>BldErr</name><operator>)</operator><block>{<expr><operator>.</operator><name>errList</name> <operator>=</operator> <name>errList</name></expr>}</block></expr>;</return>
</block_content>}</block></function>
</unit>
