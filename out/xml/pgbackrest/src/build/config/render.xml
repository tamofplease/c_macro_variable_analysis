<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/build/config/render.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Render Configuration Data
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/convert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/common/render.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/config/render.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Option type constants
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CFGDEF_TYPE_STRING</name></cpp:macro>                                          <cpp:value>"string"</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Build constant from a string
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldConst</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strUpper</name><argument_list>(<argument><expr><call><name>strReplaceChr</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s_%s"</literal></expr></argument>, <argument><expr><name>prefix</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Build enum from a string
***********************************************************************************************************************************/</comment>
<comment type="line">// Build command enum from a string</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldEnumCmd</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgCmd"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Build option group enum from a string</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldEnumOptGrp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgOptGrp"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Build option enum from a string</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldEnumOpt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgOpt"</literal></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Render config.auto.h
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_MODULE</name></cpp:macro>                                               <cpp:value>"config"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>CONFIG_AUTO_COMMENT</name></cpp:macro>                                         <cpp:value>"Command and Option Configuration"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bldCfgRenderConfigAutoH</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldCfg</name></type> <name>bldCfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>config</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"%s"</literal>
        <literal type="string">"#ifndef CONFIG_CONFIG_AUTO_H\n"</literal>
        <literal type="string">"#define CONFIG_CONFIG_AUTO_H\n"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldHeader</name><argument_list>(<argument><expr><name>CONFIG_MODULE</name></expr></argument>, <argument><expr><name>CONFIG_AUTO_COMMENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Command constants</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Command constants\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>cmdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cmdIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cmdIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmd</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>, <argument><expr><name>cmdIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldDefineRender</name><argument_list>(<argument><expr><call><name>bldConst</name><argument_list>(<argument><expr><literal type="string">"CFGCMD"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"\n%s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldDefineRender</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"CFG_COMMAND_TOTAL"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Option group constants</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Option group constants\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldDefineRender</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"CFG_OPTION_GROUP_TOTAL"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optGrpList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Option constants</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Option constants\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOption</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>, <argument><expr><name>optIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>group</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldDefineRender</name><argument_list>(<argument><expr><call><name>bldConst</name><argument_list>(<argument><expr><literal type="string">"CFGOPT"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"\n%s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldDefineRender</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"CFG_OPTION_TOTAL"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Option value constants</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>lf</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Option value constants\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOption</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>, <argument><expr><name>optIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_STRING_ID_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>allowList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>allowList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>allowListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>allowListIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>allowList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>allowListIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>allowList</name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>allowList</name></name></expr></argument>, <argument><expr><name>allowListIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optCmdListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optCmdListIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>cmdList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optCmdListIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>BldCfgOptionCommand</name> <modifier>*</modifier></type><name>optCmd</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>cmdList</name></name></expr></argument>, <argument><expr><name>optCmdListIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>optCmd</name><operator>-&gt;</operator><name>allowList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>allowListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>allowListIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>allowList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>allowListIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>allowList</name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>allowList</name></name></expr></argument>, <argument><expr><name>allowListIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>strLstSort</name><argument_list>(<argument><expr><name>allowList</name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>strLstEmpty</name><argument_list>(<argument><expr><name>allowList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>lf</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>allowListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>allowListIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>allowList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>allowListIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>allowListItem</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>allowList</name></expr></argument>, <argument><expr><name>allowListIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>constPrefix</name> <init>= <expr><call><name>strUpper</name><argument_list>(
                    <argument><expr><call><name>strReplaceChr</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"CFGOPTVAL_%s_%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>allowListItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'-'</literal></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// Render StringId</comment>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldDefineRender</name><argument_list>(<argument><expr><name>constPrefix</name></expr></argument>, <argument><expr><call><name>bldStrId</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>allowListItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Render Z</comment>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                    <argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldDefineRender</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s_Z"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>constPrefix</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>allowListItem</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><name>lf</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Command enum</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Command enum\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
        <literal type="string">"typedef enum\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>cmdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cmdIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cmdIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmd</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>, <argument><expr><name>cmdIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"    %s,\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnumCmd</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"    %s,\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnumCmd</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"none"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"} ConfigCommand;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Option group enum</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Option group enum\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
        <literal type="string">"typedef enum\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optGrpIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optGrpIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optGrpList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optGrpIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOptionGroup</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optGrp</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optGrpList</name></name></expr></argument>, <argument><expr><name>optGrpIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"    %s,\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnumOptGrp</name><argument_list>(<argument><expr><name><name>optGrp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"} ConfigOptionGroup;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Option enum</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Option enum\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
        <literal type="string">"typedef enum\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOptionGroup</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>, <argument><expr><name>optIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"    %s,\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnumOpt</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"} ConfigOption;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// End and save</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <literal type="string">"#endif\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>bldPut</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><literal type="string">"src/config/config.auto.h"</literal></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Render parse.auto.c.inc
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PARSE_AUTO_COMMENT</name></cpp:macro>                                          <cpp:value>"Config Parse Rules"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>BldCfgRenderOptionDeprecate</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name></decl>;</decl_stmt>                                       <comment type="line">// Deprecated option name</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOption</name> <modifier>*</modifier><specifier>const</specifier></type> <name>option</name></decl>;</decl_stmt>                               <comment type="line">// Option</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>indexed</name></decl>;</decl_stmt>                                             <comment type="line">// Can the deprecation be indexed?</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>bool</name></type> <name>unindexed</name></decl>;</decl_stmt>                                           <comment type="line">// Can the deprecation be unindexed?</comment>
}</block></struct></type> <name>BldCfgRenderOptionDeprecate</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bldCfgRenderLf</name><parameter_list>(<parameter><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>config</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>lf</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><name>lf</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldCfgRenderLabel</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>config</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>label</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>labelText</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lines</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>labelComment</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"// %s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>labelText</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>lineIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lineIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>lines</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>lineIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>line</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>lines</name></expr></argument>, <argument><expr><name>lineIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>lineIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>label</name> <operator>||</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>labelComment</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">132</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>line</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"%s%*s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><literal type="number">132</literal> <operator>-</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call><operator>)</operator></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>labelComment</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Helper to get var-128 encoding size</comment>
<function><type><specifier>static</specifier> <name>size_t</name></type>
<name>bldCfgRenderVar128Size</name><parameter_list>(<parameter><decl><type><name>uint64_t</name></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>size_t</name></type> <name>result</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <while>while <condition>(<expr><name>value</name> <operator>&gt;=</operator> <literal type="number">0x80</literal></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>&gt;&gt;=</operator> <literal type="number">7</literal></expr>;</expr_stmt>
        <expr_stmt><expr><name>result</name><operator>++</operator></expr>;</expr_stmt>
    </block_content>}</block></while>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Helper to render enum string</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldCfgRenderEnumStr</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>source</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>priorSpecial</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>sourceIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sourceIdx</name> <operator>&lt;</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sourceIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <switch>switch <condition>(<expr><call><name>strZ</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call><index>[<expr><name>sourceIdx</name></expr>]</index></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><literal type="char">'"'</literal></expr>:</case>
            <case>case <expr><literal type="char">'/'</literal></expr>:</case>
            <case>case <expr><literal type="char">' '</literal></expr>:</case>
            <case>case <expr><literal type="char">'.'</literal></expr>:</case>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>sourceIdx</name> <operator>!=</operator> <literal type="number">0</literal> <operator>&amp;&amp;</operator> <operator>!</operator><name>priorSpecial</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <switch>switch <condition>(<expr><call><name>strZ</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call><index>[<expr><name>sourceIdx</name></expr>]</index></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><literal type="char">'"'</literal></expr>:</case>
                        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"QT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>

                    <case>case <expr><literal type="char">'/'</literal></expr>:</case>
                        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"FS"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>

                    <case>case <expr><literal type="char">' '</literal></expr>:</case>
                        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"SP"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>

                    <case>case <expr><literal type="char">'.'</literal></expr>:</case>
                        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"DT"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </block_content>}</block></switch>

                <if_stmt><if>if <condition>(<expr><name>sourceIdx</name> <operator>!=</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="char">'_'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><name>priorSpecial</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block>

            <default>default:</default>
                <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call><index>[<expr><name>sourceIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>priorSpecial</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Helper to render scalars</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldCfgRenderScalar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>scalar</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_STRING_ID_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_VAL_STRID(%s)"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"parseRuleValStrId"</literal></expr></argument>, <argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_STRING_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_VAL_STR(parseRuleValStr%s)"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldCfgRenderEnumStr</name><argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_BOOLEAN_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <return>return <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_VAL_BOOL_%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>scalar</name></expr></argument>, <argument><expr><literal type="string">"true"</literal></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">"TRUE"</literal></expr> </then><else>: <expr><literal type="string">"FALSE"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</return></block_content></block></if></if_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>value</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_TIME_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>cfgParseTime</name><argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_SIZE_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>cfgParseSize</name><argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_SIZE_STR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_INTEGER_STR</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"invalid type"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>cvtZToInt64</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>scalar</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <return>return <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_VAL_INT(%s)"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"parseRuleValInt"</literal></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Helper to render validity</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldCfgRenderValid</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BldCfgOptionDepend</name> <modifier>*</modifier><specifier>const</specifier></type> <name>depend</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>depend</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>result</name></expr></argument>,
        <argument><expr><literal type="string">"                PARSE_RULE_OPTIONAL_DEPEND\n"</literal>
        <literal type="string">"                (\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>depend</name><operator>-&gt;</operator><name>defaultValue</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><literal type="string">"                    PARSE_RULE_OPTIONAL_DEPEND_DEFAULT(%s),\n"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldCfgRenderScalar</name><argument_list>(<argument><expr><name><name>depend</name><operator>-&gt;</operator><name>defaultValue</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_BOOLEAN_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><name>result</name></expr></argument>,
        <argument><expr><literal type="string">"                    PARSE_RULE_VAL_OPT(%s),\n"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgOpt"</literal></expr></argument>, <argument><expr><name><name>depend</name><operator>-&gt;</operator><name>option</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>depend</name><operator>-&gt;</operator><name>valueList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>valueIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>valueIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>depend</name><operator>-&gt;</operator><name>valueList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>valueIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                <argument><expr><name>result</name></expr></argument>,
                <argument><expr><literal type="string">"                    %s,\n"</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(
                    <argument><expr><call><name>bldCfgRenderScalar</name><argument_list>(
                        <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>depend</name><operator>-&gt;</operator><name>valueList</name></name></expr></argument>, <argument><expr><name>valueIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><ternary><condition><expr><call><name>strEq</name><argument_list>(<argument><expr><name><name>depend</name><operator>-&gt;</operator><name>option</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_STRING_STR</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>OPT_TYPE_STRING_ID_STR</name></expr> </then><else>: <expr><name><name>depend</name><operator>-&gt;</operator><name>option</name><operator>-&gt;</operator><name>type</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>result</name></expr></argument>,
        <argument><expr><literal type="string">"                )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Helper to render allow range</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldCfgRenderAllowRange</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>allowRangeMin</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>allowRangeMax</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>allowRangeMin</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>allowRangeMax</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optType</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"                PARSE_RULE_OPTIONAL_ALLOW_RANGE\n"</literal>
        <literal type="string">"                (\n"</literal>
        <literal type="string">"                    %s,\n"</literal>
        <literal type="string">"                    %s,\n"</literal>
        <literal type="string">"                )"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldCfgRenderScalar</name><argument_list>(<argument><expr><name>allowRangeMin</name></expr></argument>, <argument><expr><name>optType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldCfgRenderScalar</name><argument_list>(<argument><expr><name>allowRangeMax</name></expr></argument>, <argument><expr><name>optType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Helper to render allow list</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldCfgRenderAllowList</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>allowList</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>allowList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optType</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>result</name></expr></argument>,
        <argument><expr><literal type="string">"                PARSE_RULE_OPTIONAL_ALLOW_LIST\n"</literal>
        <literal type="string">"                (\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>allowIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>allowIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>allowList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>allowIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>allowList</name></expr></argument>, <argument><expr><name>allowIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"                    %s,\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldCfgRenderScalar</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><name>optType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"                )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Helper to render default</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldCfgRenderDefault</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>defaultValue</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>defaultLiteral</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>defaultValue</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optType</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>result</name></expr></argument>,
        <argument><expr><literal type="string">"                PARSE_RULE_OPTIONAL_DEFAULT\n"</literal>
        <literal type="string">"                (\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_STRING_STR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_PATH_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"                    %s,\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldCfgRenderScalar</name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>, <argument><expr><name>optType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_BOOLEAN_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>result</name></expr></argument>,
            <argument><expr><literal type="string">"                    %s,\n"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(
                <argument><expr><call><name>bldCfgRenderScalar</name><argument_list>(
                    <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>defaultLiteral</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><ternary><condition><expr><name>defaultLiteral</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><name>OPT_TYPE_STRING_STR</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"                )"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="line">// Helper to add values to value lists</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bldCfgRenderValueAdd</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optType</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ruleDataList</name></decl></parameter>, <parameter><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ruleStrList</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_TIME_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>cfgParseTime</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_SIZE_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%"</literal> <name>PRId64</name></expr></argument>, <argument><expr><call><name>cfgParseSize</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <if_stmt><if>if <condition>(<expr><name>ruleStrList</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_STRING_STR</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>optType</name></expr></argument>, <argument><expr><name>OPT_TYPE_PATH_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>ruleStrList</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bldCfgRenderParseAutoC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldCfg</name></type> <name>bldCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>config</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ruleIntList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ruleStrList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ruleStrIdList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Command parse rules</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Command parse data\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(
            <argument><expr><call><name>bldDefineRender</name><argument_list>(
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_VAL_CMD(value)"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_U32_%zu(value)"</literal></expr></argument>, <argument><expr><call><name>bldCfgRenderVar128Size</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <literal type="string">"static const ParseRuleCommand parseRuleCommand[CFG_COMMAND_TOTAL] =\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>cmdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cmdIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cmdIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmd</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>, <argument><expr><name>cmdIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configCmd</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>cmdIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>COMMENT_SEPARATOR</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>configCmd</name></expr></argument>,
            <argument><expr><literal type="string">"    PARSE_RULE_COMMAND\n"</literal>
            <literal type="string">"    (\n"</literal>
            <literal type="string">"        PARSE_RULE_COMMAND_NAME(\"%s\"),\n"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>lockRequired</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configCmd</name></expr></argument>, <argument><expr><literal type="string">"        PARSE_RULE_COMMAND_LOCK_REQUIRED(true),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>lockRemoteRequired</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configCmd</name></expr></argument>, <argument><expr><literal type="string">"        PARSE_RULE_COMMAND_LOCK_REMOTE_REQUIRED(true),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>configCmd</name></expr></argument>, <argument><expr><literal type="string">"        PARSE_RULE_COMMAND_LOCK_TYPE(%s),\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"lockType"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>lockType</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>logFile</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configCmd</name></expr></argument>, <argument><expr><literal type="string">"        PARSE_RULE_COMMAND_LOG_FILE(true),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>configCmd</name></expr></argument>, <argument><expr><literal type="string">"        PARSE_RULE_COMMAND_LOG_LEVEL_DEFAULT(%s),\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"logLevel"</literal></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>logLevelDefault</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>cmd</name><operator>-&gt;</operator><name>parameterAllowed</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configCmd</name></expr></argument>, <argument><expr><literal type="string">"        PARSE_RULE_COMMAND_PARAMETER_ALLOWED(true),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
            <argument><expr><name>configCmd</name></expr></argument>,
            <argument><expr><literal type="string">"\n"</literal>
            <literal type="string">"        PARSE_RULE_COMMAND_ROLE_VALID_LIST\n"</literal>
            <literal type="string">"        (\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>cmdRoleIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cmdRoleIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>roleList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cmdRoleIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                <argument><expr><name>configCmd</name></expr></argument>,
                <argument><expr><literal type="string">"            PARSE_RULE_COMMAND_ROLE(%s)\n"</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgCmdRole"</literal></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>roleList</name></name></expr></argument>, <argument><expr><name>cmdRoleIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
            <argument><expr><name>configCmd</name></expr></argument>,
            <argument><expr><literal type="string">"        ),\n"</literal>
            <literal type="string">"    ),"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><call><name>bldCfgRenderLabel</name><argument_list>(<argument><expr><name>configCmd</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"cmd/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Option group rules</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Option group parse data\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
        <literal type="string">"static const ParseRuleOptionGroup parseRuleOptionGroup[CFG_OPTION_GROUP_TOTAL] =\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optGrpIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optGrpIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optGrpList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optGrpIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOptionGroup</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optGrp</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optGrpList</name></name></expr></argument>, <argument><expr><name>optGrpIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configOptGrp</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>optGrpIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>COMMENT_SEPARATOR</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>configOptGrp</name></expr></argument>,
            <argument><expr><literal type="string">"    PARSE_RULE_OPTION_GROUP\n"</literal>
            <literal type="string">"    (\n"</literal>
            <literal type="string">"        PARSE_RULE_OPTION_GROUP_NAME(\"%s\"),\n"</literal>
            <literal type="string">"    ),"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>optGrp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><call><name>bldCfgRenderLabel</name><argument_list>(<argument><expr><name>configOptGrp</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"opt-grp/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>optGrp</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Option rules</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Option parse data\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(
            <argument><expr><call><name>bldDefineRender</name><argument_list>(
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_VAL_OPT(value)"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_U32_%zu(value)"</literal></expr></argument>, <argument><expr><call><name>bldCfgRenderVar128Size</name><argument_list>(<argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <literal type="string">"static const ParseRuleOption parseRuleOption[CFG_OPTION_TOTAL] =\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmdRoleAllList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>cmdRoleAllList</name></expr></argument>, <argument><expr><name>CMD_ROLE_MAIN_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>cmdRoleAllList</name></expr></argument>, <argument><expr><name>CMD_ROLE_ASYNC_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>cmdRoleAllList</name></expr></argument>, <argument><expr><name>CMD_ROLE_LOCAL_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>cmdRoleAllList</name></expr></argument>, <argument><expr><name>CMD_ROLE_REMOTE_STR</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOption</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>, <argument><expr><name>optIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ruleDataList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>ruleInt</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configOpt</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>optIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>COMMENT_SEPARATOR</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>configOpt</name></expr></argument>,
            <argument><expr><literal type="string">"    PARSE_RULE_OPTION\n"</literal>
            <literal type="string">"    (\n"</literal>
            <literal type="string">"        PARSE_RULE_OPTION_NAME(\"%s\"),\n"</literal>
            <literal type="string">"        PARSE_RULE_OPTION_TYPE(%s),\n"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgOptType"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>negate</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><literal type="string">"        PARSE_RULE_OPTION_NEGATE(true),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>reset</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><literal type="string">"        PARSE_RULE_OPTION_RESET(true),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>configOpt</name></expr></argument>,
            <argument><expr><literal type="string">"        PARSE_RULE_OPTION_REQUIRED(%s),\n"</literal>
            <literal type="string">"        PARSE_RULE_OPTION_SECTION(%s),\n"</literal></expr></argument>,
            <argument><expr><call><name>cvtBoolToConstZ</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>required</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgSection"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>section</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>secure</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><literal type="string">"        PARSE_RULE_OPTION_SECURE(true),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_HASH_STR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_LIST_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><literal type="string">"        PARSE_RULE_OPTION_MULTI(true),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>group</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                <argument><expr><name>configOpt</name></expr></argument>,
                <argument><expr><literal type="string">"        PARSE_RULE_OPTION_GROUP_MEMBER(true),\n"</literal>
                <literal type="string">"        PARSE_RULE_OPTION_GROUP_ID(%s),\n"</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgOptGrp"</literal></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>group</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// If an unindexed deprecation matches the base option name of an indexed option</comment>
        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>deprecateList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>deprecateIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>deprecateIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>deprecateList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>deprecateIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOptionDeprecate</name> <modifier>*</modifier><specifier>const</specifier></type> <name>deprecate</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>deprecateList</name></name></expr></argument>, <argument><expr><name>deprecateIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name><name>deprecate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>deprecate</name><operator>-&gt;</operator><name>unindexed</name></name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><literal type="string">"        PARSE_RULE_OPTION_DEPRECATE_MATCH(true),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <break>break;</break>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Build command role valid lists</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>cmdRoleAllIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cmdRoleAllIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>cmdRoleAllList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cmdRoleAllIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configRole</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmdRole</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>cmdRoleAllList</name></expr></argument>, <argument><expr><name>cmdRoleAllIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optCmdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optCmdIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>cmdList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optCmdIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>BldCfgOptionCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optCmd</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>cmdList</name></name></expr></argument>, <argument><expr><name>optCmdIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><call><name>strLstExists</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>roleList</name></name></expr></argument>, <argument><expr><name>cmdRole</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                        <argument><expr><name>configRole</name></expr></argument>,
                        <argument><expr><literal type="string">"            PARSE_RULE_OPTION_COMMAND(%s)\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgCmd"</literal></expr></argument>, <argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEmpty</name><argument_list>(<argument><expr><name>configRole</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                    <argument><expr><name>configOpt</name></expr></argument>,
                    <argument><expr><literal type="string">"\n"</literal>
                    <literal type="string">"        PARSE_RULE_OPTION_COMMAND_ROLE_%s_VALID_LIST\n"</literal>
                    <literal type="string">"        (\n"</literal>
                    <literal type="string">"%s"</literal>
                    <literal type="string">"        ),\n"</literal></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strUpper</name><argument_list>(<argument><expr><call><name>strDup</name><argument_list>(<argument><expr><name>cmdRole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configRole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// Build default optional rules</comment>
        <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optionalDefaultRule</name> <init>= <expr><call><name>kvNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ruleDepend</name> <init>= <expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"01-depend"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ruleAllowRange</name> <init>= <expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"02-allow-range"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ruleAllowList</name> <init>= <expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"03-allow-list"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ruleDefault</name> <init>= <expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"04-default"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>ruleRequire</name> <init>= <expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><literal type="string">"05-require"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>ruleList</name><index>[]</index></name> <init>= <expr><block>{<expr><name>ruleDepend</name></expr>, <expr><name>ruleAllowRange</name></expr>, <expr><name>ruleAllowList</name></expr>, <expr><name>ruleDefault</name></expr>, <expr><name>ruleRequire</name></expr>}</block></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>depend</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>optionalDefaultRule</name></expr></argument>, <argument><expr><name>ruleDepend</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>bldCfgRenderValid</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>depend</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>allowRangeMin</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>kvAdd</name><argument_list>(
                <argument><expr><name>optionalDefaultRule</name></expr></argument>, <argument><expr><name>ruleAllowRange</name></expr></argument>,
                <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>bldCfgRenderAllowRange</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>allowRangeMin</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>allowRangeMax</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>bldCfgRenderValueAdd</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>allowRangeMin</name></name></expr></argument>, <argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>bldCfgRenderValueAdd</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>allowRangeMax</name></name></expr></argument>, <argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>allowList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>optionalDefaultRule</name></expr></argument>, <argument><expr><name>ruleAllowList</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>bldCfgRenderAllowList</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>allowList</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>allowIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>allowIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>allowList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>allowIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>bldCfgRenderValueAdd</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>allowList</name></name></expr></argument>, <argument><expr><name>allowIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>defaultValue</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>optionalDefaultRule</name></expr></argument>, <argument><expr><name>ruleDefault</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>bldCfgRenderDefault</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>defaultValue</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>defaultLiteral</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_BOOLEAN_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>bldCfgRenderValueAdd</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>defaultValue</name></name></expr></argument>, <argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><name>ruleStrList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Build command optional rules</comment>
        <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optionalCmdRule</name> <init>= <expr><call><name>kvNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optCmdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optCmdIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>cmdList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optCmdIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>BldCfgOptionCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optCmd</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>cmdList</name></name></expr></argument>, <argument><expr><name>optCmdIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optionalCmdRuleType</name> <init>= <expr><call><name>kvNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// Depends</comment>
            <if_stmt><if>if <condition>(<expr><name><name>optCmd</name><operator>-&gt;</operator><name>depend</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>optionalCmdRuleType</name></expr></argument>, <argument><expr><name>ruleDepend</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>bldCfgRenderValid</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>depend</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Allow lists</comment>
            <if_stmt><if>if <condition>(<expr><name><name>optCmd</name><operator>-&gt;</operator><name>allowList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>optionalCmdRuleType</name></expr></argument>, <argument><expr><name>ruleAllowList</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>bldCfgRenderAllowList</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>allowList</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>allowIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>allowIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>allowList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>allowIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>bldCfgRenderValueAdd</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>allowList</name></name></expr></argument>, <argument><expr><name>allowIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Defaults</comment>
            <if_stmt><if>if <condition>(<expr><name><name>optCmd</name><operator>-&gt;</operator><name>defaultValue</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>kvAdd</name><argument_list>(
                    <argument><expr><name>optionalCmdRuleType</name></expr></argument>, <argument><expr><name>ruleDefault</name></expr></argument>,
                    <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>bldCfgRenderDefault</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>defaultValue</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>defaultLiteral</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_BOOLEAN_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>bldCfgRenderValueAdd</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>defaultValue</name></name></expr></argument>, <argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><name>ruleStrList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Requires</comment>
            <if_stmt><if>if <condition>(<expr><name><name>optCmd</name><operator>-&gt;</operator><name>required</name></name> <operator>!=</operator> <name><name>opt</name><operator>-&gt;</operator><name>required</name></name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>kvAdd</name><argument_list>(
                    <argument><expr><name>optionalCmdRuleType</name></expr></argument>, <argument><expr><name>ruleRequire</name></expr></argument>,
                    <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"                PARSE_RULE_OPTIONAL_%sREQUIRED()"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>optCmd</name><operator>-&gt;</operator><name>required</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"NOT_"</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Add defaults</comment>
            <if_stmt><if>if <condition>(<expr><call><name>varLstSize</name><argument_list>(<argument><expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>optionalCmdRuleType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ruleIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ruleIdx</name> <operator>&lt;</operator> <call><name>LENGTH_OF</name><argument_list>(<argument><expr><name>ruleList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ruleIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>kvKeyExists</name><argument_list>(<argument><expr><name>optionalCmdRuleType</name></expr></argument>, <argument><expr><name><name>ruleList</name><index>[<expr><name>ruleIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>optionalCmdRule</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>optionalCmdRuleType</name></expr></argument>, <argument><expr><name><name>ruleList</name><index>[<expr><name>ruleIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <if type="elseif">else if <condition>(<expr><call><name>kvKeyExists</name><argument_list>(<argument><expr><name>optionalDefaultRule</name></expr></argument>, <argument><expr><name><name>ruleList</name><index>[<expr><name>ruleIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>optionalCmdRule</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>optionalDefaultRule</name></expr></argument>, <argument><expr><name><name>ruleList</name><index>[<expr><name>ruleIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// Add optional rules</comment>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>optionalCmdRuleSize</name> <init>= <expr><call><name>varLstSize</name><argument_list>(<argument><expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>optionalCmdRule</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>optionalDefaultRuleSize</name> <init>= <expr><call><name>varLstSize</name><argument_list>(<argument><expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>optionalDefaultRule</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>optionalCmdRuleSize</name> <operator>!=</operator> <literal type="number">0</literal> <operator>||</operator> <name>optionalDefaultRuleSize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
                <argument><expr><name>configOpt</name></expr></argument>,
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"        PARSE_RULE_OPTIONAL\n"</literal>
                <literal type="string">"        (\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><name>optionalCmdRuleSize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><name>KeyValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>combine</name> <init>= <expr><call><name>kvNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ruleIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ruleIdx</name> <operator>&lt;</operator> <name>optionalCmdRuleSize</name></expr>;</condition> <incr><expr><name>ruleIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmd</name> <init>= <expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>optionalCmdRule</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ruleIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>groupList</name> <init>= <expr><call><name>kvGetList</name><argument_list>(<argument><expr><name>optionalCmdRule</name></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>group</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>groupIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>groupIdx</name> <operator>&lt;</operator> <call><name>varLstSize</name><argument_list>(<argument><expr><name>groupList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>groupIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                            <argument><expr><name>group</name></expr></argument>,
                            <argument><expr><literal type="string">"\n"</literal>
                            <literal type="string">"%s,\n"</literal></expr></argument>,
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>groupList</name></expr></argument>, <argument><expr><name>groupIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>

                    <expr_stmt><expr><call><name>kvAdd</name><argument_list>(<argument><expr><name>combine</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>combineSize</name> <init>= <expr><call><name>varLstSize</name><argument_list>(<argument><expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>combine</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ruleIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ruleIdx</name> <operator>&lt;</operator> <name>combineSize</name></expr>;</condition> <incr><expr><name>ruleIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>group</name> <init>= <expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>combine</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ruleIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmdList</name> <init>= <expr><call><name>kvGetList</name><argument_list>(<argument><expr><name>combine</name></expr></argument>, <argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>ruleIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
                        <argument><expr><name>configOpt</name></expr></argument>,
                        <argument><expr><literal type="string">"            PARSE_RULE_OPTIONAL_GROUP\n"</literal>
                        <literal type="string">"            (\n"</literal>
                        <literal type="string">"                PARSE_RULE_FILTER_CMD\n"</literal>
                        <literal type="string">"                (\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>cmdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cmdIdx</name> <operator>&lt;</operator> <call><name>varLstSize</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cmdIdx</name><operator>++</operator></expr></incr>)</control>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                            <argument><expr><name>configOpt</name></expr></argument>,
                            <argument><expr><literal type="string">"                    PARSE_RULE_VAL_CMD(%s),\n"</literal></expr></argument>,
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgCmd"</literal></expr></argument>, <argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>cmdList</name></expr></argument>, <argument><expr><name>cmdIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></for>

                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                        <argument><expr><name>configOpt</name></expr></argument>,
                        <argument><expr><literal type="string">"                ),\n"</literal>
                        <literal type="string">"%s"</literal>
                        <literal type="string">"            ),\n"</literal></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><name>group</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name>optionalDefaultRuleSize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><name>optionalCmdRuleSize</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
                    <argument><expr><name>configOpt</name></expr></argument>,
                    <argument><expr><literal type="string">"            PARSE_RULE_OPTIONAL_GROUP\n"</literal>
                    <literal type="string">"            (\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ruleIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ruleIdx</name> <operator>&lt;</operator> <name>optionalDefaultRuleSize</name></expr>;</condition> <incr><expr><name>ruleIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>key</name> <init>= <expr><call><name>varLstGet</name><argument_list>(<argument><expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>optionalDefaultRule</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>ruleIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <if_stmt><if>if <condition>(<expr><name>ruleIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                        <argument><expr><name>configOpt</name></expr></argument>,
                        <argument><expr><literal type="string">"%s,\n"</literal></expr></argument>,
                        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>optionalDefaultRule</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>

                <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><literal type="string">"            ),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><literal type="string">"        ),\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><literal type="string">"    ),"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add option to config</comment>
        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><call><name>bldCfgRenderLabel</name><argument_list>(<argument><expr><name>configOpt</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"opt/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Build rule values</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_BOOLEAN_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <continue>continue;</continue></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>ruleAddList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_STRING_STR</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_PATH_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ruleAddList</name> <operator>=</operator> <name>ruleStrList</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_STRING_ID_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>ruleAddList</name> <operator>=</operator> <name>ruleStrIdList</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><name>ruleAddList</name> <operator>=</operator> <name>ruleIntList</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>ruleInt</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ruleDataIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ruleDataIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>ruleDataList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ruleDataIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name>ruleInt</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>ruleAddList</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%20s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><name>ruleDataIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>type</name></name></expr></argument>, <argument><expr><name>OPT_TYPE_STRING_ID_STR</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>ruleAddList</name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><name>ruleDataIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(
                    <argument><expr><name>ruleAddList</name></expr></argument>,
                    <argument><expr><call><name>strNewFmt</name><argument_list>(
                        <argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>defaultLiteral</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\""</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>ruleDataList</name></expr></argument>, <argument><expr><name>ruleDataIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><ternary><condition><expr><name><name>opt</name><operator>-&gt;</operator><name>defaultLiteral</name></name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"\""</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Option deprecations</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>deprecateCombineList</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BldCfgRenderOptionDeprecate</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOption</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>, <argument><expr><name>optIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>deprecateList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>deprecateIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>deprecateIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>deprecateList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>deprecateIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOptionDeprecate</name> <modifier>*</modifier><specifier>const</specifier></type> <name>deprecate</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>deprecateList</name></name></expr></argument>, <argument><expr><name>deprecateIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <macro><name>lstAdd</name><argument_list>(
                    <argument>deprecateCombineList</argument>,
                    <argument>&amp;(BldCfgRenderOptionDeprecate)
                    {
                        .name = deprecate-&gt;name</argument>,
                        <argument>.option = opt</argument>,
                        <argument>.indexed = deprecate-&gt;indexed</argument>,
                        <argument>.unindexed = deprecate-&gt;unindexed</argument>,
                    <argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name>deprecateCombineList</name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Option deprecations\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
        <literal type="string">"%s\n"</literal>
        <literal type="string">"\n"</literal>
        <literal type="string">"static const ParseRuleOptionDeprecate parseRuleOptionDeprecate[CFG_OPTION_DEPRECATE_TOTAL] =\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldDefineRender</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"CFG_OPTION_DEPRECATE_TOTAL"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>lstSize</name><argument_list>(<argument><expr><name>deprecateCombineList</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>deprecateIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>deprecateIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name>deprecateCombineList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>deprecateIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgRenderOptionDeprecate</name> <modifier>*</modifier><specifier>const</specifier></type> <name>deprecate</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name>deprecateCombineList</name></expr></argument>, <argument><expr><name>deprecateIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configOptDep</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>deprecateIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><name>COMMENT_SEPARATOR</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>configOptDep</name></expr></argument>,
            <argument><expr><literal type="string">"    {\n"</literal>
            <literal type="string">"        .name = \"%s\",\n"</literal>
            <literal type="string">"        .id = %s,\n"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>deprecate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgOpt"</literal></expr></argument>, <argument><expr><name><name>deprecate</name><operator>-&gt;</operator><name>option</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>deprecate</name><operator>-&gt;</operator><name>indexed</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configOptDep</name></expr></argument>, <argument><expr><literal type="string">"        .indexed = true,\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>deprecate</name><operator>-&gt;</operator><name>unindexed</name></name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configOptDep</name></expr></argument>, <argument><expr><literal type="string">"        .unindexed = true,\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configOptDep</name></expr></argument>, <argument><expr><literal type="string">"    },"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><call><name>bldCfgRenderLabel</name><argument_list>(<argument><expr><name>configOptDep</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"opt-deprecate/%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>deprecate</name><operator>-&gt;</operator><name>option</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Order for option parse resolution</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>config</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Order for option parse resolution\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
        <literal type="string">"static const uint8_t optionResolveOrder[] =\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Render resolve order</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configResolve</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optResolveIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optResolveIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optResolveList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optResolveIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>bldCfgRenderLf</name><argument_list>(<argument><expr><name>configResolve</name></expr></argument>, <argument><expr><name>optResolveIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>configResolve</name></expr></argument>, <argument><expr><literal type="string">"    %s,"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"cfgOpt"</literal></expr></argument>, <argument><expr><operator>(</operator><operator>*</operator><operator>(</operator><name>BldCfgOption</name> <operator>*</operator><operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optResolveList</name></name></expr></argument>, <argument><expr><name>optResolveIdx</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><call><name>bldCfgRenderLabel</name><argument_list>(<argument><expr><name>configResolve</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"opt-resolve-order"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>config</name></expr></argument>, <argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Rule Strings</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configVal</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>strLstSort</name><argument_list>(<argument><expr><name>ruleStrList</name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Rule Strings\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(
            <argument><expr><call><name>bldDefineRender</name><argument_list>(
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_VAL_STR(value)"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_U32_%zu(value)"</literal></expr></argument>, <argument><expr><call><name>bldCfgRenderVar128Size</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>ruleStrList</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <literal type="string">"static const StringPub parseRuleValueStr[] =\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configValStr</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ruleStrIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ruleStrIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>ruleStrList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ruleStrIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>bldCfgRenderLf</name><argument_list>(<argument><expr><name>configValStr</name></expr></argument>, <argument><expr><name>ruleStrIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>configValStr</name></expr></argument>, <argument><expr><literal type="string">"    PARSE_RULE_STRPUB(%s),"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>ruleStrList</name></expr></argument>, <argument><expr><name>ruleStrIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><call><name>bldCfgRenderLabel</name><argument_list>(<argument><expr><name>configValStr</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"val/str"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <literal type="string">"typedef enum\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configValStrEnum</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ruleStrIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ruleStrIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>ruleStrList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ruleStrIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>bldCfgRenderLf</name><argument_list>(<argument><expr><name>configValStrEnum</name></expr></argument>, <argument><expr><name>ruleStrIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>configValStrEnum</name></expr></argument>, <argument><expr><literal type="string">"    %s,"</literal></expr></argument>,
            <argument><expr><call><name>zNewFmt</name><argument_list>(<argument><expr><literal type="string">"parseRuleValStr%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldCfgRenderEnumStr</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>ruleStrList</name></expr></argument>, <argument><expr><name>ruleStrIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><call><name>bldCfgRenderLabel</name><argument_list>(<argument><expr><name>configValStrEnum</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"val/str/enum"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><literal type="string">"\n} ParseRuleValueStr;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Rule StringIds</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strLstSort</name><argument_list>(<argument><expr><name>ruleStrIdList</name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Rule StringIds\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(
            <argument><expr><call><name>bldDefineRender</name><argument_list>(
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_VAL_STRID(value)"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_U32_%zu(value)"</literal></expr></argument>, <argument><expr><call><name>bldCfgRenderVar128Size</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>ruleStrIdList</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <literal type="string">"static const StringId parseRuleValueStrId[] =\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configValStrId</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ruleStrIdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ruleStrIdIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>ruleStrIdList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ruleStrIdIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>bldCfgRenderLf</name><argument_list>(<argument><expr><name>configValStrId</name></expr></argument>, <argument><expr><name>ruleStrIdIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>configValStrId</name></expr></argument>, <argument><expr><literal type="string">"    %s,"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldStrId</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>ruleStrIdList</name></expr></argument>, <argument><expr><name>ruleStrIdIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><call><name>bldCfgRenderLabel</name><argument_list>(<argument><expr><name>configValStrId</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"val/strid"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <literal type="string">"typedef enum\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configValStrIdEnum</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ruleStrIdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ruleStrIdIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>ruleStrIdList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ruleStrIdIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>bldCfgRenderLf</name><argument_list>(<argument><expr><name>configValStrIdEnum</name></expr></argument>, <argument><expr><name>ruleStrIdIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>configValStrIdEnum</name></expr></argument>, <argument><expr><literal type="string">"    %s,"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"parseRuleValStrId"</literal></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>ruleStrIdList</name></expr></argument>, <argument><expr><name>ruleStrIdIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><call><name>bldCfgRenderLabel</name><argument_list>(<argument><expr><name>configValStrIdEnum</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"val/strid/enum"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><literal type="string">"\n} ParseRuleValueStrId;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Rule Ints</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strLstSort</name><argument_list>(<argument><expr><name>ruleIntList</name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"Rule Ints\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>, <argument><expr><literal type="string">"%s\n"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(
            <argument><expr><call><name>bldDefineRender</name><argument_list>(
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_VAL_INT(value)"</literal></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"PARSE_RULE_U32_%zu(value)"</literal></expr></argument>, <argument><expr><call><name>bldCfgRenderVar128Size</name><argument_list>(<argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>ruleIntList</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <literal type="string">"static const int64_t parseRuleValueInt[] =\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configValInt</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ruleIntIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ruleIntIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>ruleIntList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ruleIntIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>bldCfgRenderLf</name><argument_list>(<argument><expr><name>configValInt</name></expr></argument>, <argument><expr><name>ruleIntIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>configValInt</name></expr></argument>, <argument><expr><literal type="string">"    %s,"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>ruleIntList</name></expr></argument>, <argument><expr><name>ruleIntIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><call><name>bldCfgRenderLabel</name><argument_list>(<argument><expr><name>configValInt</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"val/int"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
        <argument><expr><name>configVal</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <literal type="string">"typedef enum\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>configValIntEnum</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>ruleIntIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>ruleIntIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>ruleIntList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>ruleIntIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>bldCfgRenderLf</name><argument_list>(<argument><expr><name>configValIntEnum</name></expr></argument>, <argument><expr><name>ruleIntIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>configValIntEnum</name></expr></argument>, <argument><expr><literal type="string">"    %s,"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldEnum</name><argument_list>(<argument><expr><literal type="string">"parseRuleValInt"</literal></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>ruleIntList</name></expr></argument>, <argument><expr><name>ruleIntIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><call><name>bldCfgRenderLabel</name><argument_list>(<argument><expr><name>configValIntEnum</name></expr></argument>, <argument><expr><name>label</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"val/int/enum"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>, <argument><expr><literal type="string">"\n} ParseRuleValueInt;\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write to storage</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>bldPut</name><argument_list>(
        <argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><literal type="string">"src/config/parse.auto.c.inc"</literal></expr></argument>,
        <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s%s%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldHeader</name><argument_list>(<argument><expr><name>CONFIG_MODULE</name></expr></argument>, <argument><expr><name>PARSE_AUTO_COMMENT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>configVal</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>config</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>bldCfgRender</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldCfg</name></type> <name>bldCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>label</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>bldCfgRenderConfigAutoH</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>bldCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>bldCfgRenderParseAutoC</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>bldCfg</name></expr></argument>, <argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
