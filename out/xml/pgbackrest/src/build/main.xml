<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/build/main.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Code Builder
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/config/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/config/render.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/error/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/error/render.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/help/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/help/render.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/postgres/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/postgres/render.h"</cpp:file></cpp:include>

<function><type><name>int</name></type>
<name>main</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>int</name></type> <name>argListSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name><name>argList</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Check parameters</comment>
    <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>ParamInvalidError</name></expr></argument>, <argument><expr><name>argListSize</name> <operator>&gt;=</operator> <literal type="number">2</literal> <operator>&amp;&amp;</operator> <name>argListSize</name> <operator>&lt;=</operator> <literal type="number">4</literal></expr></argument>, <argument><expr><literal type="string">"only one to three parameters allowed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize logging</comment>
    <expr_stmt><expr><call><name>logInit</name><argument_list>(<argument><expr><name>logLevelWarn</name></expr></argument>, <argument><expr><name>logLevelError</name></expr></argument>, <argument><expr><name>logLevelOff</name></expr></argument>, <argument><expr><name>false</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get current working directory</comment>
    <decl_stmt><decl><type><name>char</name></type> <name><name>currentWorkDir</name><index>[<expr><literal type="number">1024</literal></expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>THROW_ON_SYS_ERROR</name><argument_list>(<argument><expr><call><name>getcwd</name><argument_list>(<argument><expr><name>currentWorkDir</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>currentWorkDir</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call> <operator>==</operator> <name>NULL</name></expr></argument>, <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unable to get cwd"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Get repo path (cwd if it was not passed)</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>pathRepo</name> <init>= <expr><call><name>strPath</name><argument_list>(<argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>currentWorkDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>pathBuild</name> <init>= <expr><call><name>strCat</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>pathRepo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>argListSize</name> <operator>&gt;=</operator> <literal type="number">3</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pathArg</name> <init>= <expr><call><name>STR</name><argument_list>(<argument><expr><name><name>argList</name><index>[<expr><literal type="number">2</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strBeginsWith</name><argument_list>(<argument><expr><name>pathArg</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>pathRepo</name> <operator>=</operator> <call><name>strPath</name><argument_list>(<argument><expr><name>pathArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>pathRepo</name> <operator>=</operator> <call><name>strPathAbsolute</name><argument_list>(<argument><expr><name>pathArg</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>currentWorkDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><name>pathBuild</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>pathRepo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// If the build path was specified</comment>
    <if_stmt><if>if <condition>(<expr><name>argListSize</name> <operator>&gt;=</operator> <literal type="number">4</literal></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pathArg</name> <init>= <expr><call><name>STR</name><argument_list>(<argument><expr><name><name>argList</name><index>[<expr><literal type="number">3</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strBeginsWith</name><argument_list>(<argument><expr><name>pathArg</name></expr></argument>, <argument><expr><name>FSLASH_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>pathBuild</name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>pathArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>pathBuild</name> <operator>=</operator> <call><name>strPathAbsolute</name><argument_list>(<argument><expr><name>pathArg</name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>currentWorkDir</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Repo and build storage</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>pathRepo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageBuild</name> <init>= <expr><call><name>storagePosixNewP</name><argument_list>(<argument><expr><name>pathBuild</name></expr></argument>, <argument><expr><operator>.</operator><name>write</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Config</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"config"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>argList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>bldCfgRender</name><argument_list>(<argument><expr><name>storageBuild</name></expr></argument>, <argument><expr><call><name>bldCfgParse</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Error</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"error"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>argList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>bldErrRender</name><argument_list>(<argument><expr><name>storageBuild</name></expr></argument>, <argument><expr><call><name>bldErrParse</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Help</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"help"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>argList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfg</name></type> <name>bldCfg</name> <init>= <expr><call><name>bldCfgParse</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>bldHlpRender</name><argument_list>(<argument><expr><name>storageBuild</name></expr></argument>, <argument><expr><name>bldCfg</name></expr></argument>, <argument><expr><call><name>bldHlpParse</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>bldCfg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// PostgreSQL</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>argList</name><index>[<expr><literal type="number">1</literal></expr>]</index></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>bldPgRender</name><argument_list>(<argument><expr><name>storageBuild</name></expr></argument>, <argument><expr><call><name>bldPgParse</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <return>return <expr><literal type="number">0</literal></expr>;</return>
</block_content>}</block></function>
</unit>
