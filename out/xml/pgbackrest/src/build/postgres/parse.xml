<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/build/postgres/parse.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse PostgreSQL Interface Yaml
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/common/yaml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/postgres/parse.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse version list
***********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>BldPgVersionRaw</name>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>version</name></decl>;</decl_stmt>                                          <comment type="line">// See BldPgVersion for comments</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>release</name></decl>;</decl_stmt>
}</block></struct></type> <name>BldPgVersionRaw</name>;</typedef>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>bldPgVersionList</name><parameter_list>(<parameter><decl><type><name>Yaml</name> <modifier>*</modifier><specifier>const</specifier></type> <name>yaml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BldPgVersion</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>YamlEvent</name></type> <name>pgDef</name> <init>= <expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Parse version list</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>pgDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"version"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeSeqBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <decl_stmt><decl><type><name>YamlEvent</name></type> <name>ver</name> <init>= <expr><call><name>yamlEventNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <do>do
            <block>{<block_content>
                <decl_stmt><decl><type><name>BldPgVersionRaw</name></type> <name>pgRaw</name> <init>= <expr><block>{<expr><operator>.</operator><name>release</name> <operator>=</operator> <name>true</name></expr>}</block></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>ver</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>yamlEventTypeMapBegin</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>pgRaw</name><operator>.</operator><name>version</name></name> <operator>=</operator> <call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call><operator>.</operator><name>value</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeMapBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <decl_stmt><decl><type><name>YamlEvent</name></type> <name>verDef</name> <init>= <expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>YamlEvent</name></type> <name>verDefVal</name> <init>= <expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                    <comment type="line">// Get release setting</comment>
                    <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>verDef</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><literal type="string">"release"</literal></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>pgRaw</name><operator>.</operator><name>release</name></name> <operator>=</operator> <call><name>yamlBoolParse</name><argument_list>(<argument><expr><name>verDefVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unknown postgres definition '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>verDef</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <expr_stmt><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeMapEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeMapEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>pgRaw</name><operator>.</operator><name>version</name></name> <operator>=</operator> <name><name>ver</name><operator>.</operator><name>value</name></name></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <comment type="line">// Add to list</comment>
                <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(result)</argument>)</argument_list></macro>
                <block>{<block_content>
                    <macro><name>lstAdd</name><argument_list>(
                        <argument>result</argument>,
                        <argument>&amp;(BldPgVersion)
                        {
                            .version = strDup(pgRaw.version)</argument>,
                            <argument>.release = pgRaw.release</argument>,
                        <argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                <expr_stmt><expr><name>ver</name> <operator>=</operator> <call><name>yamlEventNext</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            while <condition>(<expr><name><name>ver</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>yamlEventTypeSeqEnd</name></expr>)</condition>;</do>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unknown postgres definition '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>pgDef</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse defines from header
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StringList</name> <modifier>*</modifier></type>
<name>bldPgParseDefine</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lineList</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Scan all lines</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>lineIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lineIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>lineList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>lineIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>line</name> <init>= <expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>lineList</name></expr></argument>, <argument><expr><name>lineIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If define get name</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strBeginsWithZ</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">"#define"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>defineToken</name> <init>= <expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>strEmpty</name><argument_list>(<argument><expr><name>defineToken</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unable to find define -- are there extra spaces on '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>line</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// The define might be followed by a ( or tab</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier></type><name>defineList</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name>defineToken</name></expr></argument>, <argument><expr><literal type="string">"("</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>define</name></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>defineList</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>define</name> <operator>=</operator> <call><name>strTrim</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>defineList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <else>else
            <block>{<block_content>
                <expr_stmt><expr><name>defineList</name> <operator>=</operator> <call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name>defineToken</name></expr></argument>, <argument><expr><literal type="string">"\t"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>define</name> <operator>=</operator> <call><name>strTrim</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>defineList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></else></if_stmt>

            <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>define</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse types from header
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>StringList</name> <modifier>*</modifier></type>
<name>bldPgParseType</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>header</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>lineList</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name>header</name></expr></argument>, <argument><expr><literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>scanEnum</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Scan all lines</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>lineIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>lineIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>lineList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>lineIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>line</name> <init>= <expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>lineList</name></expr></argument>, <argument><expr><name>lineIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tokenList</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name>line</name></expr></argument>, <argument><expr><literal type="string">" "</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tokenFirst</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>tokenList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If typedef</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>tokenFirst</name></expr></argument>, <argument><expr><literal type="string">"typedef"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>tokenType</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>tokenList</name></expr></argument>, <argument><expr><literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// If struct/enum continue scanning to get the name/enums</comment>
            <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>tokenType</name></expr></argument>, <argument><expr><literal type="string">"struct"</literal></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEqZ</name><argument_list>(<argument><expr><name>tokenType</name></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>scanEnum</name> <operator>=</operator> <call><name>strEqZ</name><argument_list>(<argument><expr><name>tokenType</name></expr></argument>, <argument><expr><literal type="string">"enum"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// Else add the type name</comment>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>tokenList</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>tokenList</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <comment type="line">// End scanning of struct/enum and get name</comment>
        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>tokenFirst</name></expr></argument>, <argument><expr><literal type="string">"}"</literal></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>tokenList</name></expr></argument>, <argument><expr><call><name>strLstSize</name><argument_list>(<argument><expr><name>tokenList</name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">";"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>scanEnum</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Add enums to type list</comment>
        <if type="elseif">else if <condition>(<expr><name>scanEnum</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name>tokenFirst</name></expr></argument>, <argument><expr><literal type="string">"{"</literal></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strLstAddIfMissing</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>tokenList</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">","</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>BldPg</name></type>
<name>bldPgParse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Parse types from version.vendor.h</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>vendorHeader</name> <init>= <expr><call><name>strNewBuf</name><argument_list>(
        <argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"src/postgres/interface/version.vendor.h"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>typeList</name> <init>= <expr><call><name>bldPgParseType</name><argument_list>(<argument><expr><name>vendorHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strLstSort</name><argument_list>(<argument><expr><name>typeList</name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Parse defines from version.vendor.h</comment>
    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>defineList</name> <init>= <expr><call><name>bldPgParseDefine</name><argument_list>(<argument><expr><name>vendorHeader</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>defineList</name></expr></argument>, <argument><expr><literal type="string">"CATALOG_VERSION_NO_MAX"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strLstAddZ</name><argument_list>(<argument><expr><name>defineList</name></expr></argument>, <argument><expr><literal type="string">"PG_VERSION"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>strLstSort</name><argument_list>(<argument><expr><name>defineList</name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Parse defines from version.intern.h</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>functionList</name> <init>= <expr><call><name>bldPgParseDefine</name><argument_list>(
        <argument><expr><call><name>strNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"src/postgres/interface/version.intern.h"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Initialize yaml</comment>
    <decl_stmt><decl><type><name>Yaml</name> <modifier>*</modifier><specifier>const</specifier></type> <name>yaml</name> <init>= <expr><call><name>yamlNew</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"src/build/postgres/postgres.yaml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>yamlEventNextCheck</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>, <argument><expr><name>yamlEventTypeMapBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Parse postgres</comment>
    <return>return <expr><operator>(</operator><name>BldPg</name><operator>)</operator><block>{<expr><operator>.</operator><name>pgList</name> <operator>=</operator> <call><name>bldPgVersionList</name><argument_list>(<argument><expr><name>yaml</name></expr></argument>)</argument_list></call></expr>, <expr><operator>.</operator><name>typeList</name> <operator>=</operator> <name>typeList</name></expr>, <expr><operator>.</operator><name>defineList</name> <operator>=</operator> <name>defineList</name></expr>, <expr><operator>.</operator><name>functionList</name> <operator>=</operator> <name>functionList</name></expr>}</block></expr>;</return>
</block_content>}</block></function>
</unit>
