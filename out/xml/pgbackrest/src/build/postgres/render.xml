<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/build/postgres/render.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Render PostgreSQL Interface
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/common/render.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/postgres/render.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Render interface.auto.c.inc
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_MODULE</name></cpp:macro>                                                  <cpp:value>"postgres"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>PG_AUTO_COMMENT</name></cpp:macro>                                            <cpp:value>"PostgreSQL Interface"</cpp:value></cpp:define>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>bldPgRenderInterfaceAutoC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldPg</name></type> <name>bldPg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>pg</name> <init>= <expr><call><name>bldHeader</name><argument_list>(<argument><expr><name>PG_MODULE</name></expr></argument>, <argument><expr><name>PG_AUTO_COMMENT</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// PostgreSQL interfaces</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>pgIdx</name> <init>= <expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>pgList</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>pgIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>pgList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pgIdx</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldPgVersion</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pgVersion</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>pgList</name></name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>versionNoDot</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name><name>pgVersion</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>pg</name></expr></argument>,
            <argument><expr><literal type="string">"\n"</literal>
            <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
            <literal type="string">"PostgreSQL %s interface\n"</literal>
            <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
            <literal type="string">"#define PG_VERSION                                                  PG_VERSION_%s\n"</literal>
            <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>pgVersion</name><operator>-&gt;</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>versionNoDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>typeIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>typeIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>typeList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>typeIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>type</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>typeList</name></name></expr></argument>, <argument><expr><name>typeIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><call><name>bldDefineRender</name><argument_list>(<argument><expr><name>type</name></expr></argument>, <argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s_%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>versionNoDot</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>pgVersion</name><operator>-&gt;</operator><name>release</name></name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
                <argument><expr><name>pg</name></expr></argument>,
                <argument><expr><literal type="string">"\n"</literal>
                <literal type="string">"#define CATALOG_VERSION_NO_MAX\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
            <argument><expr><name>pg</name></expr></argument>,
            <argument><expr><literal type="string">"\n"</literal>
            <literal type="string">"#include \"postgres/interface/version.intern.h\"\n"</literal>
            <literal type="string">"\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>functionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>functionIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>functionList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>functionIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><literal type="string">"%s(%s);\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>functionList</name></name></expr></argument>, <argument><expr><name>functionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>versionNoDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>typeIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>typeIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>typeList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>typeIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><literal type="string">"#undef %s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>typeList</name></name></expr></argument>, <argument><expr><name>typeIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>defineIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>defineIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>defineList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>defineIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><literal type="string">"#undef %s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>defineList</name></name></expr></argument>, <argument><expr><name>defineIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

        <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>functionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>functionIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>functionList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>functionIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>pg</name></expr></argument>, <argument><expr><literal type="string">"#undef %s\n"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>functionList</name></name></expr></argument>, <argument><expr><name>functionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block></for>

    <comment type="line">// Interface struct</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><name>pg</name></expr></argument>,
        <argument><expr><literal type="string">"\n"</literal>
        <name>COMMENT_BLOCK_BEGIN</name> <literal type="string">"\n"</literal>
        <literal type="string">"PostgreSQL interface struct\n"</literal>
        <name>COMMENT_BLOCK_END</name> <literal type="string">"\n"</literal>
        <literal type="string">"static const PgInterface pgInterface[] =\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>pgIdx</name> <init>= <expr><call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>pgList</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><name>pgIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>pgList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pgIdx</name><operator>--</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldPgVersion</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pgVersion</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>pgList</name></name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>versionNoDot</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strLstJoin</name><argument_list>(<argument><expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name><name>pgVersion</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><literal type="string">"."</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
            <argument><expr><name>pg</name></expr></argument>,
            <argument><expr><literal type="string">"    {\n"</literal>
            <literal type="string">"        .version = PG_VERSION_%s,\n"</literal>
            <literal type="string">"\n"</literal></expr></argument>,
            <argument><expr><name>versionNoDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>functionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>functionIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>functionList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>functionIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// Convert define name to function name</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>nameList</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name><name>bldPg</name><operator>.</operator><name>functionList</name></name></expr></argument>, <argument><expr><name>functionIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"_"</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>nameIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>nameIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>nameList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>nameIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>namePart</name> <init>= <expr><call><name>strLower</name><argument_list>(<argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>nameList</name></expr></argument>, <argument><expr><name>nameIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>nameIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strFirstUpper</name><argument_list>(<argument><expr><name>namePart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>namePart</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></for>

            <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
                <argument><expr><name>pg</name></expr></argument>,
                <argument><expr><literal type="string">"        .%s = %s%s,\n"</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strFirstLower</name><argument_list>(<argument><expr><call><name>strSub</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><literal type="string">"pgInterface"</literal></expr></argument>)</argument_list></sizeof> <operator>-</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>versionNoDot</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(
            <argument><expr><name>pg</name></expr></argument>,
            <argument><expr><literal type="string">"    },\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><name>pg</name></expr></argument>,
        <argument><expr><literal type="string">"};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>bldPut</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><literal type="string">"src/postgres/interface.auto.c.inc"</literal></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name>pg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>bldPgRender</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldPg</name></type> <name>bldPg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>bldPgRenderInterfaceAutoC</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>bldPg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
