<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/build/help/parse.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse Help Xml
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/xml.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/storage.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/config/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/help/parse.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse option help
***********************************************************************************************************************************/</comment>
<comment type="line">// Helper to parse options</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bldHlpParseOption</name><parameter_list>(<parameter><decl><type><name>XmlNodeList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xmlOptList</name></decl></parameter>, <parameter><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optList</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>sectionDefault</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>xmlOptList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optList</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optIdx</name> <operator>&lt;</operator> <call><name>xmlNodeLstSize</name><argument_list>(<argument><expr><name>xmlOptList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xmlOpt</name> <init>= <expr><call><name>xmlNodeLstGet</name><argument_list>(<argument><expr><name>xmlOptList</name></expr></argument>, <argument><expr><name>optIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Get section or use default</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>section</name> <init>= <expr><call><name>xmlNodeAttribute</name><argument_list>(<argument><expr><name>xmlOpt</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"section"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>section</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>section</name> <operator>=</operator> <name>sectionDefault</name></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Add option to list</comment>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(optList)</argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>lstAdd</name><argument_list>(
                <argument>optList</argument>,
                <argument>&amp;(BldHlpOption)
                {
                    .name = xmlNodeAttribute(xmlOpt, STRDEF(<literal type="string">"id"</literal>))</argument>,
                    <argument>.section = strDup(section)</argument>,
                    <argument>.summary = xmlNodeChild(xmlOpt, STRDEF(<literal type="string">"summary"</literal>), true)</argument>,
                    <argument>.description = xmlNodeChild(xmlOpt, STRDEF(<literal type="string">"text"</literal>), true)</argument>,
                <argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name>optList</name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>bldHlpParseOptionList</name><parameter_list>(<parameter><decl><type><name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BldHlpOption</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Parse config options</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNodeList</name> <modifier>*</modifier></type><name>xmlSectionList</name> <init>= <expr><call><name>xmlNodeChildList</name><argument_list>(
        <argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"config"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"config-section-list"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"config-section"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>sectionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>sectionIdx</name> <operator>&lt;</operator> <call><name>xmlNodeLstSize</name><argument_list>(<argument><expr><name>xmlSectionList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>sectionIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xmlSection</name> <init>= <expr><call><name>xmlNodeLstGet</name><argument_list>(<argument><expr><name>xmlSectionList</name></expr></argument>, <argument><expr><name>sectionIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>bldHlpParseOption</name><argument_list>(
            <argument><expr><call><name>xmlNodeChildList</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xmlSection</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"config-key-list"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"config-key"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>result</name></expr></argument>,
            <argument><expr><call><name>xmlNodeAttribute</name><argument_list>(<argument><expr><name>xmlSection</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <comment type="line">// Parse command-line only options</comment>
    <expr_stmt><expr><call><name>bldHlpParseOption</name><argument_list>(
        <argument><expr><call><name>xmlNodeChildList</name><argument_list>(
            <argument><expr><call><name>xmlNodeChild</name><argument_list>(
                <argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"operation"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"operation-general"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"option-list"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"option"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><name>result</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Parse command help
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>List</name> <modifier>*</modifier></type>
<name>bldHlpParseCommandList</name><parameter_list>(<parameter><decl><type><name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>List</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BldHlpCommand</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Parse commands</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNodeList</name> <modifier>*</modifier></type><name>xmlCmdList</name> <init>= <expr><call><name>xmlNodeChildList</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"command"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>cmdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cmdIdx</name> <operator>&lt;</operator> <call><name>xmlNodeLstSize</name><argument_list>(<argument><expr><name>xmlCmdList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cmdIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xmlCmd</name> <init>= <expr><call><name>xmlNodeLstGet</name><argument_list>(<argument><expr><name>xmlCmdList</name></expr></argument>, <argument><expr><name>cmdIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Parse option list if any</comment>
        <decl_stmt><decl><type><name>List</name> <modifier>*</modifier></type><name>cmdOptList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xmlCmdOptListParent</name> <init>= <expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xmlCmd</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"option-list"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>xmlCmdOptListParent</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>cmdOptList</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>BldHlpOption</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><operator>.</operator><name>comparator</name> <operator>=</operator> <name>lstComparatorStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>bldHlpParseOption</name><argument_list>(<argument><expr><call><name>xmlNodeChildList</name><argument_list>(<argument><expr><name>xmlCmdOptListParent</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"option"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cmdOptList</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Add command to list</comment>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext(result)</argument>)</argument_list></macro>
        <block>{<block_content>
            <macro><name>lstAdd</name><argument_list>(
                <argument>result</argument>,
                <argument>&amp;(BldHlpCommand)
                {
                    .name = xmlNodeAttribute(xmlCmd, STRDEF(<literal type="string">"id"</literal>))</argument>,
                    <argument>.summary = xmlNodeChild(xmlCmd, STRDEF(<literal type="string">"summary"</literal>), true)</argument>,
                    <argument>.description = xmlNodeChild(xmlCmd, STRDEF(<literal type="string">"text"</literal>), true)</argument>,
                    <argument>.optList = lstMove(cmdOptList, memContextCurrent())</argument>,
                <argument>}</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>lstSort</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>sortOrderAsc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Reconcile help
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bldHlpValidate</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BldHlp</name></type> <name>bldHlp</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldCfg</name></type> <name>bldCfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Validate command help</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>cmdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cmdIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cmdIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmd</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>, <argument><expr><name>cmdIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldHlpCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmdHlp</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>bldHlp</name><operator>.</operator><name>cmdList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>cmdHlp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"command '%s' must have help"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Validate option help</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOption</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>, <argument><expr><name>optIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldHlpOption</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optHlp</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>bldHlp</name><operator>.</operator><name>optList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// If help was not found in general command-line or config options then check command overrides</comment>
        <if_stmt><if>if <condition>(<expr><name>optHlp</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optCmdListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optCmdListIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>cmdList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optCmdListIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOptionCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optCmd</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>cmdList</name></name></expr></argument>, <argument><expr><name>optCmdListIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>BldHlpCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmdHlp</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>bldHlp</name><operator>.</operator><name>cmdList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>optCmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>cmdHlp</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"command help is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Only options with a command role of main require help</comment>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strLstExists</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>roleList</name></name></expr></argument>, <argument><expr><name>CMD_ROLE_MAIN_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <decl_stmt><decl><type><specifier>const</specifier> <name>BldHlpOption</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmdOptHlp</name> <init>= <expr><ternary><condition><expr><name><name>cmdHlp</name><operator>-&gt;</operator><name>optList</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>cmdHlp</name><operator>-&gt;</operator><name>optList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name>cmdOptHlp</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"option '%s' must have help for command '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>BldHlp</name></type>
<name>bldHlpParse</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldCfg</name></type> <name>bldCfg</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Initialize xml</comment>
    <decl_stmt><decl><type><name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xml</name> <init>= <expr><call><name>xmlDocumentRoot</name><argument_list>(
        <argument><expr><call><name>xmlDocumentNewBuf</name><argument_list>(<argument><expr><call><name>storageGetP</name><argument_list>(<argument><expr><call><name>storageNewReadP</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"src/build/help/help.xml"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Parse help</comment>
    <decl_stmt><decl><type><name>BldHlp</name></type> <name>result</name> <init>=
    <expr><block>{
        <expr><operator>.</operator><name>cmdList</name> <operator>=</operator> <call><name>bldHlpParseCommandList</name><argument_list>(
            <argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><call><name>xmlNodeChild</name><argument_list>(<argument><expr><name>xml</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"operation"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"command-list"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>,
        <expr><operator>.</operator><name>optList</name> <operator>=</operator> <macro><name>bldHlpParseOptionList</name><argument_list>(<argument>xml</argument>)</argument_list></macro></expr>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>bldHlpValidate</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>bldCfg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
