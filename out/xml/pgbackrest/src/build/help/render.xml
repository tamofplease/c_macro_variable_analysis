<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/build/help/render.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Render Help
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/parser.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;libxml/tree.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/bz2/compress.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferRead.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/bufferWrite.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/pack.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/common/render.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/config/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/help/parse.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Render xml as text
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldHlpRenderReplace</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>string</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>replace</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>with</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>stringList</name> <init>= <expr><call><name>strLstNewSplitZ</name><argument_list>(<argument><expr><name>string</name></expr></argument>, <argument><expr><name>replace</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>stringIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>stringIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>stringList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>stringIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name>stringIdx</name> <operator>!=</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>with</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>stringList</name></expr></argument>, <argument><expr><name>stringIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldHlpRenderXmlNode</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>xmlNodePtr</name></type> <name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>xmlNodePtr</name></type> <name>currentNode</name> <init>= <expr><name><name>xml</name><operator>-&gt;</operator><name>children</name></name></expr></init></decl>;</init> <condition><expr><name>currentNode</name> <operator>!=</operator> <name>NULL</name></expr>;</condition> <incr><expr><name>currentNode</name> <operator>=</operator> <name><name>currentNode</name><operator>-&gt;</operator><name>next</name></name></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>name</name> <init>= <expr><call><name>STR</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name><name>currentNode</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>currentNode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>XML_ELEMENT_NODE</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"admonition"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"NOTE: "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXmlNode</name><argument_list>(<argument><expr><name>currentNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"backrest"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"pgBackRest"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"list"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXmlNode</name><argument_list>(<argument><expr><name>currentNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"list-item"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"* "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXmlNode</name><argument_list>(<argument><expr><name>currentNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"p"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXmlNode</name><argument_list>(<argument><expr><name>currentNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"\n\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"postgres"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"PostgreSQL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"quote"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXmlNode</name><argument_list>(<argument><expr><name>currentNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="char">'"'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <if type="elseif">else if <condition>(
                <expr><call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"id"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"br-option"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"cmd"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
                <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"link"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"setting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"pg-setting"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
                <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"code"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"i"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"file"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
                <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"path"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"b"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"host"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator>
                <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"exe"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>strEq</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"proper"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXmlNode</name><argument_list>(<argument><expr><name>currentNode</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"unknown tag '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><name><name>currentNode</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>XML_TEXT_NODE</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>xmlChar</name> <modifier>*</modifier></type><name>content</name> <init>= <expr><call><name>xmlNodeGetContent</name><argument_list>(<argument><expr><name>currentNode</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>text</name> <init>= <expr><call><name>strNewZ</name><argument_list>(<argument><expr><operator>(</operator><name>char</name> <operator>*</operator><operator>)</operator><name>content</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>xmlFree</name><argument_list>(<argument><expr><name>content</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <if_stmt><if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEmpty</name><argument_list>(<argument><expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>strDup</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"text '%s' is invalid"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>text</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <expr_stmt><expr><name>text</name> <operator>=</operator> <call><name>bldHlpRenderReplace</name><argument_list>(<argument><expr><name>text</name></expr></argument>, <argument><expr><literal type="string">"{[dash]}"</literal></expr></argument>, <argument><expr><literal type="string">"-"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>strCat</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>text</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<function><type><specifier>static</specifier> <name>String</name> <modifier>*</modifier></type>
<name>bldHlpRenderXml</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>XmlNode</name> <modifier>*</modifier><specifier>const</specifier></type> <name>xml</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strTrim</name><argument_list>(<argument><expr><call><name>bldHlpRenderXmlNode</name><argument_list>(<argument><expr><operator>*</operator><operator>(</operator><specifier>const</specifier> <name>xmlNodePtr</name> <operator>*</operator><operator>)</operator><name>xml</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Render help to a pack
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>PackWrite</name> <modifier>*</modifier></type>
<name>bldHlpRenderHelpAutoCPack</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BldCfg</name></type> <name>bldCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldHlp</name></type> <name>bldHlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>PackWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>pack</name> <init>= <expr><call><name>pckWriteNewP</name><argument_list>(<argument><expr><operator>.</operator><name>size</name> <operator>=</operator> <literal type="number">65</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Command help</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>cmdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cmdIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cmdIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmd</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>, <argument><expr><name>cmdIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldHlpCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmdHlp</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>bldHlp</name><operator>.</operator><name>cmdList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>cmdHlp</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"command help is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><name><name>cmd</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXml</name><argument_list>(<argument><expr><name><name>cmdHlp</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXml</name><argument_list>(<argument><expr><name><name>cmdHlp</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Option help</comment>
    <comment type="line">// -----------------------------------------------------------------------------------------------------------------------------</comment>
    <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOption</name> <modifier>*</modifier><specifier>const</specifier></type> <name>opt</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>optList</name></name></expr></argument>, <argument><expr><name>optIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>const</specifier> <name>BldHlpOption</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optHlp</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>bldHlp</name><operator>.</operator><name>optList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Internal</comment>
        <expr_stmt><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Section</comment>
        <if_stmt><if>if <condition>(<expr><name>optHlp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><name><name>optHlp</name><operator>-&gt;</operator><name>section</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteNullP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Summary</comment>
        <if_stmt><if>if <condition>(<expr><name>optHlp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXml</name><argument_list>(<argument><expr><name><name>optHlp</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteNullP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Description</comment>
        <if_stmt><if>if <condition>(<expr><name>optHlp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXml</name><argument_list>(<argument><expr><name><name>optHlp</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteNullP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Deprecations</comment>
        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier><specifier>const</specifier></type> <name>deprecateList</name> <init>= <expr><call><name>strLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>deprecateList</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>deprecateIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>deprecateIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>deprecateList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>deprecateIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgOptionDeprecate</name> <modifier>*</modifier><specifier>const</specifier></type> <name>deprecate</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>deprecateList</name></name></expr></argument>, <argument><expr><name>deprecateIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>deprecate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>deprecateList</name></expr></argument>, <argument><expr><name><name>deprecate</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strLstEmpty</name><argument_list>(<argument><expr><name>deprecateList</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>deprecateIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>deprecateIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>deprecateList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>deprecateIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>deprecateList</name></expr></argument>, <argument><expr><name>deprecateIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>

            <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteNullP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <comment type="line">// Command overrides</comment>
        <decl_stmt><decl><type><name>bool</name></type> <name>found</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>cmdIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>cmdIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>cmdIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmd</name> <init>= <expr><call><name>lstGet</name><argument_list>(<argument><expr><name><name>bldCfg</name><operator>.</operator><name>cmdList</name></name></expr></argument>, <argument><expr><name>cmdIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><specifier>const</specifier> <name>BldCfgCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optCmd</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>opt</name><operator>-&gt;</operator><name>cmdList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name>optCmd</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <decl_stmt><decl><type><specifier>const</specifier> <name>BldHlpCommand</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmdHlp</name> <init>= <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>bldHlp</name><operator>.</operator><name>cmdList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>cmd</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>cmdHlp</name> <operator>!=</operator> <name>NULL</name></expr></argument>, <argument><expr><literal type="string">"command help is NULL"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>BldHlpOption</name> <modifier>*</modifier><specifier>const</specifier></type> <name>cmdOptHlp</name> <init>= <expr><ternary><condition><expr><name><name>cmdHlp</name><operator>-&gt;</operator><name>optList</name></name> <operator>!=</operator> <name>NULL</name></expr> ?</condition><then> <expr><call><name>lstFind</name><argument_list>(<argument><expr><name><name>cmdHlp</name><operator>-&gt;</operator><name>optList</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name><name>opt</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name>NULL</name></expr></else></ternary></expr></init></decl>;</decl_stmt>

                <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>internal</name></name> <operator>!=</operator> <name><name>optCmd</name><operator>-&gt;</operator><name>internal</name></name> <operator>||</operator> <name>cmdOptHlp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><operator>!</operator><name>found</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>pckWriteArrayBeginP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>found</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><call><name>pckWriteObjBeginP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><operator>.</operator><name>id</name> <operator>=</operator> <name>cmdIdx</name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name><name>opt</name><operator>-&gt;</operator><name>internal</name></name> <operator>!=</operator> <name><name>optCmd</name><operator>-&gt;</operator><name>internal</name></name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>pckWriteBoolP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><name><name>optCmd</name><operator>-&gt;</operator><name>internal</name></name></expr></argument>, <argument><expr><operator>.</operator><name>defaultWrite</name> <operator>=</operator> <name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>pckWriteNullP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                    <if_stmt><if>if <condition>(<expr><name>cmdOptHlp</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXml</name><argument_list>(<argument><expr><name><name>cmdOptHlp</name><operator>-&gt;</operator><name>summary</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>pckWriteStrP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>, <argument><expr><call><name>bldHlpRenderXml</name><argument_list>(<argument><expr><name><name>cmdOptHlp</name><operator>-&gt;</operator><name>description</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>

                    <expr_stmt><expr><call><name>pckWriteObjEndP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <if_stmt><if>if <condition>(<expr><name>found</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>pckWriteNullP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>pckWriteArrayEndP</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>pckWriteEnd</name><argument_list>(<argument><expr><name>pack</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <return>return <expr><name>pack</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Compress pack to a buffer
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>Buffer</name> <modifier>*</modifier></type>
<name>bldHlpRenderHelpAutoCCmp</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>BldCfg</name></type> <name>bldCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldHlp</name></type> <name>bldHlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Get pack buffer</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>packBuf</name> <init>= <expr><call><name>pckToBuf</name><argument_list>(<argument><expr><call><name>pckWriteResult</name><argument_list>(<argument><expr><call><name>bldHlpRenderHelpAutoCPack</name><argument_list>(<argument><expr><name>bldCfg</name></expr></argument>, <argument><expr><name>bldHlp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><call><name>bufSize</name><argument_list>(<argument><expr><name>packBuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Open source/destination</comment>
    <decl_stmt><decl><type><name>IoRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>source</name> <init>= <expr><call><name>ioBufferReadNewOpen</name><argument_list>(<argument><expr><name>packBuf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>destination</name> <init>= <expr><call><name>ioBufferWriteNew</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ioFilterGroupAdd</name><argument_list>(<argument><expr><call><name>ioWriteFilterGroup</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bz2CompressNew</name><argument_list>(<argument><expr><literal type="number">9</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Copy data from source to destination</comment>
    <decl_stmt><decl><type><name>Buffer</name> <modifier>*</modifier></type><name>read</name> <init>= <expr><call><name>bufNew</name><argument_list>(<argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>packBuf</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>ioRead</name><argument_list>(<argument><expr><name>source</name></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>ioReadEof</name><argument_list>(<argument><expr><name>source</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name>destination</name></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name>destination</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Return compressed buffer</comment>
    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Output buffer to a file as a byte array
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>bldHlpRenderHelpAutoC</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldCfg</name></type> <name>bldCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldHlp</name></type> <name>bldHlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <comment type="line">// Convert buffer to bytes</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buffer</name> <init>= <expr><call><name>bldHlpRenderHelpAutoCCmp</name><argument_list>(<argument><expr><name>bldCfg</name></expr></argument>, <argument><expr><name>bldHlp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>help</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"%s"</literal>
        <literal type="string">"static const unsigned char helpData[%zu] =\n"</literal>
        <literal type="string">"{\n"</literal></expr></argument>,
        <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>bldHeader</name><argument_list>(<argument><expr><literal type="string">"help"</literal></expr></argument>, <argument><expr><literal type="string">"Help Data"</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>first</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>size_t</name></type> <name>lineSize</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>byteZ</name><index>[<expr><literal type="number">4</literal></expr>]</index></name></decl>;</decl_stmt>

    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>bufferIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>bufferIdx</name> <operator>&lt;</operator> <call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>bufferIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>snprintf</name><argument_list>(<argument><expr><name>byteZ</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>byteZ</name></expr></argument>)</argument_list></sizeof></expr></argument>, <argument><expr><literal type="string">"%u"</literal></expr></argument>, <argument><expr><call><name>bufPtrConst</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call><index>[<expr><name>bufferIdx</name></expr>]</index></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>strlen</name><argument_list>(<argument><expr><name>byteZ</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator> <operator>+</operator> <name>lineSize</name> <operator>&gt;</operator> <literal type="number">128</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>help</name></expr></argument>, <argument><expr><literal type="char">'\n'</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>first</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <if_stmt><if>if <condition>(<expr><name>first</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>help</name></expr></argument>, <argument><expr><literal type="string">"    "</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>lineSize</name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>help</name></expr></argument>, <argument><expr><literal type="string">"%s%s,"</literal></expr></argument>, <argument><expr><ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">" "</literal></expr></else></ternary></expr></argument>, <argument><expr><name>byteZ</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name>lineSize</name> <operator>+=</operator> <call><name>strlen</name><argument_list>(<argument><expr><name>byteZ</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal> <operator>+</operator> <operator>(</operator><ternary><condition><expr><name>first</name></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary><operator>)</operator></expr>;</expr_stmt>
        <expr_stmt><expr><name>first</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>
    </block_content>}</block></for>

    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>help</name></expr></argument>, <argument><expr><literal type="string">"\n};\n"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Write to storage</comment>
    <expr_stmt><expr><call><name>bldPut</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><literal type="string">"src/command/help/help.auto.c.inc"</literal></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name>help</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>bldHlpRender</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Storage</name> <modifier>*</modifier><specifier>const</specifier></type> <name>storageRepo</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldCfg</name></type> <name>bldCfg</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>BldHlp</name></type> <name>bldHlp</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>bldHlpRenderHelpAutoC</name><argument_list>(<argument><expr><name>storageRepo</name></expr></argument>, <argument><expr><name>bldCfg</name></expr></argument>, <argument><expr><name>bldHlp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
