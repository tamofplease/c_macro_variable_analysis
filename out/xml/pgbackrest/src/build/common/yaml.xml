<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/build/common/yaml.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Yaml Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;yaml.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/common/yaml.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>Yaml</name>
<block>{
    <decl_stmt><decl><type><name>yaml_parser_t</name></type> <name>parser</name></decl>;</decl_stmt>                                           <comment type="line">// Parse context</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>eventNextSet</name></decl>;</decl_stmt>                                              <comment type="line">// Is the next event set?</comment>
    <decl_stmt><decl><type><name>YamlEvent</name></type> <name>eventNext</name></decl>;</decl_stmt>                                            <comment type="line">// Next event, stored after a peek</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Free parser context
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>yamlFreeResource</name><parameter_list>(<parameter><decl><type><name>THIS_VOID</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>THIS</name><argument_list>(<argument><expr><name>Yaml</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>YAML</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>yaml_parser_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>Yaml</name> <modifier>*</modifier></type>
<name>yamlNew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Buffer</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BUFFER</name></expr></argument>, <argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Yaml</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Yaml</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>, <argument>.callbackQty = <literal type="number">1</literal></argument>)</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Create object</comment>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>Yaml</name><operator>)</operator><block>{<expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr>}</block></expr>;</expr_stmt>                                        <comment type="line">// Extra braces are required for older gcc versions</comment>

        <comment type="line">// Initialize parser context</comment>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>ServiceError</name></expr></argument>, <argument><expr><call><name>yaml_parser_initialize</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"unable to initialize yaml parser"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memContextCallbackSet</name><argument_list>(<argument><expr><call><name>objMemContext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>yamlFreeResource</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set yaml string</comment>
        <expr_stmt><expr><call><name>yaml_parser_set_input_string</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><call><name>bufPtrConst</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>bufUsed</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Start document</comment>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><call><name>yamlEventNext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>yamlEventTypeStreamBegin</name></expr></argument>, <argument><expr><literal type="string">"expected yaml stream begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><call><name>yamlEventNext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call><operator>.</operator><name>type</name> <operator>==</operator> <name>yamlEventTypeDocBegin</name></expr></argument>, <argument><expr><literal type="string">"expected yaml document begin"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE_P</name><argument_list>(<argument><expr><name>Yaml</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<comment type="line">// Helper to map event type</comment>
<function><type><specifier>static</specifier> <name>YamlEventType</name></type>
<name>yamlEventType</name><parameter_list>(<parameter><decl><type><name>yaml_event_type_t</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <switch>switch <condition>(<expr><name>type</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><name>YAML_STREAM_START_EVENT</name></expr>:</case>
            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEventType</name></expr></argument>, <argument><expr><name>yamlEventTypeStreamBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><name>YAML_STREAM_END_EVENT</name></expr>:</case>
            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEventType</name></expr></argument>, <argument><expr><name>yamlEventTypeStreamEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><name>YAML_DOCUMENT_START_EVENT</name></expr>:</case>
            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEventType</name></expr></argument>, <argument><expr><name>yamlEventTypeDocBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><name>YAML_DOCUMENT_END_EVENT</name></expr>:</case>
            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEventType</name></expr></argument>, <argument><expr><name>yamlEventTypeDocEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><name>YAML_ALIAS_EVENT</name></expr>:</case>
            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEventType</name></expr></argument>, <argument><expr><name>yamlEventTypeAlias</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><name>YAML_SCALAR_EVENT</name></expr>:</case>
            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEventType</name></expr></argument>, <argument><expr><name>yamlEventTypeScalar</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><name>YAML_SEQUENCE_START_EVENT</name></expr>:</case>
            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEventType</name></expr></argument>, <argument><expr><name>yamlEventTypeSeqBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><name>YAML_SEQUENCE_END_EVENT</name></expr>:</case>
            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEventType</name></expr></argument>, <argument><expr><name>yamlEventTypeSeqEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><name>YAML_MAPPING_START_EVENT</name></expr>:</case>
            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEventType</name></expr></argument>, <argument><expr><name>yamlEventTypeMapBegin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <case>case <expr><name>YAML_MAPPING_END_EVENT</name></expr>:</case>
            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEventType</name></expr></argument>, <argument><expr><name>yamlEventTypeMapEnd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <default>default:</default>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name>type</name> <operator>==</operator> <name>YAML_NO_EVENT</name></expr></argument>, <argument><expr><literal type="string">"expected yaml no event"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEventType</name></expr></argument>, <argument><expr><name>yamlEventTypeNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>
</block_content>}</block></function>

<function><type><name>YamlEvent</name></type>
<name>yamlEventPeek</name><parameter_list>(<parameter><decl><type><name>Yaml</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>YAML</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>eventNextSet</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>yaml_event_t</name></type> <name>event</name></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>yaml_parser_parse</name><argument_list>(<argument><expr><operator>&amp;</operator><name><name>this</name><operator>-&gt;</operator><name>parser</name></name></expr></argument>, <argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// These should always be set</comment>
            <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>ServiceError</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>problem_mark</name><operator>.</operator><name>line</name></name> <operator>&amp;&amp;</operator> <name><name>this</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>problem_mark</name><operator>.</operator><name>column</name></name></expr></argument>, <argument><expr><literal type="string">"invalid yaml error info"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"yaml parse error: %s at line: %lu column: %lu"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>problem</name></name></expr></argument>,
                <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>this</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>problem_mark</name><operator>.</operator><name>line</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>long</name><operator>)</operator><name><name>this</name><operator>-&gt;</operator><name>parser</name><operator>.</operator><name>problem_mark</name><operator>.</operator><name>column</name></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>eventNext</name></name> <operator>=</operator> <operator>(</operator><name>YamlEvent</name><operator>)</operator>
        <block>{
            <expr><operator>.</operator><name>type</name> <operator>=</operator> <call><name>yamlEventType</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr>,
            <expr><operator>.</operator><name>line</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>start_mark</name><operator>.</operator><name>line</name></name> <operator>+</operator> <literal type="number">1</literal></expr>,
            <expr><operator>.</operator><name>column</name> <operator>=</operator> <name><name>event</name><operator>.</operator><name>start_mark</name><operator>.</operator><name>column</name></name> <operator>+</operator> <literal type="number">1</literal></expr>,
        }</block></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>this</name><operator>-&gt;</operator><name>eventNext</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>yamlEventTypeScalar</name></expr>)</condition>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_OBJ_BEGIN</name><argument_list>(<argument>this</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>eventNext</name><operator>.</operator><name>value</name></name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><operator>(</operator><specifier>const</specifier> <name>char</name> <operator>*</operator><operator>)</operator><name><name>event</name><operator>.</operator><name>data</name><operator>.</operator><name>scalar</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_OBJ_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>yaml_event_delete</name><argument_list>(<argument><expr><operator>&amp;</operator><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>eventNextSet</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEvent</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>eventNext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<function><type><name>YamlEvent</name></type>
<name>yamlEventNext</name><parameter_list>(<parameter><decl><type><name>Yaml</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>YAML</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><name><name>this</name><operator>-&gt;</operator><name>eventNextSet</name></name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>yamlEventPeek</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>eventNextSet</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEvent</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>eventNext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>YamlEvent</name></type>
<name>yamlEventNextCheck</name><parameter_list>(<parameter><decl><type><name>Yaml</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>YamlEventType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>YAML</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>YamlEvent</name></type> <name>result</name> <init>= <expr><call><name>yamlEventNext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>yamlEventCheck</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEvent</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>YamlEvent</name></type>
<name>yamlEventCheck</name><parameter_list>(<parameter><decl><type><name>YamlEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><name>YamlEventType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>YAML_EVENT</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>type</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>==</operator> <name>yamlEventTypeScalar</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"expected event type '%s' but got scalar '%s' at line %zu, column %zu"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"expected event type '%s' but got '%s' at line %zu, column %zu"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE</name><argument_list>(<argument><expr><name>YamlEvent</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>yamlScalarCheck</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>YamlEvent</name></type> <name>event</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>YAML_EVENT</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>event</name><operator>.</operator><name>type</name></name> <operator>!=</operator> <name>yamlEventTypeScalar</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
            <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"expected scalar '%s' but got event  type '%s' at line %zu, column %zu"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>,
            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>type</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>line</name></name></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
            <argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"expected scalar '%s' but got '%s' at line %zu, column %zu"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>event</name><operator>.</operator><name>line</name></name></expr></argument>,
            <argument><expr><name><name>event</name><operator>.</operator><name>column</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>yamlScalarNextCheck</name><parameter_list>(<parameter><decl><type><name>Yaml</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>YAML</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>yamlScalarCheck</name><argument_list>(<argument><expr><call><name>yamlEventNext</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>yamlBoolParse</name><parameter_list>(<parameter><decl><type><name>YamlEvent</name></type> <name>event</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>YAML_EVENT</name></expr></argument>, <argument><expr><name>event</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>FALSE_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
    <if type="elseif">else if <condition>(<expr><call><name>strEq</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>value</name></name></expr></argument>, <argument><expr><name>TRUE_STR</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"invalid boolean '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>event</name><operator>.</operator><name>value</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
