<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/build/common/render.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Build Common
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build/common/render.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/stringId.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>bldStrId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>buffer</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>StringId</name></type> <name>result</name> <init>= <expr><call><name>strIdFromZ</name><argument_list>(<argument><expr><name>buffer</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <return>return <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"STRID%u(\"%s\", 0x%"</literal> <name>PRIx64</name> <literal type="string">")"</literal></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><operator>(</operator><name>result</name> <operator>&amp;</operator> <name>STRING_ID_BIT_MASK</name><operator>)</operator> <operator>+</operator> <literal type="number">5</literal></expr></argument>, <argument><expr><name>buffer</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>bldEnum</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>prefix</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>valuePtr</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>upper</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Add prefix and set first non-prefix letter to upper</comment>
    <if_stmt><if>if <condition>(<expr><name>prefix</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><name>prefix</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>upper</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add remaining letters removing dashes and upper-casing the letter after the dash</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>valueIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>valueIdx</name> <operator>&lt;</operator> <call><name>strSize</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>valueIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <expr_stmt><expr><call><name>strCatChr</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><ternary><condition><expr><name>upper</name></expr> ?</condition><then> <expr><operator>(</operator><name>char</name><operator>)</operator><call><name>toupper</name><argument_list>(<argument><expr><name><name>valuePtr</name><index>[<expr><name>valueIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><name><name>valuePtr</name><index>[<expr><name>valueIdx</name></expr>]</index></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>upper</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <if_stmt><if>if <condition>(<expr><name><name>valuePtr</name><index>[<expr><name>valueIdx</name> <operator>+</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'-'</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>upper</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>valueIdx</name><operator>++</operator></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <return>return <expr><name>result</name></expr>;</return>
</block_content>}</block></function>
</unit>
