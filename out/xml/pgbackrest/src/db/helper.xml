<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/db/helper.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Database Helper
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"protocol/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<comment type="line">// Helper to get a connection to the specified pg cluster</comment>
<function><type><specifier>static</specifier> <name>Db</name> <modifier>*</modifier></type>
<name>dbGetIdx</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pgIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>pgIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Db</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>applicationName</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><name>PROJECT_NAME</name> <literal type="string">" [%s]"</literal></expr></argument>, <argument><expr><call><name>cfgCommandName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><call><name>pgIsLocal</name><argument_list>(<argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dbNew</name><argument_list>(
                <argument><expr><call><name>pgClientNew</name><argument_list>(
                    <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptPgSocketPath</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxUInt</name><argument_list>(<argument><expr><name>cfgOptPgPort</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptPgDatabase</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStrNull</name><argument_list>(<argument><expr><name>cfgOptPgUser</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptDbTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>storagePgIdx</name><argument_list>(<argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>applicationName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>dbNew</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>, <argument><expr><call><name>protocolRemoteGet</name><argument_list>(<argument><expr><name>protocolStorageTypePg</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>storagePgIdx</name><argument_list>(<argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>applicationName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>dbMove</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>DB</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>DbGetResult</name></type>
<name>dbGet</name><parameter_list>(<parameter><decl><type><name>bool</name></type> <name>primaryOnly</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>primaryRequired</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>standbyRequired</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>primaryOnly</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>primaryRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>standbyRequired</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><operator>(</operator><name>primaryOnly</name> <operator>&amp;&amp;</operator> <name>standbyRequired</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>DbGetResult</name></type> <name>result</name> <init>= <expr><block>{<expr><literal type="number">0</literal></expr>}</block></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Loop through to look for primary and standby (if required)</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>pgIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pgIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pgIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>Db</name> <modifier>*</modifier></type><name>db</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>bool</name></type> <name>standby</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

            <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name>db</name> <operator>=</operator> <call><name>dbGetIdx</name><argument_list>(<argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// This needs to be nested because db can be reset to NULL on an error in the outer try but we need the pointer</comment>
                <comment type="line">// to be able to free it.</comment>
                <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>dbOpen</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>standby</name> <operator>=</operator> <call><name>dbIsStandby</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>dbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>RETHROW</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block>
                <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                    <argument><expr><literal type="string">"unable to check %s: [%s] %s"</literal></expr></argument>, <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>errorTypeName</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>db</name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Was the connection successful</comment>
            <if_stmt><if>if <condition>(<expr><name>db</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Is this cluster a standby</comment>
                <if_stmt><if>if <condition>(<expr><name>standby</name></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// If a standby has not already been found then assign it</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>standby</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>!</operator><name>primaryOnly</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>standbyIdx</name></name> <operator>=</operator> <name>pgIdx</name></expr>;</expr_stmt>
                        <expr_stmt><expr><name><name>result</name><operator>.</operator><name>standby</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <comment type="line">// Else close the connection since we don't need it</comment>
                    <else>else<block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>dbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else is a primary</comment>
                <else>else
                <block>{<block_content>
                    <comment type="line">// Error if more than one primary was found</comment>
                    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>primary</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>DbConnectError</name></expr></argument>, <argument><expr><literal type="string">"more than one primary cluster found"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>primaryIdx</name></name> <operator>=</operator> <name>pgIdx</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>result</name><operator>.</operator><name>primary</name></name> <operator>=</operator> <name>db</name></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// Error if no primary was found</comment>
        <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>primary</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>primaryRequired</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(
                <argument><expr><name>DbConnectError</name></expr></argument>,
                <argument><expr><literal type="string">"unable to find primary cluster - cannot proceed\n"</literal>
                <literal type="string">"HINT: are all available clusters in recovery?"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Error if no standby was found</comment>
        <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>.</operator><name>standby</name></name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>standbyRequired</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW</name><argument_list>(<argument><expr><name>DbConnectError</name></expr></argument>, <argument><expr><literal type="string">"unable to find standby cluster - cannot proceed"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>dbMove</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>primary</name></name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>dbMove</name><argument_list>(<argument><expr><name><name>result</name><operator>.</operator><name>standby</name></name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_STRUCT</name><argument_list>(<argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
