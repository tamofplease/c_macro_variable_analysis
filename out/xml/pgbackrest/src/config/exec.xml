<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/config/exec.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Exec Configuration
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/exec.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/parse.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>StringList</name> <modifier>*</modifier></type>
<name>cfgExecParam</name><parameter_list>(<parameter><decl><type><name>ConfigCommand</name></type> <name>commandId</name></decl></parameter>, <parameter><decl><type><name>ConfigCommandRole</name></type> <name>commandRoleId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>KeyValue</name> <modifier>*</modifier></type><name>optionReplace</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>local</name></decl></parameter>, <parameter><decl><type><name>bool</name></type> <name>quote</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>commandId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>commandRoleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>KEY_VALUE</name></expr></argument>, <argument><expr><name>optionReplace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>local</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                            <comment type="line">// Will the new process be running on the same host?</comment>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>quote</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                            <comment type="line">// Do parameters with spaces need to be quoted?</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Loop though options and add the ones that apply to the specified command</comment>
        <expr_stmt><expr><name>result</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <for>for <control>(<init><decl><type><name>ConfigOption</name></type> <name>optionId</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr>;</condition> <incr><expr><name>optionId</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// Skip the option if it is not valid for the original/specified command or if is secure. Also skip repo1-cipher-type</comment>
            <comment type="line">// because there's no point of passing it if the other process doesn't have access to repo1-cipher-pass. There is</comment>
            <comment type="line">// probably a better way to do this last part...</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgParseOptionValid</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>, <argument><expr><name>commandRoleId</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call> <operator>||</operator> <call><name>cfgParseOptionSecure</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call> <operator>||</operator>
                <name>optionId</name> <operator>==</operator> <name>cfgOptRepoCipherType</name></expr>)</condition>
            <block>{<block_content>
                <continue>continue;</continue>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Loop through option indexes</comment>
            <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdxTotal</name> <init>= <expr><ternary><condition><expr><call><name>cfgOptionGroup</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><call><name>cfgOptionGroupId</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></init></decl>;</decl_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionIdx</name> <operator>&lt;</operator> <name>optionIdxTotal</name></expr>;</condition> <incr><expr><name>optionIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <comment type="line">// First check for a replacement</comment>
                <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>key</name> <init>= <expr><call><name>VARSTRZ</name><argument_list>(<argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>bool</name></type> <name>exists</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

                <comment type="line">// If an option is requested to be replaced (usually because remote processes do not have access to the config)</comment>
                <comment type="line">// then if the option exists, get the new value for replacement</comment>
                <if_stmt><if>if <condition>(<expr><name>optionReplace</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>exists</name> <operator>=</operator> <call><name>kvKeyExists</name><argument_list>(<argument><expr><name>optionReplace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                    <if_stmt><if>if <condition>(<expr><name>exists</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>kvGet</name><argument_list>(<argument><expr><name>optionReplace</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// If the key exists but its value is NULL then skip this option</comment>
                <if_stmt><if>if <condition>(<expr><name>exists</name> <operator>&amp;&amp;</operator> <name>value</name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                    <continue>continue;</continue></block_content></block></if></if_stmt>

                <comment type="line">// If no replacement then see if this option is not default</comment>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxNegate</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>value</name> <operator>=</operator> <name>BOOL_FALSE_VAR</name></expr>;</expr_stmt></block_content></block></if>
                    <if type="elseif">else if <condition>(<expr><call><name>cfgOptionIdxSource</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cfgSourceDefault</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>cfgOptionIdxVar</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// If the option was reset</comment>
                <if_stmt><if>if <condition>(<expr><name>value</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionIdxReset</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"--reset-%s"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else format the value if found, even if the option is not valid for the command</comment>
                <if type="elseif">else if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <operator>(</operator><operator>!</operator><name>local</name> <operator>||</operator> <name>exists</name> <operator>||</operator> <call><name>cfgOptionIdxSource</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgSourceParam</name><operator>)</operator></expr>)</condition>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><call><name>varType</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>varTypeBool</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"--%s%s"</literal></expr></argument>, <argument><expr><ternary><condition><expr><call><name>varBool</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><literal type="string">""</literal></expr> </then><else>: <expr><literal type="string">"no-"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                    <else>else
                    <block>{<block_content>
                        <decl_stmt><decl><type><name>StringList</name> <modifier>*</modifier></type><name>valueList</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

                        <if_stmt><if>if <condition>(<expr><call><name>varType</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>varTypeKeyValue</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>valueList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                            <decl_stmt><decl><type><specifier>const</specifier> <name>KeyValue</name> <modifier>*</modifier></type><name>optionKv</name> <init>= <expr><call><name>varKv</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier></type><name>keyList</name> <init>= <expr><call><name>kvKeyList</name><argument_list>(<argument><expr><name>optionKv</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>keyIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>keyIdx</name> <operator>&lt;</operator> <call><name>varLstSize</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>keyIdx</name><operator>++</operator></expr></incr>)</control>
                            <block>{<block_content>
                                <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(
                                    <argument><expr><name>valueList</name></expr></argument>, <argument><expr><literal type="string">"%s=%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>keyIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStrForce</name><argument_list>(<argument><expr><call><name>kvGet</name><argument_list>(<argument><expr><name>optionKv</name></expr></argument>, <argument><expr><call><name>varLstGet</name><argument_list>(<argument><expr><name>keyList</name></expr></argument>, <argument><expr><name>keyIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                            </block_content>}</block></for>
                        </block_content>}</block></if>
                        <if type="elseif">else if <condition>(<expr><call><name>varType</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>varTypeVariantList</name></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><name>valueList</name> <operator>=</operator> <call><name>strLstNewVarLst</name><argument_list>(<argument><expr><call><name>varVarLst</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <comment type="line">// Else only one value</comment>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><name>valueList</name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

                            <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(
                                <argument><expr><name>valueList</name></expr></argument>,
                                <argument><expr><ternary><condition><expr><name>exists</name></expr> ?</condition><then> <expr><call><name>cfgOptionDisplayVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>, <argument><expr><call><name>cfgParseOptionType</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> </then><else>:
                                    <expr><call><name>cfgOptionIdxDisplay</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>

                        <comment type="line">// Output options and values</comment>
                        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>valueListIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>valueListIdx</name> <operator>&lt;</operator> <call><name>strLstSize</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>valueListIdx</name><operator>++</operator></expr></incr>)</control>
                        <block>{<block_content>
                            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>value</name> <init>= <expr><call><name>strLstGet</name><argument_list>(<argument><expr><name>valueList</name></expr></argument>, <argument><expr><name>valueListIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                            <if_stmt><if>if <condition>(<expr><name>quote</name> <operator>&amp;&amp;</operator> <call><name>strchr</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">' '</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                                <expr_stmt><expr><name>value</name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"\"%s\""</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

                            <expr_stmt><expr><call><name>strLstAddFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"--%s=%s"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></for>
                    </block_content>}</block></else></if_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></for>

        <comment type="line">// Add the command</comment>
        <expr_stmt><expr><call><name>strLstAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>cfgParseCommandRoleName</name><argument_list>(<argument><expr><name>commandId</name></expr></argument>, <argument><expr><name>commandRoleId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Move list to the prior context</comment>
        <expr_stmt><expr><call><name>strLstMove</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>memContextPrior</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
