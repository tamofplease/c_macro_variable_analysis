<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/config/config.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Command and Option Configuration
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/error.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/parse.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Data for the currently loaded configuration
***********************************************************************************************************************************/</comment>
<decl_stmt><decl><type><specifier>static</specifier> <name>Config</name> <modifier>*</modifier></type><name>configLocal</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cfgInit</name><parameter_list>(<parameter><decl><type><name>Config</name> <modifier>*</modifier></type><name>config</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>config</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>config</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Free the old context</comment>
    <if_stmt><if>if <condition>(<expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>memContextFree</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>memContext</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Set config and move context to top so it persists for the life of the program</comment>
    <expr_stmt><expr><name>configLocal</name> <operator>=</operator> <name>config</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memContextMove</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>memContext</name></name></expr></argument>, <argument><expr><call><name>memContextTop</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>ConfigCommand</name></type>
<name>cfgCommand</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><ternary><condition><expr><name>configLocal</name> <operator>==</operator> <name>NULL</name></expr> ?</condition><then> <expr><name>cfgCmdNone</name></expr> </then><else>: <expr><name><name>configLocal</name><operator>-&gt;</operator><name>command</name></name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ConfigCommandRole</name></type>
<name>cfgCommandRole</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>commandRole</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cfgCommandSet</name><parameter_list>(<parameter><decl><type><name>ConfigCommand</name></type> <name>commandId</name></decl></parameter>, <parameter><decl><type><name>ConfigCommandRole</name></type> <name>commandRoleId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>commandId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>commandRoleId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>commandId</name> <operator>&lt;=</operator> <name>cfgCmdNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>configLocal</name><operator>-&gt;</operator><name>command</name></name> <operator>=</operator> <name>commandId</name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>configLocal</name><operator>-&gt;</operator><name>commandRole</name></name> <operator>=</operator> <name>commandRoleId</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>cfgCommandHelp</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>help</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>VariantList</name> <modifier>*</modifier></type>
<name>cfgCommandJobRetry</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Return NULL if no retries</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>retryTotal</name> <init>= <expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptJobRetry</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>retryTotal</name> <operator>==</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>VARIANT_LIST</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Build retry list</comment>
    <decl_stmt><decl><type><name>VariantList</name> <modifier>*</modifier></type><name>result</name> <init>= <expr><call><name>varLstNew</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>lstMemContext((List *)result)</argument>)</argument_list></macro>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>retryIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>retryIdx</name> <operator>&lt;</operator> <call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptJobRetry</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>retryIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>varLstAdd</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><call><name>varNewUInt64</name><argument_list>(<argument><expr><ternary><condition><expr><name>retryIdx</name> <operator>==</operator> <literal type="number">0</literal></expr> ?</condition><then> <expr><literal type="number">0</literal></expr> </then><else>: <expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptJobRetryInterval</name></expr></argument>)</argument_list></call></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>VARIANT_LIST</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>cfgCommandName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>command</name></name> <operator>&lt;</operator> <name>cfgCmdNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><call><name>cfgParseCommandName</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>command</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>String</name> <modifier>*</modifier></type>
<name>cfgCommandRoleName</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>cfgParseCommandRoleName</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><call><name>cfgCommandRole</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>StringList</name> <modifier>*</modifier></type>
<name>cfgCommandParam</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>configLocal</name><operator>-&gt;</operator><name>paramList</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>configLocal-&gt;memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>configLocal</name><operator>-&gt;</operator><name>paramList</name></name> <operator>=</operator> <call><name>strLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING_LIST</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>paramList</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>cfgExe</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>exe</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>cfgLockRequired</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>command</name></name> <operator>!=</operator> <name>cfgCmdNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Local roles never take a lock and the remote role has special logic for locking</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(
        <argument><expr><name>BOOL</name></expr></argument>,
        <comment type="line">// If a lock is required for the command and the role is main</comment>
        <argument><expr><operator>(</operator><name><name>configLocal</name><operator>-&gt;</operator><name>lockRequired</name></name> <operator>&amp;&amp;</operator> <call><name>cfgCommandRole</name><argument_list>()</argument_list></call> <operator>==</operator> <name>cfgCmdRoleMain</name><operator>)</operator> <operator>||</operator>
        <comment type="line">// Or any command when the role is async</comment>
        <call><name>cfgCommandRole</name><argument_list>()</argument_list></call> <operator>==</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>cfgLockRemoteRequired</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>command</name></name> <operator>!=</operator> <name>cfgCmdNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>lockRemoteRequired</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>LockType</name></type>
<name>cfgLockType</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>command</name></name> <operator>!=</operator> <name>cfgCmdNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>lockType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>cfgLogFile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>command</name></name> <operator>!=</operator> <name>cfgCmdNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(
        <argument><expr><name>BOOL</name></expr></argument>,
        <comment type="line">// If the command always logs to a file</comment>
        <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>logFile</name></name> <operator>||</operator>
        <comment type="line">// Or log-level-file was explicitly set as a param/env var</comment>
        <operator>(</operator><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptLogLevelFile</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptLogLevelFile</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgSourceParam</name><operator>)</operator> <operator>||</operator>
        <comment type="line">// Or the role is async</comment>
        <call><name>cfgCommandRole</name><argument_list>()</argument_list></call> <operator>==</operator> <name>cfgCmdRoleAsync</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>LogLevel</name></type>
<name>cfgLogLevelDefault</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>command</name></name> <operator>!=</operator> <name>cfgCmdNone</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>logLevelDefault</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>cfgOptionGroup</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>cfgOptionGroupName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigOptionGroup</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>groupIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>groupIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>groupId</name> <operator>&lt;</operator> <name>CFG_OPTION_GROUP_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>groupIdx</name> <operator>&lt;</operator> <name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name>groupId</name></expr>]</index></name><operator>.</operator><name>indexTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Generate names for the group the first time one is requested</comment>
    <decl_stmt><decl><type><name>ConfigOptionGroupData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>group</name> <init>= <expr><operator>&amp;</operator><name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name>groupId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>group</name><operator>-&gt;</operator><name>indexName</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>configLocal-&gt;memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>indexName</name></name> <operator>=</operator> <call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>String</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>group</name><operator>-&gt;</operator><name>indexTotal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>groupIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>groupIdx</name> <operator>&lt;</operator> <name><name>group</name><operator>-&gt;</operator><name>indexTotal</name></name></expr>;</condition> <incr><expr><name>groupIdx</name><operator>++</operator></expr></incr>)</control><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>group</name><operator>-&gt;</operator><name>indexName</name><index>[<expr><name>groupIdx</name></expr>]</index></name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s%u"</literal></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>indexMap</name><index>[<expr><name>groupIdx</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></for>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>indexName</name><index>[<expr><name>groupIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>cfgOptionGroupId</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>group</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>cfgOptionGroupIdxDefault</name><parameter_list>(<parameter><decl><type><name>ConfigOptionGroup</name></type> <name>groupId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>groupId</name> <operator>&lt;</operator> <name>CFG_OPTION_GROUP_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name>groupId</name></expr>]</index></name><operator>.</operator><name>indexDefaultExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name>groupId</name></expr>]</index></name><operator>.</operator><name>indexDefault</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>cfgOptionGroupIdxToKey</name><parameter_list>(<parameter><decl><type><name>ConfigOptionGroup</name></type> <name>groupId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>groupIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>groupIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>groupId</name> <operator>&lt;</operator> <name>CFG_OPTION_GROUP_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>groupIdx</name> <operator>&lt;</operator> <name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name>groupId</name></expr>]</index></name><operator>.</operator><name>indexTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name>groupId</name></expr>]</index></name><operator>.</operator><name><name>indexMap</name><index>[<expr><name>groupIdx</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>cfgOptionKeyToIdx</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>key</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>result</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>

    <comment type="line">// If then option is in a group then search for the key, else the index is 0</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionGroup</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>groupId</name> <init>= <expr><call><name>cfgOptionGroupId</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// Seach the group for the key</comment>
        <for>for <control>(<init>;</init> <condition><expr><name>result</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>result</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name>groupId</name></expr>]</index></name><operator>.</operator><name><name>indexMap</name><index>[<expr><name>result</name></expr>]</index></name> <operator>==</operator> <name>key</name> <operator>-</operator> <literal type="number">1</literal></expr>)</condition><block type="pseudo"><block_content>
                <break>break;</break></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// Error when the key is not found</comment>
        <if_stmt><if>if <condition>(<expr><name>result</name> <operator>==</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"key '%u' is not valid for '%s' option"</literal></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>cfgOptionGroupIdxTotal</name><parameter_list>(<parameter><decl><type><name>ConfigOptionGroup</name></type> <name>groupId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>groupId</name> <operator>&lt;</operator> <name>CFG_OPTION_GROUP_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name>groupId</name></expr>]</index></name><operator>.</operator><name>indexTotal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>cfgOptionGroupValid</name><parameter_list>(<parameter><decl><type><name>ConfigOptionGroup</name></type> <name>groupId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>groupId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>groupId</name> <operator>&lt;</operator> <name>CFG_OPTION_GROUP_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name>groupId</name></expr>]</index></name><operator>.</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>cfgOptionIdxDefault</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(
        <argument><expr><operator>!</operator><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>group</name> <operator>||</operator> <name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>groupId</name></expr>]</index></name><operator>.</operator><name>indexDefaultExists</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>ConfigOptionData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>option</name> <init>= <expr><operator>&amp;</operator><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>option</name><operator>-&gt;</operator><name>group</name></name></expr> ?</condition><then> <expr><name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name><name>option</name><operator>-&gt;</operator><name>groupId</name></name></expr>]</index></name><operator>.</operator><name>indexDefault</name></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>cfgOptionIdxTotal</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>ConfigOptionData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>option</name> <init>= <expr><operator>&amp;</operator><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>option</name><operator>-&gt;</operator><name>group</name></name></expr> ?</condition><then> <expr><name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name><name>option</name><operator>-&gt;</operator><name>groupId</name></name></expr>]</index></name><operator>.</operator><name>indexTotal</name></expr> </then><else>: <expr><literal type="number">1</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>cfgOptionDefault</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>ConfigOptionData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>option</name> <init>= <expr><operator>&amp;</operator><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>defaultValue</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name><name>option</name><operator>-&gt;</operator><name>defaultValue</name></name> <operator>=</operator> <call><name>cfgParseOptionDefault</name><argument_list>(<argument><expr><call><name>cfgCommand</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>defaultValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cfgOptionDefaultSet</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>defaultValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cfgParseOptionDataType</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgOptDataTypeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>configLocal-&gt;memContext</argument>)</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Duplicate into this context</comment>
        <expr_stmt><expr><name>defaultValue</name> <operator>=</operator> <call><name>varDup</name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set the default value</comment>
        <decl_stmt><decl><type><name>ConfigOptionData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>option</name> <init>= <expr><operator>&amp;</operator><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>option</name><operator>-&gt;</operator><name>defaultValue</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Copy the value to option indexes that are marked as default so the default can be retrieved quickly</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionIdx</name> <operator>&lt;</operator> <call><name>cfgOptionIdxTotal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optionIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><name>ConfigOptionValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optionValue</name> <init>= <expr><operator>&amp;</operator><name><name>option</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>optionIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>optionValue</name><operator>-&gt;</operator><name>source</name></name> <operator>==</operator> <name>cfgSourceDefault</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name><name>optionValue</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>optionValue</name><operator>-&gt;</operator><name>value</name><operator>.</operator><name>string</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><name>defaultValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>optionValue</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>


<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>cfgOptionDisplayVar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ConfigOptionType</name></type> <name>optionType</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionType</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionType</name> <operator>!=</operator> <name>cfgOptTypeHash</name> <operator>&amp;&amp;</operator> <name>optionType</name> <operator>!=</operator> <name>cfgOptTypeList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>varType</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>varTypeString</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>varStr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>optionType</name> <operator>==</operator> <name>cfgOptTypeBoolean</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><ternary><condition><expr><call><name>varBool</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><name>TRUE_STR</name></expr> </then><else>: <expr><name>FALSE_STR</name></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>optionType</name> <operator>==</operator> <name>cfgOptTypeTime</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>strNewDbl</name><argument_list>(<argument><expr><operator>(</operator><name>double</name><operator>)</operator><call><name>varInt64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>/</operator> <name>MSEC_PER_SEC</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <if type="elseif">else if <condition>(<expr><name>optionType</name> <operator>==</operator> <name>cfgOptTypeStringId</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><call><name>varUInt64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>varStrForce</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>cfgOptionIdxDisplay</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const bool group = configLocal-&gt;option[optionId].group</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const unsigned int indexTotal = configLocal-&gt;optionGroup[configLocal-&gt;option[optionId].groupId].indexTotal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>&lt;</operator> <name>indexTotal</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check that the option is valid for the current command</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"option '%s' is not valid for the current command"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// If there is already a display value set then return that</comment>
    <decl_stmt><decl><type><name>ConfigOptionValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>option</name> <init>= <expr><operator>&amp;</operator><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name><name>index</name><index>[<expr><name>optionIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>display</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Generate the display value based on the type</comment>
    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>configLocal-&gt;memContext</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name><name>option</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <call><name>cfgOptionDisplayVar</name><argument_list>(<argument><expr><call><name>cfgOptionIdxVar</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgParseOptionType</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>


    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>display</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>cfgOptionDisplay</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxDisplay</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxDefault</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Get option name by id
***********************************************************************************************************************************/</comment>
<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>cfgOptionName</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxDefault</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type>
<name>cfgOptionIdxName</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const bool group = configLocal-&gt;option[optionId].group</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const unsigned int indexTotal = configLocal-&gt;optionGroup[configLocal-&gt;option[optionId].groupId].indexTotal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>&lt;</operator> <name>indexTotal</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// If an indexed option</comment>
    <decl_stmt><decl><type><name>ConfigOptionData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>option</name> <init>= <expr><operator>&amp;</operator><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>group</name></name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ConfigOptionGroupData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>group</name> <init>= <expr><operator>&amp;</operator><name><name>configLocal</name><operator>-&gt;</operator><name>optionGroup</name><index>[<expr><name><name>option</name><operator>-&gt;</operator><name>groupId</name></name></expr>]</index></name></expr></init></decl>;</decl_stmt>

        <comment type="line">// Generate indexed names for the option the first time one is requested</comment>
        <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>indexName</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>configLocal-&gt;memContext</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>option</name><operator>-&gt;</operator><name>indexName</name></name> <operator>=</operator> <call><name>memNew</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>String</name> <operator>*</operator></expr></argument>)</argument_list></sizeof> <operator>*</operator> <name><name>group</name><operator>-&gt;</operator><name>indexTotal</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionIdx</name> <operator>&lt;</operator> <name><name>group</name><operator>-&gt;</operator><name>indexTotal</name></name></expr>;</condition> <incr><expr><name>optionIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <expr_stmt><expr><name><name>option</name><operator>-&gt;</operator><name>indexName</name><index>[<expr><name>optionIdx</name></expr>]</index></name> <operator>=</operator> <call><name>strNewFmt</name><argument_list>(
                        <argument><expr><literal type="string">"%s%u%s"</literal></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>name</name></name></expr></argument>, <argument><expr><name><name>group</name><operator>-&gt;</operator><name>indexMap</name><index>[<expr><name>optionIdx</name></expr>]</index></name> <operator>+</operator> <literal type="number">1</literal></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>name</name></name> <operator>+</operator> <call><name>strlen</name><argument_list>(<argument><expr><name><name>group</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></for>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>indexName</name><index>[<expr><name>optionIdx</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Else not indexed</comment>
    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_CONST</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>cfgOptionNegate</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxNegate</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxDefault</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>cfgOptionIdxNegate</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const bool group = configLocal-&gt;option[optionId].group</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const unsigned int indexTotal = configLocal-&gt;optionGroup[configLocal-&gt;option[optionId].groupId].indexTotal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>&lt;</operator> <name>indexTotal</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name><name>index</name><index>[<expr><name>optionIdx</name></expr>]</index></name><operator>.</operator><name>negate</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>cfgOptionReset</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxReset</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxDefault</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>cfgOptionIdxReset</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const bool group = configLocal-&gt;option[optionId].group</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const unsigned int indexTotal = configLocal-&gt;optionGroup[configLocal-&gt;option[optionId].groupId].indexTotal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>&lt;</operator> <name>indexTotal</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name><name>index</name><index>[<expr><name>optionIdx</name></expr>]</index></name><operator>.</operator><name>reset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<comment type="line">// Helper to enforce contraints when getting options</comment>
<function><type><specifier>static</specifier> <specifier>const</specifier> <name>ConfigOptionValue</name> <modifier>*</modifier></type>
<name>cfgOptionIdxInternal</name><parameter_list>(
    <parameter><decl><type><specifier>const</specifier> <name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>ConfigOptionDataType</name></type> <name>typeRequested</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>bool</name></type> <name>nullAllowed</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>typeRequested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name>nullAllowed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const bool group = configLocal-&gt;option[optionId].group</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const unsigned int indexTotal = configLocal-&gt;optionGroup[configLocal-&gt;option[optionId].groupId].indexTotal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>&lt;</operator> <name>indexTotal</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Check that the option is valid for the current command</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"option '%s' is not valid for the current command"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// If the option is not NULL then check it is the requested type</comment>
    <decl_stmt><decl><type><name>ConfigOptionData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>option</name> <init>= <expr><operator>&amp;</operator><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ConfigOptionValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><operator>&amp;</operator><name><name>option</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>optionIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>result</name><operator>-&gt;</operator><name>set</name></name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>dataType</name></name> <operator>!=</operator> <name>typeRequested</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"option '%s' is type %u but %u was requested"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><name><name>option</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>, <argument><expr><name>typeRequested</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else check the option is allowed to be NULL</comment>
    <if type="elseif">else if <condition>(<expr><operator>!</operator><name>nullAllowed</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"option '%s' is null but non-null was requested"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_TYPE_P</name><argument_list>(<argument><expr><name>ConfigOptionValue</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>Variant</name> <modifier>*</modifier></type>
<name>cfgOptionIdxVar</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const bool group = configLocal-&gt;option[optionId].group</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const unsigned int indexTotal = configLocal-&gt;optionGroup[configLocal-&gt;option[optionId].groupId].indexTotal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>&lt;</operator> <name>indexTotal</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>ConfigOptionData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>option</name> <init>= <expr><operator>&amp;</operator><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>optionIdx</name></expr>]</index></name><operator>.</operator><name>set</name></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ConfigOptionValueType</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optionValueType</name> <init>= <expr><operator>&amp;</operator><name><name>option</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>optionIdx</name></expr>]</index></name><operator>.</operator><name>value</name></expr></init></decl>;</decl_stmt>

        <switch>switch <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>dataType</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>cfgOptDataTypeBoolean</name></expr>:</case>
                <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><call><name>varNewBool</name><argument_list>(<argument><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>boolean</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <case>case <expr><name>cfgOptDataTypeHash</name></expr>:</case>
                <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><call><name>varNewKv</name><argument_list>(<argument><expr><call><name>kvDup</name><argument_list>(<argument><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>keyValue</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <case>case <expr><name>cfgOptDataTypeInteger</name></expr>:</case>
                <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><call><name>varNewInt64</name><argument_list>(<argument><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <case>case <expr><name>cfgOptDataTypeList</name></expr>:</case>
                <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><call><name>varNewVarLst</name><argument_list>(<argument><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>list</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <case>case <expr><name>cfgOptDataTypeStringId</name></expr>:</case>
                <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><call><name>varNewUInt64</name><argument_list>(<argument><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>stringId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <default>default:</default>
                <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name><name>option</name><operator>-&gt;</operator><name>dataType</name></name> <operator>==</operator> <name>cfgOptDataTypeString</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>
        </block_content>}</block></switch>

        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><call><name>varNewStr</name><argument_list>(<argument><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>string</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>cfgOptionIdxBool</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeBoolean</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>boolean</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int</name></type>
<name>cfgOptionIdxInt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeInteger</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>&gt;=</operator> <name>INT_MIN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeInteger</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>&lt;=</operator> <name>INT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INT</name></expr></argument>, <argument><expr><operator>(</operator><name>int</name><operator>)</operator><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeInteger</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type>
<name>cfgOptionIdxInt64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INT64</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeInteger</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>unsigned</name> <name>int</name></type>
<name>cfgOptionIdxUInt</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeInteger</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeInteger</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>&lt;=</operator> <name>UINT_MAX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><operator>(</operator><name>unsigned</name> <name>int</name><operator>)</operator><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeInteger</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>uint64_t</name></type>
<name>cfgOptionIdxUInt64</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeInteger</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>integer</name></name> <operator>&gt;=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><operator>(</operator><name>uint64_t</name><operator>)</operator><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeInteger</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>integer</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>KeyValue</name> <modifier>*</modifier></type>
<name>cfgOptionIdxKv</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_CONST</name><argument_list>(<argument><expr><name>KEY_VALUE</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeHash</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>keyValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>KeyValue</name> <modifier>*</modifier></type>
<name>cfgOptionIdxKvNull</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_CONST</name><argument_list>(<argument><expr><name>KEY_VALUE</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeHash</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>keyValue</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier></type>
<name>cfgOptionIdxLst</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>VariantList</name> <modifier>*</modifier></type><name>optionValue</name> <init>= <expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeList</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>list</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>optionValue</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>configLocal-&gt;memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name>optionValue</name> <operator>=</operator> <call><name>varLstNew</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name><name>index</name><index>[<expr><name>optionIdx</name></expr>]</index></name><operator>.</operator><name><name>value</name><operator>.</operator><name>list</name></name> <operator>=</operator> <name>optionValue</name></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_CONST</name><argument_list>(<argument><expr><name>VARIANT_LIST</name></expr></argument>, <argument><expr><name>optionValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>cfgOptionIdxStr</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeString</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type>
<name>cfgOptionIdxStrNull</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_CONST</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeString</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>string</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>StringId</name></type>
<name>cfgOptionIdxStrId</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxInternal</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgOptDataTypeStringId</name></expr></argument>, <argument><expr><name>false</name></expr></argument>)</argument_list></call><operator>-&gt;</operator><name><name>value</name><operator>.</operator><name>stringId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cfgOptionSet</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>ConfigSource</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>cfgOptionIdxSet</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxDefault</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>source</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cfgOptionIdxSet</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>, <parameter><decl><type><name>ConfigSource</name></type> <name>source</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>Variant</name> <modifier>*</modifier></type><name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>VARIANT</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const bool group = configLocal-&gt;option[optionId].group</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const unsigned int indexTotal = configLocal-&gt;optionGroup[configLocal-&gt;option[optionId].groupId].indexTotal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>&lt;</operator> <name>indexTotal</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set the source</comment>
    <decl_stmt><decl><type><name>ConfigOptionData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>option</name> <init>= <expr><operator>&amp;</operator><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>ConfigOptionValue</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optionValue</name> <init>= <expr><operator>&amp;</operator><name><name>option</name><operator>-&gt;</operator><name>index</name><index>[<expr><name>optionIdx</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>optionValue</name><operator>-&gt;</operator><name>source</name></name> <operator>=</operator> <name>source</name></expr>;</expr_stmt>

    <comment type="line">// Only set value if it is not null</comment>
    <decl_stmt><decl><type><name>ConfigOptionValueType</name> <modifier>*</modifier><specifier>const</specifier></type> <name>optionValueType</name> <init>= <expr><operator>&amp;</operator><name><name>optionValue</name><operator>-&gt;</operator><name>value</name></name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
    <block>{<block_content>
        <switch>switch <condition>(<expr><name><name>option</name><operator>-&gt;</operator><name>dataType</name></name></expr>)</condition>
        <block>{<block_content>
            <case>case <expr><name>cfgOptDataTypeBoolean</name></expr>:</case>
                <expr_stmt><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>boolean</name></name> <operator>=</operator> <call><name>varBool</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>cfgOptDataTypeInteger</name></expr>:</case>
                <expr_stmt><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>integer</name></name> <operator>=</operator> <call><name>varInt64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <break>break;</break>

            <case>case <expr><name>cfgOptDataTypeString</name></expr>:</case>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>varType</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>varTypeString</name></expr>)</condition>
                <block>{<block_content>
                    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>configLocal-&gt;memContext</argument>)</argument_list></macro>
                    <block>{<block_content>
                        <expr_stmt><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block>
                    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <else>else
                <block>{<block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                        <argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"option '%s' must be set with String variant"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></else></if_stmt>

                <break>break;</break>
            </block_content>}</block>

            <case>case <expr><name>cfgOptDataTypeStringId</name></expr>:</case>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>varType</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>varTypeUInt64</name></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>stringId</name></name> <operator>=</operator> <call><name>varUInt64</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
                <else>else<block type="pseudo"><block_content>
                    <expr_stmt><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>stringId</name></name> <operator>=</operator> <call><name>strIdFromStr</name><argument_list>(<argument><expr><call><name>varStr</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

                <break>break;</break>
            </block_content>}</block>

            <default>default:</default>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"set not available for option data type %u"</literal></expr></argument>, <argument><expr><name><name>option</name><operator>-&gt;</operator><name>dataType</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></switch>

        <expr_stmt><expr><name><name>optionValue</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else
    <block>{<block_content>
        <expr_stmt><expr><name><name>optionValue</name><operator>-&gt;</operator><name>set</name></name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

        <comment type="line">// Pointer values need to be set to null since they can be accessed when the option is not set, e.g. cfgOptionStrNull().</comment>
        <comment type="line">// Setting string to NULL suffices to set the other pointers in the union to NULL.</comment>
        <expr_stmt><expr><name><name>optionValueType</name><operator>-&gt;</operator><name>string</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>
    </block_content>}</block></else></if_stmt>

    <comment type="line">// Clear the display value, which will be generated when needed</comment>
    <expr_stmt><expr><name><name>optionValue</name><operator>-&gt;</operator><name>display</name></name> <operator>=</operator> <name>NULL</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>ConfigSource</name></type>
<name>cfgOptionSource</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxSource</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxDefault</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>ConfigSource</name></type>
<name>cfgOptionIdxSource</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const bool group = configLocal-&gt;option[optionId].group</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const unsigned int indexTotal = configLocal-&gt;optionGroup[configLocal-&gt;option[optionId].groupId].indexTotal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><operator>!</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>&lt;</operator> <name>indexTotal</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name><name>index</name><index>[<expr><name>optionIdx</name></expr>]</index></name><operator>.</operator><name>source</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>cfgOptionTest</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>, <argument><expr><call><name>cfgOptionIdxDefault</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>bool</name></type>
<name>cfgOptionIdxTest</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const bool group = configLocal-&gt;option[optionId].group</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <macro><name>ASSERT_DECLARE</name><argument_list>(<argument>const unsigned int indexTotal = configLocal-&gt;optionGroup[configLocal-&gt;option[optionId].groupId].indexTotal</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>!</operator><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call> <operator>||</operator> <operator>(</operator><operator>(</operator><operator>!</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>==</operator> <literal type="number">0</literal><operator>)</operator> <operator>||</operator> <operator>(</operator><name>group</name> <operator>&amp;&amp;</operator> <name>optionIdx</name> <operator>&lt;</operator> <name>indexTotal</name><operator>)</operator><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>optionId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name><name>index</name><index>[<expr><name>optionIdx</name></expr>]</index></name><operator>.</operator><name>set</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>cfgOptionValid</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>BOOL</name></expr></argument>, <argument><expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>valid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>cfgOptionInvalidate</name><parameter_list>(<parameter><decl><type><name>ConfigOption</name></type> <name>optionId</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>optionId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>optionId</name> <operator>&lt;</operator> <name>CFG_OPTION_TOTAL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>configLocal</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name><name>configLocal</name><operator>-&gt;</operator><name>option</name><index>[<expr><name>optionId</name></expr>]</index></name><operator>.</operator><name>valid</name> <operator>=</operator> <name>false</name></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
