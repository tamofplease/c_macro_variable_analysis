<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/config/load.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Configuration Load
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"command/command.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/compress/helper.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/memContext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/io.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/socket/common.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/config.intern.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/load.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/parse.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoBackup.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/cifs/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/posix/storage.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Load log settings
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>void</name></type>
<name>cfgLoadLogSetting</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Initialize logging</comment>
    <decl_stmt><decl><type><name>LogLevel</name></type> <name>logLevelConsole</name> <init>= <expr><name>logLevelOff</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LogLevel</name></type> <name>logLevelStdErr</name> <init>= <expr><name>logLevelOff</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>LogLevel</name></type> <name>logLevelFile</name> <init>= <expr><name>logLevelOff</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>bool</name></type> <name>logTimestamp</name> <init>= <expr><name>true</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>logProcessMax</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptLogLevelConsole</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logLevelConsole</name> <operator>=</operator> <call><name>logLevelEnum</name><argument_list>(<argument><expr><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptLogLevelConsole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptLogLevelStderr</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logLevelStdErr</name> <operator>=</operator> <call><name>logLevelEnum</name><argument_list>(<argument><expr><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptLogLevelStderr</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptLogLevelFile</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logLevelFile</name> <operator>=</operator> <call><name>logLevelEnum</name><argument_list>(<argument><expr><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptLogLevelFile</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptLogTimestamp</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logTimestamp</name> <operator>=</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptLogTimestamp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptProcessMax</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><name>logProcessMax</name> <operator>=</operator> <call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptProcessMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>logInit</name><argument_list>(
        <argument><expr><name>logLevelConsole</name></expr></argument>, <argument><expr><name>logLevelStdErr</name></expr></argument>, <argument><expr><name>logLevelFile</name></expr></argument>, <argument><expr><name>logTimestamp</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>logProcessMax</name></expr></argument>,
        <argument><expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptDryRun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptDryRun</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cfgLoadUpdateOption</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_VOID</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Make sure the repo option is set for the stanza-delete command when more than one repo is configured or the first configured</comment>
    <comment type="line">// repo is not key 1.</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgCommandHelp</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptRepo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgCommand</name><argument_list>()</argument_list></call> <operator>==</operator> <name>cfgCmdStanzaDelete</name> <operator>&amp;&amp;</operator>
        <operator>!</operator><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptRepo</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>(</operator><call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal> <operator>||</operator> <call><name>cfgOptionGroupIdxToKey</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">1</literal><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
            <argument><expr><name>OptionRequiredError</name></expr></argument>,
            <argument><expr><literal type="string">"%s command requires option: "</literal> <name>CFGOPT_REPO</name> <literal type="string">"\n"</literal>
            <literal type="string">"HINT: this command requires a specific repository to operate on"</literal></expr></argument>,
            <argument><expr><call><name>cfgCommandName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// If there is more than one repo configured</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">1</literal></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optionIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <comment type="line">// If the repo is local and either posix or cifs</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                <operator>(</operator><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STORAGE_POSIX_TYPE</name> <operator>||</operator>
                 <call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>STORAGE_CIFS_TYPE</name><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Ensure a local repo does not have the same path as another local repo of the same type</comment>
                <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoIdx</name><operator>++</operator></expr></incr>)</control>
                <block>{<block_content>
                    <if_stmt><if>if <condition>(<expr><name>optionIdx</name> <operator>!=</operator> <name>repoIdx</name> <operator>&amp;&amp;</operator> <operator>!</operator><operator>(</operator><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call><operator>)</operator> <operator>&amp;&amp;</operator>
                        <call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
                        <call><name>strEq</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                            <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
                            <argument><expr><literal type="string">"local %s and %s paths are both '%s' but must be different"</literal></expr></argument>,
                            <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionGroupName</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionIdxDisplay</name><argument_list>(<argument><expr><name>cfgOptRepoPath</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if></if_stmt>
                </block_content>}</block></for>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Set default for cmd</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptCmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>cfgOptionDefaultSet</name><argument_list>(<argument><expr><name>cfgOptCmd</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>cfgExe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Set default for repo-host-cmd</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptRepoHostCmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>cfgOptionDefaultSet</name><argument_list>(<argument><expr><name>cfgOptRepoHostCmd</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>cfgExe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Set default for pg-host-cmd</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptPgHostCmd</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>cfgOptionDefaultSet</name><argument_list>(<argument><expr><name>cfgOptPgHostCmd</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>cfgExe</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Protocol timeout should be greater than db timeout</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptDbTimeout</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
        <call><name>cfgOptionInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call> <operator>&lt;=</operator> <call><name>cfgOptionInt64</name><argument_list>(<argument><expr><name>cfgOptDbTimeout</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// If protocol-timeout is default then increase it to be greater than db-timeout</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgSourceDefault</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(
                <argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>, <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><call><name>cfgOptionInt64</name><argument_list>(<argument><expr><name>cfgOptDbTimeout</name></expr></argument>)</argument_list></call> <operator>+</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><literal type="number">30</literal> <operator>*</operator> <name>MSEC_PER_SEC</name><operator>)</operator></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <if type="elseif">else if <condition>(<expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptDbTimeout</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgSourceDefault</name></expr>)</condition>
        <block>{<block_content>
            <decl_stmt><decl><type><name>int64_t</name></type> <name>dbTimeout</name> <init>= <expr><call><name>cfgOptionInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call> <operator>-</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><literal type="number">30</literal> <operator>*</operator> <name>MSEC_PER_SEC</name><operator>)</operator></expr></init></decl>;</decl_stmt>

            <comment type="line">// Normally the protocol time will be greater than 45 seconds so db timeout can be at least 15 seconds</comment>
            <if_stmt><if>if <condition>(<expr><name>dbTimeout</name> <operator>&gt;=</operator> <operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><literal type="number">15</literal> <operator>*</operator> <name>MSEC_PER_SEC</name><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptDbTimeout</name></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>, <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><name>dbTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if>
            <comment type="line">// But in some test cases the protocol timeout will be very small so make db timeout half of protocol timeout</comment>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptDbTimeout</name></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>, <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><call><name>cfgOptionInt64</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call> <operator>/</operator> <literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <else>else
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
                <argument><expr><literal type="string">"'%s' is not valid for '"</literal> <name>CFGOPT_PROTOCOL_TIMEOUT</name> <literal type="string">"' option\nHINT '"</literal> <name>CFGOPT_PROTOCOL_TIMEOUT</name> <literal type="string">"' option (%s)"</literal>
                    <literal type="string">" should be greater than '"</literal> <name>CFGOPT_DB_TIMEOUT</name> <literal type="string">"' option (%s)."</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptProtocolTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionDisplay</name><argument_list>(<argument><expr><name>cfgOptDbTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></else></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Make sure that repo and pg host settings are not both set - cannot both be remote</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptPgHost</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptRepoHost</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>bool</name></type> <name>pgHostFound</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>

        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optionIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptPgHost</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><name>pgHostFound</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>
                <break>break;</break>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>

        <comment type="line">// If a pg-host was found, see if a repo-host is configured</comment>
        <if_stmt><if>if <condition>(<expr><name>pgHostFound</name> <operator>==</operator> <name>true</name></expr>)</condition>
        <block>{<block_content>
            <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optionIdx</name><operator>++</operator></expr></incr>)</control>
            <block>{<block_content>
                <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptRepoHost</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>ConfigError</name></expr></argument>, <argument><expr><literal type="string">"pg and repo hosts cannot both be configured as remote"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
            </block_content>}</block></for>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Warn when repo-retention-full is not set on a configured repo</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgCommandHelp</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionFullType</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optionIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                    <argument><expr><literal type="string">"option '%s' is not set for '%s=%s', the repository may run out of space"</literal>
                    <literal type="string">"\nHINT: to retain full backups indefinitely (without warning), set option '%s' to the maximum."</literal></expr></argument>,
                    <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionFullType</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionIdxDisplay</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionFullType</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// If archive retention is valid for the command, then set archive settings</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionArchive</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// For each possible repo, check and adjust the settings as appropriate</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>optionIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>optionIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>optionIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>BackupType</name></type> <name>archiveRetentionType</name> <init>= <expr><operator>(</operator><name>BackupType</name><operator>)</operator><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionArchiveType</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>msgArchiveOff</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(
                <argument><expr><literal type="string">"WAL segments will not be expired: option '%s=%s' but"</literal></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionArchiveType</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>strIdToStr</name><argument_list>(<argument><expr><name>archiveRetentionType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// If the archive retention is not explicitly set then determine what it should be defaulted to</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionArchive</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// If repo-retention-archive-type is default (full), then if repo-retention-full is set, set the</comment>
                <comment type="line">// repo-retention-archive to this value when retention-full-type is 'count', else ignore archiving. If</comment>
                <comment type="line">// retention-full-type is 'time' then the expire command will default the archive retention accordingly.</comment>
                <switch>switch <condition>(<expr><name>archiveRetentionType</name></expr>)</condition>
                <block>{<block_content>
                    <case>case <expr><name>backupTypeFull</name></expr>:</case>
                    <block>{<block_content>
                        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionFullType</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call> <operator>==</operator>
                                <name>CFGOPTVAL_REPO_RETENTION_FULL_TYPE_COUNT</name> <operator>&amp;&amp;</operator>
                            <call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>cfgOptionIdxSet</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionArchive</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>,
                                <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><call><name>cfgOptionIdxInt64</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionFull</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if></if_stmt>

                        <break>break;</break>
                    </block_content>}</block>

                    <case>case <expr><name>backupTypeDiff</name></expr>:</case>
                    <block>{<block_content>
                        <comment type="line">// if repo-retention-diff is set then user must have set it</comment>
                        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionDiff</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>)</condition>
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>cfgOptionIdxSet</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionArchive</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>,
                                <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><call><name>cfgOptionIdxInt64</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionDiff</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></if>
                        <else>else
                        <block>{<block_content>
                            <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                                <argument><expr><literal type="string">"%s neither option '%s' nor option '%s' is set"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>msgArchiveOff</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionArchive</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                                <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionDiff</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        </block_content>}</block></else></if_stmt>

                        <break>break;</break>
                    </block_content>}</block>

                    <case>case <expr><name>backupTypeIncr</name></expr>:</case>
                        <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                            <argument><expr><literal type="string">"%s option '%s' is not set"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>msgArchiveOff</name></expr></argument>)</argument_list></call></expr></argument>,
                            <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionArchive</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <break>break;</break>
                </block_content>}</block></switch>
            </block_content>}</block></if>
            <else>else
            <block>{<block_content>
                <comment type="line">// If repo-retention-archive is set then check repo-retention-archive-type and issue a warning if the</comment>
                <comment type="line">// corresponding setting is UNDEF since UNDEF means backups will not be expired but they should be in the</comment>
                <comment type="line">// practice of setting this value even though expiring the archive itself is OK and will be performed.</comment>
                <if_stmt><if>if <condition>(<expr><name>archiveRetentionType</name> <operator>==</operator> <name>backupTypeDiff</name> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionDiff</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><call><name>LOG_WARN_FMT</name><argument_list>(
                        <argument><expr><literal type="string">"option '%s' is not set for '%s="</literal> <name>CFGOPTVAL_TYPE_DIFF_Z</name> <literal type="string">"'\n"</literal>
                        <literal type="string">"HINT: to retain differential backups indefinitely (without warning), set option '%s' to the maximum."</literal></expr></argument>,
                        <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionDiff</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionArchiveType</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>,
                        <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoRetentionDiff</name></expr></argument>, <argument><expr><name>optionIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if></if_stmt>
            </block_content>}</block></else></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// For each possible repo, error if an S3 bucket name contains dots</comment>
    <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoIdx</name><operator>++</operator></expr></incr>)</control>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptRepoS3Bucket</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionIdxBool</name><argument_list>(<argument><expr><name>cfgOptRepoStorageVerifyTls</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator>
            <call><name>strChr</name><argument_list>(<argument><expr><call><name>cfgOptionIdxStr</name><argument_list>(<argument><expr><name>cfgOptRepoS3Bucket</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="char">'.'</literal></expr></argument>)</argument_list></call> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                <argument><expr><name>OptionInvalidValueError</name></expr></argument>,
                <argument><expr><literal type="string">"'%s' is not valid for option '%s'"</literal>
                    <literal type="string">"\nHINT: RFC-2818 forbids dots in wildcard matches."</literal>
                    <literal type="string">"\nHINT: TLS/SSL verification cannot proceed with this bucket name."</literal>
                    <literal type="string">"\nHINT: remove dots from the bucket name."</literal></expr></argument>,
                <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionIdxDisplay</name><argument_list>(<argument><expr><name>cfgOptRepoS3Bucket</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionIdxName</name><argument_list>(<argument><expr><name>cfgOptRepoS3Bucket</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></for>

    <comment type="line">// Set default upload chunk size if not set</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptRepoStorageUploadChunkSize</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgOptionIdxTest</name><argument_list>(<argument><expr><name>cfgOptRepoStorageUploadChunkSize</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>cfgOptionIdxSet</name><argument_list>(
                    <argument><expr><name>cfgOptRepoStorageUploadChunkSize</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>,
                    <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><operator>(</operator><ternary><condition><expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CFGOPTVAL_REPO_TYPE_S3</name></expr> ?</condition><then> <expr><literal type="number">5</literal></expr> </then><else>: <expr><literal type="number">4</literal></expr></else></ternary><operator>)</operator> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Set pg-host-port/repo-host-port default when pg-host-type/repo-host-type is tls. ??? This should be handled in the parser but</comment>
    <comment type="line">// it requires a default that depends on another option value and that is not currently possible.</comment>
    <cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>HOST_PORT_TLS</name></cpp:macro>                                           <cpp:value>8432</cpp:value></cpp:define>

    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptRepoHostPort</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>repoIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>repoIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpRepo</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>repoIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptRepoHostType</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CFGOPTVAL_REPO_HOST_TYPE_TLS</name> <operator>&amp;&amp;</operator>
                <call><name>cfgOptionIdxSource</name><argument_list>(<argument><expr><name>cfgOptRepoHostPort</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgSourceDefault</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>cfgOptionIdxSet</name><argument_list>(<argument><expr><name>cfgOptRepoHostPort</name></expr></argument>, <argument><expr><name>repoIdx</name></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>, <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><name>HOST_PORT_TLS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptPgHostPort</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>pgIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>pgIdx</name> <operator>&lt;</operator> <call><name>cfgOptionGroupIdxTotal</name><argument_list>(<argument><expr><name>cfgOptGrpPg</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pgIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionIdxStrId</name><argument_list>(<argument><expr><name>cfgOptPgHostType</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>CFGOPTVAL_PG_HOST_TYPE_TLS</name> <operator>&amp;&amp;</operator>
                <call><name>cfgOptionIdxSource</name><argument_list>(<argument><expr><name>cfgOptPgHostPort</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgSourceDefault</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>cfgOptionIdxSet</name><argument_list>(<argument><expr><name>cfgOptPgHostPort</name></expr></argument>, <argument><expr><name>pgIdx</name></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>, <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><name>HOST_PORT_TLS</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Check/update compress-type if compress is valid. There should be no references to the compress option outside this block.</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptCompress</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptCompress</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cfgSourceDefault</name></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptCompressType</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>cfgSourceDefault</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>LOG_WARN</name><argument_list>(
                    <argument><expr><literal type="string">"'"</literal> <name>CFGOPT_COMPRESS</name> <literal type="string">"' and '"</literal> <name>CFGOPT_COMPRESS_TYPE</name> <literal type="string">"' options should not both be set\n"</literal>
                    <literal type="string">"HINT: '"</literal> <name>CFGOPT_COMPRESS_TYPE</name> <literal type="string">"' is preferred and '"</literal> <name>CFGOPT_COMPRESS</name> <literal type="string">"' is deprecated."</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Set compress-type to none. Eventually the compress option will be deprecated and removed so this reduces code churn</comment>
            <comment type="line">// when that happens.</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptCompress</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptCompressType</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgSourceDefault</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptCompressType</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARUINT64</name><argument_list>(<argument><expr><name>CFGOPTVAL_COMPRESS_TYPE_NONE</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Now invalidate compress so it can't be used and won't be passed to child processes</comment>
        <expr_stmt><expr><call><name>cfgOptionInvalidate</name><argument_list>(<argument><expr><name>cfgOptCompress</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptCompress</name></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Check that selected compress type has been compiled into this binary</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptCompressType</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>compressTypePresent</name><argument_list>(<argument><expr><call><name>compressTypeEnum</name><argument_list>(<argument><expr><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptCompressType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Update compress-level default based on the compression type</comment>
    <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptCompressLevel</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionSource</name><argument_list>(<argument><expr><name>cfgOptCompressLevel</name></expr></argument>)</argument_list></call> <operator>==</operator> <name>cfgSourceDefault</name></expr>)</condition>
    <block>{<block_content>
        <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(
            <argument><expr><name>cfgOptCompressLevel</name></expr></argument>, <argument><expr><name>cfgSourceDefault</name></expr></argument>,
            <argument><expr><call><name>VARINT64</name><argument_list>(<argument><expr><call><name>compressLevelDefault</name><argument_list>(<argument><expr><call><name>compressTypeEnum</name><argument_list>(<argument><expr><call><name>cfgOptionStrId</name><argument_list>(<argument><expr><name>cfgOptCompressType</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>cfgLoadLogFileName</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>ConfigCommandRole</name></type> <name>commandRole</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>ENUM</name></expr></argument>, <argument><expr><name>commandRole</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Construct log filename prefix</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strCatFmt</name><argument_list>(
        <argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>,
        <argument><expr><literal type="string">"%s/%s-%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptLogPath</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
        <argument><expr><ternary><condition><expr><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></then><else>: <expr><literal type="string">"all"</literal></expr></else></ternary></expr></argument>, <argument><expr><call><name>cfgCommandName</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// ??? Append async for local/remote archive async commands. It would be good to find a more generic way to do this in case the</comment>
    <comment type="line">// async role is added to more commands.</comment>
    <if_stmt><if>if <condition>(<expr><name>commandRole</name> <operator>==</operator> <name>cfgCmdRoleLocal</name> <operator>||</operator> <name>commandRole</name> <operator>==</operator> <name>cfgCmdRoleRemote</name></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptArchiveAsync</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptArchiveAsync</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"-async"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Add command role if it is not main</comment>
    <if_stmt><if>if <condition>(<expr><name>commandRole</name> <operator>!=</operator> <name>cfgCmdRoleMain</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"-%s"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgParseCommandRoleStr</name><argument_list>(<argument><expr><name>commandRole</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add process id if local or remote role</comment>
    <if_stmt><if>if <condition>(<expr><name>commandRole</name> <operator>==</operator> <name>cfgCmdRoleLocal</name> <operator>||</operator> <name>commandRole</name> <operator>==</operator> <name>cfgCmdRoleRemote</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">"-%03u"</literal></expr></argument>, <argument><expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptProcess</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <comment type="line">// Add extension</comment>
    <expr_stmt><expr><call><name>strCatZ</name><argument_list>(<argument><expr><name>result</name></expr></argument>, <argument><expr><literal type="string">".log"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cfgLoadLogFile</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <if_stmt><if>if <condition>(<expr><call><name>cfgLogFile</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cfgCommandHelp</name><argument_list>()</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Attempt to open log file</comment>
            <if_stmt><if>if <condition>(<expr><operator>!</operator><call><name>logFileSet</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>cfgLoadLogFileName</name><argument_list>(<argument><expr><call><name>cfgCommandRole</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptLogLevelFile</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARUINT64</name><argument_list>(<argument><expr><name>CFGOPTVAL_LOG_LEVEL_CONSOLE_OFF</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>cfgLoad</name><parameter_list>(<parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>argListSize</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name><name>argList</name><index>[]</index></name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>argListSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>CHARPY</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <comment type="line">// Parse config from command line and config file</comment>
        <expr_stmt><expr><call><name>configParse</name><argument_list>(<argument><expr><call><name>storageLocal</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>argListSize</name></expr></argument>, <argument><expr><name>argList</name></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Initialize dry-run mode for storage when valid for the current command</comment>
        <expr_stmt><expr><call><name>storageHelperDryRunInit</name><argument_list>(<argument><expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptDryRun</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptDryRun</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Load the log settings</comment>
        <expr_stmt><expr><call><name>cfgLoadLogSetting</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Neutralize the umask to make the repository file/path modes more consistent</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptNeutralUmask</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptNeutralUmask</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>umask</name><argument_list>(<argument><expr><literal type="number">0000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// If a command is set</comment>
        <if_stmt><if>if <condition>(<expr><call><name>cfgCommand</name><argument_list>()</argument_list></call> <operator>!=</operator> <name>cfgCmdNone</name></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// Initialize TCP settings</comment>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptSckKeepAlive</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>sckInit</name><argument_list>(
                    <argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptSckBlock</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>cfgOptionBool</name><argument_list>(<argument><expr><name>cfgOptSckKeepAlive</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptTcpKeepAliveCount</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>cfgOptionInt</name><argument_list>(<argument><expr><name>cfgOptTcpKeepAliveCount</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptTcpKeepAliveIdle</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>cfgOptionInt</name><argument_list>(<argument><expr><name>cfgOptTcpKeepAliveIdle</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>,
                    <argument><expr><ternary><condition><expr><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptTcpKeepAliveInterval</name></expr></argument>)</argument_list></call></expr> ?</condition><then> <expr><call><name>cfgOptionInt</name><argument_list>(<argument><expr><name>cfgOptTcpKeepAliveInterval</name></expr></argument>)</argument_list></call></expr> </then><else>: <expr><literal type="number">0</literal></expr></else></ternary></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Set IO buffer size</comment>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ioBufferSizeSet</name><argument_list>(<argument><expr><call><name>cfgOptionUInt</name><argument_list>(<argument><expr><name>cfgOptBufferSize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Set IO timeout</comment>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptIoTimeout</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>ioTimeoutMsSet</name><argument_list>(<argument><expr><call><name>cfgOptionUInt64</name><argument_list>(<argument><expr><name>cfgOptIoTimeout</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <comment type="line">// Open the log file if this command logs to a file</comment>
            <expr_stmt><expr><call><name>cfgLoadLogFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Create the exec-id used to identify all locals and remotes spawned by this process. This allows lock contention to be</comment>
            <comment type="line">// easily resolved and makes it easier to associate processes from various logs.</comment>
            <if_stmt><if>if <condition>(<expr><call><name>cfgOptionValid</name><argument_list>(<argument><expr><name>cfgOptExecId</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cfgOptionTest</name><argument_list>(<argument><expr><name>cfgOptExecId</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <comment type="line">// Generate some random bytes</comment>
                <decl_stmt><decl><type><name>uint32_t</name></type> <name>execRandom</name></decl>;</decl_stmt>
                <expr_stmt><expr><call><name>cryptoRandomBytes</name><argument_list>(<argument><expr><operator>(</operator><name>unsigned</name> <name>char</name> <operator>*</operator><operator>)</operator><operator>&amp;</operator><name>execRandom</name></expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>execRandom</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Format a string with the pid and the random bytes to serve as the exec id</comment>
                <expr_stmt><expr><call><name>cfgOptionSet</name><argument_list>(<argument><expr><name>cfgOptExecId</name></expr></argument>, <argument><expr><name>cfgSourceParam</name></expr></argument>, <argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%d-%08x"</literal></expr></argument>, <argument><expr><call><name>getpid</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>execRandom</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Begin the command</comment>
            <expr_stmt><expr><call><name>cmdBegin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Acquire a lock if this command requires a lock</comment>
            <if_stmt><if>if <condition>(<expr><call><name>cfgLockRequired</name><argument_list>()</argument_list></call> <operator>&amp;&amp;</operator> <operator>!</operator><call><name>cfgCommandHelp</name><argument_list>()</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>lockAcquire</name><argument_list>(
                    <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptLockPath</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptStanza</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgOptionStr</name><argument_list>(<argument><expr><name>cfgOptExecId</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>cfgLockType</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>true</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <comment type="line">// Update options that have complex rules</comment>
            <expr_stmt><expr><call><name>cfgLoadUpdateOption</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
