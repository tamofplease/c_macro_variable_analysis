<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/config/common.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Configuration Common
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/regExp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/time.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config/common.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<comment type="line">// Helper to get the multiplier based on the qualifier</comment>
<function><type><specifier>static</specifier> <name>int64_t</name></type>
<name>cfgParseSizeQualifier</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>char</name></type> <name>qualifier</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>CHAR</name></expr></argument>, <argument><expr><name>qualifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>int64_t</name></type> <name>result</name></decl>;</decl_stmt>

    <switch>switch <condition>(<expr><name>qualifier</name></expr>)</condition>
    <block>{<block_content>
        <case>case <expr><literal type="char">'b'</literal></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'k'</literal></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'m'</literal></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'g'</literal></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal> <operator>*</operator> <literal type="number">1024</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'t'</literal></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1024LL</literal> <operator>*</operator> <literal type="number">1024LL</literal> <operator>*</operator> <literal type="number">1024LL</literal> <operator>*</operator> <literal type="number">1024LL</literal></expr>;</expr_stmt>
            <break>break;</break>

        <case>case <expr><literal type="char">'p'</literal></expr>:</case>
            <expr_stmt><expr><name>result</name> <operator>=</operator> <literal type="number">1024LL</literal> <operator>*</operator> <literal type="number">1024LL</literal> <operator>*</operator> <literal type="number">1024LL</literal> <operator>*</operator> <literal type="number">1024LL</literal> <operator>*</operator> <literal type="number">1024LL</literal></expr>;</expr_stmt>
            <break>break;</break>

        <default>default:</default>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><literal type="string">"'%c' is not a valid size qualifier"</literal></expr></argument>, <argument><expr><name>qualifier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></switch>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INT64</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>int64_t</name></type>
<name>cfgParseSize</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Lowercase the value</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>valueLower</name> <init>= <expr><call><name>strLower</name><argument_list>(<argument><expr><call><name>strDup</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <comment type="line">// Match the value against possible values</comment>
    <if_stmt><if>if <condition>(<expr><call><name>regExpMatchOne</name><argument_list>(<argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><literal type="string">"^[0-9]+(kib|kb|k|mib|mb|m|gib|gb|g|tib|tb|t|pib|pb|p|b)*$"</literal></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>valueLower</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Get the character array and size</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier></type><name>strArray</name> <init>= <expr><call><name>strZ</name><argument_list>(<argument><expr><name>valueLower</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>size_t</name></type> <name>size</name> <init>= <expr><call><name>strSize</name><argument_list>(<argument><expr><name>valueLower</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>chrPos</name> <init>= <expr><operator>-</operator><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// If there is a 'b' on the end, then see if the previous character is a number</comment>
        <if_stmt><if>if <condition>(<expr><name><name>strArray</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'b'</literal></expr>)</condition>
        <block>{<block_content>
            <comment type="line">// If the previous character is a number, then the letter to look at is 'b' which is the last position else it is in the</comment>
            <comment type="line">// next to last position (e.g. kb - so the 'k' is the position of interest). Only need to test for &lt;= 9 since the regex</comment>
            <comment type="line">// enforces the format. Also allow an 'i' before the 'b'.</comment>
            <if_stmt><if>if <condition>(<expr><name><name>strArray</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>&lt;=</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>chrPos</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><name><name>strArray</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">2</literal></expr>]</index></name> <operator>==</operator> <literal type="char">'i'</literal></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name>chrPos</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">3</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if>
            <else>else<block type="pseudo"><block_content>
                <expr_stmt><expr><name>chrPos</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">2</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></else></if_stmt>
        </block_content>}</block></if>
        <comment type="line">// Else if there is no 'b' at the end but the last position is not a number then it must be one of the letters, e.g. 'k'</comment>
        <if type="elseif">else if <condition>(<expr><name><name>strArray</name><index>[<expr><name>size</name> <operator>-</operator> <literal type="number">1</literal></expr>]</index></name> <operator>&gt;</operator> <literal type="char">'9'</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>chrPos</name> <operator>=</operator> <operator>(</operator><name>int</name><operator>)</operator><operator>(</operator><name>size</name> <operator>-</operator> <literal type="number">1</literal><operator>)</operator></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>int64_t</name></type> <name>multiplier</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// If a letter was found calculate multiplier, else do nothing since assumed value is already in bytes</comment>
        <if_stmt><if>if <condition>(<expr><name>chrPos</name> <operator>!=</operator> <operator>-</operator><literal type="number">1</literal></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><name>multiplier</name> <operator>=</operator> <call><name>cfgParseSizeQualifier</name><argument_list>(<argument><expr><name><name>strArray</name><index>[<expr><name>chrPos</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Remove any letters</comment>
            <expr_stmt><expr><call><name>strTruncIdx</name><argument_list>(<argument><expr><name>valueLower</name></expr></argument>, <argument><expr><name>chrPos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Convert string to bytes</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>int64_t</name></type> <name>valueInt</name> <init>= <expr><call><name>cvtZToInt64</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>valueLower</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if_stmt><if>if <condition>(<expr><name>valueInt</name> <operator>&gt;</operator> <name>INT64_MAX</name> <operator>/</operator> <name>multiplier</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"value '%s' is out of range"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name>valueLower</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INT64</name></expr></argument>, <argument><expr><name>valueInt</name> <operator>*</operator> <name>multiplier</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"value '%s' is not valid"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>int64_t</name></type>
<name>cfgParseTime</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INT64</name></expr></argument>, <argument><expr><operator>(</operator><name>int64_t</name><operator>)</operator><operator>(</operator><call><name>cvtZToDouble</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>*</operator> <name>MSEC_PER_SEC</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
