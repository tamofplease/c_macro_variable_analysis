<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/info/info.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
Info Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/convert.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/crypto/hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/io/filter/filter.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/ini.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object types
***********************************************************************************************************************************/</comment>
<struct>struct <name>Info</name>
<block>{
    <decl_stmt><decl><type><name>InfoPub</name></type> <name>pub</name></decl>;</decl_stmt>                                                    <comment type="line">// Publicly accessible variables</comment>
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context</comment>
}</block>;</struct>

<struct>struct <name>InfoSave</name>
<block>{
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context</comment>
    <decl_stmt><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl>;</decl_stmt>                                                 <comment type="line">// Write object</comment>
    <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>checksum</name></decl>;</decl_stmt>                                             <comment type="line">// hash to generate file checksum</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>sectionLast</name></decl>;</decl_stmt>                                            <comment type="line">// The last section seen</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Macros and buffer constants for checksum generation
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_CHECKSUM_BEGIN</name><parameter_list>(<parameter><type><name>checksum</name></type></parameter>)</parameter_list></cpp:macro>                                                                                              \
    <cpp:value>do                                                                                                                             \
    {                                                                                                                              \
        ioFilterProcessIn(checksum, BRACEL_BUF);                                                                                   \
    }                                                                                                                              \
    while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>BUFFER_STRDEF_STATIC</name><argument_list>(<argument><expr><name>INFO_CHECKSUM_SECTION_END_BUF</name></expr></argument>, <argument><expr><literal type="string">"\":{"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_CHECKSUM_SECTION</name><parameter_list>(<parameter><type><name>checksum</name></type></parameter>, <parameter><type><name>section</name></type></parameter>)</parameter_list></cpp:macro>                                                                                   \
    <cpp:value>do                                                                                                                             \
    {                                                                                                                              \
        ioFilterProcessIn(checksum, QUOTED_BUF);                                                                                   \
        ioFilterProcessIn(checksum, BUFSTR(section));                                                                              \
        ioFilterProcessIn(checksum, INFO_CHECKSUM_SECTION_END_BUF);                                                                \
    }                                                                                                                              \
    while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>BUFFER_STRDEF_STATIC</name><argument_list>(<argument><expr><name>INFO_CHECKSUM_SECTION_NEXT_END_BUF</name></expr></argument>, <argument><expr><literal type="string">"},"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_CHECKSUM_SECTION_NEXT</name><parameter_list>(<parameter><type><name>checksum</name></type></parameter>)</parameter_list></cpp:macro>                                                                                       \
    <cpp:value>do                                                                                                                             \
    {                                                                                                                              \
        ioFilterProcessIn(checksum, INFO_CHECKSUM_SECTION_NEXT_END_BUF);                                                           \
    }                                                                                                                              \
    while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>BUFFER_STRDEF_STATIC</name><argument_list>(<argument><expr><name>INFO_CHECKSUM_KEY_VALUE_END_BUF</name></expr></argument>, <argument><expr><literal type="string">":"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_CHECKSUM_KEY_VALUE</name><parameter_list>(<parameter><type><name>checksum</name></type></parameter>, <parameter><type><name>key</name></type></parameter>, <parameter><type><name>value</name></type></parameter>)</parameter_list></cpp:macro>                                                                              \
    <cpp:value>do                                                                                                                             \
    {                                                                                                                              \
        ioFilterProcessIn(checksum, BUFSTR(jsonFromVar(VARSTR(key))));                                                             \
        ioFilterProcessIn(checksum, INFO_CHECKSUM_KEY_VALUE_END_BUF);                                                              \
        ioFilterProcessIn(checksum, BUFSTR(value));                                                                                \
    }                                                                                                                              \
    while (0)</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_CHECKSUM_KEY_VALUE_NEXT</name><parameter_list>(<parameter><type><name>checksum</name></type></parameter>)</parameter_list></cpp:macro>                                                                                     \
    <cpp:value>do                                                                                                                             \
    {                                                                                                                              \
        ioFilterProcessIn(checksum, COMMA_BUF);                                                                                    \
    }                                                                                                                              \
    while (0)</cpp:value></cpp:define>

<expr_stmt><expr><call><name>BUFFER_STRDEF_STATIC</name><argument_list>(<argument><expr><name>INFO_CHECKSUM_END_BUF</name></expr></argument>, <argument><expr><literal type="string">"}}"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_CHECKSUM_END</name><parameter_list>(<parameter><type><name>checksum</name></type></parameter>)</parameter_list></cpp:macro>                                                                                                \
    <cpp:value>do                                                                                                                             \
    {                                                                                                                              \
        ioFilterProcessIn(checksum, INFO_CHECKSUM_END_BUF);                                                                        \
    }                                                                                                                              \
    while (0)</cpp:value></cpp:define>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Internal constructor
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>Info</name> <modifier>*</modifier></type>
<name>infoNewInternal</name><parameter_list>(<parameter><decl><type><name>void</name></type></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Info</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>Info</name><operator>)</operator>
    <block>{
        <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr>,
    }</block></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>Info</name> <modifier>*</modifier></type>
<name>infoNew</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>cipherPass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>                 <comment type="line">// Use FUNCTION_TEST so cipher is not logged</comment>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Info</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Info</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>infoNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Cipher used to encrypt/decrypt subsequent dependent files. Value may be NULL.</comment>
        <expr_stmt><expr><call><name>infoCipherPassSet</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>backrestVersion</name></name> <operator>=</operator> <call><name>STRDEF</name><argument_list>(<argument><expr><name>PROJECT_VERSION</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Load and validate the info file (or copy)
***********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_SECTION_BACKREST</name></cpp:macro>                                       <cpp:value>"backrest"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_KEY_CHECKSUM</name></cpp:macro>                                           <cpp:value>"backrest-checksum"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_SECTION_CIPHER</name></cpp:macro>                                         <cpp:value>"cipher"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_KEY_CIPHER_PASS</name></cpp:macro>                                        <cpp:value>"cipher-pass"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>InfoLoadData</name>
<block>{
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context to use for storing data in this structure</comment>
    <decl_stmt><decl><type><name>InfoLoadNewCallback</name> <modifier>*</modifier></type><name>callbackFunction</name></decl>;</decl_stmt>                          <comment type="line">// Callback function for child object</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl>;</decl_stmt>                                             <comment type="line">// Callback data for child object</comment>
    <decl_stmt><decl><type><name>Info</name> <modifier>*</modifier></type><name>info</name></decl>;</decl_stmt>                                                     <comment type="line">// Info object</comment>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>sectionLast</name></decl>;</decl_stmt>                                            <comment type="line">// The last section seen during load</comment>
    <decl_stmt><decl><type><name>IoFilter</name> <modifier>*</modifier></type><name>checksumActual</name></decl>;</decl_stmt>                                       <comment type="line">// Checksum calculated from the file</comment>
    <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>checksumExpected</name></decl>;</decl_stmt>                                 <comment type="line">// Checksum found in ini file</comment>
}</block></struct></type> <name>InfoLoadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>infoLoadCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>section</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>InfoLoadData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>loadData</name> <init>= <expr><operator>(</operator><name>InfoLoadData</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Calculate checksum</comment>
    <if_stmt><if>if <condition>(<expr><operator>!</operator><operator>(</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>INFO_SECTION_BACKREST</name></expr></argument>)</argument_list></call> <operator>&amp;&amp;</operator> <call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>INFO_KEY_CHECKSUM</name></expr></argument>)</argument_list></call><operator>)</operator></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>loadData</name><operator>-&gt;</operator><name>sectionLast</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>sectionLast</name></name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><name><name>loadData</name><operator>-&gt;</operator><name>sectionLast</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>INFO_CHECKSUM_SECTION_NEXT</name><argument_list>(<argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>checksumActual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>INFO_CHECKSUM_SECTION</name><argument_list>(<argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>checksumActual</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>loadData-&gt;memContext</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>sectionLast</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <else>else<block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>INFO_CHECKSUM_KEY_VALUE_NEXT</name><argument_list>(<argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>checksumActual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

        <expr_stmt><expr><call><name>INFO_CHECKSUM_KEY_VALUE</name><argument_list>(<argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>checksumActual</name></name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Process backrest section</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>INFO_SECTION_BACKREST</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// Validate format</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>INFO_KEY_FORMAT</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><call><name>varUInt64</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> <operator>!=</operator> <name>REPOSITORY_FORMAT</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><literal type="string">"expected format %d but found %"</literal> <name>PRIu64</name></expr></argument>, <argument><expr><name>REPOSITORY_FORMAT</name></expr></argument>, <argument><expr><call><name>varUInt64</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></if>
        <comment type="line">// Store pgBackRest version</comment>
        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>INFO_KEY_VERSION</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>loadData-&gt;info-&gt;memContext</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>backrestVersion</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if>
        <comment type="line">// Store checksum to be validated later</comment>
        <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>INFO_KEY_CHECKSUM</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>loadData-&gt;memContext</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>checksumExpected</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <comment type="line">// Process cipher section</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>INFO_SECTION_CIPHER</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <comment type="line">// No validation needed for cipher-pass, just store it</comment>
        <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>INFO_KEY_CIPHER_PASS</name></expr></argument>)</argument_list></call></expr>)</condition>
        <block>{<block_content>
            <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>loadData-&gt;info-&gt;memContext</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>info</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>cipherPass</name></name> <operator>=</operator> <call><name>varStr</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>
    </block_content>}</block></if>
    <comment type="line">// Else pass to callback for processing</comment>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>loadData</name><operator>-&gt;</operator><name>callbackFunction</name></name><argument_list>(<argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>callbackData</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>Info</name> <modifier>*</modifier></type>
<name>infoNewLoad</name><parameter_list>(<parameter><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>read</name></decl></parameter>, <parameter><decl><type><name>InfoLoadNewCallback</name> <modifier>*</modifier></type><name>callbackFunction</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_READ</name></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>callbackFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>read</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackFunction</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>Info</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>Info</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>infoNewInternal</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
        <block>{<block_content>
            <comment type="line">// Load and parse the info file</comment>
            <decl_stmt><decl><type><name>InfoLoadData</name></type> <name>data</name> <init>=
            <expr><block>{
                <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>MEM_CONTEXT_TEMP</name><argument_list>()</argument_list></call></expr>,
                <expr><operator>.</operator><name>callbackFunction</name> <operator>=</operator> <name>callbackFunction</name></expr>,
                <expr><operator>.</operator><name>callbackData</name> <operator>=</operator> <name>callbackData</name></expr>,
                <expr><operator>.</operator><name>info</name> <operator>=</operator> <name>this</name></expr>,
                <expr><operator>.</operator><name>checksumActual</name> <operator>=</operator> <call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>)</argument_list></call></expr>,
            }</block></expr></init></decl>;</decl_stmt>

            <expr_stmt><expr><call><name>INFO_CHECKSUM_BEGIN</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>checksumActual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>iniLoad</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>infoLoadCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <macro><name>CATCH</name><argument_list>(<argument>CryptoError</argument>)</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>CryptoError</name></expr></argument>, <argument><expr><literal type="string">"%s\nHINT: is or was the repo encrypted?"</literal></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>INFO_CHECKSUM_END</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>checksumActual</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <comment type="line">// Verify the checksum</comment>
            <decl_stmt><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>checksumActual</name> <init>= <expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>ioFilterResult</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>checksumActual</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>data</name><operator>.</operator><name>checksumExpected</name></name> <operator>==</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(<argument><expr><name>ChecksumError</name></expr></argument>, <argument><expr><literal type="string">"invalid checksum, actual '%s' but no checksum found"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>checksumActual</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if>
            <if type="elseif">else if <condition>(<expr><operator>!</operator><call><name>strEq</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>checksumExpected</name></name></expr></argument>, <argument><expr><name>checksumActual</name></expr></argument>)</argument_list></call></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>THROW_FMT</name><argument_list>(
                    <argument><expr><name>ChecksumError</name></expr></argument>, <argument><expr><literal type="string">"invalid checksum, actual '%s' but expected '%s'"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>checksumActual</name></expr></argument>)</argument_list></call></expr></argument>,
                    <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>checksumExpected</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>bool</name></type>
<name>infoSaveSection</name><parameter_list>(<parameter><decl><type><name>InfoSave</name> <modifier>*</modifier><specifier>const</specifier></type> <name>infoSaveData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>sectionNext</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INFO_SAVE</name></expr></argument>, <argument><expr><name>infoSaveData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>infoSaveData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>section</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(
        <argument><expr><name>BOOL</name></expr></argument>,
        <argument><expr><operator>(</operator><name><name>infoSaveData</name><operator>-&gt;</operator><name>sectionLast</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strCmpZ</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>sectionLast</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call> <operator>&lt;</operator> <literal type="number">0</literal><operator>)</operator> <operator>&amp;&amp;</operator>
            <operator>(</operator><name>sectionNext</name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <call><name>strCmpZ</name><argument_list>(<argument><expr><name>sectionNext</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>infoSaveValue</name><parameter_list>(<parameter><decl><type><name>InfoSave</name> <modifier>*</modifier><specifier>const</specifier></type> <name>infoSaveData</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>char</name> <modifier>*</modifier><specifier>const</specifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>jsonValue</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INFO_SAVE</name></expr></argument>, <argument><expr><name>infoSaveData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRINGZ</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>jsonValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>infoSaveData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>section</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>jsonValue</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strSize</name><argument_list>(<argument><expr><name>jsonValue</name></expr></argument>)</argument_list></call> <operator>!=</operator> <literal type="number">0</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// The JSON value must not be an array because this may be confused with a section in the ini file</comment>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>jsonValue</name></expr></argument>)</argument_list></call><index>[<expr><literal type="number">0</literal></expr>]</index> <operator>!=</operator> <literal type="char">'['</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Save section</comment>
    <if_stmt><if>if <condition>(<expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>sectionLast</name></name> <operator>==</operator> <name>NULL</name> <operator>||</operator> <operator>!</operator><call><name>strEqZ</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>sectionLast</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>sectionLast</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>INFO_CHECKSUM_SECTION_NEXT</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>ioWriteLine</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">""</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>INFO_CHECKSUM_SECTION</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>BRACKETL_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteLine</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>BRACKETR_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>infoSaveData-&gt;memContext</argument>)</argument_list></macro>
        <block>{<block_content>
            <expr_stmt><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>sectionLast</name></name> <operator>=</operator> <call><name>strNewZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <else>else<block type="pseudo"><block_content>
        <expr_stmt><expr><call><name>INFO_CHECKSUM_KEY_VALUE_NEXT</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></else></if_stmt>

    <comment type="line">// Save key/value</comment>
    <expr_stmt><expr><call><name>INFO_CHECKSUM_KEY_VALUE</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>checksum</name></name></expr></argument>, <argument><expr><call><name>STR</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>jsonValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><call><name>BUFSTRZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><name>EQ_BUF</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ioWriteLine</name><argument_list>(<argument><expr><name><name>infoSaveData</name><operator>-&gt;</operator><name>write</name></name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><name>jsonValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>infoSave</name><parameter_list>(<parameter><decl><type><name>Info</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>, <parameter><decl><type><name>InfoSaveCallback</name> <modifier>*</modifier></type><name>callbackFunction</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_WRITE</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>callbackFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>write</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackFunction</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InfoSave</name></type> <name>data</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>MEM_CONTEXT_TEMP</name><argument_list>()</argument_list></call></expr>,
            <expr><operator>.</operator><name>write</name> <operator>=</operator> <name>write</name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>ioWriteOpen</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Begin checksum calculation</comment>
        <expr_stmt><expr><name><name>data</name><operator>.</operator><name>checksum</name></name> <operator>=</operator> <call><name>cryptoHashNew</name><argument_list>(<argument><expr><name>hashTypeSha1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>INFO_CHECKSUM_BEGIN</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add version and format</comment>
        <expr_stmt><expr><call><name>callbackFunction</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>INFO_SECTION_BACKREST</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>INFO_SECTION_BACKREST</name></expr></argument>, <argument><expr><name>INFO_KEY_FORMAT</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARUINT</name><argument_list>(<argument><expr><name>REPOSITORY_FORMAT</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>INFO_SECTION_BACKREST</name></expr></argument>, <argument><expr><name>INFO_KEY_VERSION</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTRDEF</name><argument_list>(<argument><expr><name>PROJECT_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add cipher passphrase if defined</comment>
        <if_stmt><if>if <condition>(<expr><call><name>infoCipherPass</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>!=</operator> <name>NULL</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>callbackFunction</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>INFO_SECTION_CIPHER</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><operator>&amp;</operator><name>data</name></expr></argument>, <argument><expr><name>INFO_SECTION_CIPHER</name></expr></argument>, <argument><expr><name>INFO_KEY_CIPHER_PASS</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>infoCipherPass</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <comment type="line">// Flush out any additional sections</comment>
        <expr_stmt><expr><call><name>callbackFunction</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Add checksum (this must be set after all other values or it will not be valid)</comment>
        <expr_stmt><expr><call><name>INFO_CHECKSUM_END</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>checksum</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>ioWrite</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>write</name></name></expr></argument>, <argument><expr><call><name>BUFSTRDEF</name><argument_list>(<argument><expr><literal type="string">"\n["</literal> <name>INFO_SECTION_BACKREST</name> <literal type="string">"]\n"</literal> <name>INFO_KEY_CHECKSUM</name> <literal type="string">"="</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>ioWriteLine</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>write</name></name></expr></argument>, <argument><expr><call><name>BUFSTR</name><argument_list>(<argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>bufHex</name><argument_list>(<argument><expr><call><name>pckReadBinP</name><argument_list>(<argument><expr><call><name>pckReadNew</name><argument_list>(<argument><expr><call><name>ioFilterResult</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>checksum</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Close the file</comment>
        <expr_stmt><expr><call><name>ioWriteClose</name><argument_list>(<argument><expr><name><name>data</name><operator>.</operator><name>write</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Getters/Setters
***********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>infoCipherPassSet</name><parameter_list>(<parameter><decl><type><name>Info</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>cipherPass</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INFO</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_BEGIN</name><argument_list>(<argument>this-&gt;memContext</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>cipherPass</name></name> <operator>=</operator> <call><name>strDup</name><argument_list>(<argument><expr><name>cipherPass</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>infoLoad</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>error</name></decl></parameter>, <parameter><decl><type><name>InfoLoadCallback</name> <modifier>*</modifier></type><name>callbackFunction</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>error</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>callbackFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>error</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackFunction</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>callbackData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>try</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>done</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>                                 <comment type="line">// Are all files tried? Must be preserved even on error.</comment>
        <decl_stmt><decl><type><specifier>volatile</specifier> <name>bool</name></type> <name>loaded</name> <init>= <expr><name>false</name></expr></init></decl>;</decl_stmt>                               <comment type="line">// Was a file loaded? Must be preserved even on error.</comment>
        <decl_stmt><decl><type><specifier>const</specifier> <name>ErrorType</name> <modifier>*</modifier></type><name>loadErrorType</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name> <modifier>*</modifier></type><name>loadErrorMessage</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

        <do>do
        <block>{<block_content>
            <comment type="line">// Attempt to load the file</comment>
            <macro><name>TRY_BEGIN</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <expr_stmt><expr><name>loaded</name> <operator>=</operator> <call><name>callbackFunction</name><argument_list>(<argument><expr><name>callbackData</name></expr></argument>, <argument><expr><name>try</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>done</name> <operator>=</operator> <name>true</name></expr>;</expr_stmt>

                <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>AssertError</name></expr></argument>, <argument><expr><name>loaded</name> <operator>||</operator> <name>try</name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"file load must be attempted"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block>
            <macro><name>CATCH_ANY</name><argument_list>()</argument_list></macro>
            <block>{<block_content>
                <comment type="line">// Set error type if none has been set</comment>
                <if_stmt><if>if <condition>(<expr><name>loadErrorType</name> <operator>==</operator> <name>NULL</name></expr>)</condition>
                <block>{<block_content>
                    <expr_stmt><expr><name>loadErrorType</name> <operator>=</operator> <call><name>errorType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name>loadErrorMessage</name> <operator>=</operator> <call><name>strCatFmt</name><argument_list>(<argument><expr><call><name>strNew</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><literal type="string">"%s:"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>error</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                </block_content>}</block></if>
                <comment type="line">// Else if the error type is different</comment>
                <if type="elseif">else if <condition>(<expr><name>loadErrorType</name> <operator>!=</operator> <call><name>errorType</name><argument_list>()</argument_list></call></expr>)</condition>
                <block>{<block_content>
                    <comment type="line">// Set type that is not file missing (which is likely the most common error)</comment>
                    <if_stmt><if>if <condition>(<expr><name>loadErrorType</name> <operator>==</operator> <operator>&amp;</operator><name>FileMissingError</name></expr>)</condition>
                    <block>{<block_content>
                        <expr_stmt><expr><name>loadErrorType</name> <operator>=</operator> <call><name>errorType</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    </block_content>}</block></if>
                    <comment type="line">// Else set a generic error</comment>
                    <if type="elseif">else if <condition>(<expr><call><name>errorType</name><argument_list>()</argument_list></call> <operator>!=</operator> <operator>&amp;</operator><name>FileMissingError</name></expr>)</condition><block type="pseudo"><block_content>
                        <expr_stmt><expr><name>loadErrorType</name> <operator>=</operator> <operator>&amp;</operator><name>FileOpenError</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
                </block_content>}</block></if></if_stmt>

                <comment type="line">// Append new error</comment>
                <expr_stmt><expr><call><name>strCatFmt</name><argument_list>(<argument><expr><name>loadErrorMessage</name></expr></argument>, <argument><expr><literal type="string">"\n%s: %s"</literal></expr></argument>, <argument><expr><call><name>errorTypeName</name><argument_list>(<argument><expr><call><name>errorType</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>errorMessage</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="line">// Try again</comment>
                <expr_stmt><expr><name>try</name><operator>++</operator></expr>;</expr_stmt>
            </block_content>}</block>
            <expr_stmt><expr><call><name>TRY_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block>
        while <condition>(<expr><operator>!</operator><name>done</name></expr>)</condition>;</do>

        <comment type="line">// Error when no file was loaded</comment>
        <if_stmt><if>if <condition>(<expr><operator>!</operator><name>loaded</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name>THROWP</name><argument_list>(<argument><expr><name>loadErrorType</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>loadErrorMessage</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>
</unit>
