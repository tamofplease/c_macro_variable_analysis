<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C" filename="/cloned_projects/pgbackrest/src/info/infoPg.c"><comment type="block" format="doxygen">/***********************************************************************************************************************************
PostgreSQL Info Handler
***********************************************************************************************************************************/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"build.auto.h"</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;limits.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdarg.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/debug.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/ini.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/json.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/list.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/type/object.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/info.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"info/infoPg.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/interface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"postgres/version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"storage/helper.h"</cpp:file></cpp:include>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Object type
***********************************************************************************************************************************/</comment>
<struct>struct <name>InfoPg</name>
<block>{
    <decl_stmt><decl><type><name>InfoPgPub</name></type> <name>pub</name></decl>;</decl_stmt>                                                  <comment type="line">// Publicly accessible variables</comment>
    <decl_stmt><decl><type><name>MemContext</name> <modifier>*</modifier></type><name>memContext</name></decl>;</decl_stmt>                                         <comment type="line">// Mem context</comment>
    <decl_stmt><decl><type><name>InfoPgType</name></type> <name>type</name></decl>;</decl_stmt>                                                <comment type="line">// Type of info file being loaded</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>historyCurrent</name></decl>;</decl_stmt>                                    <comment type="line">// Index of the current history item</comment>
}</block>;</struct>

<comment type="block" format="doxygen">/***********************************************************************************************************************************
Internal constructor
***********************************************************************************************************************************/</comment>
<function><type><specifier>static</specifier> <name>InfoPg</name> <modifier>*</modifier></type>
<name>infoPgNewInternal</name><parameter_list>(<parameter><decl><type><name>InfoPgType</name></type> <name>type</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>InfoPg</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><call><name>OBJ_NEW_ALLOC</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><operator>*</operator><name>this</name> <operator>=</operator> <operator>(</operator><name>InfoPg</name><operator>)</operator>
    <block>{
        <expr><operator>.</operator><name>pub</name> <operator>=</operator>
        <block>{
            <expr><operator>.</operator><name>history</name> <operator>=</operator> <call><name>lstNewP</name><argument_list>(<argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>InfoPgData</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>,
        }</block></expr>,
        <expr><operator>.</operator><name>memContext</name> <operator>=</operator> <call><name>memContextCurrent</name><argument_list>()</argument_list></call></expr>,
        <expr><operator>.</operator><name>type</name> <operator>=</operator> <name>type</name></expr>,
    }</block></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>InfoPg</name> <modifier>*</modifier></type>
<name>infoPgNew</name><parameter_list>(<parameter><decl><type><name>InfoPgType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier></type><name>cipherPassSub</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>cipherPassSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>InfoPg</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>InfoPg</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>infoPgNewInternal</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>infoNew</name><argument_list>(<argument><expr><name>cipherPassSub</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_SECTION_DB</name></cpp:macro>                                                     <cpp:value>"db"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_SECTION_DB_HISTORY</name></cpp:macro>                                             <cpp:value>"db:history"</cpp:value></cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_KEY_DB_CATALOG_VERSION</name></cpp:macro>                                         <cpp:value>"db-catalog-version"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_KEY_DB_CONTROL_VERSION</name></cpp:macro>                                         <cpp:value>"db-control-version"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_KEY_DB_SYSTEM_ID</name></cpp:macro>                                               <cpp:value>"db-system-id"</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>INFO_KEY_DB_VERSION</name></cpp:macro>                                                 <cpp:value>"db-version"</cpp:value></cpp:define>

<typedef>typedef <type><struct>struct <name>InfoPgLoadData</name>
<block>{
    <decl_stmt><decl><type><name>InfoLoadNewCallback</name> <modifier>*</modifier></type><name>callbackFunction</name></decl>;</decl_stmt>                          <comment type="line">// Callback function for child object</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl>;</decl_stmt>                                             <comment type="line">// Callback data for child object</comment>
    <decl_stmt><decl><type><name>InfoPg</name> <modifier>*</modifier></type><name>infoPg</name></decl>;</decl_stmt>                                                 <comment type="line">// Pg info</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>currentId</name></decl>;</decl_stmt>                                         <comment type="line">// Current database id</comment>
}</block></struct></type> <name>InfoPgLoadData</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>infoPgLoadCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>section</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>key</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>value</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>section</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>key</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>section</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>key</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>value</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>InfoPgLoadData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>loadData</name> <init>= <expr><name>data</name></expr></init></decl>;</decl_stmt>

    <comment type="line">// Process db section</comment>
    <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>INFO_SECTION_DB</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>key</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_ID</name></expr></argument>)</argument_list></call></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>loadData</name><operator>-&gt;</operator><name>currentId</name></name> <operator>=</operator> <call><name>varUIntForce</name><argument_list>(<argument><expr><call><name>jsonToVar</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>
    </block_content>}</block></if>
    <comment type="line">// Process db:history section</comment>
    <if type="elseif">else if <condition>(<expr><call><name>strEqZ</name><argument_list>(<argument><expr><name>section</name></expr></argument>, <argument><expr><name>INFO_SECTION_DB_HISTORY</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InfoPgData</name></type> <name>infoPgData</name> <init>= <expr><block>{<expr><operator>.</operator><name>id</name> <operator>=</operator> <macro><name>cvtZToUInt</name><argument_list>(<argument>strZ(key)</argument>)</argument_list></macro></expr>}</block></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>JsonRead</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonReadNew</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>jsonReadObjectBegin</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Catalog version</comment>
        <if_stmt><if>if <condition>(<expr><name><name>loadData</name><operator>-&gt;</operator><name>infoPg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>infoPgBackup</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name><name>infoPgData</name><operator>.</operator><name>catalogVersion</name></name> <operator>=</operator> <call><name>jsonReadUInt</name><argument_list>(<argument><expr><call><name>jsonReadKeyRequireZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_CATALOG_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// System id</comment>
        <expr_stmt><expr><name><name>infoPgData</name><operator>.</operator><name>systemId</name></name> <operator>=</operator> <call><name>jsonReadUInt64</name><argument_list>(
                <argument><expr><call><name>jsonReadKeyRequireZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><ternary><condition><expr><name><name>loadData</name><operator>-&gt;</operator><name>infoPg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>infoPgArchive</name></expr> ?</condition><then> <expr><name>INFO_KEY_DB_ID</name></expr> </then><else>: <expr><name>INFO_KEY_DB_SYSTEM_ID</name></expr></else></ternary></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// PostgreSQL version</comment>
        <expr_stmt><expr><name><name>infoPgData</name><operator>.</operator><name>version</name></name> <operator>=</operator> <call><name>pgVersionFromStr</name><argument_list>(<argument><expr><call><name>jsonReadStr</name><argument_list>(<argument><expr><call><name>jsonReadKeyRequireZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_VERSION</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Insert at beginning of list so the history is reverse ordered</comment>
        <expr_stmt><expr><call><name>lstInsert</name><argument_list>(<argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>infoPg</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>history</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoPgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if>
    <comment type="line">// Callback if set</comment>
    <if type="elseif">else if <condition>(<expr><name><name>loadData</name><operator>-&gt;</operator><name>callbackFunction</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>loadData</name><operator>-&gt;</operator><name>callbackFunction</name></name><argument_list>(<argument><expr><name><name>loadData</name><operator>-&gt;</operator><name>callbackData</name></name></expr></argument>, <argument><expr><name>section</name></expr></argument>, <argument><expr><name>key</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>InfoPg</name> <modifier>*</modifier></type>
<name>infoPgNewLoad</name><parameter_list>(<parameter><decl><type><name>IoRead</name> <modifier>*</modifier></type><name>read</name></decl></parameter>, <parameter><decl><type><name>InfoPgType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><name>InfoLoadNewCallback</name> <modifier>*</modifier></type><name>callbackFunction</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_READ</name></expr></argument>, <argument><expr><name>read</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>callbackFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>read</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>type</name> <operator>==</operator> <name>infoPgBackup</name> <operator>||</operator> <name>type</name> <operator>==</operator> <name>infoPgArchive</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>callbackFunction</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>callbackData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>callbackFunction</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>callbackData</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>InfoPg</name> <modifier>*</modifier></type><name>this</name> <init>= <expr><name>NULL</name></expr></init></decl>;</decl_stmt>

    <macro><name>OBJ_NEW_BEGIN</name><argument_list>(<argument>InfoPg</argument>, <argument>.childQty = MEM_CONTEXT_QTY_MAX</argument>)</argument_list></macro>
    <block>{<block_content>
        <expr_stmt><expr><name>this</name> <operator>=</operator> <call><name>infoPgNewInternal</name><argument_list>(<argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Set historyCurrent to UINT_MAX so we can detect if it was loaded correctly</comment>
        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>historyCurrent</name></name> <operator>=</operator> <name>UINT_MAX</name></expr>;</expr_stmt>

        <comment type="line">// Load</comment>
        <decl_stmt><decl><type><name>InfoPgLoadData</name></type> <name>loadData</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>callbackFunction</name> <operator>=</operator> <name>callbackFunction</name></expr>,
            <expr><operator>.</operator><name>callbackData</name> <operator>=</operator> <name>callbackData</name></expr>,
            <expr><operator>.</operator><name>infoPg</name> <operator>=</operator> <name>this</name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>info</name></name> <operator>=</operator> <call><name>infoNewLoad</name><argument_list>(<argument><expr><name>read</name></expr></argument>, <argument><expr><name>infoPgLoadCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>loadData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><operator>!</operator><call><name>lstEmpty</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>history</name></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><literal type="string">"history is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name><name>loadData</name><operator>.</operator><name>currentId</name></name> <operator>&gt;</operator> <literal type="number">0</literal></expr></argument>, <argument><expr><literal type="string">"current id is missing"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="line">// Find the current history item</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>historyIdx</name> <init>= <expr><literal type="number">0</literal></expr></init></decl>;</init> <condition><expr><name>historyIdx</name> <operator>&lt;</operator> <call><name>lstSize</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>history</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>historyIdx</name><operator>++</operator></expr></incr>)</control>
        <block>{<block_content>
            <if_stmt><if>if <condition>(<expr><operator>(</operator><operator>(</operator><name>InfoPgData</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>history</name></name></expr></argument>, <argument><expr><name>historyIdx</name></expr></argument>)</argument_list></call><operator>)</operator><operator>-&gt;</operator><name>id</name> <operator>==</operator> <name><name>loadData</name><operator>.</operator><name>currentId</name></name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>historyCurrent</name></name> <operator>=</operator> <name>historyIdx</name></expr>;</expr_stmt></block_content></block></if></if_stmt>
        </block_content>}</block></for>

        <expr_stmt><expr><call><name>CHECK</name><argument_list>(<argument><expr><name>FormatError</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>historyCurrent</name></name> <operator>!=</operator> <name>UINT_MAX</name></expr></argument>, <argument><expr><literal type="string">"unable to find current id in history"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>OBJ_NEW_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>void</name></type>
<name>infoPgAdd</name><parameter_list>(<parameter><decl><type><name>InfoPg</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>InfoPgData</name> <modifier>*</modifier></type><name>infoPgData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>INFO_PG_DATA</name></expr></argument>, <argument><expr><name>infoPgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>infoPgData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>lstInsert</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>history</name></name></expr></argument>, <argument><expr><literal type="number">0</literal></expr></argument>, <argument><expr><name>infoPgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>this</name><operator>-&gt;</operator><name>historyCurrent</name></name> <operator>=</operator> <literal type="number">0</literal></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>InfoPg</name> <modifier>*</modifier></type>
<name>infoPgSet</name><parameter_list>(
    <parameter><decl><type><name>InfoPg</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>InfoPgType</name></type> <name>type</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pgVersion</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>uint64_t</name></type> <name>pgSystemId</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pgCatalogVersion</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>STRING_ID</name></expr></argument>, <argument><expr><name>type</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT64</name></expr></argument>, <argument><expr><name>pgSystemId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgCatalogVersion</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>pgDataId</name> <init>= <expr><literal type="number">1</literal></expr></init></decl>;</decl_stmt>

        <comment type="line">// If there is some history, then get the historyId of the most current and increment it</comment>
        <if_stmt><if>if <condition>(<expr><call><name>infoPgDataTotal</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>&gt;</operator> <literal type="number">0</literal></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><name>pgDataId</name> <operator>=</operator> <call><name>infoPgCurrentDataId</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call> <operator>+</operator> <literal type="number">1</literal></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Set db values that are common to all info files</comment>
        <decl_stmt><decl><type><name>InfoPgData</name></type> <name>infoPgData</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>id</name> <operator>=</operator> <name>pgDataId</name></expr>,
            <expr><operator>.</operator><name>version</name> <operator>=</operator> <name>pgVersion</name></expr>,

            <comment type="line">// This is different in archive.info due to a typo that can't be fixed without a format version bump</comment>
            <expr><operator>.</operator><name>systemId</name> <operator>=</operator> <name>pgSystemId</name></expr>,

            <comment type="line">// Catalog version is only required for backup info to preserve the repo format</comment>
            <expr><operator>.</operator><name>catalogVersion</name> <operator>=</operator> <name><name>this</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>infoPgBackup</name> <operator>?</operator> <name>pgCatalogVersion</name> <operator>:</operator> <literal type="number">0</literal></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <comment type="line">// Add the pg data to the history list</comment>
        <expr_stmt><expr><call><name>infoPgAdd</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>infoPgData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<typedef>typedef <type><struct>struct <name>InfoPgSaveData</name>
<block>{
    <decl_stmt><decl><type><name>InfoSaveCallback</name> <modifier>*</modifier></type><name>callbackFunction</name></decl>;</decl_stmt>                             <comment type="line">// Callback function for child object</comment>
    <decl_stmt><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl>;</decl_stmt>                                             <comment type="line">// Callback data for child object</comment>
    <decl_stmt><decl><type><name>InfoPgType</name></type> <name>type</name></decl>;</decl_stmt>                                                <comment type="line">// Type of info file being loaded</comment>
    <decl_stmt><decl><type><name>InfoPg</name> <modifier>*</modifier></type><name>infoPg</name></decl>;</decl_stmt>                                                 <comment type="line">// InfoPg object to be saved</comment>
}</block></struct></type> <name>InfoPgSaveData</name>;</typedef>

<function><type><specifier>static</specifier> <name>void</name></type>
<name>infoPgSaveCallback</name><parameter_list>(<parameter><decl><type><name>void</name> <modifier>*</modifier><specifier>const</specifier></type> <name>data</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>sectionNext</name></decl></parameter>, <parameter><decl><type><name>InfoSave</name> <modifier>*</modifier><specifier>const</specifier></type> <name>infoSaveData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_TEST_BEGIN</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_TEST_PARAM</name><argument_list>(<argument><expr><name>INFO_SAVE</name></expr></argument>, <argument><expr><name>infoSaveData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_TEST_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>data</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>infoSaveData</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>InfoPgSaveData</name> <modifier>*</modifier><specifier>const</specifier></type> <name>saveData</name> <init>= <expr><operator>(</operator><name>InfoPgSaveData</name> <operator>*</operator><operator>)</operator><name>data</name></expr></init></decl>;</decl_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>INFO_SECTION_DB</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>saveData</name><operator>-&gt;</operator><name>callbackFunction</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>saveData</name><operator>-&gt;</operator><name>callbackFunction</name></name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>callbackData</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>INFO_SECTION_DB</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>infoSaveData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <decl_stmt><decl><type><name>InfoPgData</name></type> <name>pgData</name> <init>= <expr><call><name>infoPgDataCurrent</name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>infoPg</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <comment type="line">// These need to be saved because older pgBackRest versions expect them</comment>
        <if_stmt><if>if <condition>(<expr><name><name>saveData</name><operator>-&gt;</operator><name>infoPg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>infoPgBackup</name></expr>)</condition>
        <block>{<block_content>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>INFO_SECTION_DB</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_CATALOG_VERSION</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARUINT</name><argument_list>(<argument><expr><name><name>pgData</name><operator>.</operator><name>catalogVersion</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>INFO_SECTION_DB</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_CONTROL_VERSION</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARUINT</name><argument_list>(<argument><expr><call><name>pgControlVersion</name><argument_list>(<argument><expr><name><name>pgData</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></if></if_stmt>

        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>INFO_SECTION_DB</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_ID</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARUINT</name><argument_list>(<argument><expr><name><name>pgData</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>INFO_SECTION_DB</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_SYSTEM_ID</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARUINT64</name><argument_list>(<argument><expr><name><name>pgData</name><operator>.</operator><name>systemId</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>INFO_SECTION_DB</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_VERSION</name></expr></argument>, <argument><expr><call><name>jsonFromVar</name><argument_list>(<argument><expr><call><name>VARSTR</name><argument_list>(<argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name><name>pgData</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block></if></if_stmt>

    <if_stmt><if>if <condition>(<expr><call><name>infoSaveSection</name><argument_list>(<argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>INFO_SECTION_DB_HISTORY</name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>)</argument_list></call></expr>)</condition>
    <block>{<block_content>
        <if_stmt><if>if <condition>(<expr><name><name>saveData</name><operator>-&gt;</operator><name>callbackFunction</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
            <expr_stmt><expr><call><name><name>saveData</name><operator>-&gt;</operator><name>callbackFunction</name></name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>callbackData</name></name></expr></argument>, <argument><expr><call><name>STRDEF</name><argument_list>(<argument><expr><name>INFO_SECTION_DB_HISTORY</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>infoSaveData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

        <comment type="line">// Set the db history section in reverse so oldest history is first instead of last to be consistent with load</comment>
        <for>for <control>(<init><decl><type><name>unsigned</name> <name>int</name></type> <name>pgDataIdx</name> <init>= <expr><call><name>infoPgDataTotal</name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>infoPg</name></name></expr></argument>)</argument_list></call> <operator>-</operator> <literal type="number">1</literal></expr></init></decl>;</init> <condition><expr><operator>(</operator><name>int</name><operator>)</operator><name>pgDataIdx</name> <operator>&gt;=</operator> <literal type="number">0</literal></expr>;</condition> <incr><expr><name>pgDataIdx</name><operator>--</operator></expr></incr>)</control>
        <block>{<block_content>
            <decl_stmt><decl><type><specifier>const</specifier> <name>InfoPgData</name></type> <name>pgData</name> <init>= <expr><call><name>infoPgData</name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>infoPg</name></name></expr></argument>, <argument><expr><name>pgDataIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>JsonWrite</name> <modifier>*</modifier><specifier>const</specifier></type> <name>json</name> <init>= <expr><call><name>jsonWriteObjectBegin</name><argument_list>(<argument><expr><call><name>jsonWriteNewP</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <comment type="line">// These need to be saved because older pgBackRest versions expect them</comment>
            <if_stmt><if>if <condition>(<expr><name><name>saveData</name><operator>-&gt;</operator><name>infoPg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>infoPgBackup</name></expr>)</condition>
            <block>{<block_content>
                <expr_stmt><expr><call><name>jsonWriteUInt</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_CATALOG_VERSION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pgData</name><operator>.</operator><name>catalogVersion</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>jsonWriteUInt</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_CONTROL_VERSION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pgControlVersion</name><argument_list>(<argument><expr><name><name>pgData</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            </block_content>}</block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>saveData</name><operator>-&gt;</operator><name>infoPg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>infoPgArchive</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>jsonWriteUInt64</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pgData</name><operator>.</operator><name>systemId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <if_stmt><if>if <condition>(<expr><name><name>saveData</name><operator>-&gt;</operator><name>infoPg</name><operator>-&gt;</operator><name>type</name></name> <operator>==</operator> <name>infoPgBackup</name></expr>)</condition><block type="pseudo"><block_content>
                <expr_stmt><expr><call><name>jsonWriteUInt64</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_SYSTEM_ID</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pgData</name><operator>.</operator><name>systemId</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

            <expr_stmt><expr><call><name>jsonWriteStr</name><argument_list>(<argument><expr><call><name>jsonWriteKeyZ</name><argument_list>(<argument><expr><name>json</name></expr></argument>, <argument><expr><name>INFO_KEY_DB_VERSION</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name><name>pgData</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

            <expr_stmt><expr><call><name>infoSaveValue</name><argument_list>(
                <argument><expr><name>infoSaveData</name></expr></argument>, <argument><expr><name>INFO_SECTION_DB_HISTORY</name></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><call><name>varStrForce</name><argument_list>(<argument><expr><call><name>VARUINT</name><argument_list>(<argument><expr><name><name>pgData</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>,
                <argument><expr><call><name>jsonWriteResult</name><argument_list>(<argument><expr><call><name>jsonWriteObjectEnd</name><argument_list>(<argument><expr><name>json</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        </block_content>}</block></for>
    </block_content>}</block></if></if_stmt>

    <comment type="line">// Process the callback even if none of the sections above get executed</comment>
    <if_stmt><if>if <condition>(<expr><name><name>saveData</name><operator>-&gt;</operator><name>callbackFunction</name></name> <operator>!=</operator> <name>NULL</name></expr>)</condition><block type="pseudo"><block_content>
        <expr_stmt><expr><call><name><name>saveData</name><operator>-&gt;</operator><name>callbackFunction</name></name><argument_list>(<argument><expr><name><name>saveData</name><operator>-&gt;</operator><name>callbackData</name></name></expr></argument>, <argument><expr><name>sectionNext</name></expr></argument>, <argument><expr><name>infoSaveData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></block_content></block></if></if_stmt>

    <expr_stmt><expr><call><name>FUNCTION_TEST_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<function><type><name>void</name></type>
<name>infoPgSave</name><parameter_list>(<parameter><decl><type><name>InfoPg</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>IoWrite</name> <modifier>*</modifier></type><name>write</name></decl></parameter>, <parameter><decl><type><name>InfoSaveCallback</name> <modifier>*</modifier></type><name>callbackFunction</name></decl></parameter>, <parameter><decl><type><name>void</name> <modifier>*</modifier></type><name>callbackData</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>IO_WRITE</name></expr></argument>, <argument><expr><name>write</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>FUNCTIONP</name></expr></argument>, <argument><expr><name>callbackFunction</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM_P</name><argument_list>(<argument><expr><name>VOID</name></expr></argument>, <argument><expr><name>callbackData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>write</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><operator>(</operator><name>callbackFunction</name> <operator>==</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>callbackData</name> <operator>==</operator> <name>NULL</name><operator>)</operator> <operator>||</operator> <operator>(</operator><name>callbackFunction</name> <operator>!=</operator> <name>NULL</name> <operator>&amp;&amp;</operator> <name>callbackData</name> <operator>!=</operator> <name>NULL</name><operator>)</operator></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <macro><name>MEM_CONTEXT_TEMP_BEGIN</name><argument_list>()</argument_list></macro>
    <block>{<block_content>
        <decl_stmt><decl><type><name>InfoPgSaveData</name></type> <name>saveData</name> <init>=
        <expr><block>{
            <expr><operator>.</operator><name>callbackFunction</name> <operator>=</operator> <name>callbackFunction</name></expr>,
            <expr><operator>.</operator><name>callbackData</name> <operator>=</operator> <name>callbackData</name></expr>,
            <expr><operator>.</operator><name>infoPg</name> <operator>=</operator> <name>this</name></expr>,
        }</block></expr></init></decl>;</decl_stmt>

        <expr_stmt><expr><call><name>infoSave</name><argument_list>(<argument><expr><call><name>infoPgInfo</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>write</name></expr></argument>, <argument><expr><name>infoPgSaveCallback</name></expr></argument>, <argument><expr><operator>&amp;</operator><name>saveData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    </block_content>}</block>
    <expr_stmt><expr><call><name>MEM_CONTEXT_TEMP_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN_VOID</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>infoPgArchiveId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InfoPg</name> <modifier>*</modifier><specifier>const</specifier></type> <name>this</name></decl></parameter>, <parameter><decl><type><specifier>const</specifier> <name>unsigned</name> <name>int</name></type> <name>pgDataIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgDataIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><specifier>const</specifier> <name>InfoPgData</name></type> <name>pgData</name> <init>= <expr><call><name>infoPgData</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><name>pgDataIdx</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>version</name> <init>= <expr><call><name>pgVersionToStr</name><argument_list>(<argument><expr><name><name>pgData</name><operator>.</operator><name>version</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>String</name> <modifier>*</modifier><specifier>const</specifier></type> <name>result</name> <init>= <expr><call><name>strNewFmt</name><argument_list>(<argument><expr><literal type="string">"%s-%u"</literal></expr></argument>, <argument><expr><call><name>strZ</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name><name>pgData</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>strFree</name><argument_list>(<argument><expr><name>version</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>STRING</name></expr></argument>, <argument><expr><name>result</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>InfoPgData</name></type>
<name>infoPgData</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InfoPg</name> <modifier>*</modifier></type><name>this</name></decl></parameter>, <parameter><decl><type><name>unsigned</name> <name>int</name></type> <name>pgDataIdx</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name>pgDataIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INFO_PG_DATA</name></expr></argument>, <argument><expr><operator>*</operator><operator>(</operator><name>InfoPgData</name> <operator>*</operator><operator>)</operator><call><name>lstGet</name><argument_list>(<argument><expr><name><name>this</name><operator>-&gt;</operator><name>pub</name><operator>.</operator><name>history</name></name></expr></argument>, <argument><expr><name>pgDataIdx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>InfoPgData</name></type>
<name>infoPgDataCurrent</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InfoPg</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>INFO_PG_DATA</name></expr></argument>, <argument><expr><call><name>infoPgData</name><argument_list>(<argument><expr><name>this</name></expr></argument>, <argument><expr><call><name>infoPgDataCurrentId</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>infoPgDataCurrentId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InfoPg</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelDebug</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>historyCurrent</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>unsigned</name> <name>int</name></type>
<name>infoPgCurrentDataId</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InfoPg</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <expr_stmt><expr><call><name>FUNCTION_LOG_BEGIN</name><argument_list>(<argument><expr><name>logLevelTrace</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>FUNCTION_LOG_PARAM</name><argument_list>(<argument><expr><name>INFO_PG</name></expr></argument>, <argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>FUNCTION_LOG_END</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>this</name> <operator>!=</operator> <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <decl_stmt><decl><type><name>InfoPgData</name></type> <name>currentData</name> <init>= <expr><call><name>infoPgDataCurrent</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>FUNCTION_LOG_RETURN</name><argument_list>(<argument><expr><name>UINT</name></expr></argument>, <argument><expr><name><name>currentData</name><operator>.</operator><name>id</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
</block_content>}</block></function>

<comment type="block" format="doxygen">/**********************************************************************************************************************************/</comment>
<function><type><name>String</name> <modifier>*</modifier></type>
<name>infoPgDataToLog</name><parameter_list>(<parameter><decl><type><specifier>const</specifier> <name>InfoPgData</name> <modifier>*</modifier></type><name>this</name></decl></parameter>)</parameter_list>
<block>{<block_content>
    <return>return <expr><call><name>strNewFmt</name><argument_list>(
        <argument><expr><literal type="string">"{id: %u, version: %u, systemId: %"</literal> <name>PRIu64</name> <literal type="string">", catalogVersion: %u}"</literal></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>id</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>version</name></name></expr></argument>, <argument><expr><name><name>this</name><operator>-&gt;</operator><name>systemId</name></name></expr></argument>,
        <argument><expr><name><name>this</name><operator>-&gt;</operator><name>catalogVersion</name></name></expr></argument>)</argument_list></call></expr>;</return>
</block_content>}</block></function>
</unit>
